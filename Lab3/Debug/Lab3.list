
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b60  0800a560  0800a560  0001a560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0c0  0800c0c0  000202c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0c0  0800c0c0  0001c0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0c8  0800c0c8  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c8  0800c0c8  0001c0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0cc  0800c0cc  0001c0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c4  20000000  0800c0d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202c4  2**0
                  CONTENTS
 10 .bss          00001ec0  200002c4  200002c4  000202c4  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  20002184  20002184  000202c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000202f4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000187e0  00000000  00000000  00020337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000430f  00000000  00000000  00038b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015f0  00000000  00000000  0003ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001087  00000000  00000000  0003e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028446  00000000  00000000  0003f49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c73b  00000000  00000000  000678e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e10fa  00000000  00000000  00084020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a98  00000000  00000000  0016511c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  0016abb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200002c4 	.word	0x200002c4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800a548 	.word	0x0800a548

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200002c8 	.word	0x200002c8
 80001e8:	0800a548 	.word	0x0800a548

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b970 	b.w	80004f8 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f001 fbb4 	bl	8001c6c <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f89c 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f904 	bl	8000714 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800050c:	f009 fab2 	bl	8009a74 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init();
 8000510:	f001 f9e2 	bl	80018d8 <BSP_SDRAM_Init>
  BSP_LCD_Init();//init LCD
 8000514:	f000 fd48 	bl	8000fa8 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000518:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800051c:	2001      	movs	r0, #1
 800051e:	f000 fdc5 	bl	80010ac <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we
 8000522:	2001      	movs	r0, #1
 8000524:	f000 fe26 	bl	8001174 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000528:	f000 ffd8 	bl	80014dc <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);//clear the LCD on blACK
 800052c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000530:	f000 fe92 	bl	8001258 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);//set text background color
 8000534:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000538:	f000 fe44 	bl	80011c4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 800053c:	f04f 30ff 	mov.w	r0, #4294967295
 8000540:	f000 fe28 	bl	8001194 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAtLine(1,"Good evening,");
 8000544:	4931      	ldr	r1, [pc, #196]	; (800060c <main+0x110>)
 8000546:	2001      	movs	r0, #1
 8000548:	f000 ffb0 	bl	80014ac <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(2,"it's too dark");
 800054c:	4930      	ldr	r1, [pc, #192]	; (8000610 <main+0x114>)
 800054e:	2002      	movs	r0, #2
 8000550:	f000 ffac 	bl	80014ac <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(3,"here");
 8000554:	492f      	ldr	r1, [pc, #188]	; (8000614 <main+0x118>)
 8000556:	2003      	movs	r0, #3
 8000558:	f000 ffa8 	bl	80014ac <BSP_LCD_DisplayStringAtLine>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if (strcmp(receive_d, hello)==0) {
 800055c:	492e      	ldr	r1, [pc, #184]	; (8000618 <main+0x11c>)
 800055e:	482f      	ldr	r0, [pc, #188]	; (800061c <main+0x120>)
 8000560:	f7ff fe44 	bl	80001ec <strcmp>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d107      	bne.n	800057a <main+0x7e>
		 BSP_LCD_DisplayStringAtLine(4,"Do you want to");
 800056a:	492d      	ldr	r1, [pc, #180]	; (8000620 <main+0x124>)
 800056c:	2004      	movs	r0, #4
 800056e:	f000 ff9d 	bl	80014ac <BSP_LCD_DisplayStringAtLine>
		 BSP_LCD_DisplayStringAtLine(5,"turn on light");
 8000572:	492c      	ldr	r1, [pc, #176]	; (8000624 <main+0x128>)
 8000574:	2005      	movs	r0, #5
 8000576:	f000 ff99 	bl	80014ac <BSP_LCD_DisplayStringAtLine>
	 }
	 if (strcmp(receive_d, on_L3)==0) HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 800057a:	492b      	ldr	r1, [pc, #172]	; (8000628 <main+0x12c>)
 800057c:	4827      	ldr	r0, [pc, #156]	; (800061c <main+0x120>)
 800057e:	f7ff fe35 	bl	80001ec <strcmp>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d105      	bne.n	8000594 <main+0x98>
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800058e:	4827      	ldr	r0, [pc, #156]	; (800062c <main+0x130>)
 8000590:	f002 f87e 	bl	8002690 <HAL_GPIO_WritePin>
	 if (strcmp(receive_d, on_L4)==0) HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000594:	4926      	ldr	r1, [pc, #152]	; (8000630 <main+0x134>)
 8000596:	4821      	ldr	r0, [pc, #132]	; (800061c <main+0x120>)
 8000598:	f7ff fe28 	bl	80001ec <strcmp>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d105      	bne.n	80005ae <main+0xb2>
 80005a2:	2201      	movs	r2, #1
 80005a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a8:	4820      	ldr	r0, [pc, #128]	; (800062c <main+0x130>)
 80005aa:	f002 f871 	bl	8002690 <HAL_GPIO_WritePin>
	 if (strcmp(receive_d, off_L3)==0) HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80005ae:	4921      	ldr	r1, [pc, #132]	; (8000634 <main+0x138>)
 80005b0:	481a      	ldr	r0, [pc, #104]	; (800061c <main+0x120>)
 80005b2:	f7ff fe1b 	bl	80001ec <strcmp>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d105      	bne.n	80005c8 <main+0xcc>
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c2:	481a      	ldr	r0, [pc, #104]	; (800062c <main+0x130>)
 80005c4:	f002 f864 	bl	8002690 <HAL_GPIO_WritePin>
	 if (strcmp(receive_d, off_L4)==0) HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80005c8:	491b      	ldr	r1, [pc, #108]	; (8000638 <main+0x13c>)
 80005ca:	4814      	ldr	r0, [pc, #80]	; (800061c <main+0x120>)
 80005cc:	f7ff fe0e 	bl	80001ec <strcmp>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d105      	bne.n	80005e2 <main+0xe6>
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005dc:	4813      	ldr	r0, [pc, #76]	; (800062c <main+0x130>)
 80005de:	f002 f857 	bl	8002690 <HAL_GPIO_WritePin>
	 if (strcmp(receive_d, G9)==0){
 80005e2:	4916      	ldr	r1, [pc, #88]	; (800063c <main+0x140>)
 80005e4:	480d      	ldr	r0, [pc, #52]	; (800061c <main+0x120>)
 80005e6:	f7ff fe01 	bl	80001ec <strcmp>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1b5      	bne.n	800055c <main+0x60>
		 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f6:	480d      	ldr	r0, [pc, #52]	; (800062c <main+0x130>)
 80005f8:	f002 f84a 	bl	8002690 <HAL_GPIO_WritePin>
	 	 HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000602:	480a      	ldr	r0, [pc, #40]	; (800062c <main+0x130>)
 8000604:	f002 f844 	bl	8002690 <HAL_GPIO_WritePin>
	 if (strcmp(receive_d, hello)==0) {
 8000608:	e7a8      	b.n	800055c <main+0x60>
 800060a:	bf00      	nop
 800060c:	0800a560 	.word	0x0800a560
 8000610:	0800a570 	.word	0x0800a570
 8000614:	0800a580 	.word	0x0800a580
 8000618:	20000000 	.word	0x20000000
 800061c:	200002e0 	.word	0x200002e0
 8000620:	0800a588 	.word	0x0800a588
 8000624:	0800a598 	.word	0x0800a598
 8000628:	20000040 	.word	0x20000040
 800062c:	40021800 	.word	0x40021800
 8000630:	20000080 	.word	0x20000080
 8000634:	200000c0 	.word	0x200000c0
 8000638:	20000100 	.word	0x20000100
 800063c:	20000140 	.word	0x20000140

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f009 ff40 	bl	800a4d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <SystemClock_Config+0xcc>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <SystemClock_Config+0xcc>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b22      	ldr	r3, [pc, #136]	; (8000710 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd0>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b4:	23a8      	movs	r3, #168	; 0xa8
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006bc:	2307      	movs	r3, #7
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 fa79 	bl	8003bbc <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d0:	f000 f872 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2302      	movs	r3, #2
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2105      	movs	r1, #5
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fcda 	bl	80040ac <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006fe:	f000 f85b 	bl	80007b8 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <MX_GPIO_Init+0x9c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a1f      	ldr	r2, [pc, #124]	; (80007b0 <MX_GPIO_Init+0x9c>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_GPIO_Init+0x9c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_GPIO_Init+0x9c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MX_GPIO_Init+0x9c>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_GPIO_Init+0x9c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_GPIO_Init+0x9c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a11      	ldr	r2, [pc, #68]	; (80007b0 <MX_GPIO_Init+0x9c>)
 800076c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_GPIO_Init+0x9c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000784:	480b      	ldr	r0, [pc, #44]	; (80007b4 <MX_GPIO_Init+0xa0>)
 8000786:	f001 ff83 	bl	8002690 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800078a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800078e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_GPIO_Init+0xa0>)
 80007a4:	f001 fdc8 	bl	8002338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40021800 	.word	0x40021800

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_MspInit+0x4c>)
 80007d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d2:	4a0f      	ldr	r2, [pc, #60]	; (8000810 <HAL_MspInit+0x4c>)
 80007d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d8:	6453      	str	r3, [r2, #68]	; 0x44
 80007da:	4b0d      	ldr	r3, [pc, #52]	; (8000810 <HAL_MspInit+0x4c>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_MspInit+0x4c>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_MspInit+0x4c>)
 80007f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f4:	6413      	str	r3, [r2, #64]	; 0x40
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_MspInit+0x4c>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <NMI_Handler+0x4>

0800081a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <MemManage_Handler+0x4>

08000826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <UsageFault_Handler+0x4>

08000832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000860:	f001 fa56 	bl	8001d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <OTG_HS_IRQHandler+0x10>)
 800086e:	f002 f878 	bl	8002962 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20001a58 	.word	0x20001a58

0800087c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <SystemInit+0x20>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <SystemInit+0x20>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80008a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a4:	480d      	ldr	r0, [pc, #52]	; (80008dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008a6:	490e      	ldr	r1, [pc, #56]	; (80008e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008a8:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008bc:	4c0b      	ldr	r4, [pc, #44]	; (80008ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008ca:	f7ff ffd7 	bl	800087c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ce:	f009 fe09 	bl	800a4e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d2:	f7ff fe13 	bl	80004fc <main>
  bx  lr    
 80008d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80008d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 80008e4:	0800c0d0 	.word	0x0800c0d0
  ldr r2, =_sbss
 80008e8:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 80008ec:	20002184 	.word	0x20002184

080008f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC_IRQHandler>

080008f2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80008f6:	f000 fa5d 	bl	8000db4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80008fa:	20ca      	movs	r0, #202	; 0xca
 80008fc:	f000 f95d 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000900:	20c3      	movs	r0, #195	; 0xc3
 8000902:	f000 f967 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000906:	2008      	movs	r0, #8
 8000908:	f000 f964 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800090c:	2050      	movs	r0, #80	; 0x50
 800090e:	f000 f961 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000912:	20cf      	movs	r0, #207	; 0xcf
 8000914:	f000 f951 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000918:	2000      	movs	r0, #0
 800091a:	f000 f95b 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800091e:	20c1      	movs	r0, #193	; 0xc1
 8000920:	f000 f958 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000924:	2030      	movs	r0, #48	; 0x30
 8000926:	f000 f955 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800092a:	20ed      	movs	r0, #237	; 0xed
 800092c:	f000 f945 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000930:	2064      	movs	r0, #100	; 0x64
 8000932:	f000 f94f 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000936:	2003      	movs	r0, #3
 8000938:	f000 f94c 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800093c:	2012      	movs	r0, #18
 800093e:	f000 f949 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000942:	2081      	movs	r0, #129	; 0x81
 8000944:	f000 f946 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000948:	20e8      	movs	r0, #232	; 0xe8
 800094a:	f000 f936 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800094e:	2085      	movs	r0, #133	; 0x85
 8000950:	f000 f940 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000954:	2000      	movs	r0, #0
 8000956:	f000 f93d 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800095a:	2078      	movs	r0, #120	; 0x78
 800095c:	f000 f93a 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000960:	20cb      	movs	r0, #203	; 0xcb
 8000962:	f000 f92a 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000966:	2039      	movs	r0, #57	; 0x39
 8000968:	f000 f934 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800096c:	202c      	movs	r0, #44	; 0x2c
 800096e:	f000 f931 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000972:	2000      	movs	r0, #0
 8000974:	f000 f92e 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000978:	2034      	movs	r0, #52	; 0x34
 800097a:	f000 f92b 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800097e:	2002      	movs	r0, #2
 8000980:	f000 f928 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000984:	20f7      	movs	r0, #247	; 0xf7
 8000986:	f000 f918 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800098a:	2020      	movs	r0, #32
 800098c:	f000 f922 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000990:	20ea      	movs	r0, #234	; 0xea
 8000992:	f000 f912 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000996:	2000      	movs	r0, #0
 8000998:	f000 f91c 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800099c:	2000      	movs	r0, #0
 800099e:	f000 f919 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80009a2:	20b1      	movs	r0, #177	; 0xb1
 80009a4:	f000 f909 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f000 f913 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80009ae:	201b      	movs	r0, #27
 80009b0:	f000 f910 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80009b4:	20b6      	movs	r0, #182	; 0xb6
 80009b6:	f000 f900 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80009ba:	200a      	movs	r0, #10
 80009bc:	f000 f90a 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80009c0:	20a2      	movs	r0, #162	; 0xa2
 80009c2:	f000 f907 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80009c6:	20c0      	movs	r0, #192	; 0xc0
 80009c8:	f000 f8f7 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80009cc:	2010      	movs	r0, #16
 80009ce:	f000 f901 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80009d2:	20c1      	movs	r0, #193	; 0xc1
 80009d4:	f000 f8f1 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80009d8:	2010      	movs	r0, #16
 80009da:	f000 f8fb 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80009de:	20c5      	movs	r0, #197	; 0xc5
 80009e0:	f000 f8eb 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80009e4:	2045      	movs	r0, #69	; 0x45
 80009e6:	f000 f8f5 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80009ea:	2015      	movs	r0, #21
 80009ec:	f000 f8f2 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80009f0:	20c7      	movs	r0, #199	; 0xc7
 80009f2:	f000 f8e2 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80009f6:	2090      	movs	r0, #144	; 0x90
 80009f8:	f000 f8ec 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80009fc:	2036      	movs	r0, #54	; 0x36
 80009fe:	f000 f8dc 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000a02:	20c8      	movs	r0, #200	; 0xc8
 8000a04:	f000 f8e6 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000a08:	20f2      	movs	r0, #242	; 0xf2
 8000a0a:	f000 f8d6 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 f8e0 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000a14:	20b0      	movs	r0, #176	; 0xb0
 8000a16:	f000 f8d0 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000a1a:	20c2      	movs	r0, #194	; 0xc2
 8000a1c:	f000 f8da 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000a20:	20b6      	movs	r0, #182	; 0xb6
 8000a22:	f000 f8ca 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000a26:	200a      	movs	r0, #10
 8000a28:	f000 f8d4 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000a2c:	20a7      	movs	r0, #167	; 0xa7
 8000a2e:	f000 f8d1 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000a32:	2027      	movs	r0, #39	; 0x27
 8000a34:	f000 f8ce 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000a38:	2004      	movs	r0, #4
 8000a3a:	f000 f8cb 	bl	8000bd4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000a3e:	202a      	movs	r0, #42	; 0x2a
 8000a40:	f000 f8bb 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a44:	2000      	movs	r0, #0
 8000a46:	f000 f8c5 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f000 f8c2 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 f8bf 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000a56:	20ef      	movs	r0, #239	; 0xef
 8000a58:	f000 f8bc 	bl	8000bd4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000a5c:	202b      	movs	r0, #43	; 0x2b
 8000a5e:	f000 f8ac 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f8b6 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f000 f8b3 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 f8b0 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000a74:	203f      	movs	r0, #63	; 0x3f
 8000a76:	f000 f8ad 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000a7a:	20f6      	movs	r0, #246	; 0xf6
 8000a7c:	f000 f89d 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f000 f8a7 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 f8a4 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000a8c:	2006      	movs	r0, #6
 8000a8e:	f000 f8a1 	bl	8000bd4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000a92:	202c      	movs	r0, #44	; 0x2c
 8000a94:	f000 f891 	bl	8000bba <ili9341_WriteReg>
  LCD_Delay(200);
 8000a98:	20c8      	movs	r0, #200	; 0xc8
 8000a9a:	f000 fa79 	bl	8000f90 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000a9e:	2026      	movs	r0, #38	; 0x26
 8000aa0:	f000 f88b 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f000 f895 	bl	8000bd4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000aaa:	20e0      	movs	r0, #224	; 0xe0
 8000aac:	f000 f885 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000ab0:	200f      	movs	r0, #15
 8000ab2:	f000 f88f 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000ab6:	2029      	movs	r0, #41	; 0x29
 8000ab8:	f000 f88c 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000abc:	2024      	movs	r0, #36	; 0x24
 8000abe:	f000 f889 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000ac2:	200c      	movs	r0, #12
 8000ac4:	f000 f886 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000ac8:	200e      	movs	r0, #14
 8000aca:	f000 f883 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000ace:	2009      	movs	r0, #9
 8000ad0:	f000 f880 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000ad4:	204e      	movs	r0, #78	; 0x4e
 8000ad6:	f000 f87d 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000ada:	2078      	movs	r0, #120	; 0x78
 8000adc:	f000 f87a 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000ae0:	203c      	movs	r0, #60	; 0x3c
 8000ae2:	f000 f877 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f000 f874 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000aec:	2013      	movs	r0, #19
 8000aee:	f000 f871 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000af2:	2005      	movs	r0, #5
 8000af4:	f000 f86e 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000af8:	2017      	movs	r0, #23
 8000afa:	f000 f86b 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000afe:	2011      	movs	r0, #17
 8000b00:	f000 f868 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f000 f865 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000b0a:	20e1      	movs	r0, #225	; 0xe1
 8000b0c:	f000 f855 	bl	8000bba <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000b10:	2000      	movs	r0, #0
 8000b12:	f000 f85f 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000b16:	2016      	movs	r0, #22
 8000b18:	f000 f85c 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000b1c:	201b      	movs	r0, #27
 8000b1e:	f000 f859 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000b22:	2004      	movs	r0, #4
 8000b24:	f000 f856 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000b28:	2011      	movs	r0, #17
 8000b2a:	f000 f853 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f000 f850 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000b34:	2031      	movs	r0, #49	; 0x31
 8000b36:	f000 f84d 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000b3a:	2033      	movs	r0, #51	; 0x33
 8000b3c:	f000 f84a 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000b40:	2042      	movs	r0, #66	; 0x42
 8000b42:	f000 f847 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000b46:	2005      	movs	r0, #5
 8000b48:	f000 f844 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000b4c:	200c      	movs	r0, #12
 8000b4e:	f000 f841 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000b52:	200a      	movs	r0, #10
 8000b54:	f000 f83e 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000b58:	2028      	movs	r0, #40	; 0x28
 8000b5a:	f000 f83b 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000b5e:	202f      	movs	r0, #47	; 0x2f
 8000b60:	f000 f838 	bl	8000bd4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000b64:	200f      	movs	r0, #15
 8000b66:	f000 f835 	bl	8000bd4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000b6a:	2011      	movs	r0, #17
 8000b6c:	f000 f825 	bl	8000bba <ili9341_WriteReg>
  LCD_Delay(200);
 8000b70:	20c8      	movs	r0, #200	; 0xc8
 8000b72:	f000 fa0d 	bl	8000f90 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000b76:	2029      	movs	r0, #41	; 0x29
 8000b78:	f000 f81f 	bl	8000bba <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000b7c:	202c      	movs	r0, #44	; 0x2c
 8000b7e:	f000 f81c 	bl	8000bba <ili9341_WriteReg>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000b8a:	f000 f913 	bl	8000db4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000b8e:	2103      	movs	r1, #3
 8000b90:	20d3      	movs	r0, #211	; 0xd3
 8000b92:	f000 f82c 	bl	8000bee <ili9341_ReadData>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29b      	uxth	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000ba2:	2029      	movs	r0, #41	; 0x29
 8000ba4:	f000 f809 	bl	8000bba <ili9341_WriteReg>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000bb0:	2028      	movs	r0, #40	; 0x28
 8000bb2:	f000 f802 	bl	8000bba <ili9341_WriteReg>
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f98e 	bl	8000ee8 <LCD_IO_WriteReg>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 f95f 	bl	8000ea4 <LCD_IO_WriteData>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	460a      	mov	r2, r1
 8000bf8:	80fb      	strh	r3, [r7, #6]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000bfe:	797a      	ldrb	r2, [r7, #5]
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f991 	bl	8000f2c <LCD_IO_ReadData>
 8000c0a:	4603      	mov	r3, r0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000c18:	23f0      	movs	r3, #240	; 0xf0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000c28:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000c3c:	4819      	ldr	r0, [pc, #100]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c3e:	f006 fcf9 	bl	8007634 <HAL_SPI_GetState>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d12b      	bne.n	8000ca0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c4a:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <SPIx_Init+0x70>)
 8000c4c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c50:	2218      	movs	r2, #24
 8000c52:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000c5a:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c6e:	2207      	movs	r2, #7
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c84:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c8e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c92:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c96:	f000 f853 	bl	8000d40 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000c9a:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <SPIx_Init+0x6c>)
 8000c9c:	f006 f816 	bl	8006ccc <HAL_SPI_Init>
  } 
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000320 	.word	0x20000320
 8000ca8:	40015000 	.word	0x40015000

08000cac <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <SPIx_Read+0x38>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f107 0108 	add.w	r1, r7, #8
 8000cc6:	4808      	ldr	r0, [pc, #32]	; (8000ce8 <SPIx_Read+0x3c>)
 8000cc8:	f006 fa01 	bl	80070ce <HAL_SPI_Receive>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000cd6:	f000 f827 	bl	8000d28 <SPIx_Error>
  }
  
  return readvalue;
 8000cda:	68bb      	ldr	r3, [r7, #8]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200001bc 	.word	0x200001bc
 8000ce8:	20000320 	.word	0x20000320

08000cec <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <SPIx_Write+0x34>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1db9      	adds	r1, r7, #6
 8000d00:	2201      	movs	r2, #1
 8000d02:	4808      	ldr	r0, [pc, #32]	; (8000d24 <SPIx_Write+0x38>)
 8000d04:	f006 f8a7 	bl	8006e56 <HAL_SPI_Transmit>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000d12:	f000 f809 	bl	8000d28 <SPIx_Error>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200001bc 	.word	0x200001bc
 8000d24:	20000320 	.word	0x20000320

08000d28 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000d2c:	4803      	ldr	r0, [pc, #12]	; (8000d3c <SPIx_Error+0x14>)
 8000d2e:	f006 f856 	bl	8006dde <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8000d32:	f7ff ff81 	bl	8000c38 <SPIx_Init>
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000320 	.word	0x20000320

08000d40 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <SPIx_MspInit+0x6c>)
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	4a16      	ldr	r2, [pc, #88]	; (8000dac <SPIx_MspInit+0x6c>)
 8000d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d56:	6453      	str	r3, [r2, #68]	; 0x44
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <SPIx_MspInit+0x6c>)
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <SPIx_MspInit+0x6c>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <SPIx_MspInit+0x6c>)
 8000d6e:	f043 0320 	orr.w	r3, r3, #32
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <SPIx_MspInit+0x6c>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0320 	and.w	r3, r3, #32
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000d80:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d84:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000d92:	2305      	movs	r3, #5
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4804      	ldr	r0, [pc, #16]	; (8000db0 <SPIx_MspInit+0x70>)
 8000d9e:	f001 facb 	bl	8002338 <HAL_GPIO_Init>
}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40021400 	.word	0x40021400

08000db4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000dba:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <LCD_IO_Init+0xe0>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d164      	bne.n	8000e8c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8000dc2:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <LCD_IO_Init+0xe0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <LCD_IO_Init+0xe4>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	4a31      	ldr	r2, [pc, #196]	; (8000e98 <LCD_IO_Init+0xe4>)
 8000dd2:	f043 0308 	orr.w	r3, r3, #8
 8000dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd8:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <LCD_IO_Init+0xe4>)
 8000dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ddc:	f003 0308 	and.w	r3, r3, #8
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4827      	ldr	r0, [pc, #156]	; (8000e9c <LCD_IO_Init+0xe8>)
 8000dfe:	f001 fa9b 	bl	8002338 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <LCD_IO_Init+0xe4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a23      	ldr	r2, [pc, #140]	; (8000e98 <LCD_IO_Init+0xe4>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <LCD_IO_Init+0xe4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	4819      	ldr	r0, [pc, #100]	; (8000e9c <LCD_IO_Init+0xe8>)
 8000e38:	f001 fa7e 	bl	8002338 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <LCD_IO_Init+0xe4>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <LCD_IO_Init+0xe4>)
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <LCD_IO_Init+0xe4>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <LCD_IO_Init+0xec>)
 8000e70:	f001 fa62 	bl	8002338 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000e74:	2200      	movs	r2, #0
 8000e76:	2104      	movs	r1, #4
 8000e78:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <LCD_IO_Init+0xec>)
 8000e7a:	f001 fc09 	bl	8002690 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2104      	movs	r1, #4
 8000e82:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <LCD_IO_Init+0xec>)
 8000e84:	f001 fc04 	bl	8002690 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000e88:	f7ff fed6 	bl	8000c38 <SPIx_Init>
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000378 	.word	0x20000378
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020c00 	.word	0x40020c00
 8000ea0:	40020800 	.word	0x40020800

08000ea4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb4:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <LCD_IO_WriteData+0x3c>)
 8000eb6:	f001 fbeb 	bl	8002690 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <LCD_IO_WriteData+0x40>)
 8000ec0:	f001 fbe6 	bl	8002690 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff10 	bl	8000cec <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2104      	movs	r1, #4
 8000ed0:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <LCD_IO_WriteData+0x40>)
 8000ed2:	f001 fbdd 	bl	8002690 <HAL_GPIO_WritePin>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef8:	480a      	ldr	r0, [pc, #40]	; (8000f24 <LCD_IO_WriteReg+0x3c>)
 8000efa:	f001 fbc9 	bl	8002690 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000efe:	2200      	movs	r2, #0
 8000f00:	2104      	movs	r1, #4
 8000f02:	4809      	ldr	r0, [pc, #36]	; (8000f28 <LCD_IO_WriteReg+0x40>)
 8000f04:	f001 fbc4 	bl	8002690 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff feed 	bl	8000cec <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000f12:	2201      	movs	r2, #1
 8000f14:	2104      	movs	r1, #4
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <LCD_IO_WriteReg+0x40>)
 8000f18:	f001 fbba 	bl	8002690 <HAL_GPIO_WritePin>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40020c00 	.word	0x40020c00
 8000f28:	40020800 	.word	0x40020800

08000f2c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	460a      	mov	r2, r1
 8000f36:	80fb      	strh	r3, [r7, #6]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8000f40:	2200      	movs	r2, #0
 8000f42:	2104      	movs	r1, #4
 8000f44:	4810      	ldr	r0, [pc, #64]	; (8000f88 <LCD_IO_ReadData+0x5c>)
 8000f46:	f001 fba3 	bl	8002690 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f50:	480e      	ldr	r0, [pc, #56]	; (8000f8c <LCD_IO_ReadData+0x60>)
 8000f52:	f001 fb9d 	bl	8002690 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fec7 	bl	8000cec <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8000f5e:	797b      	ldrb	r3, [r7, #5]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fea3 	bl	8000cac <SPIx_Read>
 8000f66:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6e:	4807      	ldr	r0, [pc, #28]	; (8000f8c <LCD_IO_ReadData+0x60>)
 8000f70:	f001 fb8e 	bl	8002690 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000f74:	2201      	movs	r2, #1
 8000f76:	2104      	movs	r1, #4
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <LCD_IO_ReadData+0x5c>)
 8000f7a:	f001 fb89 	bl	8002690 <HAL_GPIO_WritePin>
  
  return readvalue;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020c00 	.word	0x40020c00

08000f90 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 fed9 	bl	8001d50 <HAL_Delay>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8000fac:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <BSP_LCD_Init+0xbc>)
 8000fae:	4a2e      	ldr	r2, [pc, #184]	; (8001068 <BSP_LCD_Init+0xc0>)
 8000fb0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8000fb2:	4b2c      	ldr	r3, [pc, #176]	; (8001064 <BSP_LCD_Init+0xbc>)
 8000fb4:	2209      	movs	r2, #9
 8000fb6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8000fb8:	4b2a      	ldr	r3, [pc, #168]	; (8001064 <BSP_LCD_Init+0xbc>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8000fbe:	4b29      	ldr	r3, [pc, #164]	; (8001064 <BSP_LCD_Init+0xbc>)
 8000fc0:	221d      	movs	r2, #29
 8000fc2:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <BSP_LCD_Init+0xbc>)
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <BSP_LCD_Init+0xbc>)
 8000fcc:	f240 120d 	movw	r2, #269	; 0x10d
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8000fd2:	4b24      	ldr	r3, [pc, #144]	; (8001064 <BSP_LCD_Init+0xbc>)
 8000fd4:	f240 1243 	movw	r2, #323	; 0x143
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8000fda:	4b22      	ldr	r3, [pc, #136]	; (8001064 <BSP_LCD_Init+0xbc>)
 8000fdc:	f240 1217 	movw	r2, #279	; 0x117
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <BSP_LCD_Init+0xbc>)
 8000fe4:	f240 1247 	movw	r2, #327	; 0x147
 8000fe8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8000fea:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <BSP_LCD_Init+0xbc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <BSP_LCD_Init+0xbc>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <BSP_LCD_Init+0xbc>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001002:	4b1a      	ldr	r3, [pc, #104]	; (800106c <BSP_LCD_Init+0xc4>)
 8001004:	2208      	movs	r2, #8
 8001006:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <BSP_LCD_Init+0xc4>)
 800100a:	22c0      	movs	r2, #192	; 0xc0
 800100c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800100e:	4b17      	ldr	r3, [pc, #92]	; (800106c <BSP_LCD_Init+0xc4>)
 8001010:	2204      	movs	r2, #4
 8001012:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <BSP_LCD_Init+0xc4>)
 8001016:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <BSP_LCD_Init+0xc4>)
 800101e:	f003 fa3d 	bl	800449c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <BSP_LCD_Init+0xbc>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <BSP_LCD_Init+0xbc>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <BSP_LCD_Init+0xbc>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <BSP_LCD_Init+0xbc>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800103a:	f000 fa5f 	bl	80014fc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <BSP_LCD_Init+0xbc>)
 8001040:	f005 fad0 	bl	80065e4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <BSP_LCD_Init+0xc8>)
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <BSP_LCD_Init+0xcc>)
 8001048:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <BSP_LCD_Init+0xc8>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8001052:	f000 fc41 	bl	80018d8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001056:	4808      	ldr	r0, [pc, #32]	; (8001078 <BSP_LCD_Init+0xd0>)
 8001058:	f000 f8ce 	bl	80011f8 <BSP_LCD_SetFont>

  return LCD_OK;
 800105c:	2300      	movs	r3, #0
}  
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000037c 	.word	0x2000037c
 8001068:	40016800 	.word	0x40016800
 800106c:	20000464 	.word	0x20000464
 8001070:	200004b0 	.word	0x200004b0
 8001074:	20000184 	.word	0x20000184
 8001078:	200001c0 	.word	0x200001c0

0800107c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <BSP_LCD_GetXSize+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001086:	4798      	blx	r3
 8001088:	4603      	mov	r3, r0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200004b0 	.word	0x200004b0

08001094 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <BSP_LCD_GetYSize+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	4798      	blx	r3
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200004b0 	.word	0x200004b0

080010ac <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b090      	sub	sp, #64	; 0x40
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80010bc:	f7ff ffde 	bl	800107c <BSP_LCD_GetXSize>
 80010c0:	4603      	mov	r3, r0
 80010c2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80010c8:	f7ff ffe4 	bl	8001094 <BSP_LCD_GetYSize>
 80010cc:	4603      	mov	r3, r0
 80010ce:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80010d8:	23ff      	movs	r3, #255	; 0xff
 80010da:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80010f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010f8:	2307      	movs	r3, #7
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80010fc:	f7ff ffbe 	bl	800107c <BSP_LCD_GetXSize>
 8001100:	4603      	mov	r3, r0
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001104:	f7ff ffc6 	bl	8001094 <BSP_LCD_GetYSize>
 8001108:	4603      	mov	r3, r0
 800110a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800110c:	88fa      	ldrh	r2, [r7, #6]
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	4619      	mov	r1, r3
 8001114:	4814      	ldr	r0, [pc, #80]	; (8001168 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001116:	f005 fb3f 	bl	8006798 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800111a:	88fa      	ldrh	r2, [r7, #6]
 800111c:	4913      	ldr	r1, [pc, #76]	; (800116c <BSP_LCD_LayerDefaultInit+0xc0>)
 800111e:	4613      	mov	r3, r2
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	440b      	add	r3, r1
 8001128:	3304      	adds	r3, #4
 800112a:	f04f 32ff 	mov.w	r2, #4294967295
 800112e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001130:	88fa      	ldrh	r2, [r7, #6]
 8001132:	490e      	ldr	r1, [pc, #56]	; (800116c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	3308      	adds	r3, #8
 8001140:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001142:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001144:	88fa      	ldrh	r2, [r7, #6]
 8001146:	4909      	ldr	r1, [pc, #36]	; (800116c <BSP_LCD_LayerDefaultInit+0xc0>)
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001156:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <BSP_LCD_LayerDefaultInit+0xbc>)
 800115a:	f005 fb5b 	bl	8006814 <HAL_LTDC_EnableDither>
}
 800115e:	bf00      	nop
 8001160:	3740      	adds	r7, #64	; 0x40
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000037c 	.word	0x2000037c
 800116c:	20000498 	.word	0x20000498
 8001170:	200001c0 	.word	0x200001c0

08001174 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <BSP_LCD_SelectLayer+0x1c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000494 	.word	0x20000494

08001194 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <BSP_LCD_SetTextColor+0x28>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4907      	ldr	r1, [pc, #28]	; (80011c0 <BSP_LCD_SetTextColor+0x2c>)
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000494 	.word	0x20000494
 80011c0:	20000498 	.word	0x20000498

080011c4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <BSP_LCD_SetBackColor+0x2c>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4908      	ldr	r1, [pc, #32]	; (80011f4 <BSP_LCD_SetBackColor+0x30>)
 80011d2:	4613      	mov	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	3304      	adds	r3, #4
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	601a      	str	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000494 	.word	0x20000494
 80011f4:	20000498 	.word	0x20000498

080011f8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <BSP_LCD_SetFont+0x2c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4908      	ldr	r1, [pc, #32]	; (8001228 <BSP_LCD_SetFont+0x30>)
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	3308      	adds	r3, #8
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	601a      	str	r2, [r3, #0]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000494 	.word	0x20000494
 8001228:	20000498 	.word	0x20000498

0800122c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <BSP_LCD_GetFont+0x24>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4907      	ldr	r1, [pc, #28]	; (8001254 <BSP_LCD_GetFont+0x28>)
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	3308      	adds	r3, #8
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000494 	.word	0x20000494
 8001254:	20000498 	.word	0x20000498

08001258 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8001258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125a:	b085      	sub	sp, #20
 800125c:	af02      	add	r7, sp, #8
 800125e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <BSP_LCD_Clear+0x48>)
 8001262:	681c      	ldr	r4, [r3, #0]
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <BSP_LCD_Clear+0x48>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <BSP_LCD_Clear+0x4c>)
 800126a:	2134      	movs	r1, #52	; 0x34
 800126c:	fb01 f303 	mul.w	r3, r1, r3
 8001270:	4413      	add	r3, r2
 8001272:	335c      	adds	r3, #92	; 0x5c
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	461e      	mov	r6, r3
 8001278:	f7ff ff00 	bl	800107c <BSP_LCD_GetXSize>
 800127c:	4605      	mov	r5, r0
 800127e:	f7ff ff09 	bl	8001094 <BSP_LCD_GetYSize>
 8001282:	4602      	mov	r2, r0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	9301      	str	r3, [sp, #4]
 8001288:	2300      	movs	r3, #0
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	462a      	mov	r2, r5
 8001290:	4631      	mov	r1, r6
 8001292:	4620      	mov	r0, r4
 8001294:	f000 fae8 	bl	8001868 <FillBuffer>
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a0:	20000494 	.word	0x20000494
 80012a4:	2000037c 	.word	0x2000037c

080012a8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
 80012b2:	460b      	mov	r3, r1
 80012b4:	80bb      	strh	r3, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <BSP_LCD_DisplayChar+0x80>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	491b      	ldr	r1, [pc, #108]	; (800132c <BSP_LCD_DisplayChar+0x84>)
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	440b      	add	r3, r1
 80012ca:	3308      	adds	r3, #8
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6819      	ldr	r1, [r3, #0]
 80012d0:	78fb      	ldrb	r3, [r7, #3]
 80012d2:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <BSP_LCD_DisplayChar+0x80>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4c14      	ldr	r4, [pc, #80]	; (800132c <BSP_LCD_DisplayChar+0x84>)
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4423      	add	r3, r4
 80012e6:	3308      	adds	r3, #8
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80012ec:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <BSP_LCD_DisplayChar+0x80>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4c0d      	ldr	r4, [pc, #52]	; (800132c <BSP_LCD_DisplayChar+0x84>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4423      	add	r3, r4
 8001300:	3308      	adds	r3, #8
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	889b      	ldrh	r3, [r3, #4]
 8001306:	3307      	adds	r3, #7
 8001308:	2b00      	cmp	r3, #0
 800130a:	da00      	bge.n	800130e <BSP_LCD_DisplayChar+0x66>
 800130c:	3307      	adds	r3, #7
 800130e:	10db      	asrs	r3, r3, #3
 8001310:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001314:	18ca      	adds	r2, r1, r3
 8001316:	88b9      	ldrh	r1, [r7, #4]
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f9ea 	bl	80016f4 <DrawChar>
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	20000494 	.word	0x20000494
 800132c:	20000498 	.word	0x20000498

08001330 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001330:	b5b0      	push	{r4, r5, r7, lr}
 8001332:	b088      	sub	sp, #32
 8001334:	af00      	add	r7, sp, #0
 8001336:	60ba      	str	r2, [r7, #8]
 8001338:	461a      	mov	r2, r3
 800133a:	4603      	mov	r3, r0
 800133c:	81fb      	strh	r3, [r7, #14]
 800133e:	460b      	mov	r3, r1
 8001340:	81bb      	strh	r3, [r7, #12]
 8001342:	4613      	mov	r3, r2
 8001344:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8001346:	2301      	movs	r3, #1
 8001348:	83fb      	strh	r3, [r7, #30]
 800134a:	2300      	movs	r3, #0
 800134c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800135a:	e002      	b.n	8001362 <BSP_LCD_DisplayStringAt+0x32>
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	3301      	adds	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	617a      	str	r2, [r7, #20]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f6      	bne.n	800135c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800136e:	f7ff fe85 	bl	800107c <BSP_LCD_GetXSize>
 8001372:	4601      	mov	r1, r0
 8001374:	4b4b      	ldr	r3, [pc, #300]	; (80014a4 <BSP_LCD_DisplayStringAt+0x174>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	484b      	ldr	r0, [pc, #300]	; (80014a8 <BSP_LCD_DisplayStringAt+0x178>)
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4403      	add	r3, r0
 8001384:	3308      	adds	r3, #8
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	889b      	ldrh	r3, [r3, #4]
 800138a:	fbb1 f3f3 	udiv	r3, r1, r3
 800138e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d01c      	beq.n	80013d0 <BSP_LCD_DisplayStringAt+0xa0>
 8001396:	2b03      	cmp	r3, #3
 8001398:	dc33      	bgt.n	8001402 <BSP_LCD_DisplayStringAt+0xd2>
 800139a:	2b01      	cmp	r3, #1
 800139c:	d002      	beq.n	80013a4 <BSP_LCD_DisplayStringAt+0x74>
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d019      	beq.n	80013d6 <BSP_LCD_DisplayStringAt+0xa6>
 80013a2:	e02e      	b.n	8001402 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	1ad1      	subs	r1, r2, r3
 80013aa:	4b3e      	ldr	r3, [pc, #248]	; (80014a4 <BSP_LCD_DisplayStringAt+0x174>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	483e      	ldr	r0, [pc, #248]	; (80014a8 <BSP_LCD_DisplayStringAt+0x178>)
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4403      	add	r3, r0
 80013ba:	3308      	adds	r3, #8
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	889b      	ldrh	r3, [r3, #4]
 80013c0:	fb01 f303 	mul.w	r3, r1, r3
 80013c4:	085b      	lsrs	r3, r3, #1
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	89fb      	ldrh	r3, [r7, #14]
 80013ca:	4413      	add	r3, r2
 80013cc:	83fb      	strh	r3, [r7, #30]
      break;
 80013ce:	e01b      	b.n	8001408 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	83fb      	strh	r3, [r7, #30]
      break;
 80013d4:	e018      	b.n	8001408 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	b299      	uxth	r1, r3
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <BSP_LCD_DisplayStringAt+0x174>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4831      	ldr	r0, [pc, #196]	; (80014a8 <BSP_LCD_DisplayStringAt+0x178>)
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4403      	add	r3, r0
 80013ee:	3308      	adds	r3, #8
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	889b      	ldrh	r3, [r3, #4]
 80013f4:	fb11 f303 	smulbb	r3, r1, r3
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	89fb      	ldrh	r3, [r7, #14]
 80013fc:	4413      	add	r3, r2
 80013fe:	83fb      	strh	r3, [r7, #30]
      break;
 8001400:	e002      	b.n	8001408 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	83fb      	strh	r3, [r7, #30]
      break;
 8001406:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001408:	e01a      	b.n	8001440 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	89b9      	ldrh	r1, [r7, #12]
 8001410:	8bfb      	ldrh	r3, [r7, #30]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff48 	bl	80012a8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <BSP_LCD_DisplayStringAt+0x174>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4922      	ldr	r1, [pc, #136]	; (80014a8 <BSP_LCD_DisplayStringAt+0x178>)
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	3308      	adds	r3, #8
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	889a      	ldrh	r2, [r3, #4]
 800142e:	8bfb      	ldrh	r3, [r7, #30]
 8001430:	4413      	add	r3, r2
 8001432:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	3301      	adds	r3, #1
 8001438:	60bb      	str	r3, [r7, #8]
    i++;
 800143a:	8bbb      	ldrh	r3, [r7, #28]
 800143c:	3301      	adds	r3, #1
 800143e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	bf14      	ite	ne
 8001448:	2301      	movne	r3, #1
 800144a:	2300      	moveq	r3, #0
 800144c:	b2dc      	uxtb	r4, r3
 800144e:	f7ff fe15 	bl	800107c <BSP_LCD_GetXSize>
 8001452:	8bb9      	ldrh	r1, [r7, #28]
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <BSP_LCD_DisplayStringAt+0x174>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4d13      	ldr	r5, [pc, #76]	; (80014a8 <BSP_LCD_DisplayStringAt+0x178>)
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	442b      	add	r3, r5
 8001464:	3308      	adds	r3, #8
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	889b      	ldrh	r3, [r3, #4]
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	1ac3      	subs	r3, r0, r3
 8001470:	b299      	uxth	r1, r3
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <BSP_LCD_DisplayStringAt+0x174>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	480c      	ldr	r0, [pc, #48]	; (80014a8 <BSP_LCD_DisplayStringAt+0x178>)
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4403      	add	r3, r0
 8001482:	3308      	adds	r3, #8
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	889b      	ldrh	r3, [r3, #4]
 8001488:	4299      	cmp	r1, r3
 800148a:	bf2c      	ite	cs
 800148c:	2301      	movcs	r3, #1
 800148e:	2300      	movcc	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	4023      	ands	r3, r4
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1b7      	bne.n	800140a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800149a:	bf00      	nop
 800149c:	bf00      	nop
 800149e:	3720      	adds	r7, #32
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bdb0      	pop	{r4, r5, r7, pc}
 80014a4:	20000494 	.word	0x20000494
 80014a8:	20000498 	.word	0x20000498

080014ac <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80014b8:	f7ff feb8 	bl	800122c <BSP_LCD_GetFont>
 80014bc:	4603      	mov	r3, r0
 80014be:	88db      	ldrh	r3, [r3, #6]
 80014c0:	88fa      	ldrh	r2, [r7, #6]
 80014c2:	fb12 f303 	smulbb	r3, r2, r3
 80014c6:	b299      	uxth	r1, r3
 80014c8:	2303      	movs	r3, #3
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff ff2f 	bl	8001330 <BSP_LCD_DisplayStringAt>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <BSP_LCD_DisplayOn+0x1c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80014ea:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <BSP_LCD_DisplayOn+0x1c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4798      	blx	r3
  }
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200004b0 	.word	0x200004b0

080014fc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08e      	sub	sp, #56	; 0x38
 8001500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
 8001506:	4b61      	ldr	r3, [pc, #388]	; (800168c <BSP_LCD_MspInit+0x190>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	4a60      	ldr	r2, [pc, #384]	; (800168c <BSP_LCD_MspInit+0x190>)
 800150c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b5e      	ldr	r3, [pc, #376]	; (800168c <BSP_LCD_MspInit+0x190>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800151a:	623b      	str	r3, [r7, #32]
 800151c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	4b5a      	ldr	r3, [pc, #360]	; (800168c <BSP_LCD_MspInit+0x190>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a59      	ldr	r2, [pc, #356]	; (800168c <BSP_LCD_MspInit+0x190>)
 8001528:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b57      	ldr	r3, [pc, #348]	; (800168c <BSP_LCD_MspInit+0x190>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	4b53      	ldr	r3, [pc, #332]	; (800168c <BSP_LCD_MspInit+0x190>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a52      	ldr	r2, [pc, #328]	; (800168c <BSP_LCD_MspInit+0x190>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b50      	ldr	r3, [pc, #320]	; (800168c <BSP_LCD_MspInit+0x190>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	4b4c      	ldr	r3, [pc, #304]	; (800168c <BSP_LCD_MspInit+0x190>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a4b      	ldr	r2, [pc, #300]	; (800168c <BSP_LCD_MspInit+0x190>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b49      	ldr	r3, [pc, #292]	; (800168c <BSP_LCD_MspInit+0x190>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b45      	ldr	r3, [pc, #276]	; (800168c <BSP_LCD_MspInit+0x190>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a44      	ldr	r2, [pc, #272]	; (800168c <BSP_LCD_MspInit+0x190>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b42      	ldr	r3, [pc, #264]	; (800168c <BSP_LCD_MspInit+0x190>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b3e      	ldr	r3, [pc, #248]	; (800168c <BSP_LCD_MspInit+0x190>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a3d      	ldr	r2, [pc, #244]	; (800168c <BSP_LCD_MspInit+0x190>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <BSP_LCD_MspInit+0x190>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b37      	ldr	r3, [pc, #220]	; (800168c <BSP_LCD_MspInit+0x190>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a36      	ldr	r2, [pc, #216]	; (800168c <BSP_LCD_MspInit+0x190>)
 80015b4:	f043 0320 	orr.w	r3, r3, #32
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <BSP_LCD_MspInit+0x190>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0320 	and.w	r3, r3, #32
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b30      	ldr	r3, [pc, #192]	; (800168c <BSP_LCD_MspInit+0x190>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a2f      	ldr	r2, [pc, #188]	; (800168c <BSP_LCD_MspInit+0x190>)
 80015d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <BSP_LCD_MspInit+0x190>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80015e2:	f641 0358 	movw	r3, #6232	; 0x1858
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80015f0:	2302      	movs	r3, #2
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80015f4:	230e      	movs	r3, #14
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4824      	ldr	r0, [pc, #144]	; (8001690 <BSP_LCD_MspInit+0x194>)
 8001600:	f000 fe9a 	bl	8002338 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001604:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800160a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	4820      	ldr	r0, [pc, #128]	; (8001694 <BSP_LCD_MspInit+0x198>)
 8001612:	f000 fe91 	bl	8002338 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001616:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	481d      	ldr	r0, [pc, #116]	; (8001698 <BSP_LCD_MspInit+0x19c>)
 8001624:	f000 fe88 	bl	8002338 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001628:	2348      	movs	r3, #72	; 0x48
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	481a      	ldr	r0, [pc, #104]	; (800169c <BSP_LCD_MspInit+0x1a0>)
 8001634:	f000 fe80 	bl	8002338 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800163e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001642:	4619      	mov	r1, r3
 8001644:	4816      	ldr	r0, [pc, #88]	; (80016a0 <BSP_LCD_MspInit+0x1a4>)
 8001646:	f000 fe77 	bl	8002338 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800164a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	4813      	ldr	r0, [pc, #76]	; (80016a4 <BSP_LCD_MspInit+0x1a8>)
 8001658:	f000 fe6e 	bl	8002338 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800165c:	2303      	movs	r3, #3
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001660:	2309      	movs	r3, #9
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001668:	4619      	mov	r1, r3
 800166a:	480a      	ldr	r0, [pc, #40]	; (8001694 <BSP_LCD_MspInit+0x198>)
 800166c:	f000 fe64 	bl	8002338 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001670:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	4619      	mov	r1, r3
 800167c:	4809      	ldr	r0, [pc, #36]	; (80016a4 <BSP_LCD_MspInit+0x1a8>)
 800167e:	f000 fe5b 	bl	8002338 <HAL_GPIO_Init>
}
 8001682:	bf00      	nop
 8001684:	3738      	adds	r7, #56	; 0x38
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021400 	.word	0x40021400
 80016a4:	40021800 	.word	0x40021800

080016a8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	603a      	str	r2, [r7, #0]
 80016b2:	80fb      	strh	r3, [r7, #6]
 80016b4:	460b      	mov	r3, r1
 80016b6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <BSP_LCD_DrawPixel+0x44>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0c      	ldr	r2, [pc, #48]	; (80016f0 <BSP_LCD_DrawPixel+0x48>)
 80016be:	2134      	movs	r1, #52	; 0x34
 80016c0:	fb01 f303 	mul.w	r3, r1, r3
 80016c4:	4413      	add	r3, r2
 80016c6:	335c      	adds	r3, #92	; 0x5c
 80016c8:	681c      	ldr	r4, [r3, #0]
 80016ca:	88bd      	ldrh	r5, [r7, #4]
 80016cc:	f7ff fcd6 	bl	800107c <BSP_LCD_GetXSize>
 80016d0:	4603      	mov	r3, r0
 80016d2:	fb03 f205 	mul.w	r2, r3, r5
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	4413      	add	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4423      	add	r3, r4
 80016de:	461a      	mov	r2, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bdb0      	pop	{r4, r5, r7, pc}
 80016ec:	20000494 	.word	0x20000494
 80016f0:	2000037c 	.word	0x2000037c

080016f4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	603a      	str	r2, [r7, #0]
 80016fe:	80fb      	strh	r3, [r7, #6]
 8001700:	460b      	mov	r3, r1
 8001702:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001710:	4b53      	ldr	r3, [pc, #332]	; (8001860 <DrawChar+0x16c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4953      	ldr	r1, [pc, #332]	; (8001864 <DrawChar+0x170>)
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	3308      	adds	r3, #8
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	88db      	ldrh	r3, [r3, #6]
 8001726:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001728:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <DrawChar+0x16c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	494d      	ldr	r1, [pc, #308]	; (8001864 <DrawChar+0x170>)
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	3308      	adds	r3, #8
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	889b      	ldrh	r3, [r3, #4]
 800173e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8001740:	8a3b      	ldrh	r3, [r7, #16]
 8001742:	3307      	adds	r3, #7
 8001744:	2b00      	cmp	r3, #0
 8001746:	da00      	bge.n	800174a <DrawChar+0x56>
 8001748:	3307      	adds	r3, #7
 800174a:	10db      	asrs	r3, r3, #3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	b2da      	uxtb	r2, r3
 8001752:	8a3b      	ldrh	r3, [r7, #16]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	e076      	b.n	800184e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8001760:	8a3b      	ldrh	r3, [r7, #16]
 8001762:	3307      	adds	r3, #7
 8001764:	2b00      	cmp	r3, #0
 8001766:	da00      	bge.n	800176a <DrawChar+0x76>
 8001768:	3307      	adds	r3, #7
 800176a:	10db      	asrs	r3, r3, #3
 800176c:	461a      	mov	r2, r3
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	4413      	add	r3, r2
 8001778:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800177a:	8a3b      	ldrh	r3, [r7, #16]
 800177c:	3307      	adds	r3, #7
 800177e:	2b00      	cmp	r3, #0
 8001780:	da00      	bge.n	8001784 <DrawChar+0x90>
 8001782:	3307      	adds	r3, #7
 8001784:	10db      	asrs	r3, r3, #3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d002      	beq.n	8001790 <DrawChar+0x9c>
 800178a:	2b02      	cmp	r3, #2
 800178c:	d004      	beq.n	8001798 <DrawChar+0xa4>
 800178e:	e00c      	b.n	80017aa <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	617b      	str	r3, [r7, #20]
      break;
 8001796:	e016      	b.n	80017c6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	021b      	lsls	r3, r3, #8
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	3201      	adds	r2, #1
 80017a2:	7812      	ldrb	r2, [r2, #0]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	617b      	str	r3, [r7, #20]
      break;
 80017a8:	e00d      	b.n	80017c6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	041a      	lsls	r2, r3, #16
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	3301      	adds	r3, #1
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	4313      	orrs	r3, r2
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	3202      	adds	r2, #2
 80017be:	7812      	ldrb	r2, [r2, #0]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]
      break;
 80017c4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	e036      	b.n	800183a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80017cc:	8a3a      	ldrh	r2, [r7, #16]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	1ad2      	subs	r2, r2, r3
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	4413      	add	r3, r2
 80017d6:	3b01      	subs	r3, #1
 80017d8:	2201      	movs	r2, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d012      	beq.n	800180e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	4413      	add	r3, r2
 80017f0:	b298      	uxth	r0, r3
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <DrawChar+0x16c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	491b      	ldr	r1, [pc, #108]	; (8001864 <DrawChar+0x170>)
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	88bb      	ldrh	r3, [r7, #4]
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff ff4e 	bl	80016a8 <BSP_LCD_DrawPixel>
 800180c:	e012      	b.n	8001834 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	b29a      	uxth	r2, r3
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	4413      	add	r3, r2
 8001816:	b298      	uxth	r0, r3
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <DrawChar+0x16c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4911      	ldr	r1, [pc, #68]	; (8001864 <DrawChar+0x170>)
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	3304      	adds	r3, #4
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	88bb      	ldrh	r3, [r7, #4]
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff ff3a 	bl	80016a8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	3301      	adds	r3, #1
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	8a3b      	ldrh	r3, [r7, #16]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	429a      	cmp	r2, r3
 8001840:	d3c4      	bcc.n	80017cc <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8001842:	88bb      	ldrh	r3, [r7, #4]
 8001844:	3301      	adds	r3, #1
 8001846:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	3301      	adds	r3, #1
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	8a7b      	ldrh	r3, [r7, #18]
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	429a      	cmp	r2, r3
 8001854:	d384      	bcc.n	8001760 <DrawChar+0x6c>
  }
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000494 	.word	0x20000494
 8001864:	20000498 	.word	0x20000498

08001868 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af02      	add	r7, sp, #8
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <FillBuffer+0x68>)
 8001878:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800187c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <FillBuffer+0x68>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001884:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <FillBuffer+0x68>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <FillBuffer+0x68>)
 800188c:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <FillBuffer+0x6c>)
 800188e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001890:	480f      	ldr	r0, [pc, #60]	; (80018d0 <FillBuffer+0x68>)
 8001892:	f004 fc11 	bl	80060b8 <HAL_DMA2D_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d115      	bne.n	80018c8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800189c:	68f9      	ldr	r1, [r7, #12]
 800189e:	480c      	ldr	r0, [pc, #48]	; (80018d0 <FillBuffer+0x68>)
 80018a0:	f004 fd72 	bl	8006388 <HAL_DMA2D_ConfigLayer>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10e      	bne.n	80018c8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69f9      	ldr	r1, [r7, #28]
 80018b4:	4806      	ldr	r0, [pc, #24]	; (80018d0 <FillBuffer+0x68>)
 80018b6:	f004 fc52 	bl	800615e <HAL_DMA2D_Start>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d103      	bne.n	80018c8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80018c0:	210a      	movs	r1, #10
 80018c2:	4803      	ldr	r0, [pc, #12]	; (80018d0 <FillBuffer+0x68>)
 80018c4:	f004 fc76 	bl	80061b4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80018c8:	bf00      	nop
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000424 	.word	0x20000424
 80018d4:	4002b000 	.word	0x4002b000

080018d8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80018dc:	4b29      	ldr	r3, [pc, #164]	; (8001984 <BSP_SDRAM_Init+0xac>)
 80018de:	4a2a      	ldr	r2, [pc, #168]	; (8001988 <BSP_SDRAM_Init+0xb0>)
 80018e0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80018e2:	4b2a      	ldr	r3, [pc, #168]	; (800198c <BSP_SDRAM_Init+0xb4>)
 80018e4:	2202      	movs	r2, #2
 80018e6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <BSP_SDRAM_Init+0xb4>)
 80018ea:	2207      	movs	r2, #7
 80018ec:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80018ee:	4b27      	ldr	r3, [pc, #156]	; (800198c <BSP_SDRAM_Init+0xb4>)
 80018f0:	2204      	movs	r2, #4
 80018f2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <BSP_SDRAM_Init+0xb4>)
 80018f6:	2207      	movs	r2, #7
 80018f8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <BSP_SDRAM_Init+0xb4>)
 80018fc:	2202      	movs	r2, #2
 80018fe:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <BSP_SDRAM_Init+0xb4>)
 8001902:	2202      	movs	r2, #2
 8001904:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <BSP_SDRAM_Init+0xb4>)
 8001908:	2202      	movs	r2, #2
 800190a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <BSP_SDRAM_Init+0xac>)
 800190e:	2201      	movs	r2, #1
 8001910:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001912:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <BSP_SDRAM_Init+0xac>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <BSP_SDRAM_Init+0xac>)
 800191a:	2204      	movs	r2, #4
 800191c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800191e:	4b19      	ldr	r3, [pc, #100]	; (8001984 <BSP_SDRAM_Init+0xac>)
 8001920:	2210      	movs	r2, #16
 8001922:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <BSP_SDRAM_Init+0xac>)
 8001926:	2240      	movs	r2, #64	; 0x40
 8001928:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <BSP_SDRAM_Init+0xac>)
 800192c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001930:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001932:	4b14      	ldr	r3, [pc, #80]	; (8001984 <BSP_SDRAM_Init+0xac>)
 8001934:	2200      	movs	r2, #0
 8001936:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <BSP_SDRAM_Init+0xac>)
 800193a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800193e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001940:	4b10      	ldr	r3, [pc, #64]	; (8001984 <BSP_SDRAM_Init+0xac>)
 8001942:	2200      	movs	r2, #0
 8001944:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <BSP_SDRAM_Init+0xac>)
 8001948:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800194e:	2100      	movs	r1, #0
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <BSP_SDRAM_Init+0xac>)
 8001952:	f000 f87f 	bl	8001a54 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001956:	490d      	ldr	r1, [pc, #52]	; (800198c <BSP_SDRAM_Init+0xb4>)
 8001958:	480a      	ldr	r0, [pc, #40]	; (8001984 <BSP_SDRAM_Init+0xac>)
 800195a:	f005 f91c 	bl	8006b96 <HAL_SDRAM_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <BSP_SDRAM_Init+0xb8>)
 8001966:	2201      	movs	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	e002      	b.n	8001972 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <BSP_SDRAM_Init+0xb8>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001972:	f240 506a 	movw	r0, #1386	; 0x56a
 8001976:	f000 f80d 	bl	8001994 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <BSP_SDRAM_Init+0xb8>)
 800197c:	781b      	ldrb	r3, [r3, #0]
}
 800197e:	4618      	mov	r0, r3
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200004b4 	.word	0x200004b4
 8001988:	a0000140 	.word	0xa0000140
 800198c:	200004e8 	.word	0x200004e8
 8001990:	200001c8 	.word	0x200001c8

08001994 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80019a0:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80019a6:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019a8:	2208      	movs	r2, #8
 80019aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80019b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019bc:	4923      	ldr	r1, [pc, #140]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019be:	4824      	ldr	r0, [pc, #144]	; (8001a50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80019c0:	f005 f927 	bl	8006c12 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f000 f9c3 	bl	8001d50 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80019ca:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019cc:	2202      	movs	r2, #2
 80019ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019d2:	2208      	movs	r2, #8
 80019d4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019d8:	2201      	movs	r2, #1
 80019da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80019e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e6:	4919      	ldr	r1, [pc, #100]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019e8:	4819      	ldr	r0, [pc, #100]	; (8001a50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80019ea:	f005 f912 	bl	8006c12 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019f0:	2203      	movs	r2, #3
 80019f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019f6:	2208      	movs	r2, #8
 80019f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80019fa:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80019fc:	2204      	movs	r2, #4
 80019fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a0a:	4910      	ldr	r1, [pc, #64]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001a0c:	4810      	ldr	r0, [pc, #64]	; (8001a50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001a0e:	f005 f900 	bl	8006c12 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001a12:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001a16:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001a20:	2208      	movs	r2, #8
 8001a22:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001a2e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a34:	4905      	ldr	r1, [pc, #20]	; (8001a4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001a36:	4806      	ldr	r0, [pc, #24]	; (8001a50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001a38:	f005 f8eb 	bl	8006c12 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4804      	ldr	r0, [pc, #16]	; (8001a50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001a40:	f005 f91c 	bl	8006c7c <HAL_SDRAM_ProgramRefreshRate>
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000504 	.word	0x20000504
 8001a50:	200004b4 	.word	0x200004b4

08001a54 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b090      	sub	sp, #64	; 0x40
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80ec 	beq.w	8001c3e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a6a:	4b77      	ldr	r3, [pc, #476]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	4a76      	ldr	r2, [pc, #472]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6393      	str	r3, [r2, #56]	; 0x38
 8001a76:	4b74      	ldr	r3, [pc, #464]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a80:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
 8001a86:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a6f      	ldr	r2, [pc, #444]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001a8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b6d      	ldr	r3, [pc, #436]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
 8001aa2:	4b69      	ldr	r3, [pc, #420]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a68      	ldr	r2, [pc, #416]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	623b      	str	r3, [r7, #32]
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	4b62      	ldr	r3, [pc, #392]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a61      	ldr	r2, [pc, #388]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b5f      	ldr	r3, [pc, #380]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a5a      	ldr	r2, [pc, #360]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	4b54      	ldr	r3, [pc, #336]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a53      	ldr	r2, [pc, #332]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001afc:	f043 0310 	orr.w	r3, r3, #16
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b51      	ldr	r3, [pc, #324]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0310 	and.w	r3, r3, #16
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b4d      	ldr	r3, [pc, #308]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a4c      	ldr	r2, [pc, #304]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001b18:	f043 0320 	orr.w	r3, r3, #32
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b46      	ldr	r3, [pc, #280]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a45      	ldr	r2, [pc, #276]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b43      	ldr	r3, [pc, #268]	; (8001c48 <BSP_SDRAM_MspInit+0x1f4>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001b52:	230c      	movs	r3, #12
 8001b54:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001b56:	2360      	movs	r3, #96	; 0x60
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	483a      	ldr	r0, [pc, #232]	; (8001c4c <BSP_SDRAM_MspInit+0x1f8>)
 8001b62:	f000 fbe9 	bl	8002338 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001b66:	2301      	movs	r3, #1
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001b6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4837      	ldr	r0, [pc, #220]	; (8001c50 <BSP_SDRAM_MspInit+0x1fc>)
 8001b72:	f000 fbe1 	bl	8002338 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001b76:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b80:	4619      	mov	r1, r3
 8001b82:	4834      	ldr	r0, [pc, #208]	; (8001c54 <BSP_SDRAM_MspInit+0x200>)
 8001b84:	f000 fbd8 	bl	8002338 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001b88:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b92:	4619      	mov	r1, r3
 8001b94:	4830      	ldr	r0, [pc, #192]	; (8001c58 <BSP_SDRAM_MspInit+0x204>)
 8001b96:	f000 fbcf 	bl	8002338 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001b9a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	482d      	ldr	r0, [pc, #180]	; (8001c5c <BSP_SDRAM_MspInit+0x208>)
 8001ba8:	f000 fbc6 	bl	8002338 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001bac:	f248 1333 	movw	r3, #33075	; 0x8133
 8001bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4829      	ldr	r0, [pc, #164]	; (8001c60 <BSP_SDRAM_MspInit+0x20c>)
 8001bba:	f000 fbbd 	bl	8002338 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001bd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001bdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001be0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001be4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001be8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001bea:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001bf0:	4b1c      	ldr	r3, [pc, #112]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001bf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bf6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001bf8:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001bfe:	4b19      	ldr	r3, [pc, #100]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001c00:	2203      	movs	r2, #3
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001c12:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <BSP_SDRAM_MspInit+0x214>)
 8001c14:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c1c:	4a11      	ldr	r2, [pc, #68]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001c22:	4810      	ldr	r0, [pc, #64]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001c24:	f000 fa78 	bl	8002118 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001c28:	480e      	ldr	r0, [pc, #56]	; (8001c64 <BSP_SDRAM_MspInit+0x210>)
 8001c2a:	f000 f9c7 	bl	8001fbc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	210f      	movs	r1, #15
 8001c32:	2038      	movs	r0, #56	; 0x38
 8001c34:	f000 f98b 	bl	8001f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001c38:	2038      	movs	r0, #56	; 0x38
 8001c3a:	f000 f9a4 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001c3e:	bf00      	nop
 8001c40:	3740      	adds	r7, #64	; 0x40
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40021400 	.word	0x40021400
 8001c60:	40021800 	.word	0x40021800
 8001c64:	20000514 	.word	0x20000514
 8001c68:	40026410 	.word	0x40026410

08001c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <HAL_Init+0x40>)
 8001c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_Init+0x40>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <HAL_Init+0x40>)
 8001c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_Init+0x40>)
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c94:	2003      	movs	r0, #3
 8001c96:	f000 f94f 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c9a:	200f      	movs	r0, #15
 8001c9c:	f000 f808 	bl	8001cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca0:	f7fe fd90 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023c00 	.word	0x40023c00

08001cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <HAL_InitTick+0x54>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_InitTick+0x58>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f967 	bl	8001fa2 <HAL_SYSTICK_Config>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00e      	b.n	8001cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0f      	cmp	r3, #15
 8001ce2:	d80a      	bhi.n	8001cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	f000 f92f 	bl	8001f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_InitTick+0x5c>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e000      	b.n	8001cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000180 	.word	0x20000180
 8001d08:	200001d0 	.word	0x200001d0
 8001d0c:	200001cc 	.word	0x200001cc

08001d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x20>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x24>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_IncTick+0x24>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	200001d0 	.word	0x200001d0
 8001d34:	20000574 	.word	0x20000574

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000574 	.word	0x20000574

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff ffee 	bl	8001d38 <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d005      	beq.n	8001d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_Delay+0x44>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d76:	bf00      	nop
 8001d78:	f7ff ffde 	bl	8001d38 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d8f7      	bhi.n	8001d78 <HAL_Delay+0x28>
  {
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200001d0 	.word	0x200001d0

08001d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dca:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	60d3      	str	r3, [r2, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <__NVIC_GetPriorityGrouping+0x18>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f003 0307 	and.w	r3, r3, #7
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db0b      	blt.n	8001e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4907      	ldr	r1, [pc, #28]	; (8001e34 <__NVIC_EnableIRQ+0x38>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	; (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	; (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
         );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f04:	d301      	bcc.n	8001f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00f      	b.n	8001f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <SysTick_Config+0x40>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f12:	210f      	movs	r1, #15
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	f7ff ff8e 	bl	8001e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <SysTick_Config+0x40>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <SysTick_Config+0x40>)
 8001f24:	2207      	movs	r2, #7
 8001f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	e000e010 	.word	0xe000e010

08001f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff29 	bl	8001d98 <__NVIC_SetPriorityGrouping>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f60:	f7ff ff3e 	bl	8001de0 <__NVIC_GetPriorityGrouping>
 8001f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff ff8e 	bl	8001e8c <NVIC_EncodePriority>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff5d 	bl	8001e38 <__NVIC_SetPriority>
}
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff31 	bl	8001dfc <__NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffa2 	bl	8001ef4 <SysTick_Config>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff feb6 	bl	8001d38 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e099      	b.n	800210c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0201 	bic.w	r2, r2, #1
 8001ff6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff8:	e00f      	b.n	800201a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ffa:	f7ff fe9d 	bl	8001d38 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b05      	cmp	r3, #5
 8002006:	d908      	bls.n	800201a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2203      	movs	r2, #3
 8002012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e078      	b.n	800210c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e8      	bne.n	8001ffa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4b38      	ldr	r3, [pc, #224]	; (8002114 <HAL_DMA_Init+0x158>)
 8002034:	4013      	ands	r3, r2
 8002036:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002046:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800205e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	2b04      	cmp	r3, #4
 8002072:	d107      	bne.n	8002084 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	4313      	orrs	r3, r2
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4313      	orrs	r3, r2
 8002082:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f023 0307 	bic.w	r3, r3, #7
 800209a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d117      	bne.n	80020de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00e      	beq.n	80020de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f8bd 	bl	8002240 <DMA_CheckFifoParam>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2240      	movs	r2, #64	; 0x40
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020da:	2301      	movs	r3, #1
 80020dc:	e016      	b.n	800210c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f874 	bl	80021d4 <DMA_CalcBaseAndBitshift>
 80020ec:	4603      	mov	r3, r0
 80020ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	223f      	movs	r2, #63	; 0x3f
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	f010803f 	.word	0xf010803f

08002118 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e050      	b.n	80021cc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d101      	bne.n	800213a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002136:	2302      	movs	r3, #2
 8002138:	e048      	b.n	80021cc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2200      	movs	r2, #0
 8002158:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2200      	movs	r2, #0
 8002170:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2221      	movs	r2, #33	; 0x21
 8002178:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f82a 	bl	80021d4 <DMA_CalcBaseAndBitshift>
 8002180:	4603      	mov	r3, r0
 8002182:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	223f      	movs	r2, #63	; 0x3f
 80021ae:	409a      	lsls	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	3b10      	subs	r3, #16
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <DMA_CalcBaseAndBitshift+0x64>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ee:	4a13      	ldr	r2, [pc, #76]	; (800223c <DMA_CalcBaseAndBitshift+0x68>)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d909      	bls.n	8002216 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800220a:	f023 0303 	bic.w	r3, r3, #3
 800220e:	1d1a      	adds	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	659a      	str	r2, [r3, #88]	; 0x58
 8002214:	e007      	b.n	8002226 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800221e:	f023 0303 	bic.w	r3, r3, #3
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	aaaaaaab 	.word	0xaaaaaaab
 800223c:	0800c0b8 	.word	0x0800c0b8

08002240 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d11f      	bne.n	800229a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d856      	bhi.n	800230e <DMA_CheckFifoParam+0xce>
 8002260:	a201      	add	r2, pc, #4	; (adr r2, 8002268 <DMA_CheckFifoParam+0x28>)
 8002262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002266:	bf00      	nop
 8002268:	08002279 	.word	0x08002279
 800226c:	0800228b 	.word	0x0800228b
 8002270:	08002279 	.word	0x08002279
 8002274:	0800230f 	.word	0x0800230f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d046      	beq.n	8002312 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002288:	e043      	b.n	8002312 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002292:	d140      	bne.n	8002316 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002298:	e03d      	b.n	8002316 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022a2:	d121      	bne.n	80022e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d837      	bhi.n	800231a <DMA_CheckFifoParam+0xda>
 80022aa:	a201      	add	r2, pc, #4	; (adr r2, 80022b0 <DMA_CheckFifoParam+0x70>)
 80022ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b0:	080022c1 	.word	0x080022c1
 80022b4:	080022c7 	.word	0x080022c7
 80022b8:	080022c1 	.word	0x080022c1
 80022bc:	080022d9 	.word	0x080022d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
      break;
 80022c4:	e030      	b.n	8002328 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d025      	beq.n	800231e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d6:	e022      	b.n	800231e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022e0:	d11f      	bne.n	8002322 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022e6:	e01c      	b.n	8002322 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d903      	bls.n	80022f6 <DMA_CheckFifoParam+0xb6>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d003      	beq.n	80022fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022f4:	e018      	b.n	8002328 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
      break;
 80022fa:	e015      	b.n	8002328 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00e      	beq.n	8002326 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      break;
 800230c:	e00b      	b.n	8002326 <DMA_CheckFifoParam+0xe6>
      break;
 800230e:	bf00      	nop
 8002310:	e00a      	b.n	8002328 <DMA_CheckFifoParam+0xe8>
      break;
 8002312:	bf00      	nop
 8002314:	e008      	b.n	8002328 <DMA_CheckFifoParam+0xe8>
      break;
 8002316:	bf00      	nop
 8002318:	e006      	b.n	8002328 <DMA_CheckFifoParam+0xe8>
      break;
 800231a:	bf00      	nop
 800231c:	e004      	b.n	8002328 <DMA_CheckFifoParam+0xe8>
      break;
 800231e:	bf00      	nop
 8002320:	e002      	b.n	8002328 <DMA_CheckFifoParam+0xe8>
      break;   
 8002322:	bf00      	nop
 8002324:	e000      	b.n	8002328 <DMA_CheckFifoParam+0xe8>
      break;
 8002326:	bf00      	nop
    }
  } 
  
  return status; 
 8002328:	7bfb      	ldrb	r3, [r7, #15]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e177      	b.n	8002644 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002354:	2201      	movs	r2, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	429a      	cmp	r2, r3
 800236e:	f040 8166 	bne.w	800263e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d005      	beq.n	800238a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002386:	2b02      	cmp	r3, #2
 8002388:	d130      	bne.n	80023ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 0201 	and.w	r2, r3, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d017      	beq.n	8002428 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d123      	bne.n	800247c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	69b9      	ldr	r1, [r7, #24]
 8002478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0203 	and.w	r2, r3, #3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80c0 	beq.w	800263e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_GPIO_Init+0x324>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a65      	ldr	r2, [pc, #404]	; (800265c <HAL_GPIO_Init+0x324>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_GPIO_Init+0x324>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024da:	4a61      	ldr	r2, [pc, #388]	; (8002660 <HAL_GPIO_Init+0x328>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a58      	ldr	r2, [pc, #352]	; (8002664 <HAL_GPIO_Init+0x32c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d037      	beq.n	8002576 <HAL_GPIO_Init+0x23e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a57      	ldr	r2, [pc, #348]	; (8002668 <HAL_GPIO_Init+0x330>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d031      	beq.n	8002572 <HAL_GPIO_Init+0x23a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a56      	ldr	r2, [pc, #344]	; (800266c <HAL_GPIO_Init+0x334>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d02b      	beq.n	800256e <HAL_GPIO_Init+0x236>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a55      	ldr	r2, [pc, #340]	; (8002670 <HAL_GPIO_Init+0x338>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d025      	beq.n	800256a <HAL_GPIO_Init+0x232>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a54      	ldr	r2, [pc, #336]	; (8002674 <HAL_GPIO_Init+0x33c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01f      	beq.n	8002566 <HAL_GPIO_Init+0x22e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a53      	ldr	r2, [pc, #332]	; (8002678 <HAL_GPIO_Init+0x340>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d019      	beq.n	8002562 <HAL_GPIO_Init+0x22a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a52      	ldr	r2, [pc, #328]	; (800267c <HAL_GPIO_Init+0x344>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_GPIO_Init+0x226>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a51      	ldr	r2, [pc, #324]	; (8002680 <HAL_GPIO_Init+0x348>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00d      	beq.n	800255a <HAL_GPIO_Init+0x222>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a50      	ldr	r2, [pc, #320]	; (8002684 <HAL_GPIO_Init+0x34c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <HAL_GPIO_Init+0x21e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4f      	ldr	r2, [pc, #316]	; (8002688 <HAL_GPIO_Init+0x350>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d101      	bne.n	8002552 <HAL_GPIO_Init+0x21a>
 800254e:	2309      	movs	r3, #9
 8002550:	e012      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002552:	230a      	movs	r3, #10
 8002554:	e010      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002556:	2308      	movs	r3, #8
 8002558:	e00e      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800255a:	2307      	movs	r3, #7
 800255c:	e00c      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800255e:	2306      	movs	r3, #6
 8002560:	e00a      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002562:	2305      	movs	r3, #5
 8002564:	e008      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002566:	2304      	movs	r3, #4
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800256a:	2303      	movs	r3, #3
 800256c:	e004      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800256e:	2302      	movs	r3, #2
 8002570:	e002      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002576:	2300      	movs	r3, #0
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f002 0203 	and.w	r2, r2, #3
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	4093      	lsls	r3, r2
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002588:	4935      	ldr	r1, [pc, #212]	; (8002660 <HAL_GPIO_Init+0x328>)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_GPIO_Init+0x354>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ba:	4a34      	ldr	r2, [pc, #208]	; (800268c <HAL_GPIO_Init+0x354>)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c0:	4b32      	ldr	r3, [pc, #200]	; (800268c <HAL_GPIO_Init+0x354>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e4:	4a29      	ldr	r2, [pc, #164]	; (800268c <HAL_GPIO_Init+0x354>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ea:	4b28      	ldr	r3, [pc, #160]	; (800268c <HAL_GPIO_Init+0x354>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_GPIO_Init+0x354>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_GPIO_Init+0x354>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002638:	4a14      	ldr	r2, [pc, #80]	; (800268c <HAL_GPIO_Init+0x354>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3301      	adds	r3, #1
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2b0f      	cmp	r3, #15
 8002648:	f67f ae84 	bls.w	8002354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	40013800 	.word	0x40013800
 8002664:	40020000 	.word	0x40020000
 8002668:	40020400 	.word	0x40020400
 800266c:	40020800 	.word	0x40020800
 8002670:	40020c00 	.word	0x40020c00
 8002674:	40021000 	.word	0x40021000
 8002678:	40021400 	.word	0x40021400
 800267c:	40021800 	.word	0x40021800
 8002680:	40021c00 	.word	0x40021c00
 8002684:	40022000 	.word	0x40022000
 8002688:	40022400 	.word	0x40022400
 800268c:	40013c00 	.word	0x40013c00

08002690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
 800269c:	4613      	mov	r3, r2
 800269e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a0:	787b      	ldrb	r3, [r7, #1]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026ac:	e003      	b.n	80026b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ae:	887b      	ldrh	r3, [r7, #2]
 80026b0:	041a      	lsls	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	619a      	str	r2, [r3, #24]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c4:	b08f      	sub	sp, #60	; 0x3c
 80026c6:	af0a      	add	r7, sp, #40	; 0x28
 80026c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e10f      	b.n	80028f4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f007 fbda 	bl	8009ea8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2203      	movs	r2, #3
 80026f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f002 f997 	bl	8004a46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	603b      	str	r3, [r7, #0]
 800271e:	687e      	ldr	r6, [r7, #4]
 8002720:	466d      	mov	r5, sp
 8002722:	f106 0410 	add.w	r4, r6, #16
 8002726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002728:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800272a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800272c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800272e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002732:	e885 0003 	stmia.w	r5, {r0, r1}
 8002736:	1d33      	adds	r3, r6, #4
 8002738:	cb0e      	ldmia	r3, {r1, r2, r3}
 800273a:	6838      	ldr	r0, [r7, #0]
 800273c:	f002 f86e 	bl	800481c <USB_CoreInit>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e0d0      	b.n	80028f4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f002 f985 	bl	8004a68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	e04a      	b.n	80027fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	333d      	adds	r3, #61	; 0x3d
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	333c      	adds	r3, #60	; 0x3c
 8002788:	7bfa      	ldrb	r2, [r7, #15]
 800278a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	b298      	uxth	r0, r3
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	3344      	adds	r3, #68	; 0x44
 80027a0:	4602      	mov	r2, r0
 80027a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3340      	adds	r3, #64	; 0x40
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	3348      	adds	r3, #72	; 0x48
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	334c      	adds	r3, #76	; 0x4c
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	3354      	adds	r3, #84	; 0x54
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	3301      	adds	r3, #1
 80027f8:	73fb      	strb	r3, [r7, #15]
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	d3af      	bcc.n	8002764 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002804:	2300      	movs	r3, #0
 8002806:	73fb      	strb	r3, [r7, #15]
 8002808:	e044      	b.n	8002894 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002832:	7bfa      	ldrb	r2, [r7, #15]
 8002834:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002836:	7bfa      	ldrb	r2, [r7, #15]
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	4613      	mov	r3, r2
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	440b      	add	r3, r1
 8002844:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800284c:	7bfa      	ldrb	r2, [r7, #15]
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	4613      	mov	r3, r2
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002878:	7bfa      	ldrb	r2, [r7, #15]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	3301      	adds	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	429a      	cmp	r2, r3
 800289c:	d3b5      	bcc.n	800280a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	687e      	ldr	r6, [r7, #4]
 80028a6:	466d      	mov	r5, sp
 80028a8:	f106 0410 	add.w	r4, r6, #16
 80028ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80028bc:	1d33      	adds	r3, r6, #4
 80028be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028c0:	6838      	ldr	r0, [r7, #0]
 80028c2:	f002 f91d 	bl	8004b00 <USB_DevInit>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e00d      	b.n	80028f4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f003 fa6c 	bl	8005dca <USB_DevDisconnect>

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_PCD_Start+0x1c>
 8002914:	2302      	movs	r3, #2
 8002916:	e020      	b.n	800295a <HAL_PCD_Start+0x5e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	2b01      	cmp	r3, #1
 8002926:	d109      	bne.n	800293c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800292c:	2b01      	cmp	r3, #1
 800292e:	d005      	beq.n	800293c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f002 f86f 	bl	8004a24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f003 fa1c 	bl	8005d88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002962:	b590      	push	{r4, r7, lr}
 8002964:	b08d      	sub	sp, #52	; 0x34
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fada 	bl	8005f32 <USB_GetMode>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	f040 848a 	bne.w	800329a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f003 fa3e 	bl	8005e0c <USB_ReadInterrupts>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8480 	beq.w	8003298 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 fa2b 	bl	8005e0c <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d107      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f002 0202 	and.w	r2, r2, #2
 80029ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 fa19 	bl	8005e0c <USB_ReadInterrupts>
 80029da:	4603      	mov	r3, r0
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d161      	bne.n	8002aa8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0210 	bic.w	r2, r2, #16
 80029f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 020f 	and.w	r2, r3, #15
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	3304      	adds	r3, #4
 8002a12:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	0c5b      	lsrs	r3, r3, #17
 8002a18:	f003 030f 	and.w	r3, r3, #15
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d124      	bne.n	8002a6a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d035      	beq.n	8002a98 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	6a38      	ldr	r0, [r7, #32]
 8002a40:	f003 f850 	bl	8005ae4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a50:	441a      	add	r2, r3
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	6a1a      	ldr	r2, [r3, #32]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a62:	441a      	add	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	621a      	str	r2, [r3, #32]
 8002a68:	e016      	b.n	8002a98 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	0c5b      	lsrs	r3, r3, #17
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d110      	bne.n	8002a98 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6a38      	ldr	r0, [r7, #32]
 8002a82:	f003 f82f 	bl	8005ae4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	6a1a      	ldr	r2, [r3, #32]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a92:	441a      	add	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699a      	ldr	r2, [r3, #24]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0210 	orr.w	r2, r2, #16
 8002aa6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f003 f9ad 	bl	8005e0c <USB_ReadInterrupts>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002abc:	f040 80a7 	bne.w	8002c0e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 f9b2 	bl	8005e32 <USB_ReadDevAllOutEpInterrupt>
 8002ace:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002ad0:	e099      	b.n	8002c06 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 808e 	beq.w	8002bfa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 f9d6 	bl	8005e9a <USB_ReadDevOutEPInterrupt>
 8002aee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	015a      	lsls	r2, r3, #5
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	4413      	add	r3, r2
 8002b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b06:	461a      	mov	r2, r3
 8002b08:	2301      	movs	r3, #1
 8002b0a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 fec2 	bl	8003898 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00c      	beq.n	8002b38 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 ff98 	bl	8003a68 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2310      	movs	r3, #16
 8002b52:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d030      	beq.n	8002bc0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b66:	2b80      	cmp	r3, #128	; 0x80
 8002b68:	d109      	bne.n	8002b7e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b7c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4413      	add	r3, r2
 8002b90:	3304      	adds	r3, #4
 8002b92:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	78db      	ldrb	r3, [r3, #3]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d108      	bne.n	8002bae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f007 fa7f 	bl	800a0ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2320      	movs	r3, #32
 8002bda:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d009      	beq.n	8002bfa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bf8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	085b      	lsrs	r3, r3, #1
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f47f af62 	bne.w	8002ad2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 f8fa 	bl	8005e0c <USB_ReadInterrupts>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c22:	f040 80db 	bne.w	8002ddc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 f91b 	bl	8005e66 <USB_ReadDevAllInEpInterrupt>
 8002c30:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c36:	e0cd      	b.n	8002dd4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80c2 	beq.w	8002dc8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f003 f941 	bl	8005ed6 <USB_ReadDevInEPInterrupt>
 8002c54:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d057      	beq.n	8002d10 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	2201      	movs	r2, #1
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69f9      	ldr	r1, [r7, #28]
 8002c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c80:	4013      	ands	r3, r2
 8002c82:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c90:	461a      	mov	r2, r3
 8002c92:	2301      	movs	r3, #1
 8002c94:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d132      	bne.n	8002d04 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	334c      	adds	r3, #76	; 0x4c
 8002cae:	6819      	ldr	r1, [r3, #0]
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4403      	add	r3, r0
 8002cbe:	3348      	adds	r3, #72	; 0x48
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4419      	add	r1, r3
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4403      	add	r3, r0
 8002cd2:	334c      	adds	r3, #76	; 0x4c
 8002cd4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d113      	bne.n	8002d04 <HAL_PCD_IRQHandler+0x3a2>
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	3354      	adds	r3, #84	; 0x54
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d108      	bne.n	8002d04 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2101      	movs	r1, #1
 8002d00:	f003 f948 	bl	8005f94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	4619      	mov	r1, r3
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f007 f949 	bl	8009fa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d008      	beq.n	8002d2c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d26:	461a      	mov	r2, r3
 8002d28:	2308      	movs	r3, #8
 8002d2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d008      	beq.n	8002d48 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d42:	461a      	mov	r2, r3
 8002d44:	2310      	movs	r3, #16
 8002d46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2340      	movs	r3, #64	; 0x40
 8002d62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d023      	beq.n	8002db6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d70:	6a38      	ldr	r0, [r7, #32]
 8002d72:	f002 f829 	bl	8004dc8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	3338      	adds	r3, #56	; 0x38
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	4413      	add	r3, r2
 8002d86:	3304      	adds	r3, #4
 8002d88:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	78db      	ldrb	r3, [r3, #3]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d108      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2200      	movs	r2, #0
 8002d96:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f007 f996 	bl	800a0d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db0:	461a      	mov	r2, r3
 8002db2:	2302      	movs	r3, #2
 8002db4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fcdb 	bl	800377e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	3301      	adds	r3, #1
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f47f af2e 	bne.w	8002c38 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 f813 	bl	8005e0c <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002df0:	d122      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d108      	bne.n	8002e22 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e18:	2100      	movs	r1, #0
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fec2 	bl	8003ba4 <HAL_PCDEx_LPM_Callback>
 8002e20:	e002      	b.n	8002e28 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f007 f934 	bl	800a090 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 ffe5 	bl	8005e0c <USB_ReadInterrupts>
 8002e42:	4603      	mov	r3, r0
 8002e44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e4c:	d112      	bne.n	8002e74 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d102      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f007 f8f0 	bl	800a044 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695a      	ldr	r2, [r3, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e72:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f002 ffc7 	bl	8005e0c <USB_ReadInterrupts>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e88:	f040 80b7 	bne.w	8002ffa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2110      	movs	r1, #16
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 ff8e 	bl	8004dc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eac:	2300      	movs	r3, #0
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb0:	e046      	b.n	8002f40 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb4:	015a      	lsls	r2, r3, #5
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	4413      	add	r3, r2
 8002eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ec4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed6:	0151      	lsls	r1, r2, #5
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	440a      	add	r2, r1
 8002edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ee0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ee4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ef8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f0a:	0151      	lsls	r1, r2, #5
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	440a      	add	r2, r1
 8002f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2a:	0151      	lsls	r1, r2, #5
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	440a      	add	r2, r1
 8002f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f38:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d3b3      	bcc.n	8002eb2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f58:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f5c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d016      	beq.n	8002f94 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f76:	f043 030b 	orr.w	r3, r3, #11
 8002f7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f8c:	f043 030b 	orr.w	r3, r3, #11
 8002f90:	6453      	str	r3, [r2, #68]	; 0x44
 8002f92:	e015      	b.n	8002fc0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fa6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002faa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fba:	f043 030b 	orr.w	r3, r3, #11
 8002fbe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002fd2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f002 ffd5 	bl	8005f94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ff8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f002 ff04 	bl	8005e0c <USB_ReadInterrupts>
 8003004:	4603      	mov	r3, r0
 8003006:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800300a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300e:	d124      	bne.n	800305a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f002 ff9a 	bl	8005f4e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f001 ff4f 	bl	8004ec2 <USB_GetDevSpeed>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681c      	ldr	r4, [r3, #0]
 8003030:	f001 fa28 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 8003034:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	4620      	mov	r0, r4
 8003040:	f001 fc4e 	bl	80048e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f006 ffd4 	bl	8009ff2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003058:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f002 fed4 	bl	8005e0c <USB_ReadInterrupts>
 8003064:	4603      	mov	r3, r0
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b08      	cmp	r3, #8
 800306c:	d10a      	bne.n	8003084 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f006 ffb1 	bl	8009fd6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f002 0208 	and.w	r2, r2, #8
 8003082:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f002 febf 	bl	8005e0c <USB_ReadInterrupts>
 800308e:	4603      	mov	r3, r0
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	2b80      	cmp	r3, #128	; 0x80
 8003096:	d122      	bne.n	80030de <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030a4:	2301      	movs	r3, #1
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
 80030a8:	e014      	b.n	80030d4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d105      	bne.n	80030ce <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	4619      	mov	r1, r3
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fb27 	bl	800371c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	3301      	adds	r3, #1
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030da:	429a      	cmp	r2, r3
 80030dc:	d3e5      	bcc.n	80030aa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f002 fe92 	bl	8005e0c <USB_ReadInterrupts>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030f2:	d13b      	bne.n	800316c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030f4:	2301      	movs	r3, #1
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
 80030f8:	e02b      	b.n	8003152 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	4413      	add	r3, r2
 8003102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	3340      	adds	r3, #64	; 0x40
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d115      	bne.n	800314c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003120:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003122:	2b00      	cmp	r3, #0
 8003124:	da12      	bge.n	800314c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	333f      	adds	r3, #63	; 0x3f
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003142:	b2db      	uxtb	r3, r3
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fae8 	bl	800371c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	3301      	adds	r3, #1
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003158:	429a      	cmp	r2, r3
 800315a:	d3ce      	bcc.n	80030fa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695a      	ldr	r2, [r3, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800316a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f002 fe4b 	bl	8005e0c <USB_ReadInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003180:	d155      	bne.n	800322e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003182:	2301      	movs	r3, #1
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
 8003186:	e045      	b.n	8003214 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d12e      	bne.n	800320e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	da2b      	bge.n	800320e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80031c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d121      	bne.n	800320e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800320a:	6053      	str	r3, [r2, #4]
            break;
 800320c:	e007      	b.n	800321e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	3301      	adds	r3, #1
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321a:	429a      	cmp	r2, r3
 800321c:	d3b4      	bcc.n	8003188 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800322c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f002 fdea 	bl	8005e0c <USB_ReadInterrupts>
 8003238:	4603      	mov	r3, r0
 800323a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800323e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003242:	d10a      	bne.n	800325a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f006 ff55 	bl	800a0f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f002 fdd4 	bl	8005e0c <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b04      	cmp	r3, #4
 800326c:	d115      	bne.n	800329a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f006 ff45 	bl	800a110 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6859      	ldr	r1, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	e000      	b.n	800329a <HAL_PCD_IRQHandler+0x938>
      return;
 8003298:	bf00      	nop
    }
  }
}
 800329a:	3734      	adds	r7, #52	; 0x34
 800329c:	46bd      	mov	sp, r7
 800329e:	bd90      	pop	{r4, r7, pc}

080032a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_PCD_SetAddress+0x1a>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e013      	b.n	80032e2 <HAL_PCD_SetAddress+0x42>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 fd32 	bl	8005d3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	4608      	mov	r0, r1
 80032f4:	4611      	mov	r1, r2
 80032f6:	461a      	mov	r2, r3
 80032f8:	4603      	mov	r3, r0
 80032fa:	70fb      	strb	r3, [r7, #3]
 80032fc:	460b      	mov	r3, r1
 80032fe:	803b      	strh	r3, [r7, #0]
 8003300:	4613      	mov	r3, r2
 8003302:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800330c:	2b00      	cmp	r3, #0
 800330e:	da0f      	bge.n	8003330 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	f003 020f 	and.w	r2, r3, #15
 8003316:	4613      	mov	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	3338      	adds	r3, #56	; 0x38
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	4413      	add	r3, r2
 8003324:	3304      	adds	r3, #4
 8003326:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	705a      	strb	r2, [r3, #1]
 800332e:	e00f      	b.n	8003350 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	3304      	adds	r3, #4
 8003348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	b2da      	uxtb	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800335c:	883a      	ldrh	r2, [r7, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	78ba      	ldrb	r2, [r7, #2]
 8003366:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d004      	beq.n	800337a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800337a:	78bb      	ldrb	r3, [r7, #2]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d102      	bne.n	8003386 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_PCD_EP_Open+0xaa>
 8003390:	2302      	movs	r3, #2
 8003392:	e00e      	b.n	80033b2 <HAL_PCD_EP_Open+0xc8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68f9      	ldr	r1, [r7, #12]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f001 fdb2 	bl	8004f0c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80033b0:	7afb      	ldrb	r3, [r7, #11]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	460b      	mov	r3, r1
 80033c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	da0f      	bge.n	80033ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	f003 020f 	and.w	r2, r3, #15
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	3338      	adds	r3, #56	; 0x38
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	3304      	adds	r3, #4
 80033e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	705a      	strb	r2, [r3, #1]
 80033ec:	e00f      	b.n	800340e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	f003 020f 	and.w	r2, r3, #15
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	3304      	adds	r3, #4
 8003406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_PCD_EP_Close+0x6e>
 8003424:	2302      	movs	r3, #2
 8003426:	e00e      	b.n	8003446 <HAL_PCD_EP_Close+0x8c>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68f9      	ldr	r1, [r7, #12]
 8003436:	4618      	mov	r0, r3
 8003438:	f001 fdf0 	bl	800501c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	460b      	mov	r3, r1
 800345c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800345e:	7afb      	ldrb	r3, [r7, #11]
 8003460:	f003 020f 	and.w	r2, r3, #15
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4413      	add	r3, r2
 8003474:	3304      	adds	r3, #4
 8003476:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2200      	movs	r2, #0
 8003488:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2200      	movs	r2, #0
 800348e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003490:	7afb      	ldrb	r3, [r7, #11]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	b2da      	uxtb	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d102      	bne.n	80034aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034aa:	7afb      	ldrb	r3, [r7, #11]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	6979      	ldr	r1, [r7, #20]
 80034c2:	f002 f8cf 	bl	8005664 <USB_EP0StartXfer>
 80034c6:	e008      	b.n	80034da <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	6979      	ldr	r1, [r7, #20]
 80034d6:	f001 fe7d 	bl	80051d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	f003 020f 	and.w	r2, r3, #15
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003506:	681b      	ldr	r3, [r3, #0]
}
 8003508:	4618      	mov	r0, r3
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	460b      	mov	r3, r1
 8003522:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003524:	7afb      	ldrb	r3, [r7, #11]
 8003526:	f003 020f 	and.w	r2, r3, #15
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	3338      	adds	r3, #56	; 0x38
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	3304      	adds	r3, #4
 800353a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2200      	movs	r2, #0
 800354c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2201      	movs	r2, #1
 8003552:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003554:	7afb      	ldrb	r3, [r7, #11]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	b2da      	uxtb	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d102      	bne.n	800356e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800356e:	7afb      	ldrb	r3, [r7, #11]
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	6979      	ldr	r1, [r7, #20]
 8003586:	f002 f86d 	bl	8005664 <USB_EP0StartXfer>
 800358a:	e008      	b.n	800359e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	6979      	ldr	r1, [r7, #20]
 800359a:	f001 fe1b 	bl	80051d4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	f003 020f 	and.w	r2, r3, #15
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d901      	bls.n	80035c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e050      	b.n	8003668 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	da0f      	bge.n	80035ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ce:	78fb      	ldrb	r3, [r7, #3]
 80035d0:	f003 020f 	and.w	r2, r3, #15
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	3338      	adds	r3, #56	; 0x38
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	3304      	adds	r3, #4
 80035e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	705a      	strb	r2, [r3, #1]
 80035ec:	e00d      	b.n	800360a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	4413      	add	r3, r2
 8003600:	3304      	adds	r3, #4
 8003602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	b2da      	uxtb	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_PCD_EP_SetStall+0x82>
 8003626:	2302      	movs	r3, #2
 8003628:	e01e      	b.n	8003668 <HAL_PCD_EP_SetStall+0xc0>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68f9      	ldr	r1, [r7, #12]
 8003638:	4618      	mov	r0, r3
 800363a:	f002 faab 	bl	8005b94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	b2d9      	uxtb	r1, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003658:	461a      	mov	r2, r3
 800365a:	f002 fc9b 	bl	8005f94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	f003 020f 	and.w	r2, r3, #15
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	429a      	cmp	r2, r3
 8003688:	d901      	bls.n	800368e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e042      	b.n	8003714 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800368e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003692:	2b00      	cmp	r3, #0
 8003694:	da0f      	bge.n	80036b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	f003 020f 	and.w	r2, r3, #15
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	3338      	adds	r3, #56	; 0x38
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	3304      	adds	r3, #4
 80036ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	705a      	strb	r2, [r3, #1]
 80036b4:	e00f      	b.n	80036d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	f003 020f 	and.w	r2, r3, #15
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	4413      	add	r3, r2
 80036cc:	3304      	adds	r3, #4
 80036ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_PCD_EP_ClrStall+0x86>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e00e      	b.n	8003714 <HAL_PCD_EP_ClrStall+0xa4>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68f9      	ldr	r1, [r7, #12]
 8003704:	4618      	mov	r0, r3
 8003706:	f002 fab3 	bl	8005c70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800372c:	2b00      	cmp	r3, #0
 800372e:	da0c      	bge.n	800374a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	f003 020f 	and.w	r2, r3, #15
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	3338      	adds	r3, #56	; 0x38
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	4413      	add	r3, r2
 8003744:	3304      	adds	r3, #4
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e00c      	b.n	8003764 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	f003 020f 	and.w	r2, r3, #15
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68f9      	ldr	r1, [r7, #12]
 800376a:	4618      	mov	r0, r3
 800376c:	f002 f8d2 	bl	8005914 <USB_EPStopXfer>
 8003770:	4603      	mov	r3, r0
 8003772:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003774:	7afb      	ldrb	r3, [r7, #11]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b08a      	sub	sp, #40	; 0x28
 8003782:	af02      	add	r7, sp, #8
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	3338      	adds	r3, #56	; 0x38
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	3304      	adds	r3, #4
 80037a4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d901      	bls.n	80037b6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e06c      	b.n	8003890 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d902      	bls.n	80037d2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3303      	adds	r3, #3
 80037d6:	089b      	lsrs	r3, r3, #2
 80037d8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037da:	e02b      	b.n	8003834 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	699a      	ldr	r2, [r3, #24]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d902      	bls.n	80037f8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	3303      	adds	r3, #3
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6919      	ldr	r1, [r3, #16]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003810:	b2db      	uxtb	r3, r3
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	4603      	mov	r3, r0
 8003816:	6978      	ldr	r0, [r7, #20]
 8003818:	f002 f926 	bl	8005a68 <USB_WritePacket>

    ep->xfer_buff  += len;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	441a      	add	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a1a      	ldr	r2, [r3, #32]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	441a      	add	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	429a      	cmp	r2, r3
 8003848:	d809      	bhi.n	800385e <PCD_WriteEmptyTxFifo+0xe0>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1a      	ldr	r2, [r3, #32]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003852:	429a      	cmp	r2, r3
 8003854:	d203      	bcs.n	800385e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1be      	bne.n	80037dc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	429a      	cmp	r2, r3
 8003868:	d811      	bhi.n	800388e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	2201      	movs	r2, #1
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	43db      	mvns	r3, r3
 8003884:	6939      	ldr	r1, [r7, #16]
 8003886:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800388a:	4013      	ands	r3, r2
 800388c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	333c      	adds	r3, #60	; 0x3c
 80038b0:	3304      	adds	r3, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d17b      	bne.n	80039c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d015      	beq.n	8003904 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	4a61      	ldr	r2, [pc, #388]	; (8003a60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	f240 80b9 	bls.w	8003a54 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80b3 	beq.w	8003a54 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fa:	461a      	mov	r2, r3
 80038fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003900:	6093      	str	r3, [r2, #8]
 8003902:	e0a7      	b.n	8003a54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391a:	461a      	mov	r2, r3
 800391c:	2320      	movs	r3, #32
 800391e:	6093      	str	r3, [r2, #8]
 8003920:	e098      	b.n	8003a54 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003928:	2b00      	cmp	r3, #0
 800392a:	f040 8093 	bne.w	8003a54 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	4a4b      	ldr	r2, [pc, #300]	; (8003a60 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d90f      	bls.n	8003956 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394c:	461a      	mov	r2, r3
 800394e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003952:	6093      	str	r3, [r2, #8]
 8003954:	e07e      	b.n	8003a54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	3304      	adds	r3, #4
 800396a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	69da      	ldr	r2, [r3, #28]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	0159      	lsls	r1, r3, #5
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	440b      	add	r3, r1
 8003978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003982:	1ad2      	subs	r2, r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d114      	bne.n	80039b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039a0:	461a      	mov	r2, r3
 80039a2:	2101      	movs	r1, #1
 80039a4:	f002 faf6 	bl	8005f94 <USB_EP0_OutStart>
 80039a8:	e006      	b.n	80039b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	441a      	add	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	4619      	mov	r1, r3
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f006 fad4 	bl	8009f6c <HAL_PCD_DataOutStageCallback>
 80039c4:	e046      	b.n	8003a54 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d124      	bne.n	8003a18 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e4:	461a      	mov	r2, r3
 80039e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ea:	6093      	str	r3, [r2, #8]
 80039ec:	e032      	b.n	8003a54 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a04:	461a      	mov	r2, r3
 8003a06:	2320      	movs	r3, #32
 8003a08:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f006 faab 	bl	8009f6c <HAL_PCD_DataOutStageCallback>
 8003a16:	e01d      	b.n	8003a54 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d114      	bne.n	8003a48 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	4613      	mov	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d108      	bne.n	8003a48 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a40:	461a      	mov	r2, r3
 8003a42:	2100      	movs	r1, #0
 8003a44:	f002 faa6 	bl	8005f94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f006 fa8c 	bl	8009f6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3720      	adds	r7, #32
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	4f54300a 	.word	0x4f54300a
 8003a64:	4f54310a 	.word	0x4f54310a

08003a68 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	333c      	adds	r3, #60	; 0x3c
 8003a80:	3304      	adds	r3, #4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a15      	ldr	r2, [pc, #84]	; (8003af0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d90e      	bls.n	8003abc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f006 fa43 	bl	8009f48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d90c      	bls.n	8003ae4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d108      	bne.n	8003ae4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003adc:	461a      	mov	r2, r3
 8003ade:	2101      	movs	r1, #1
 8003ae0:	f002 fa58 	bl	8005f94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	4f54300a 	.word	0x4f54300a

08003af4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	70fb      	strb	r3, [r7, #3]
 8003b00:	4613      	mov	r3, r2
 8003b02:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d107      	bne.n	8003b22 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b12:	883b      	ldrh	r3, [r7, #0]
 8003b14:	0419      	lsls	r1, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b20:	e028      	b.n	8003b74 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	0c1b      	lsrs	r3, r3, #16
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b30:	2300      	movs	r3, #0
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	e00d      	b.n	8003b52 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	3340      	adds	r3, #64	; 0x40
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	0c1b      	lsrs	r3, r3, #16
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	4413      	add	r3, r2
 8003b4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
 8003b52:	7bfa      	ldrb	r2, [r7, #15]
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d3ec      	bcc.n	8003b36 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b5c:	883b      	ldrh	r3, [r7, #0]
 8003b5e:	0418      	lsls	r0, r3, #16
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6819      	ldr	r1, [r3, #0]
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	4302      	orrs	r2, r0
 8003b6c:	3340      	adds	r3, #64	; 0x40
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	887a      	ldrh	r2, [r7, #2]
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e267      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d075      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bda:	4b88      	ldr	r3, [pc, #544]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 030c 	and.w	r3, r3, #12
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d00c      	beq.n	8003c00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be6:	4b85      	ldr	r3, [pc, #532]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d112      	bne.n	8003c18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bf2:	4b82      	ldr	r3, [pc, #520]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bfe:	d10b      	bne.n	8003c18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	4b7e      	ldr	r3, [pc, #504]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d05b      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x108>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d157      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e242      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c20:	d106      	bne.n	8003c30 <HAL_RCC_OscConfig+0x74>
 8003c22:	4b76      	ldr	r3, [pc, #472]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a75      	ldr	r2, [pc, #468]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	e01d      	b.n	8003c6c <HAL_RCC_OscConfig+0xb0>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCC_OscConfig+0x98>
 8003c3a:	4b70      	ldr	r3, [pc, #448]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a6f      	ldr	r2, [pc, #444]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	4b6d      	ldr	r3, [pc, #436]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a6c      	ldr	r2, [pc, #432]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	e00b      	b.n	8003c6c <HAL_RCC_OscConfig+0xb0>
 8003c54:	4b69      	ldr	r3, [pc, #420]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a68      	ldr	r2, [pc, #416]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4b66      	ldr	r3, [pc, #408]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a65      	ldr	r2, [pc, #404]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d013      	beq.n	8003c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fe f860 	bl	8001d38 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fe f85c 	bl	8001d38 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e207      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	4b5b      	ldr	r3, [pc, #364]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0xc0>
 8003c9a:	e014      	b.n	8003cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9c:	f7fe f84c 	bl	8001d38 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ca4:	f7fe f848 	bl	8001d38 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e1f3      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	4b51      	ldr	r3, [pc, #324]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1f0      	bne.n	8003ca4 <HAL_RCC_OscConfig+0xe8>
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d063      	beq.n	8003d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cd2:	4b4a      	ldr	r3, [pc, #296]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00b      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cde:	4b47      	ldr	r3, [pc, #284]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d11c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cea:	4b44      	ldr	r3, [pc, #272]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d116      	bne.n	8003d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf6:	4b41      	ldr	r3, [pc, #260]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_RCC_OscConfig+0x152>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d001      	beq.n	8003d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e1c7      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0e:	4b3b      	ldr	r3, [pc, #236]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4937      	ldr	r1, [pc, #220]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d22:	e03a      	b.n	8003d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d020      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d2c:	4b34      	ldr	r3, [pc, #208]	; (8003e00 <HAL_RCC_OscConfig+0x244>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d32:	f7fe f801 	bl	8001d38 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d3a:	f7fd fffd 	bl	8001d38 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e1a8      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4c:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d58:	4b28      	ldr	r3, [pc, #160]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4925      	ldr	r1, [pc, #148]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	600b      	str	r3, [r1, #0]
 8003d6c:	e015      	b.n	8003d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <HAL_RCC_OscConfig+0x244>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fd ffe0 	bl	8001d38 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d7c:	f7fd ffdc 	bl	8001d38 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e187      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8e:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d036      	beq.n	8003e14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d016      	beq.n	8003ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dae:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <HAL_RCC_OscConfig+0x248>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db4:	f7fd ffc0 	bl	8001d38 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dbc:	f7fd ffbc 	bl	8001d38 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e167      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_RCC_OscConfig+0x240>)
 8003dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0x200>
 8003dda:	e01b      	b.n	8003e14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ddc:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <HAL_RCC_OscConfig+0x248>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003de2:	f7fd ffa9 	bl	8001d38 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de8:	e00e      	b.n	8003e08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dea:	f7fd ffa5 	bl	8001d38 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d907      	bls.n	8003e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e150      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	42470000 	.word	0x42470000
 8003e04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	4b88      	ldr	r3, [pc, #544]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1ea      	bne.n	8003dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8097 	beq.w	8003f50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e22:	2300      	movs	r3, #0
 8003e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e26:	4b81      	ldr	r3, [pc, #516]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10f      	bne.n	8003e52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	4b7d      	ldr	r3, [pc, #500]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	4a7c      	ldr	r2, [pc, #496]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e40:	6413      	str	r3, [r2, #64]	; 0x40
 8003e42:	4b7a      	ldr	r3, [pc, #488]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e52:	4b77      	ldr	r3, [pc, #476]	; (8004030 <HAL_RCC_OscConfig+0x474>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d118      	bne.n	8003e90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e5e:	4b74      	ldr	r3, [pc, #464]	; (8004030 <HAL_RCC_OscConfig+0x474>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a73      	ldr	r2, [pc, #460]	; (8004030 <HAL_RCC_OscConfig+0x474>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6a:	f7fd ff65 	bl	8001d38 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e72:	f7fd ff61 	bl	8001d38 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e10c      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e84:	4b6a      	ldr	r3, [pc, #424]	; (8004030 <HAL_RCC_OscConfig+0x474>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d106      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x2ea>
 8003e98:	4b64      	ldr	r3, [pc, #400]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	4a63      	ldr	r2, [pc, #396]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea4:	e01c      	b.n	8003ee0 <HAL_RCC_OscConfig+0x324>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b05      	cmp	r3, #5
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x30c>
 8003eae:	4b5f      	ldr	r3, [pc, #380]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	4a5e      	ldr	r2, [pc, #376]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003eb4:	f043 0304 	orr.w	r3, r3, #4
 8003eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eba:	4b5c      	ldr	r3, [pc, #368]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a5b      	ldr	r2, [pc, #364]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCC_OscConfig+0x324>
 8003ec8:	4b58      	ldr	r3, [pc, #352]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4a57      	ldr	r2, [pc, #348]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed4:	4b55      	ldr	r3, [pc, #340]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a54      	ldr	r2, [pc, #336]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003eda:	f023 0304 	bic.w	r3, r3, #4
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d015      	beq.n	8003f14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee8:	f7fd ff26 	bl	8001d38 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fd ff22 	bl	8001d38 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e0cb      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f06:	4b49      	ldr	r3, [pc, #292]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0ee      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x334>
 8003f12:	e014      	b.n	8003f3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f14:	f7fd ff10 	bl	8001d38 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1c:	f7fd ff0c 	bl	8001d38 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e0b5      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f32:	4b3e      	ldr	r3, [pc, #248]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ee      	bne.n	8003f1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f3e:	7dfb      	ldrb	r3, [r7, #23]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d105      	bne.n	8003f50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f44:	4b39      	ldr	r3, [pc, #228]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	4a38      	ldr	r2, [pc, #224]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80a1 	beq.w	800409c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f5a:	4b34      	ldr	r3, [pc, #208]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d05c      	beq.n	8004020 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d141      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6e:	4b31      	ldr	r3, [pc, #196]	; (8004034 <HAL_RCC_OscConfig+0x478>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fd fee0 	bl	8001d38 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fd fedc 	bl	8001d38 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e087      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	4b27      	ldr	r3, [pc, #156]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69da      	ldr	r2, [r3, #28]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	019b      	lsls	r3, r3, #6
 8003faa:	431a      	orrs	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	041b      	lsls	r3, r3, #16
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	061b      	lsls	r3, r3, #24
 8003fbe:	491b      	ldr	r1, [pc, #108]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	; (8004034 <HAL_RCC_OscConfig+0x478>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fca:	f7fd feb5 	bl	8001d38 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd2:	f7fd feb1 	bl	8001d38 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e05c      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe4:	4b11      	ldr	r3, [pc, #68]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x416>
 8003ff0:	e054      	b.n	800409c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff2:	4b10      	ldr	r3, [pc, #64]	; (8004034 <HAL_RCC_OscConfig+0x478>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fe9e 	bl	8001d38 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004000:	f7fd fe9a 	bl	8001d38 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e045      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <HAL_RCC_OscConfig+0x470>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x444>
 800401e:	e03d      	b.n	800409c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d107      	bne.n	8004038 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e038      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
 800402c:	40023800 	.word	0x40023800
 8004030:	40007000 	.word	0x40007000
 8004034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <HAL_RCC_OscConfig+0x4ec>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d028      	beq.n	8004098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d121      	bne.n	8004098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d11a      	bne.n	8004098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004068:	4013      	ands	r3, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800406e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004070:	4293      	cmp	r3, r2
 8004072:	d111      	bne.n	8004098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	3b01      	subs	r3, #1
 8004082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d107      	bne.n	8004098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800

080040ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0cc      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c0:	4b68      	ldr	r3, [pc, #416]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d90c      	bls.n	80040e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ce:	4b65      	ldr	r3, [pc, #404]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040d6:	4b63      	ldr	r3, [pc, #396]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d001      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0b8      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d020      	beq.n	8004136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0304 	and.w	r3, r3, #4
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004100:	4b59      	ldr	r3, [pc, #356]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	4a58      	ldr	r2, [pc, #352]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800410a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004118:	4b53      	ldr	r3, [pc, #332]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a52      	ldr	r2, [pc, #328]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b50      	ldr	r3, [pc, #320]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	494d      	ldr	r1, [pc, #308]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d044      	beq.n	80041cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d107      	bne.n	800415a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414a:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d119      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e07f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d003      	beq.n	800416a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004166:	2b03      	cmp	r3, #3
 8004168:	d107      	bne.n	800417a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416a:	4b3f      	ldr	r3, [pc, #252]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d109      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e06f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417a:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e067      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800418a:	4b37      	ldr	r3, [pc, #220]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f023 0203 	bic.w	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	4934      	ldr	r1, [pc, #208]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	4313      	orrs	r3, r2
 800419a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800419c:	f7fd fdcc 	bl	8001d38 <HAL_GetTick>
 80041a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041a4:	f7fd fdc8 	bl	8001d38 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e04f      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	4b2b      	ldr	r3, [pc, #172]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 020c 	and.w	r2, r3, #12
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d1eb      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041cc:	4b25      	ldr	r3, [pc, #148]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d20c      	bcs.n	80041f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b22      	ldr	r3, [pc, #136]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b20      	ldr	r3, [pc, #128]	; (8004264 <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e032      	b.n	800425a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d008      	beq.n	8004212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	4916      	ldr	r1, [pc, #88]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800421e:	4b12      	ldr	r3, [pc, #72]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	490e      	ldr	r1, [pc, #56]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	4313      	orrs	r3, r2
 8004230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004232:	f000 f821 	bl	8004278 <HAL_RCC_GetSysClockFreq>
 8004236:	4602      	mov	r2, r0
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	490a      	ldr	r1, [pc, #40]	; (800426c <HAL_RCC_ClockConfig+0x1c0>)
 8004244:	5ccb      	ldrb	r3, [r1, r3]
 8004246:	fa22 f303 	lsr.w	r3, r2, r3
 800424a:	4a09      	ldr	r2, [pc, #36]	; (8004270 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800424e:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCC_ClockConfig+0x1c8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd fd2c 	bl	8001cb0 <HAL_InitTick>

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40023c00 	.word	0x40023c00
 8004268:	40023800 	.word	0x40023800
 800426c:	0800a5f0 	.word	0x0800a5f0
 8004270:	20000180 	.word	0x20000180
 8004274:	200001cc 	.word	0x200001cc

08004278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800427c:	b094      	sub	sp, #80	; 0x50
 800427e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	647b      	str	r3, [r7, #68]	; 0x44
 8004284:	2300      	movs	r3, #0
 8004286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004288:	2300      	movs	r3, #0
 800428a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004290:	4b79      	ldr	r3, [pc, #484]	; (8004478 <HAL_RCC_GetSysClockFreq+0x200>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b08      	cmp	r3, #8
 800429a:	d00d      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x40>
 800429c:	2b08      	cmp	r3, #8
 800429e:	f200 80e1 	bhi.w	8004464 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x34>
 80042a6:	2b04      	cmp	r3, #4
 80042a8:	d003      	beq.n	80042b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042aa:	e0db      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ac:	4b73      	ldr	r3, [pc, #460]	; (800447c <HAL_RCC_GetSysClockFreq+0x204>)
 80042ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042b0:	e0db      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042b2:	4b73      	ldr	r3, [pc, #460]	; (8004480 <HAL_RCC_GetSysClockFreq+0x208>)
 80042b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042b6:	e0d8      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b8:	4b6f      	ldr	r3, [pc, #444]	; (8004478 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042c2:	4b6d      	ldr	r3, [pc, #436]	; (8004478 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d063      	beq.n	8004396 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ce:	4b6a      	ldr	r3, [pc, #424]	; (8004478 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	099b      	lsrs	r3, r3, #6
 80042d4:	2200      	movs	r2, #0
 80042d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e0:	633b      	str	r3, [r7, #48]	; 0x30
 80042e2:	2300      	movs	r3, #0
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34
 80042e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042ea:	4622      	mov	r2, r4
 80042ec:	462b      	mov	r3, r5
 80042ee:	f04f 0000 	mov.w	r0, #0
 80042f2:	f04f 0100 	mov.w	r1, #0
 80042f6:	0159      	lsls	r1, r3, #5
 80042f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042fc:	0150      	lsls	r0, r2, #5
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4621      	mov	r1, r4
 8004304:	1a51      	subs	r1, r2, r1
 8004306:	6139      	str	r1, [r7, #16]
 8004308:	4629      	mov	r1, r5
 800430a:	eb63 0301 	sbc.w	r3, r3, r1
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800431c:	4659      	mov	r1, fp
 800431e:	018b      	lsls	r3, r1, #6
 8004320:	4651      	mov	r1, sl
 8004322:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004326:	4651      	mov	r1, sl
 8004328:	018a      	lsls	r2, r1, #6
 800432a:	4651      	mov	r1, sl
 800432c:	ebb2 0801 	subs.w	r8, r2, r1
 8004330:	4659      	mov	r1, fp
 8004332:	eb63 0901 	sbc.w	r9, r3, r1
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800434a:	4690      	mov	r8, r2
 800434c:	4699      	mov	r9, r3
 800434e:	4623      	mov	r3, r4
 8004350:	eb18 0303 	adds.w	r3, r8, r3
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	462b      	mov	r3, r5
 8004358:	eb49 0303 	adc.w	r3, r9, r3
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800436a:	4629      	mov	r1, r5
 800436c:	024b      	lsls	r3, r1, #9
 800436e:	4621      	mov	r1, r4
 8004370:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004374:	4621      	mov	r1, r4
 8004376:	024a      	lsls	r2, r1, #9
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437e:	2200      	movs	r2, #0
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
 8004382:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004384:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004388:	f7fb ff3a 	bl	8000200 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	4613      	mov	r3, r2
 8004392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004394:	e058      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004396:	4b38      	ldr	r3, [pc, #224]	; (8004478 <HAL_RCC_GetSysClockFreq+0x200>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	099b      	lsrs	r3, r3, #6
 800439c:	2200      	movs	r2, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	4611      	mov	r1, r2
 80043a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043a6:	623b      	str	r3, [r7, #32]
 80043a8:	2300      	movs	r3, #0
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
 80043ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043b0:	4642      	mov	r2, r8
 80043b2:	464b      	mov	r3, r9
 80043b4:	f04f 0000 	mov.w	r0, #0
 80043b8:	f04f 0100 	mov.w	r1, #0
 80043bc:	0159      	lsls	r1, r3, #5
 80043be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c2:	0150      	lsls	r0, r2, #5
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4641      	mov	r1, r8
 80043ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ce:	4649      	mov	r1, r9
 80043d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043e8:	ebb2 040a 	subs.w	r4, r2, sl
 80043ec:	eb63 050b 	sbc.w	r5, r3, fp
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	00eb      	lsls	r3, r5, #3
 80043fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043fe:	00e2      	lsls	r2, r4, #3
 8004400:	4614      	mov	r4, r2
 8004402:	461d      	mov	r5, r3
 8004404:	4643      	mov	r3, r8
 8004406:	18e3      	adds	r3, r4, r3
 8004408:	603b      	str	r3, [r7, #0]
 800440a:	464b      	mov	r3, r9
 800440c:	eb45 0303 	adc.w	r3, r5, r3
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800441e:	4629      	mov	r1, r5
 8004420:	028b      	lsls	r3, r1, #10
 8004422:	4621      	mov	r1, r4
 8004424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004428:	4621      	mov	r1, r4
 800442a:	028a      	lsls	r2, r1, #10
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004432:	2200      	movs	r2, #0
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	61fa      	str	r2, [r7, #28]
 8004438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800443c:	f7fb fee0 	bl	8000200 <__aeabi_uldivmod>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4613      	mov	r3, r2
 8004446:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_RCC_GetSysClockFreq+0x200>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	0c1b      	lsrs	r3, r3, #16
 800444e:	f003 0303 	and.w	r3, r3, #3
 8004452:	3301      	adds	r3, #1
 8004454:	005b      	lsls	r3, r3, #1
 8004456:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800445a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800445c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004460:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004462:	e002      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_GetSysClockFreq+0x204>)
 8004466:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800446a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800446c:	4618      	mov	r0, r3
 800446e:	3750      	adds	r7, #80	; 0x50
 8004470:	46bd      	mov	sp, r7
 8004472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004476:	bf00      	nop
 8004478:	40023800 	.word	0x40023800
 800447c:	00f42400 	.word	0x00f42400
 8004480:	007a1200 	.word	0x007a1200

08004484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_RCC_GetHCLKFreq+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000180 	.word	0x20000180

0800449c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10b      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d105      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d075      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044d0:	4b91      	ldr	r3, [pc, #580]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044d6:	f7fd fc2f 	bl	8001d38 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044de:	f7fd fc2b 	bl	8001d38 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e189      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044f0:	4b8a      	ldr	r3, [pc, #552]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f0      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	2b00      	cmp	r3, #0
 8004506:	d009      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	019a      	lsls	r2, r3, #6
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	071b      	lsls	r3, r3, #28
 8004514:	4981      	ldr	r1, [pc, #516]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01f      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004528:	4b7c      	ldr	r3, [pc, #496]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800452a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800452e:	0f1b      	lsrs	r3, r3, #28
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	019a      	lsls	r2, r3, #6
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	431a      	orrs	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	071b      	lsls	r3, r3, #28
 8004548:	4974      	ldr	r1, [pc, #464]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004550:	4b72      	ldr	r3, [pc, #456]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004556:	f023 021f 	bic.w	r2, r3, #31
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	3b01      	subs	r3, #1
 8004560:	496e      	ldr	r1, [pc, #440]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004562:	4313      	orrs	r3, r2
 8004564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00d      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	019a      	lsls	r2, r3, #6
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	061b      	lsls	r3, r3, #24
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	071b      	lsls	r3, r3, #28
 8004588:	4964      	ldr	r1, [pc, #400]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004590:	4b61      	ldr	r3, [pc, #388]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004592:	2201      	movs	r2, #1
 8004594:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004596:	f7fd fbcf 	bl	8001d38 <HAL_GetTick>
 800459a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800459e:	f7fd fbcb 	bl	8001d38 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e129      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045b0:	4b5a      	ldr	r3, [pc, #360]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f0      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d079      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80045d4:	4b52      	ldr	r3, [pc, #328]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045da:	f7fd fbad 	bl	8001d38 <HAL_GetTick>
 80045de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80045e2:	f7fd fba9 	bl	8001d38 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e107      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045f4:	4b49      	ldr	r3, [pc, #292]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004600:	d0ef      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d020      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800460e:	4b43      	ldr	r3, [pc, #268]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	0f1b      	lsrs	r3, r3, #28
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	019a      	lsls	r2, r3, #6
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	061b      	lsls	r3, r3, #24
 8004628:	431a      	orrs	r2, r3
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	071b      	lsls	r3, r3, #28
 800462e:	493b      	ldr	r1, [pc, #236]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004636:	4b39      	ldr	r3, [pc, #228]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	3b01      	subs	r3, #1
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	4934      	ldr	r1, [pc, #208]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d01e      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800465c:	4b2f      	ldr	r3, [pc, #188]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004662:	0e1b      	lsrs	r3, r3, #24
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	019a      	lsls	r2, r3, #6
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	061b      	lsls	r3, r3, #24
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	071b      	lsls	r3, r3, #28
 800467c:	4927      	ldr	r1, [pc, #156]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004684:	4b25      	ldr	r3, [pc, #148]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800468a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	4922      	ldr	r1, [pc, #136]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800469a:	4b21      	ldr	r3, [pc, #132]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046a0:	f7fd fb4a 	bl	8001d38 <HAL_GetTick>
 80046a4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80046a8:	f7fd fb46 	bl	8001d38 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e0a4      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046ba:	4b18      	ldr	r3, [pc, #96]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046c6:	d1ef      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 808b 	beq.w	80047ec <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	4b10      	ldr	r3, [pc, #64]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	4a0f      	ldr	r2, [pc, #60]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e4:	6413      	str	r3, [r2, #64]	; 0x40
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046f2:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a0b      	ldr	r2, [pc, #44]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80046f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046fe:	f7fd fb1b 	bl	8001d38 <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004704:	e010      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004706:	f7fd fb17 	bl	8001d38 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d909      	bls.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e075      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004718:	42470068 	.word	0x42470068
 800471c:	40023800 	.word	0x40023800
 8004720:	42470070 	.word	0x42470070
 8004724:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004728:	4b38      	ldr	r3, [pc, #224]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0e8      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004734:	4b36      	ldr	r3, [pc, #216]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d02f      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	429a      	cmp	r2, r3
 8004750:	d028      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004752:	4b2f      	ldr	r3, [pc, #188]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800475c:	4b2d      	ldr	r3, [pc, #180]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004762:	4b2c      	ldr	r3, [pc, #176]	; (8004814 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004768:	4a29      	ldr	r2, [pc, #164]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800476e:	4b28      	ldr	r3, [pc, #160]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b01      	cmp	r3, #1
 8004778:	d114      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800477a:	f7fd fadd 	bl	8001d38 <HAL_GetTick>
 800477e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004780:	e00a      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004782:	f7fd fad9 	bl	8001d38 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004790:	4293      	cmp	r3, r2
 8004792:	d901      	bls.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e035      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004798:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0ee      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047b0:	d10d      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x332>
 80047b2:	4b17      	ldr	r3, [pc, #92]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c6:	4912      	ldr	r1, [pc, #72]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	608b      	str	r3, [r1, #8]
 80047cc:	e005      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80047ce:	4b10      	ldr	r3, [pc, #64]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	4a0f      	ldr	r2, [pc, #60]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047d8:	6093      	str	r3, [r2, #8]
 80047da:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e6:	490a      	ldr	r1, [pc, #40]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d004      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004800:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40007000 	.word	0x40007000
 8004810:	40023800 	.word	0x40023800
 8004814:	42470e40 	.word	0x42470e40
 8004818:	424711e0 	.word	0x424711e0

0800481c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800481c:	b084      	sub	sp, #16
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	f107 001c 	add.w	r0, r7, #28
 800482a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	2b01      	cmp	r3, #1
 8004832:	d122      	bne.n	800487a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800485c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485e:	2b01      	cmp	r3, #1
 8004860:	d105      	bne.n	800486e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f001 fbee 	bl	8006050 <USB_CoreReset>
 8004874:	4603      	mov	r3, r0
 8004876:	73fb      	strb	r3, [r7, #15]
 8004878:	e01a      	b.n	80048b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f001 fbe2 	bl	8006050 <USB_CoreReset>
 800488c:	4603      	mov	r3, r0
 800488e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	639a      	str	r2, [r3, #56]	; 0x38
 80048a2:	e005      	b.n	80048b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d10b      	bne.n	80048ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f043 0206 	orr.w	r2, r3, #6
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f043 0220 	orr.w	r2, r3, #32
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048da:	b004      	add	sp, #16
 80048dc:	4770      	bx	lr
	...

080048e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	4613      	mov	r3, r2
 80048ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d165      	bne.n	80049c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4a41      	ldr	r2, [pc, #260]	; (80049fc <USB_SetTurnaroundTime+0x11c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d906      	bls.n	800490a <USB_SetTurnaroundTime+0x2a>
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4a40      	ldr	r2, [pc, #256]	; (8004a00 <USB_SetTurnaroundTime+0x120>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d202      	bcs.n	800490a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004904:	230f      	movs	r3, #15
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e062      	b.n	80049d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4a3c      	ldr	r2, [pc, #240]	; (8004a00 <USB_SetTurnaroundTime+0x120>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d306      	bcc.n	8004920 <USB_SetTurnaroundTime+0x40>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	4a3b      	ldr	r2, [pc, #236]	; (8004a04 <USB_SetTurnaroundTime+0x124>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d202      	bcs.n	8004920 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800491a:	230e      	movs	r3, #14
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	e057      	b.n	80049d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4a38      	ldr	r2, [pc, #224]	; (8004a04 <USB_SetTurnaroundTime+0x124>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d306      	bcc.n	8004936 <USB_SetTurnaroundTime+0x56>
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4a37      	ldr	r2, [pc, #220]	; (8004a08 <USB_SetTurnaroundTime+0x128>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d202      	bcs.n	8004936 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004930:	230d      	movs	r3, #13
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	e04c      	b.n	80049d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4a33      	ldr	r2, [pc, #204]	; (8004a08 <USB_SetTurnaroundTime+0x128>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d306      	bcc.n	800494c <USB_SetTurnaroundTime+0x6c>
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4a32      	ldr	r2, [pc, #200]	; (8004a0c <USB_SetTurnaroundTime+0x12c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d802      	bhi.n	800494c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004946:	230c      	movs	r3, #12
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	e041      	b.n	80049d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4a2f      	ldr	r2, [pc, #188]	; (8004a0c <USB_SetTurnaroundTime+0x12c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d906      	bls.n	8004962 <USB_SetTurnaroundTime+0x82>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4a2e      	ldr	r2, [pc, #184]	; (8004a10 <USB_SetTurnaroundTime+0x130>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d802      	bhi.n	8004962 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800495c:	230b      	movs	r3, #11
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	e036      	b.n	80049d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4a2a      	ldr	r2, [pc, #168]	; (8004a10 <USB_SetTurnaroundTime+0x130>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d906      	bls.n	8004978 <USB_SetTurnaroundTime+0x98>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4a29      	ldr	r2, [pc, #164]	; (8004a14 <USB_SetTurnaroundTime+0x134>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d802      	bhi.n	8004978 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004972:	230a      	movs	r3, #10
 8004974:	617b      	str	r3, [r7, #20]
 8004976:	e02b      	b.n	80049d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4a26      	ldr	r2, [pc, #152]	; (8004a14 <USB_SetTurnaroundTime+0x134>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d906      	bls.n	800498e <USB_SetTurnaroundTime+0xae>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4a25      	ldr	r2, [pc, #148]	; (8004a18 <USB_SetTurnaroundTime+0x138>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d202      	bcs.n	800498e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004988:	2309      	movs	r3, #9
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	e020      	b.n	80049d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4a21      	ldr	r2, [pc, #132]	; (8004a18 <USB_SetTurnaroundTime+0x138>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d306      	bcc.n	80049a4 <USB_SetTurnaroundTime+0xc4>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4a20      	ldr	r2, [pc, #128]	; (8004a1c <USB_SetTurnaroundTime+0x13c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d802      	bhi.n	80049a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800499e:	2308      	movs	r3, #8
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e015      	b.n	80049d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <USB_SetTurnaroundTime+0x13c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d906      	bls.n	80049ba <USB_SetTurnaroundTime+0xda>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <USB_SetTurnaroundTime+0x140>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d202      	bcs.n	80049ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80049b4:	2307      	movs	r3, #7
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	e00a      	b.n	80049d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80049ba:	2306      	movs	r3, #6
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	e007      	b.n	80049d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80049c0:	79fb      	ldrb	r3, [r7, #7]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d102      	bne.n	80049cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80049c6:	2309      	movs	r3, #9
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	e001      	b.n	80049d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80049cc:	2309      	movs	r3, #9
 80049ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	029b      	lsls	r3, r3, #10
 80049e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	00d8acbf 	.word	0x00d8acbf
 8004a00:	00e4e1c0 	.word	0x00e4e1c0
 8004a04:	00f42400 	.word	0x00f42400
 8004a08:	01067380 	.word	0x01067380
 8004a0c:	011a499f 	.word	0x011a499f
 8004a10:	01312cff 	.word	0x01312cff
 8004a14:	014ca43f 	.word	0x014ca43f
 8004a18:	016e3600 	.word	0x016e3600
 8004a1c:	01a6ab1f 	.word	0x01a6ab1f
 8004a20:	01e84800 	.word	0x01e84800

08004a24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f043 0201 	orr.w	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f023 0201 	bic.w	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d115      	bne.n	8004ab6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a96:	2001      	movs	r0, #1
 8004a98:	f7fd f95a 	bl	8001d50 <HAL_Delay>
      ms++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f001 fa45 	bl	8005f32 <USB_GetMode>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d01e      	beq.n	8004aec <USB_SetCurrentMode+0x84>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b31      	cmp	r3, #49	; 0x31
 8004ab2:	d9f0      	bls.n	8004a96 <USB_SetCurrentMode+0x2e>
 8004ab4:	e01a      	b.n	8004aec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d115      	bne.n	8004ae8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ac8:	2001      	movs	r0, #1
 8004aca:	f7fd f941 	bl	8001d50 <HAL_Delay>
      ms++;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f001 fa2c 	bl	8005f32 <USB_GetMode>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <USB_SetCurrentMode+0x84>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b31      	cmp	r3, #49	; 0x31
 8004ae4:	d9f0      	bls.n	8004ac8 <USB_SetCurrentMode+0x60>
 8004ae6:	e001      	b.n	8004aec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e005      	b.n	8004af8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b32      	cmp	r3, #50	; 0x32
 8004af0:	d101      	bne.n	8004af6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b00:	b084      	sub	sp, #16
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b086      	sub	sp, #24
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	e009      	b.n	8004b34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	3340      	adds	r3, #64	; 0x40
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	3301      	adds	r3, #1
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b0e      	cmp	r3, #14
 8004b38:	d9f2      	bls.n	8004b20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d11c      	bne.n	8004b7a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b4e:	f043 0302 	orr.w	r3, r3, #2
 8004b52:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	639a      	str	r2, [r3, #56]	; 0x38
 8004b78:	e00b      	b.n	8004b92 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b98:	461a      	mov	r2, r3
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bac:	461a      	mov	r2, r3
 8004bae:	680b      	ldr	r3, [r1, #0]
 8004bb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d10c      	bne.n	8004bd2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d104      	bne.n	8004bc8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f965 	bl	8004e90 <USB_SetDevSpeed>
 8004bc6:	e008      	b.n	8004bda <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bc8:	2101      	movs	r1, #1
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f960 	bl	8004e90 <USB_SetDevSpeed>
 8004bd0:	e003      	b.n	8004bda <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bd2:	2103      	movs	r1, #3
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f95b 	bl	8004e90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bda:	2110      	movs	r1, #16
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f8f3 	bl	8004dc8 <USB_FlushTxFifo>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f91f 	bl	8004e30 <USB_FlushRxFifo>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c02:	461a      	mov	r2, r3
 8004c04:	2300      	movs	r3, #0
 8004c06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0e:	461a      	mov	r2, r3
 8004c10:	2300      	movs	r3, #0
 8004c12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	e043      	b.n	8004cae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c3c:	d118      	bne.n	8004c70 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c50:	461a      	mov	r2, r3
 8004c52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	e013      	b.n	8004c82 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	461a      	mov	r2, r3
 8004c68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e008      	b.n	8004c82 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2300      	movs	r3, #0
 8004c80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2300      	movs	r3, #0
 8004c92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	015a      	lsls	r2, r3, #5
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ca6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	3301      	adds	r3, #1
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d3b7      	bcc.n	8004c26 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	e043      	b.n	8004d44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd2:	d118      	bne.n	8004d06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10a      	bne.n	8004cf0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e013      	b.n	8004d18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	e008      	b.n	8004d18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d12:	461a      	mov	r2, r3
 8004d14:	2300      	movs	r3, #0
 8004d16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d24:	461a      	mov	r2, r3
 8004d26:	2300      	movs	r3, #0
 8004d28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d36:	461a      	mov	r2, r3
 8004d38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	3301      	adds	r3, #1
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d3b7      	bcc.n	8004cbc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d105      	bne.n	8004d80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	f043 0210 	orr.w	r2, r3, #16
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <USB_DevInit+0x2c4>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f043 0208 	orr.w	r2, r3, #8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d107      	bne.n	8004db4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dac:	f043 0304 	orr.w	r3, r3, #4
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dc0:	b004      	add	sp, #16
 8004dc2:	4770      	bx	lr
 8004dc4:	803c3800 	.word	0x803c3800

08004dc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a13      	ldr	r2, [pc, #76]	; (8004e2c <USB_FlushTxFifo+0x64>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e01b      	b.n	8004e20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	daf2      	bge.n	8004dd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	019b      	lsls	r3, r3, #6
 8004df8:	f043 0220 	orr.w	r2, r3, #32
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	3301      	adds	r3, #1
 8004e04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <USB_FlushTxFifo+0x64>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d901      	bls.n	8004e12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e006      	b.n	8004e20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d0f0      	beq.n	8004e00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	00030d40 	.word	0x00030d40

08004e30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4a11      	ldr	r2, [pc, #68]	; (8004e8c <USB_FlushRxFifo+0x5c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e018      	b.n	8004e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	daf2      	bge.n	8004e3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2210      	movs	r2, #16
 8004e5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	3301      	adds	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <USB_FlushRxFifo+0x5c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e006      	b.n	8004e80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2b10      	cmp	r3, #16
 8004e7c:	d0f0      	beq.n	8004e60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	00030d40 	.word	0x00030d40

08004e90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	68f9      	ldr	r1, [r7, #12]
 8004eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b087      	sub	sp, #28
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0306 	and.w	r3, r3, #6
 8004eda:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	75fb      	strb	r3, [r7, #23]
 8004ee6:	e00a      	b.n	8004efe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d002      	beq.n	8004ef4 <USB_GetDevSpeed+0x32>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	d102      	bne.n	8004efa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	75fb      	strb	r3, [r7, #23]
 8004ef8:	e001      	b.n	8004efe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004efa:	230f      	movs	r3, #15
 8004efc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	785b      	ldrb	r3, [r3, #1]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d13a      	bne.n	8004f9e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	2101      	movs	r1, #1
 8004f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	68f9      	ldr	r1, [r7, #12]
 8004f42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f46:	4313      	orrs	r3, r2
 8004f48:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d155      	bne.n	800500c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	791b      	ldrb	r3, [r3, #4]
 8004f7a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f7c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	059b      	lsls	r3, r3, #22
 8004f82:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f84:	4313      	orrs	r3, r2
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	e036      	b.n	800500c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa4:	69da      	ldr	r2, [r3, #28]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	2101      	movs	r1, #1
 8004fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	68f9      	ldr	r1, [r7, #12]
 8004fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d11a      	bne.n	800500c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	791b      	ldrb	r3, [r3, #4]
 8004ff0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800500a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	785b      	ldrb	r3, [r3, #1]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d161      	bne.n	80050fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800504a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800504e:	d11f      	bne.n	8005090 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	0151      	lsls	r1, r2, #5
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	440a      	add	r2, r1
 8005066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800506e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	0151      	lsls	r1, r2, #5
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	440a      	add	r2, r1
 8005086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800508e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005096:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f003 030f 	and.w	r3, r3, #15
 80050a0:	2101      	movs	r1, #1
 80050a2:	fa01 f303 	lsl.w	r3, r1, r3
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	68f9      	ldr	r1, [r7, #12]
 80050ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050b0:	4013      	ands	r3, r2
 80050b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	2101      	movs	r1, #1
 80050c6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	68f9      	ldr	r1, [r7, #12]
 80050d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d4:	4013      	ands	r3, r2
 80050d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	0159      	lsls	r1, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	440b      	add	r3, r1
 80050ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f2:	4619      	mov	r1, r3
 80050f4:	4b35      	ldr	r3, [pc, #212]	; (80051cc <USB_DeactivateEndpoint+0x1b0>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]
 80050fa:	e060      	b.n	80051be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800510e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005112:	d11f      	bne.n	8005154 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	440a      	add	r2, r1
 800512a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800512e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005132:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	0151      	lsls	r1, r2, #5
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	440a      	add	r2, r1
 800514a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005152:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	f003 030f 	and.w	r3, r3, #15
 8005164:	2101      	movs	r1, #1
 8005166:	fa01 f303 	lsl.w	r3, r1, r3
 800516a:	041b      	lsls	r3, r3, #16
 800516c:	43db      	mvns	r3, r3
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005174:	4013      	ands	r3, r2
 8005176:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	2101      	movs	r1, #1
 800518a:	fa01 f303 	lsl.w	r3, r1, r3
 800518e:	041b      	lsls	r3, r3, #16
 8005190:	43db      	mvns	r3, r3
 8005192:	68f9      	ldr	r1, [r7, #12]
 8005194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005198:	4013      	ands	r3, r2
 800519a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	0159      	lsls	r1, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	440b      	add	r3, r1
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	4619      	mov	r1, r3
 80051b8:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <USB_DeactivateEndpoint+0x1b4>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	ec337800 	.word	0xec337800
 80051d0:	eff37800 	.word	0xeff37800

080051d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af02      	add	r7, sp, #8
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	4613      	mov	r3, r2
 80051e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	f040 815c 	bne.w	80054ae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d132      	bne.n	8005264 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	0151      	lsls	r1, r2, #5
 8005210:	69fa      	ldr	r2, [r7, #28]
 8005212:	440a      	add	r2, r1
 8005214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005218:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800521c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005220:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	0151      	lsls	r1, r2, #5
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	440a      	add	r2, r1
 8005238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005240:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	69fa      	ldr	r2, [r7, #28]
 8005256:	440a      	add	r2, r1
 8005258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525c:	0cdb      	lsrs	r3, r3, #19
 800525e:	04db      	lsls	r3, r3, #19
 8005260:	6113      	str	r3, [r2, #16]
 8005262:	e074      	b.n	800534e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	440a      	add	r2, r1
 800527a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527e:	0cdb      	lsrs	r3, r3, #19
 8005280:	04db      	lsls	r3, r3, #19
 8005282:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	440a      	add	r2, r1
 800529a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800529e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	6999      	ldr	r1, [r3, #24]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	440b      	add	r3, r1
 80052c0:	1e59      	subs	r1, r3, #1
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80052ca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80052cc:	4b9d      	ldr	r3, [pc, #628]	; (8005544 <USB_EPStartXfer+0x370>)
 80052ce:	400b      	ands	r3, r1
 80052d0:	69b9      	ldr	r1, [r7, #24]
 80052d2:	0148      	lsls	r0, r1, #5
 80052d4:	69f9      	ldr	r1, [r7, #28]
 80052d6:	4401      	add	r1, r0
 80052d8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80052dc:	4313      	orrs	r3, r2
 80052de:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052f6:	69b9      	ldr	r1, [r7, #24]
 80052f8:	0148      	lsls	r0, r1, #5
 80052fa:	69f9      	ldr	r1, [r7, #28]
 80052fc:	4401      	add	r1, r0
 80052fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005302:	4313      	orrs	r3, r2
 8005304:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	791b      	ldrb	r3, [r3, #4]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d11f      	bne.n	800534e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005328:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800532c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	440a      	add	r2, r1
 8005344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005348:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800534c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d14b      	bne.n	80053ec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d009      	beq.n	8005370 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005368:	461a      	mov	r2, r3
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	791b      	ldrb	r3, [r3, #4]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d128      	bne.n	80053ca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d110      	bne.n	80053aa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	e00f      	b.n	80053ca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	0151      	lsls	r1, r2, #5
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	440a      	add	r2, r1
 80053c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	e133      	b.n	8005654 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	440a      	add	r2, r1
 8005402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800540a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	791b      	ldrb	r3, [r3, #4]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d015      	beq.n	8005440 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 811b 	beq.w	8005654 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	2101      	movs	r1, #1
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	69f9      	ldr	r1, [r7, #28]
 8005436:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800543a:	4313      	orrs	r3, r2
 800543c:	634b      	str	r3, [r1, #52]	; 0x34
 800543e:	e109      	b.n	8005654 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544c:	2b00      	cmp	r3, #0
 800544e:	d110      	bne.n	8005472 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	e00f      	b.n	8005492 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	0151      	lsls	r1, r2, #5
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	440a      	add	r2, r1
 8005488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005490:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	6919      	ldr	r1, [r3, #16]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	781a      	ldrb	r2, [r3, #0]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	b298      	uxth	r0, r3
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	4603      	mov	r3, r0
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 fade 	bl	8005a68 <USB_WritePacket>
 80054ac:	e0d2      	b.n	8005654 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c8:	0cdb      	lsrs	r3, r3, #19
 80054ca:	04db      	lsls	r3, r3, #19
 80054cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d126      	bne.n	8005548 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	691a      	ldr	r2, [r3, #16]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005510:	69b9      	ldr	r1, [r7, #24]
 8005512:	0148      	lsls	r0, r1, #5
 8005514:	69f9      	ldr	r1, [r7, #28]
 8005516:	4401      	add	r1, r0
 8005518:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800551c:	4313      	orrs	r3, r2
 800551e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	0151      	lsls	r1, r2, #5
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	440a      	add	r2, r1
 8005536:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800553e:	6113      	str	r3, [r2, #16]
 8005540:	e03a      	b.n	80055b8 <USB_EPStartXfer+0x3e4>
 8005542:	bf00      	nop
 8005544:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	699a      	ldr	r2, [r3, #24]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4413      	add	r3, r2
 8005552:	1e5a      	subs	r2, r3, #1
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	8afa      	ldrh	r2, [r7, #22]
 8005564:	fb03 f202 	mul.w	r2, r3, r2
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	8afb      	ldrh	r3, [r7, #22]
 800557c:	04d9      	lsls	r1, r3, #19
 800557e:	4b38      	ldr	r3, [pc, #224]	; (8005660 <USB_EPStartXfer+0x48c>)
 8005580:	400b      	ands	r3, r1
 8005582:	69b9      	ldr	r1, [r7, #24]
 8005584:	0148      	lsls	r0, r1, #5
 8005586:	69f9      	ldr	r1, [r7, #28]
 8005588:	4401      	add	r1, r0
 800558a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800558e:	4313      	orrs	r3, r2
 8005590:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a8:	69b9      	ldr	r1, [r7, #24]
 80055aa:	0148      	lsls	r0, r1, #5
 80055ac:	69f9      	ldr	r1, [r7, #28]
 80055ae:	4401      	add	r1, r0
 80055b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055b4:	4313      	orrs	r3, r2
 80055b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d10d      	bne.n	80055da <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	6919      	ldr	r1, [r3, #16]
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d6:	460a      	mov	r2, r1
 80055d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	791b      	ldrb	r3, [r3, #4]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d128      	bne.n	8005634 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d110      	bne.n	8005614 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	0151      	lsls	r1, r2, #5
 8005604:	69fa      	ldr	r2, [r7, #28]
 8005606:	440a      	add	r2, r1
 8005608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e00f      	b.n	8005634 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005632:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800564e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	1ff80000 	.word	0x1ff80000

08005664 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	4613      	mov	r3, r2
 8005670:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	2b01      	cmp	r3, #1
 8005682:	f040 80ce 	bne.w	8005822 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d132      	bne.n	80056f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	0151      	lsls	r1, r2, #5
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	440a      	add	r2, r1
 80056a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	0151      	lsls	r1, r2, #5
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	440a      	add	r2, r1
 80056c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	0151      	lsls	r1, r2, #5
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	440a      	add	r2, r1
 80056e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ec:	0cdb      	lsrs	r3, r3, #19
 80056ee:	04db      	lsls	r3, r3, #19
 80056f0:	6113      	str	r3, [r2, #16]
 80056f2:	e04e      	b.n	8005792 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	0151      	lsls	r1, r2, #5
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	440a      	add	r2, r1
 800570a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570e:	0cdb      	lsrs	r3, r3, #19
 8005710:	04db      	lsls	r3, r3, #19
 8005712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	0151      	lsls	r1, r2, #5
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	440a      	add	r2, r1
 800572a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800572e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005732:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005736:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	699a      	ldr	r2, [r3, #24]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	429a      	cmp	r2, r3
 8005742:	d903      	bls.n	800574c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	0151      	lsls	r1, r2, #5
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	440a      	add	r2, r1
 8005762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005766:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800576a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005782:	6939      	ldr	r1, [r7, #16]
 8005784:	0148      	lsls	r0, r1, #5
 8005786:	6979      	ldr	r1, [r7, #20]
 8005788:	4401      	add	r1, r0
 800578a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800578e:	4313      	orrs	r3, r2
 8005790:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d11e      	bne.n	80057d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d009      	beq.n	80057b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ac:	461a      	mov	r2, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	0151      	lsls	r1, r2, #5
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	440a      	add	r2, r1
 80057ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	e097      	b.n	8005906 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	693a      	ldr	r2, [r7, #16]
 80057e6:	0151      	lsls	r1, r2, #5
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	440a      	add	r2, r1
 80057ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8083 	beq.w	8005906 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	2101      	movs	r1, #1
 8005812:	fa01 f303 	lsl.w	r3, r1, r3
 8005816:	6979      	ldr	r1, [r7, #20]
 8005818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800581c:	4313      	orrs	r3, r2
 800581e:	634b      	str	r3, [r1, #52]	; 0x34
 8005820:	e071      	b.n	8005906 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	440a      	add	r2, r1
 8005838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800583c:	0cdb      	lsrs	r3, r3, #19
 800583e:	04db      	lsls	r3, r3, #19
 8005840:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	440a      	add	r2, r1
 8005858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800585c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005860:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005864:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	68da      	ldr	r2, [r3, #12]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	440a      	add	r2, r1
 8005894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800589c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b4:	6939      	ldr	r1, [r7, #16]
 80058b6:	0148      	lsls	r0, r1, #5
 80058b8:	6979      	ldr	r1, [r7, #20]
 80058ba:	4401      	add	r1, r0
 80058bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058c0:	4313      	orrs	r3, r2
 80058c2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d10d      	bne.n	80058e6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d009      	beq.n	80058e6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6919      	ldr	r1, [r3, #16]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e2:	460a      	mov	r2, r1
 80058e4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005900:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005904:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d14a      	bne.n	80059c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800594a:	f040 8086 	bne.w	8005a5a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	7812      	ldrb	r2, [r2, #0]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	440a      	add	r2, r1
 8005968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005970:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	7812      	ldrb	r2, [r2, #0]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005990:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005994:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	3301      	adds	r3, #1
 800599a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f242 7210 	movw	r2, #10000	; 0x2710
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d902      	bls.n	80059ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	75fb      	strb	r3, [r7, #23]
          break;
 80059aa:	e056      	b.n	8005a5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c4:	d0e7      	beq.n	8005996 <USB_EPStopXfer+0x82>
 80059c6:	e048      	b.n	8005a5a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e0:	d13b      	bne.n	8005a5a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	7812      	ldrb	r2, [r2, #0]
 80059f6:	0151      	lsls	r1, r2, #5
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	440a      	add	r2, r1
 80059fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a04:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	7812      	ldrb	r2, [r2, #0]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d902      	bls.n	8005a40 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005a3e:	e00c      	b.n	8005a5a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a58:	d0e7      	beq.n	8005a2a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b089      	sub	sp, #36	; 0x24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4611      	mov	r1, r2
 8005a74:	461a      	mov	r2, r3
 8005a76:	460b      	mov	r3, r1
 8005a78:	71fb      	strb	r3, [r7, #7]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d123      	bne.n	8005ad6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a8e:	88bb      	ldrh	r3, [r7, #4]
 8005a90:	3303      	adds	r3, #3
 8005a92:	089b      	lsrs	r3, r3, #2
 8005a94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a96:	2300      	movs	r3, #0
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	e018      	b.n	8005ace <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	031a      	lsls	r2, r3, #12
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	3301      	adds	r3, #1
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d3e2      	bcc.n	8005a9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3724      	adds	r7, #36	; 0x24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b08b      	sub	sp, #44	; 0x2c
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	089b      	lsrs	r3, r3, #2
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	623b      	str	r3, [r7, #32]
 8005b0e:	e014      	b.n	8005b3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	3301      	adds	r3, #1
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	3301      	adds	r3, #1
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	3301      	adds	r3, #1
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	3301      	adds	r3, #1
 8005b38:	623b      	str	r3, [r7, #32]
 8005b3a:	6a3a      	ldr	r2, [r7, #32]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d3e6      	bcc.n	8005b10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b42:	8bfb      	ldrh	r3, [r7, #30]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01e      	beq.n	8005b86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b52:	461a      	mov	r2, r3
 8005b54:	f107 0310 	add.w	r3, r7, #16
 8005b58:	6812      	ldr	r2, [r2, #0]
 8005b5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	701a      	strb	r2, [r3, #0]
      i++;
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	3301      	adds	r3, #1
 8005b72:	623b      	str	r3, [r7, #32]
      pDest++;
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	3301      	adds	r3, #1
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005b7a:	8bfb      	ldrh	r3, [r7, #30]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005b80:	8bfb      	ldrh	r3, [r7, #30]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1ea      	bne.n	8005b5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	372c      	adds	r7, #44	; 0x2c
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	785b      	ldrb	r3, [r3, #1]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d12c      	bne.n	8005c0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	db12      	blt.n	8005be8 <USB_EPSetStall+0x54>
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00f      	beq.n	8005be8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005be6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	e02b      	b.n	8005c62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	db12      	blt.n	8005c42 <USB_EPSetStall+0xae>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00f      	beq.n	8005c42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	0151      	lsls	r1, r2, #5
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	440a      	add	r2, r1
 8005c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	0151      	lsls	r1, r2, #5
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	440a      	add	r2, r1
 8005c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	785b      	ldrb	r3, [r3, #1]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d128      	bne.n	8005cde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ca6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005caa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	791b      	ldrb	r3, [r3, #4]
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d003      	beq.n	8005cbc <USB_EPClearStall+0x4c>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	791b      	ldrb	r3, [r3, #4]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d138      	bne.n	8005d2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	0151      	lsls	r1, r2, #5
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	440a      	add	r2, r1
 8005cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	e027      	b.n	8005d2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	791b      	ldrb	r3, [r3, #4]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d003      	beq.n	8005d0e <USB_EPClearStall+0x9e>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	791b      	ldrb	r3, [r3, #4]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d10f      	bne.n	8005d2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	011b      	lsls	r3, r3, #4
 8005d6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d70:	68f9      	ldr	r1, [r7, #12]
 8005d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d76:	4313      	orrs	r3, r2
 8005d78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db6:	f023 0302 	bic.w	r3, r3, #2
 8005dba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005de4:	f023 0303 	bic.w	r3, r3, #3
 8005de8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df8:	f043 0302 	orr.w	r3, r3, #2
 8005dfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4013      	ands	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e24:	68fb      	ldr	r3, [r7, #12]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b085      	sub	sp, #20
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	4013      	ands	r3, r2
 8005e54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	0c1b      	lsrs	r3, r3, #16
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	4013      	ands	r3, r2
 8005e88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	b29b      	uxth	r3, r3
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b085      	sub	sp, #20
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005eaa:	78fb      	ldrb	r3, [r7, #3]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ed6:	b480      	push	{r7}
 8005ed8:	b087      	sub	sp, #28
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005efa:	78fb      	ldrb	r3, [r7, #3]
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	fa22 f303 	lsr.w	r3, r2, r3
 8005f06:	01db      	lsls	r3, r3, #7
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4013      	ands	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f24:	68bb      	ldr	r3, [r7, #8]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b085      	sub	sp, #20
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f68:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f6c:	f023 0307 	bic.w	r3, r3, #7
 8005f70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	333c      	adds	r3, #60	; 0x3c
 8005faa:	3304      	adds	r3, #4
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4a26      	ldr	r2, [pc, #152]	; (800604c <USB_EP0_OutStart+0xb8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d90a      	bls.n	8005fce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc8:	d101      	bne.n	8005fce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e037      	b.n	800603e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ffc:	f043 0318 	orr.w	r3, r3, #24
 8006000:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006010:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006014:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006016:	7afb      	ldrb	r3, [r7, #11]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d10f      	bne.n	800603c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006022:	461a      	mov	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006036:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800603a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	4f54300a 	.word	0x4f54300a

08006050 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4a13      	ldr	r2, [pc, #76]	; (80060b4 <USB_CoreReset+0x64>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d901      	bls.n	800606e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e01b      	b.n	80060a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	daf2      	bge.n	800605c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	f043 0201 	orr.w	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3301      	adds	r3, #1
 800608a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4a09      	ldr	r2, [pc, #36]	; (80060b4 <USB_CoreReset+0x64>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d901      	bls.n	8006098 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e006      	b.n	80060a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d0f0      	beq.n	8006086 <USB_CoreReset+0x36>

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	00030d40 	.word	0x00030d40

080060b8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e03b      	b.n	8006142 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f833 	bl	800614a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006108:	f023 0107 	bic.w	r1, r3, #7
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006122:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	68d1      	ldr	r1, [r2, #12]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6812      	ldr	r2, [r2, #0]
 800612e:	430b      	orrs	r3, r1
 8006130:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b086      	sub	sp, #24
 8006162:	af02      	add	r7, sp, #8
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	607a      	str	r2, [r7, #4]
 800616a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_DMA2D_Start+0x1c>
 8006176:	2302      	movs	r3, #2
 8006178:	e018      	b.n	80061ac <HAL_DMA2D_Start+0x4e>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2202      	movs	r2, #2
 8006186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f989 	bl	80064ac <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0201 	orr.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d056      	beq.n	800627e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80061d0:	f7fb fdb2 	bl	8001d38 <HAL_GetTick>
 80061d4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80061d6:	e04b      	b.n	8006270 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d023      	beq.n	8006232 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f8:	f043 0202 	orr.w	r2, r3, #2
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	2b00      	cmp	r3, #0
 8006208:	d005      	beq.n	8006216 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620e:	f043 0201 	orr.w	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2221      	movs	r2, #33	; 0x21
 800621c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2204      	movs	r2, #4
 8006222:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e0a5      	b.n	800637e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d01a      	beq.n	8006270 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800623a:	f7fb fd7d 	bl	8001d38 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d302      	bcc.n	8006250 <HAL_DMA2D_PollForTransfer+0x9c>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10f      	bne.n	8006270 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006254:	f043 0220 	orr.w	r2, r3, #32
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2203      	movs	r2, #3
 8006260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e086      	b.n	800637e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0ac      	beq.n	80061d8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d061      	beq.n	8006364 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80062a0:	f7fb fd4a 	bl	8001d38 <HAL_GetTick>
 80062a4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80062a6:	e056      	b.n	8006356 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d02e      	beq.n	8006318 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f003 0308 	and.w	r3, r3, #8
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c8:	f043 0204 	orr.w	r2, r3, #4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062de:	f043 0202 	orr.w	r2, r3, #2
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f4:	f043 0201 	orr.w	r2, r3, #1
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2229      	movs	r2, #41	; 0x29
 8006302:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2204      	movs	r2, #4
 8006308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e032      	b.n	800637e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631e:	d01a      	beq.n	8006356 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006320:	f7fb fd0a 	bl	8001d38 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d302      	bcc.n	8006336 <HAL_DMA2D_PollForTransfer+0x182>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10f      	bne.n	8006356 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633a:	f043 0220 	orr.w	r2, r3, #32
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2203      	movs	r2, #3
 8006346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e013      	b.n	800637e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 0310 	and.w	r3, r3, #16
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0a1      	beq.n	80062a8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2212      	movs	r2, #18
 800636a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_DMA2D_ConfigLayer+0x20>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e079      	b.n	800649c <HAL_DMA2D_ConfigLayer+0x114>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	3318      	adds	r3, #24
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	4413      	add	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	041b      	lsls	r3, r3, #16
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80063d2:	4b35      	ldr	r3, [pc, #212]	; (80064a8 <HAL_DMA2D_ConfigLayer+0x120>)
 80063d4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	2b0a      	cmp	r3, #10
 80063dc:	d003      	beq.n	80063e6 <HAL_DMA2D_ConfigLayer+0x5e>
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b09      	cmp	r3, #9
 80063e4:	d107      	bne.n	80063f6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	e005      	b.n	8006402 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	061b      	lsls	r3, r3, #24
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d120      	bne.n	800644a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	43db      	mvns	r3, r3
 8006412:	ea02 0103 	and.w	r1, r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	430a      	orrs	r2, r1
 800641e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	6812      	ldr	r2, [r2, #0]
 8006428:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b0a      	cmp	r3, #10
 8006430:	d003      	beq.n	800643a <HAL_DMA2D_ConfigLayer+0xb2>
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b09      	cmp	r3, #9
 8006438:	d127      	bne.n	800648a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006446:	629a      	str	r2, [r3, #40]	; 0x28
 8006448:	e01f      	b.n	800648a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	43db      	mvns	r3, r3
 8006454:	ea02 0103 	and.w	r1, r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	430a      	orrs	r2, r1
 8006460:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	6812      	ldr	r2, [r2, #0]
 800646a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b0a      	cmp	r3, #10
 8006472:	d003      	beq.n	800647c <HAL_DMA2D_ConfigLayer+0xf4>
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2b09      	cmp	r3, #9
 800647a:	d106      	bne.n	800648a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	68da      	ldr	r2, [r3, #12]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006488:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	ff03000f 	.word	0xff03000f

080064ac <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b08b      	sub	sp, #44	; 0x2c
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	041a      	lsls	r2, r3, #16
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	431a      	orrs	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064e4:	d174      	bne.n	80065d0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80064ec:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064f4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80064fc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	b2db      	uxtb	r3, r3
 8006502:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d108      	bne.n	800651e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	431a      	orrs	r2, r3
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	4313      	orrs	r3, r2
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4313      	orrs	r3, r2
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
 800651c:	e053      	b.n	80065c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2b01      	cmp	r3, #1
 8006524:	d106      	bne.n	8006534 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006526:	69ba      	ldr	r2, [r7, #24]
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4313      	orrs	r3, r2
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	4313      	orrs	r3, r2
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
 8006532:	e048      	b.n	80065c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d111      	bne.n	8006560 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	0cdb      	lsrs	r3, r3, #19
 8006540:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	0a9b      	lsrs	r3, r3, #10
 8006546:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	08db      	lsrs	r3, r3, #3
 800654c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	02db      	lsls	r3, r3, #11
 8006556:	4313      	orrs	r3, r2
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
 800655e:	e032      	b.n	80065c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	2b03      	cmp	r3, #3
 8006566:	d117      	bne.n	8006598 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	0fdb      	lsrs	r3, r3, #31
 800656c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	0cdb      	lsrs	r3, r3, #19
 8006572:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	0adb      	lsrs	r3, r3, #11
 8006578:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	08db      	lsrs	r3, r3, #3
 800657e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	029b      	lsls	r3, r3, #10
 8006588:	431a      	orrs	r2, r3
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	03db      	lsls	r3, r3, #15
 800658e:	4313      	orrs	r3, r2
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	627b      	str	r3, [r7, #36]	; 0x24
 8006596:	e016      	b.n	80065c6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	0f1b      	lsrs	r3, r3, #28
 800659c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	0d1b      	lsrs	r3, r3, #20
 80065a2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	0b1b      	lsrs	r3, r3, #12
 80065a8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	091b      	lsrs	r3, r3, #4
 80065ae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	011a      	lsls	r2, r3, #4
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	431a      	orrs	r2, r3
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	031b      	lsls	r3, r3, #12
 80065be:	4313      	orrs	r3, r2
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80065ce:	e003      	b.n	80065d8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	60da      	str	r2, [r3, #12]
}
 80065d8:	bf00      	nop
 80065da:	372c      	adds	r7, #44	; 0x2c
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e0bf      	b.n	8006776 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f8ba 	bl	8006784 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006626:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6999      	ldr	r1, [r3, #24]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800663c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6899      	ldr	r1, [r3, #8]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4b4a      	ldr	r3, [pc, #296]	; (8006780 <HAL_LTDC_Init+0x19c>)
 8006658:	400b      	ands	r3, r1
 800665a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6899      	ldr	r1, [r3, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68d9      	ldr	r1, [r3, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	4b3e      	ldr	r3, [pc, #248]	; (8006780 <HAL_LTDC_Init+0x19c>)
 8006686:	400b      	ands	r3, r1
 8006688:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	041b      	lsls	r3, r3, #16
 8006690:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68d9      	ldr	r1, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1a      	ldr	r2, [r3, #32]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6919      	ldr	r1, [r3, #16]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b33      	ldr	r3, [pc, #204]	; (8006780 <HAL_LTDC_Init+0x19c>)
 80066b4:	400b      	ands	r3, r1
 80066b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6919      	ldr	r1, [r3, #16]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	431a      	orrs	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6959      	ldr	r1, [r3, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4b27      	ldr	r3, [pc, #156]	; (8006780 <HAL_LTDC_Init+0x19c>)
 80066e2:	400b      	ands	r3, r1
 80066e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	041b      	lsls	r3, r3, #16
 80066ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6959      	ldr	r1, [r3, #20]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006714:	041b      	lsls	r3, r3, #16
 8006716:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006726:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0206 	orr.w	r2, r2, #6
 8006752:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	699a      	ldr	r2, [r3, #24]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	f000f800 	.word	0xf000f800

08006784 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006798:	b5b0      	push	{r4, r5, r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_LTDC_ConfigLayer+0x1a>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e02c      	b.n	800680c <HAL_LTDC_ConfigLayer+0x74>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2202      	movs	r2, #2
 80067be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2134      	movs	r1, #52	; 0x34
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	4413      	add	r3, r2
 80067ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	4614      	mov	r4, r2
 80067d6:	461d      	mov	r5, r3
 80067d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f83b 	bl	8006868 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2201      	movs	r2, #1
 80067f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bdb0      	pop	{r4, r5, r7, pc}

08006814 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_LTDC_EnableDither+0x16>
 8006826:	2302      	movs	r3, #2
 8006828:	e016      	b.n	8006858 <HAL_LTDC_EnableDither+0x44>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2202      	movs	r2, #2
 8006836:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800683a:	4b0a      	ldr	r3, [pc, #40]	; (8006864 <HAL_LTDC_EnableDither+0x50>)
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	4a09      	ldr	r2, [pc, #36]	; (8006864 <HAL_LTDC_EnableDither+0x50>)
 8006840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006844:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	370c      	adds	r7, #12
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	40016800 	.word	0x40016800

08006868 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006868:	b480      	push	{r7}
 800686a:	b089      	sub	sp, #36	; 0x24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	0c1b      	lsrs	r3, r3, #16
 8006880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006884:	4413      	add	r3, r2
 8006886:	041b      	lsls	r3, r3, #16
 8006888:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	01db      	lsls	r3, r3, #7
 8006894:	4413      	add	r3, r2
 8006896:	3384      	adds	r3, #132	; 0x84
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	6812      	ldr	r2, [r2, #0]
 800689e:	4611      	mov	r1, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	01d2      	lsls	r2, r2, #7
 80068a4:	440a      	add	r2, r1
 80068a6:	3284      	adds	r2, #132	; 0x84
 80068a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80068ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	0c1b      	lsrs	r3, r3, #16
 80068ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80068be:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80068c0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4619      	mov	r1, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	01db      	lsls	r3, r3, #7
 80068cc:	440b      	add	r3, r1
 80068ce:	3384      	adds	r3, #132	; 0x84
 80068d0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80068d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068e6:	4413      	add	r3, r2
 80068e8:	041b      	lsls	r3, r3, #16
 80068ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	01db      	lsls	r3, r3, #7
 80068f6:	4413      	add	r3, r2
 80068f8:	3384      	adds	r3, #132	; 0x84
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	4611      	mov	r1, r2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	01d2      	lsls	r2, r2, #7
 8006906:	440a      	add	r2, r1
 8006908:	3284      	adds	r2, #132	; 0x84
 800690a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800690e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800691e:	4413      	add	r3, r2
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4619      	mov	r1, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	01db      	lsls	r3, r3, #7
 800692c:	440b      	add	r3, r1
 800692e:	3384      	adds	r3, #132	; 0x84
 8006930:	4619      	mov	r1, r3
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4313      	orrs	r3, r2
 8006936:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	01db      	lsls	r3, r3, #7
 8006942:	4413      	add	r3, r2
 8006944:	3384      	adds	r3, #132	; 0x84
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	4611      	mov	r1, r2
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	01d2      	lsls	r2, r2, #7
 8006952:	440a      	add	r2, r1
 8006954:	3284      	adds	r2, #132	; 0x84
 8006956:	f023 0307 	bic.w	r3, r3, #7
 800695a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	01db      	lsls	r3, r3, #7
 8006966:	4413      	add	r3, r2
 8006968:	3384      	adds	r3, #132	; 0x84
 800696a:	461a      	mov	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006982:	041b      	lsls	r3, r3, #16
 8006984:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	061b      	lsls	r3, r3, #24
 800698c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	01db      	lsls	r3, r3, #7
 8006998:	4413      	add	r3, r2
 800699a:	3384      	adds	r3, #132	; 0x84
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	01db      	lsls	r3, r3, #7
 80069a8:	4413      	add	r3, r2
 80069aa:	3384      	adds	r3, #132	; 0x84
 80069ac:	461a      	mov	r2, r3
 80069ae:	2300      	movs	r3, #0
 80069b0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069b8:	461a      	mov	r2, r3
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	431a      	orrs	r2, r3
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	431a      	orrs	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4619      	mov	r1, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	01db      	lsls	r3, r3, #7
 80069cc:	440b      	add	r3, r1
 80069ce:	3384      	adds	r3, #132	; 0x84
 80069d0:	4619      	mov	r1, r3
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	461a      	mov	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	01db      	lsls	r3, r3, #7
 80069e2:	4413      	add	r3, r2
 80069e4:	3384      	adds	r3, #132	; 0x84
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	6812      	ldr	r2, [r2, #0]
 80069ec:	4611      	mov	r1, r2
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	01d2      	lsls	r2, r2, #7
 80069f2:	440a      	add	r2, r1
 80069f4:	3284      	adds	r2, #132	; 0x84
 80069f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	01db      	lsls	r3, r3, #7
 8006a06:	4413      	add	r3, r2
 8006a08:	3384      	adds	r3, #132	; 0x84
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	461a      	mov	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	01db      	lsls	r3, r3, #7
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3384      	adds	r3, #132	; 0x84
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	4611      	mov	r1, r2
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	01d2      	lsls	r2, r2, #7
 8006a2c:	440a      	add	r2, r1
 8006a2e:	3284      	adds	r2, #132	; 0x84
 8006a30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006a34:	f023 0307 	bic.w	r3, r3, #7
 8006a38:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	69da      	ldr	r2, [r3, #28]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	68f9      	ldr	r1, [r7, #12]
 8006a44:	6809      	ldr	r1, [r1, #0]
 8006a46:	4608      	mov	r0, r1
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	01c9      	lsls	r1, r1, #7
 8006a4c:	4401      	add	r1, r0
 8006a4e:	3184      	adds	r1, #132	; 0x84
 8006a50:	4313      	orrs	r3, r2
 8006a52:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	01db      	lsls	r3, r3, #7
 8006a5e:	4413      	add	r3, r2
 8006a60:	3384      	adds	r3, #132	; 0x84
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	01db      	lsls	r3, r3, #7
 8006a6e:	4413      	add	r3, r2
 8006a70:	3384      	adds	r3, #132	; 0x84
 8006a72:	461a      	mov	r2, r3
 8006a74:	2300      	movs	r3, #0
 8006a76:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	01db      	lsls	r3, r3, #7
 8006a82:	4413      	add	r3, r2
 8006a84:	3384      	adds	r3, #132	; 0x84
 8006a86:	461a      	mov	r2, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006a96:	2304      	movs	r3, #4
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	e01b      	b.n	8006ad4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d102      	bne.n	8006aaa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	e014      	b.n	8006ad4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d00b      	beq.n	8006aca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d007      	beq.n	8006aca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d003      	beq.n	8006aca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006ac6:	2b07      	cmp	r3, #7
 8006ac8:	d102      	bne.n	8006ad0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006aca:	2302      	movs	r3, #2
 8006acc:	61fb      	str	r3, [r7, #28]
 8006ace:	e001      	b.n	8006ad4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	01db      	lsls	r3, r3, #7
 8006ade:	4413      	add	r3, r2
 8006ae0:	3384      	adds	r3, #132	; 0x84
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	6812      	ldr	r2, [r2, #0]
 8006ae8:	4611      	mov	r1, r2
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	01d2      	lsls	r2, r2, #7
 8006aee:	440a      	add	r2, r1
 8006af0:	3284      	adds	r2, #132	; 0x84
 8006af2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006af6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	fb02 f303 	mul.w	r3, r2, r3
 8006b02:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6859      	ldr	r1, [r3, #4]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	1acb      	subs	r3, r1, r3
 8006b0e:	69f9      	ldr	r1, [r7, #28]
 8006b10:	fb01 f303 	mul.w	r3, r1, r3
 8006b14:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006b16:	68f9      	ldr	r1, [r7, #12]
 8006b18:	6809      	ldr	r1, [r1, #0]
 8006b1a:	4608      	mov	r0, r1
 8006b1c:	6879      	ldr	r1, [r7, #4]
 8006b1e:	01c9      	lsls	r1, r1, #7
 8006b20:	4401      	add	r1, r0
 8006b22:	3184      	adds	r1, #132	; 0x84
 8006b24:	4313      	orrs	r3, r2
 8006b26:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	01db      	lsls	r3, r3, #7
 8006b32:	4413      	add	r3, r2
 8006b34:	3384      	adds	r3, #132	; 0x84
 8006b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	6812      	ldr	r2, [r2, #0]
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	01d2      	lsls	r2, r2, #7
 8006b42:	440a      	add	r2, r1
 8006b44:	3284      	adds	r2, #132	; 0x84
 8006b46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006b4a:	f023 0307 	bic.w	r3, r3, #7
 8006b4e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	01db      	lsls	r3, r3, #7
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3384      	adds	r3, #132	; 0x84
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b64:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	01db      	lsls	r3, r3, #7
 8006b70:	4413      	add	r3, r2
 8006b72:	3384      	adds	r3, #132	; 0x84
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	6812      	ldr	r2, [r2, #0]
 8006b7a:	4611      	mov	r1, r2
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	01d2      	lsls	r2, r2, #7
 8006b80:	440a      	add	r2, r1
 8006b82:	3284      	adds	r2, #132	; 0x84
 8006b84:	f043 0301 	orr.w	r3, r3, #1
 8006b88:	6013      	str	r3, [r2, #0]
}
 8006b8a:	bf00      	nop
 8006b8c:	3724      	adds	r7, #36	; 0x24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e025      	b.n	8006bf6 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f81d 	bl	8006bfe <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f000 fe6a 	bl	80078b0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	461a      	mov	r2, r3
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	f000 febf 	bl	800796a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006c06:	bf00      	nop
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b086      	sub	sp, #24
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	60f8      	str	r0, [r7, #12]
 8006c1a:	60b9      	str	r1, [r7, #8]
 8006c1c:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c24:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006c26:	7dfb      	ldrb	r3, [r7, #23]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d101      	bne.n	8006c30 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e021      	b.n	8006c74 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d002      	beq.n	8006c3c <HAL_SDRAM_SendCommand+0x2a>
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
 8006c38:	2b05      	cmp	r3, #5
 8006c3a:	d118      	bne.n	8006c6e <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fef5 	bl	8007a3c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d104      	bne.n	8006c64 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2205      	movs	r2, #5
 8006c5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006c62:	e006      	b.n	8006c72 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006c6c:	e001      	b.n	8006c72 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d101      	bne.n	8006c96 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006c92:	2302      	movs	r3, #2
 8006c94:	e016      	b.n	8006cc4 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d10f      	bne.n	8006cc2 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 ff00 	bl	8007ab6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e000      	b.n	8006cc4 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e07b      	b.n	8006dd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d108      	bne.n	8006cf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cee:	d009      	beq.n	8006d04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	61da      	str	r2, [r3, #28]
 8006cf6:	e005      	b.n	8006d04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d106      	bne.n	8006d24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f885 	bl	8006e2e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2202      	movs	r2, #2
 8006d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d56:	431a      	orrs	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	431a      	orrs	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d88:	ea42 0103 	orr.w	r1, r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	0c1b      	lsrs	r3, r3, #16
 8006da2:	f003 0104 	and.w	r1, r3, #4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	f003 0210 	and.w	r2, r3, #16
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69da      	ldr	r2, [r3, #28]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006dc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e01a      	b.n	8006e26 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e06:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f81a 	bl	8006e42 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006e42:	b480      	push	{r7}
 8006e44:	b083      	sub	sp, #12
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b088      	sub	sp, #32
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	603b      	str	r3, [r7, #0]
 8006e62:	4613      	mov	r3, r2
 8006e64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_SPI_Transmit+0x22>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e126      	b.n	80070c6 <HAL_SPI_Transmit+0x270>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e80:	f7fa ff5a 	bl	8001d38 <HAL_GetTick>
 8006e84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d002      	beq.n	8006e9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e96:	2302      	movs	r3, #2
 8006e98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e9a:	e10b      	b.n	80070b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <HAL_SPI_Transmit+0x52>
 8006ea2:	88fb      	ldrh	r3, [r7, #6]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006eac:	e102      	b.n	80070b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2203      	movs	r2, #3
 8006eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	88fa      	ldrh	r2, [r7, #6]
 8006ec6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	88fa      	ldrh	r2, [r7, #6]
 8006ecc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef4:	d10f      	bne.n	8006f16 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f20:	2b40      	cmp	r3, #64	; 0x40
 8006f22:	d007      	beq.n	8006f34 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f3c:	d14b      	bne.n	8006fd6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <HAL_SPI_Transmit+0xf6>
 8006f46:	8afb      	ldrh	r3, [r7, #22]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d13e      	bne.n	8006fca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f50:	881a      	ldrh	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5c:	1c9a      	adds	r2, r3, #2
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006f70:	e02b      	b.n	8006fca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d112      	bne.n	8006fa6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f84:	881a      	ldrh	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f90:	1c9a      	adds	r2, r3, #2
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fa4:	e011      	b.n	8006fca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fa6:	f7fa fec7 	bl	8001d38 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d803      	bhi.n	8006fbe <HAL_SPI_Transmit+0x168>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fbc:	d102      	bne.n	8006fc4 <HAL_SPI_Transmit+0x16e>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d102      	bne.n	8006fca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fc8:	e074      	b.n	80070b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1ce      	bne.n	8006f72 <HAL_SPI_Transmit+0x11c>
 8006fd4:	e04c      	b.n	8007070 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <HAL_SPI_Transmit+0x18e>
 8006fde:	8afb      	ldrh	r3, [r7, #22]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d140      	bne.n	8007066 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	330c      	adds	r3, #12
 8006fee:	7812      	ldrb	r2, [r2, #0]
 8006ff0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007000:	b29b      	uxth	r3, r3
 8007002:	3b01      	subs	r3, #1
 8007004:	b29a      	uxth	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800700a:	e02c      	b.n	8007066 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b02      	cmp	r3, #2
 8007018:	d113      	bne.n	8007042 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	330c      	adds	r3, #12
 8007024:	7812      	ldrb	r2, [r2, #0]
 8007026:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007036:	b29b      	uxth	r3, r3
 8007038:	3b01      	subs	r3, #1
 800703a:	b29a      	uxth	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007040:	e011      	b.n	8007066 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007042:	f7fa fe79 	bl	8001d38 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d803      	bhi.n	800705a <HAL_SPI_Transmit+0x204>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007058:	d102      	bne.n	8007060 <HAL_SPI_Transmit+0x20a>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d102      	bne.n	8007066 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007064:	e026      	b.n	80070b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800706a:	b29b      	uxth	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1cd      	bne.n	800700c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 fbd9 	bl	800782c <SPI_EndRxTxTransaction>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2220      	movs	r2, #32
 8007084:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10a      	bne.n	80070a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800708e:	2300      	movs	r3, #0
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	613b      	str	r3, [r7, #16]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	77fb      	strb	r3, [r7, #31]
 80070b0:	e000      	b.n	80070b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80070b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3720      	adds	r7, #32
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b088      	sub	sp, #32
 80070d2:	af02      	add	r7, sp, #8
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	603b      	str	r3, [r7, #0]
 80070da:	4613      	mov	r3, r2
 80070dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ea:	d112      	bne.n	8007112 <HAL_SPI_Receive+0x44>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10e      	bne.n	8007112 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2204      	movs	r2, #4
 80070f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80070fc:	88fa      	ldrh	r2, [r7, #6]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	4613      	mov	r3, r2
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	68f8      	ldr	r0, [r7, #12]
 800710a:	f000 f8f1 	bl	80072f0 <HAL_SPI_TransmitReceive>
 800710e:	4603      	mov	r3, r0
 8007110:	e0ea      	b.n	80072e8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_SPI_Receive+0x52>
 800711c:	2302      	movs	r3, #2
 800711e:	e0e3      	b.n	80072e8 <HAL_SPI_Receive+0x21a>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007128:	f7fa fe06 	bl	8001d38 <HAL_GetTick>
 800712c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b01      	cmp	r3, #1
 8007138:	d002      	beq.n	8007140 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800713a:	2302      	movs	r3, #2
 800713c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800713e:	e0ca      	b.n	80072d6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <HAL_SPI_Receive+0x7e>
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d102      	bne.n	8007152 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007150:	e0c1      	b.n	80072d6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2204      	movs	r2, #4
 8007156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	88fa      	ldrh	r2, [r7, #6]
 800716a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	88fa      	ldrh	r2, [r7, #6]
 8007170:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007198:	d10f      	bne.n	80071ba <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b40      	cmp	r3, #64	; 0x40
 80071c6:	d007      	beq.n	80071d8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d162      	bne.n	80072a6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071e0:	e02e      	b.n	8007240 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d115      	bne.n	800721c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f103 020c 	add.w	r2, r3, #12
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fc:	7812      	ldrb	r2, [r2, #0]
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007210:	b29b      	uxth	r3, r3
 8007212:	3b01      	subs	r3, #1
 8007214:	b29a      	uxth	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	87da      	strh	r2, [r3, #62]	; 0x3e
 800721a:	e011      	b.n	8007240 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800721c:	f7fa fd8c 	bl	8001d38 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d803      	bhi.n	8007234 <HAL_SPI_Receive+0x166>
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007232:	d102      	bne.n	800723a <HAL_SPI_Receive+0x16c>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d102      	bne.n	8007240 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800723e:	e04a      	b.n	80072d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007244:	b29b      	uxth	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1cb      	bne.n	80071e2 <HAL_SPI_Receive+0x114>
 800724a:	e031      	b.n	80072b0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b01      	cmp	r3, #1
 8007258:	d113      	bne.n	8007282 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	b292      	uxth	r2, r2
 8007266:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	1c9a      	adds	r2, r3, #2
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007276:	b29b      	uxth	r3, r3
 8007278:	3b01      	subs	r3, #1
 800727a:	b29a      	uxth	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007280:	e011      	b.n	80072a6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007282:	f7fa fd59 	bl	8001d38 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	429a      	cmp	r2, r3
 8007290:	d803      	bhi.n	800729a <HAL_SPI_Receive+0x1cc>
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d102      	bne.n	80072a0 <HAL_SPI_Receive+0x1d2>
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d102      	bne.n	80072a6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80072a4:	e017      	b.n	80072d6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1cd      	bne.n	800724c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fa53 	bl	8007760 <SPI_EndRxTransaction>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2220      	movs	r2, #32
 80072c4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	75fb      	strb	r3, [r7, #23]
 80072d2:	e000      	b.n	80072d6 <HAL_SPI_Receive+0x208>
  }

error :
 80072d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08c      	sub	sp, #48	; 0x30
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
 80072fc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072fe:	2301      	movs	r3, #1
 8007300:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800730e:	2b01      	cmp	r3, #1
 8007310:	d101      	bne.n	8007316 <HAL_SPI_TransmitReceive+0x26>
 8007312:	2302      	movs	r3, #2
 8007314:	e18a      	b.n	800762c <HAL_SPI_TransmitReceive+0x33c>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800731e:	f7fa fd0b 	bl	8001d38 <HAL_GetTick>
 8007322:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800732a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007334:	887b      	ldrh	r3, [r7, #2]
 8007336:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800733c:	2b01      	cmp	r3, #1
 800733e:	d00f      	beq.n	8007360 <HAL_SPI_TransmitReceive+0x70>
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007346:	d107      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d103      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x68>
 8007350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007354:	2b04      	cmp	r3, #4
 8007356:	d003      	beq.n	8007360 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007358:	2302      	movs	r3, #2
 800735a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800735e:	e15b      	b.n	8007618 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d005      	beq.n	8007372 <HAL_SPI_TransmitReceive+0x82>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <HAL_SPI_TransmitReceive+0x82>
 800736c:	887b      	ldrh	r3, [r7, #2]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d103      	bne.n	800737a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007378:	e14e      	b.n	8007618 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b04      	cmp	r3, #4
 8007384:	d003      	beq.n	800738e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2205      	movs	r2, #5
 800738a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	887a      	ldrh	r2, [r7, #2]
 800739e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	887a      	ldrh	r2, [r7, #2]
 80073a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	887a      	ldrh	r2, [r7, #2]
 80073b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	887a      	ldrh	r2, [r7, #2]
 80073b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ce:	2b40      	cmp	r3, #64	; 0x40
 80073d0:	d007      	beq.n	80073e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ea:	d178      	bne.n	80074de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <HAL_SPI_TransmitReceive+0x10a>
 80073f4:	8b7b      	ldrh	r3, [r7, #26]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d166      	bne.n	80074c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fe:	881a      	ldrh	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	1c9a      	adds	r2, r3, #2
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800741e:	e053      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b02      	cmp	r3, #2
 800742c:	d11b      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x176>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007432:	b29b      	uxth	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d016      	beq.n	8007466 <HAL_SPI_TransmitReceive+0x176>
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	2b01      	cmp	r3, #1
 800743c:	d113      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007442:	881a      	ldrh	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	1c9a      	adds	r2, r3, #2
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007458:	b29b      	uxth	r3, r3
 800745a:	3b01      	subs	r3, #1
 800745c:	b29a      	uxth	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b01      	cmp	r3, #1
 8007472:	d119      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x1b8>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d014      	beq.n	80074a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	b292      	uxth	r2, r2
 800748a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	1c9a      	adds	r2, r3, #2
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800749a:	b29b      	uxth	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074a4:	2301      	movs	r3, #1
 80074a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074a8:	f7fa fc46 	bl	8001d38 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d807      	bhi.n	80074c8 <HAL_SPI_TransmitReceive+0x1d8>
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074be:	d003      	beq.n	80074c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074c6:	e0a7      	b.n	8007618 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1a6      	bne.n	8007420 <HAL_SPI_TransmitReceive+0x130>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1a1      	bne.n	8007420 <HAL_SPI_TransmitReceive+0x130>
 80074dc:	e07c      	b.n	80075d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <HAL_SPI_TransmitReceive+0x1fc>
 80074e6:	8b7b      	ldrh	r3, [r7, #26]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d16b      	bne.n	80075c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	330c      	adds	r3, #12
 80074f6:	7812      	ldrb	r2, [r2, #0]
 80074f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007508:	b29b      	uxth	r3, r3
 800750a:	3b01      	subs	r3, #1
 800750c:	b29a      	uxth	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007512:	e057      	b.n	80075c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b02      	cmp	r3, #2
 8007520:	d11c      	bne.n	800755c <HAL_SPI_TransmitReceive+0x26c>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007526:	b29b      	uxth	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d017      	beq.n	800755c <HAL_SPI_TransmitReceive+0x26c>
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	2b01      	cmp	r3, #1
 8007530:	d114      	bne.n	800755c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	330c      	adds	r3, #12
 800753c:	7812      	ldrb	r2, [r2, #0]
 800753e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b01      	cmp	r3, #1
 8007568:	d119      	bne.n	800759e <HAL_SPI_TransmitReceive+0x2ae>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d014      	beq.n	800759e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	b2d2      	uxtb	r2, r2
 8007580:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800759a:	2301      	movs	r3, #1
 800759c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800759e:	f7fa fbcb 	bl	8001d38 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d803      	bhi.n	80075b6 <HAL_SPI_TransmitReceive+0x2c6>
 80075ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b4:	d102      	bne.n	80075bc <HAL_SPI_TransmitReceive+0x2cc>
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d103      	bne.n	80075c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80075c2:	e029      	b.n	8007618 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1a2      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x224>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d19d      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 f925 	bl	800782c <SPI_EndRxTxTransaction>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d006      	beq.n	80075f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2220      	movs	r2, #32
 80075f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80075f4:	e010      	b.n	8007618 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	617b      	str	r3, [r7, #20]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	e000      	b.n	8007618 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007616:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007628:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800762c:	4618      	mov	r0, r3
 800762e:	3730      	adds	r7, #48	; 0x30
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007642:	b2db      	uxtb	r3, r3
}
 8007644:	4618      	mov	r0, r3
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	4613      	mov	r3, r2
 800765e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007660:	f7fa fb6a 	bl	8001d38 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007668:	1a9b      	subs	r3, r3, r2
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	4413      	add	r3, r2
 800766e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007670:	f7fa fb62 	bl	8001d38 <HAL_GetTick>
 8007674:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007676:	4b39      	ldr	r3, [pc, #228]	; (800775c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	015b      	lsls	r3, r3, #5
 800767c:	0d1b      	lsrs	r3, r3, #20
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	fb02 f303 	mul.w	r3, r2, r3
 8007684:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007686:	e054      	b.n	8007732 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768e:	d050      	beq.n	8007732 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007690:	f7fa fb52 	bl	8001d38 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	429a      	cmp	r2, r3
 800769e:	d902      	bls.n	80076a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d13d      	bne.n	8007722 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076be:	d111      	bne.n	80076e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076c8:	d004      	beq.n	80076d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d2:	d107      	bne.n	80076e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ec:	d10f      	bne.n	800770e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800770c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e017      	b.n	8007752 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	3b01      	subs	r3, #1
 8007730:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	689a      	ldr	r2, [r3, #8]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	4013      	ands	r3, r2
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	429a      	cmp	r2, r3
 8007740:	bf0c      	ite	eq
 8007742:	2301      	moveq	r3, #1
 8007744:	2300      	movne	r3, #0
 8007746:	b2db      	uxtb	r3, r3
 8007748:	461a      	mov	r2, r3
 800774a:	79fb      	ldrb	r3, [r7, #7]
 800774c:	429a      	cmp	r2, r3
 800774e:	d19b      	bne.n	8007688 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3720      	adds	r7, #32
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	20000180 	.word	0x20000180

08007760 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af02      	add	r7, sp, #8
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007774:	d111      	bne.n	800779a <SPI_EndRxTransaction+0x3a>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800777e:	d004      	beq.n	800778a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007788:	d107      	bne.n	800779a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007798:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077a2:	d12a      	bne.n	80077fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ac:	d012      	beq.n	80077d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2200      	movs	r2, #0
 80077b6:	2180      	movs	r1, #128	; 0x80
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f7ff ff49 	bl	8007650 <SPI_WaitFlagStateUntilTimeout>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d02d      	beq.n	8007820 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c8:	f043 0220 	orr.w	r2, r3, #32
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e026      	b.n	8007822 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	2101      	movs	r1, #1
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f7ff ff36 	bl	8007650 <SPI_WaitFlagStateUntilTimeout>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d01a      	beq.n	8007820 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ee:	f043 0220 	orr.w	r2, r3, #32
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e013      	b.n	8007822 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2200      	movs	r2, #0
 8007802:	2101      	movs	r1, #1
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f7ff ff23 	bl	8007650 <SPI_WaitFlagStateUntilTimeout>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d007      	beq.n	8007820 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007814:	f043 0220 	orr.w	r2, r3, #32
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e000      	b.n	8007822 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007838:	4b1b      	ldr	r3, [pc, #108]	; (80078a8 <SPI_EndRxTxTransaction+0x7c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a1b      	ldr	r2, [pc, #108]	; (80078ac <SPI_EndRxTxTransaction+0x80>)
 800783e:	fba2 2303 	umull	r2, r3, r2, r3
 8007842:	0d5b      	lsrs	r3, r3, #21
 8007844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007848:	fb02 f303 	mul.w	r3, r2, r3
 800784c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007856:	d112      	bne.n	800787e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2200      	movs	r2, #0
 8007860:	2180      	movs	r1, #128	; 0x80
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f7ff fef4 	bl	8007650 <SPI_WaitFlagStateUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d016      	beq.n	800789c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007872:	f043 0220 	orr.w	r2, r3, #32
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e00f      	b.n	800789e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00a      	beq.n	800789a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	3b01      	subs	r3, #1
 8007888:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007894:	2b80      	cmp	r3, #128	; 0x80
 8007896:	d0f2      	beq.n	800787e <SPI_EndRxTxTransaction+0x52>
 8007898:	e000      	b.n	800789c <SPI_EndRxTxTransaction+0x70>
        break;
 800789a:	bf00      	nop
  }

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20000180 	.word	0x20000180
 80078ac:	165e9f81 	.word	0x165e9f81

080078b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d123      	bne.n	800790a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80078ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	6851      	ldr	r1, [r2, #4]
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	6892      	ldr	r2, [r2, #8]
 80078d6:	4311      	orrs	r1, r2
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	68d2      	ldr	r2, [r2, #12]
 80078dc:	4311      	orrs	r1, r2
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	6912      	ldr	r2, [r2, #16]
 80078e2:	4311      	orrs	r1, r2
 80078e4:	683a      	ldr	r2, [r7, #0]
 80078e6:	6952      	ldr	r2, [r2, #20]
 80078e8:	4311      	orrs	r1, r2
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	6992      	ldr	r2, [r2, #24]
 80078ee:	4311      	orrs	r1, r2
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	69d2      	ldr	r2, [r2, #28]
 80078f4:	4311      	orrs	r1, r2
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	6a12      	ldr	r2, [r2, #32]
 80078fa:	4311      	orrs	r1, r2
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007900:	430a      	orrs	r2, r1
 8007902:	431a      	orrs	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	e028      	b.n	800795c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	69d9      	ldr	r1, [r3, #28]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	4319      	orrs	r1, r3
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	430b      	orrs	r3, r1
 8007922:	431a      	orrs	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007930:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	6851      	ldr	r1, [r2, #4]
 8007938:	683a      	ldr	r2, [r7, #0]
 800793a:	6892      	ldr	r2, [r2, #8]
 800793c:	4311      	orrs	r1, r2
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	68d2      	ldr	r2, [r2, #12]
 8007942:	4311      	orrs	r1, r2
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	6912      	ldr	r2, [r2, #16]
 8007948:	4311      	orrs	r1, r2
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	6952      	ldr	r2, [r2, #20]
 800794e:	4311      	orrs	r1, r2
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	6992      	ldr	r2, [r2, #24]
 8007954:	430a      	orrs	r2, r1
 8007956:	431a      	orrs	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800796a:	b480      	push	{r7}
 800796c:	b085      	sub	sp, #20
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d128      	bne.n	80079ce <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	1e59      	subs	r1, r3, #1
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	3b01      	subs	r3, #1
 8007990:	011b      	lsls	r3, r3, #4
 8007992:	4319      	orrs	r1, r3
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	3b01      	subs	r3, #1
 800799a:	021b      	lsls	r3, r3, #8
 800799c:	4319      	orrs	r1, r3
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	031b      	lsls	r3, r3, #12
 80079a6:	4319      	orrs	r1, r3
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	3b01      	subs	r3, #1
 80079ae:	041b      	lsls	r3, r3, #16
 80079b0:	4319      	orrs	r1, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	051b      	lsls	r3, r3, #20
 80079ba:	4319      	orrs	r1, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	699b      	ldr	r3, [r3, #24]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	061b      	lsls	r3, r3, #24
 80079c4:	430b      	orrs	r3, r1
 80079c6:	431a      	orrs	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	609a      	str	r2, [r3, #8]
 80079cc:	e02f      	b.n	8007a2e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80079d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	68d2      	ldr	r2, [r2, #12]
 80079de:	3a01      	subs	r2, #1
 80079e0:	0311      	lsls	r1, r2, #12
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	6952      	ldr	r2, [r2, #20]
 80079e6:	3a01      	subs	r2, #1
 80079e8:	0512      	lsls	r2, r2, #20
 80079ea:	430a      	orrs	r2, r1
 80079ec:	431a      	orrs	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	1e59      	subs	r1, r3, #1
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	4319      	orrs	r1, r3
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	4319      	orrs	r1, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	041b      	lsls	r3, r3, #16
 8007a1c:	4319      	orrs	r1, r3
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	061b      	lsls	r3, r3, #24
 8007a26:	430b      	orrs	r3, r1
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	0d9b      	lsrs	r3, r3, #22
 8007a52:	059b      	lsls	r3, r3, #22
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	6811      	ldr	r1, [r2, #0]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	6852      	ldr	r2, [r2, #4]
 8007a5c:	4311      	orrs	r1, r2
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	6892      	ldr	r2, [r2, #8]
 8007a62:	3a01      	subs	r2, #1
 8007a64:	0152      	lsls	r2, r2, #5
 8007a66:	4311      	orrs	r1, r2
 8007a68:	68ba      	ldr	r2, [r7, #8]
 8007a6a:	68d2      	ldr	r2, [r2, #12]
 8007a6c:	0252      	lsls	r2, r2, #9
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	431a      	orrs	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8007a76:	f7fa f95f 	bl	8001d38 <HAL_GetTick>
 8007a7a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007a7c:	e010      	b.n	8007aa0 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a84:	d00c      	beq.n	8007aa0 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d007      	beq.n	8007a9c <FMC_SDRAM_SendCommand+0x60>
 8007a8c:	f7fa f954 	bl	8001d38 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d201      	bcs.n	8007aa0 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e006      	b.n	8007aae <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	2b20      	cmp	r3, #32
 8007aaa:	d0e8      	beq.n	8007a7e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007ac8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	0052      	lsls	r2, r2, #1
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007af0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007af4:	f002 fcaa 	bl	800a44c <USBD_static_malloc>
 8007af8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d109      	bne.n	8007b14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	32b0      	adds	r2, #176	; 0xb0
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b10:	2302      	movs	r3, #2
 8007b12:	e0d4      	b.n	8007cbe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b14:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007b18:	2100      	movs	r1, #0
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f002 fcda 	bl	800a4d4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	32b0      	adds	r2, #176	; 0xb0
 8007b2a:	68f9      	ldr	r1, [r7, #12]
 8007b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	32b0      	adds	r2, #176	; 0xb0
 8007b3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	7c1b      	ldrb	r3, [r3, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d138      	bne.n	8007bbe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b4c:	4b5e      	ldr	r3, [pc, #376]	; (8007cc8 <USBD_CDC_Init+0x1e4>)
 8007b4e:	7819      	ldrb	r1, [r3, #0]
 8007b50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b54:	2202      	movs	r2, #2
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f002 fb55 	bl	800a206 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b5c:	4b5a      	ldr	r3, [pc, #360]	; (8007cc8 <USBD_CDC_Init+0x1e4>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	f003 020f 	and.w	r2, r3, #15
 8007b64:	6879      	ldr	r1, [r7, #4]
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	440b      	add	r3, r1
 8007b70:	3324      	adds	r3, #36	; 0x24
 8007b72:	2201      	movs	r2, #1
 8007b74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b76:	4b55      	ldr	r3, [pc, #340]	; (8007ccc <USBD_CDC_Init+0x1e8>)
 8007b78:	7819      	ldrb	r1, [r3, #0]
 8007b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b7e:	2202      	movs	r2, #2
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f002 fb40 	bl	800a206 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b86:	4b51      	ldr	r3, [pc, #324]	; (8007ccc <USBD_CDC_Init+0x1e8>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f003 020f 	and.w	r2, r3, #15
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	4613      	mov	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	440b      	add	r3, r1
 8007b9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007ba2:	4b4b      	ldr	r3, [pc, #300]	; (8007cd0 <USBD_CDC_Init+0x1ec>)
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	f003 020f 	and.w	r2, r3, #15
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	4613      	mov	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	3326      	adds	r3, #38	; 0x26
 8007bb8:	2210      	movs	r2, #16
 8007bba:	801a      	strh	r2, [r3, #0]
 8007bbc:	e035      	b.n	8007c2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bbe:	4b42      	ldr	r3, [pc, #264]	; (8007cc8 <USBD_CDC_Init+0x1e4>)
 8007bc0:	7819      	ldrb	r1, [r3, #0]
 8007bc2:	2340      	movs	r3, #64	; 0x40
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f002 fb1d 	bl	800a206 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007bcc:	4b3e      	ldr	r3, [pc, #248]	; (8007cc8 <USBD_CDC_Init+0x1e4>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	f003 020f 	and.w	r2, r3, #15
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	440b      	add	r3, r1
 8007be0:	3324      	adds	r3, #36	; 0x24
 8007be2:	2201      	movs	r2, #1
 8007be4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007be6:	4b39      	ldr	r3, [pc, #228]	; (8007ccc <USBD_CDC_Init+0x1e8>)
 8007be8:	7819      	ldrb	r1, [r3, #0]
 8007bea:	2340      	movs	r3, #64	; 0x40
 8007bec:	2202      	movs	r2, #2
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f002 fb09 	bl	800a206 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007bf4:	4b35      	ldr	r3, [pc, #212]	; (8007ccc <USBD_CDC_Init+0x1e8>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	f003 020f 	and.w	r2, r3, #15
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	440b      	add	r3, r1
 8007c08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c10:	4b2f      	ldr	r3, [pc, #188]	; (8007cd0 <USBD_CDC_Init+0x1ec>)
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	f003 020f 	and.w	r2, r3, #15
 8007c18:	6879      	ldr	r1, [r7, #4]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	440b      	add	r3, r1
 8007c24:	3326      	adds	r3, #38	; 0x26
 8007c26:	2210      	movs	r2, #16
 8007c28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c2a:	4b29      	ldr	r3, [pc, #164]	; (8007cd0 <USBD_CDC_Init+0x1ec>)
 8007c2c:	7819      	ldrb	r1, [r3, #0]
 8007c2e:	2308      	movs	r3, #8
 8007c30:	2203      	movs	r2, #3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f002 fae7 	bl	800a206 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c38:	4b25      	ldr	r3, [pc, #148]	; (8007cd0 <USBD_CDC_Init+0x1ec>)
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	f003 020f 	and.w	r2, r3, #15
 8007c40:	6879      	ldr	r1, [r7, #4]
 8007c42:	4613      	mov	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	440b      	add	r3, r1
 8007c4c:	3324      	adds	r3, #36	; 0x24
 8007c4e:	2201      	movs	r2, #1
 8007c50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	33b0      	adds	r3, #176	; 0xb0
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e018      	b.n	8007cbe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	7c1b      	ldrb	r3, [r3, #16]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c94:	4b0d      	ldr	r3, [pc, #52]	; (8007ccc <USBD_CDC_Init+0x1e8>)
 8007c96:	7819      	ldrb	r1, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f002 fb9e 	bl	800a3e4 <USBD_LL_PrepareReceive>
 8007ca8:	e008      	b.n	8007cbc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007caa:	4b08      	ldr	r3, [pc, #32]	; (8007ccc <USBD_CDC_Init+0x1e8>)
 8007cac:	7819      	ldrb	r1, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cb4:	2340      	movs	r3, #64	; 0x40
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f002 fb94 	bl	800a3e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	2000025b 	.word	0x2000025b
 8007ccc:	2000025c 	.word	0x2000025c
 8007cd0:	2000025d 	.word	0x2000025d

08007cd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007ce0:	4b3a      	ldr	r3, [pc, #232]	; (8007dcc <USBD_CDC_DeInit+0xf8>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f002 fab3 	bl	800a252 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007cec:	4b37      	ldr	r3, [pc, #220]	; (8007dcc <USBD_CDC_DeInit+0xf8>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	f003 020f 	and.w	r2, r3, #15
 8007cf4:	6879      	ldr	r1, [r7, #4]
 8007cf6:	4613      	mov	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	3324      	adds	r3, #36	; 0x24
 8007d02:	2200      	movs	r2, #0
 8007d04:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007d06:	4b32      	ldr	r3, [pc, #200]	; (8007dd0 <USBD_CDC_DeInit+0xfc>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f002 faa0 	bl	800a252 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d12:	4b2f      	ldr	r3, [pc, #188]	; (8007dd0 <USBD_CDC_DeInit+0xfc>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	f003 020f 	and.w	r2, r3, #15
 8007d1a:	6879      	ldr	r1, [r7, #4]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	440b      	add	r3, r1
 8007d26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d2e:	4b29      	ldr	r3, [pc, #164]	; (8007dd4 <USBD_CDC_DeInit+0x100>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f002 fa8c 	bl	800a252 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d3a:	4b26      	ldr	r3, [pc, #152]	; (8007dd4 <USBD_CDC_DeInit+0x100>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	f003 020f 	and.w	r2, r3, #15
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	440b      	add	r3, r1
 8007d4e:	3324      	adds	r3, #36	; 0x24
 8007d50:	2200      	movs	r2, #0
 8007d52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d54:	4b1f      	ldr	r3, [pc, #124]	; (8007dd4 <USBD_CDC_DeInit+0x100>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	f003 020f 	and.w	r2, r3, #15
 8007d5c:	6879      	ldr	r1, [r7, #4]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	440b      	add	r3, r1
 8007d68:	3326      	adds	r3, #38	; 0x26
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	32b0      	adds	r2, #176	; 0xb0
 8007d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01f      	beq.n	8007dc0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	33b0      	adds	r3, #176	; 0xb0
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	32b0      	adds	r2, #176	; 0xb0
 8007d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f002 fb60 	bl	800a468 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	32b0      	adds	r2, #176	; 0xb0
 8007db2:	2100      	movs	r1, #0
 8007db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	2000025b 	.word	0x2000025b
 8007dd0:	2000025c 	.word	0x2000025c
 8007dd4:	2000025d 	.word	0x2000025d

08007dd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	32b0      	adds	r2, #176	; 0xb0
 8007dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007df2:	2300      	movs	r3, #0
 8007df4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e0bf      	b.n	8007f88 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d050      	beq.n	8007eb6 <USBD_CDC_Setup+0xde>
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	f040 80af 	bne.w	8007f78 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88db      	ldrh	r3, [r3, #6]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d03a      	beq.n	8007e98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b25b      	sxtb	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	da1b      	bge.n	8007e64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	33b0      	adds	r3, #176	; 0xb0
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	88d2      	ldrh	r2, [r2, #6]
 8007e48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	88db      	ldrh	r3, [r3, #6]
 8007e4e:	2b07      	cmp	r3, #7
 8007e50:	bf28      	it	cs
 8007e52:	2307      	movcs	r3, #7
 8007e54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	89fa      	ldrh	r2, [r7, #14]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 fd89 	bl	8009974 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e62:	e090      	b.n	8007f86 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	785a      	ldrb	r2, [r3, #1]
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	88db      	ldrh	r3, [r3, #6]
 8007e72:	2b3f      	cmp	r3, #63	; 0x3f
 8007e74:	d803      	bhi.n	8007e7e <USBD_CDC_Setup+0xa6>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	88db      	ldrh	r3, [r3, #6]
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	e000      	b.n	8007e80 <USBD_CDC_Setup+0xa8>
 8007e7e:	2240      	movs	r2, #64	; 0x40
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e86:	6939      	ldr	r1, [r7, #16]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f001 fd9b 	bl	80099cc <USBD_CtlPrepareRx>
      break;
 8007e96:	e076      	b.n	8007f86 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	33b0      	adds	r3, #176	; 0xb0
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	7850      	ldrb	r0, [r2, #1]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	4798      	blx	r3
      break;
 8007eb4:	e067      	b.n	8007f86 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	785b      	ldrb	r3, [r3, #1]
 8007eba:	2b0b      	cmp	r3, #11
 8007ebc:	d851      	bhi.n	8007f62 <USBD_CDC_Setup+0x18a>
 8007ebe:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <USBD_CDC_Setup+0xec>)
 8007ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec4:	08007ef5 	.word	0x08007ef5
 8007ec8:	08007f71 	.word	0x08007f71
 8007ecc:	08007f63 	.word	0x08007f63
 8007ed0:	08007f63 	.word	0x08007f63
 8007ed4:	08007f63 	.word	0x08007f63
 8007ed8:	08007f63 	.word	0x08007f63
 8007edc:	08007f63 	.word	0x08007f63
 8007ee0:	08007f63 	.word	0x08007f63
 8007ee4:	08007f63 	.word	0x08007f63
 8007ee8:	08007f63 	.word	0x08007f63
 8007eec:	08007f1f 	.word	0x08007f1f
 8007ef0:	08007f49 	.word	0x08007f49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d107      	bne.n	8007f10 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f00:	f107 030a 	add.w	r3, r7, #10
 8007f04:	2202      	movs	r2, #2
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 fd33 	bl	8009974 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f0e:	e032      	b.n	8007f76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 fcbd 	bl	8009892 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	75fb      	strb	r3, [r7, #23]
          break;
 8007f1c:	e02b      	b.n	8007f76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b03      	cmp	r3, #3
 8007f28:	d107      	bne.n	8007f3a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f2a:	f107 030d 	add.w	r3, r7, #13
 8007f2e:	2201      	movs	r2, #1
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f001 fd1e 	bl	8009974 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f38:	e01d      	b.n	8007f76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 fca8 	bl	8009892 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f42:	2303      	movs	r3, #3
 8007f44:	75fb      	strb	r3, [r7, #23]
          break;
 8007f46:	e016      	b.n	8007f76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d00f      	beq.n	8007f74 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fc9b 	bl	8009892 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f60:	e008      	b.n	8007f74 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 fc94 	bl	8009892 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f6e:	e002      	b.n	8007f76 <USBD_CDC_Setup+0x19e>
          break;
 8007f70:	bf00      	nop
 8007f72:	e008      	b.n	8007f86 <USBD_CDC_Setup+0x1ae>
          break;
 8007f74:	bf00      	nop
      }
      break;
 8007f76:	e006      	b.n	8007f86 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f001 fc89 	bl	8009892 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f80:	2303      	movs	r3, #3
 8007f82:	75fb      	strb	r3, [r7, #23]
      break;
 8007f84:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fa2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	32b0      	adds	r2, #176	; 0xb0
 8007fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e065      	b.n	8008086 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	32b0      	adds	r2, #176	; 0xb0
 8007fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	f003 020f 	and.w	r2, r3, #15
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	440b      	add	r3, r1
 8007fdc:	3318      	adds	r3, #24
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d02f      	beq.n	8008044 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	f003 020f 	and.w	r2, r3, #15
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	4613      	mov	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	440b      	add	r3, r1
 8007ff6:	3318      	adds	r3, #24
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	f003 010f 	and.w	r1, r3, #15
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	460b      	mov	r3, r1
 8008004:	00db      	lsls	r3, r3, #3
 8008006:	440b      	add	r3, r1
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4403      	add	r3, r0
 800800c:	3348      	adds	r3, #72	; 0x48
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	fbb2 f1f3 	udiv	r1, r2, r3
 8008014:	fb01 f303 	mul.w	r3, r1, r3
 8008018:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800801a:	2b00      	cmp	r3, #0
 800801c:	d112      	bne.n	8008044 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800801e:	78fb      	ldrb	r3, [r7, #3]
 8008020:	f003 020f 	and.w	r2, r3, #15
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	3318      	adds	r3, #24
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008036:	78f9      	ldrb	r1, [r7, #3]
 8008038:	2300      	movs	r3, #0
 800803a:	2200      	movs	r2, #0
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f002 f9b0 	bl	800a3a2 <USBD_LL_Transmit>
 8008042:	e01f      	b.n	8008084 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2200      	movs	r2, #0
 8008048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	33b0      	adds	r3, #176	; 0xb0
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d010      	beq.n	8008084 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	33b0      	adds	r3, #176	; 0xb0
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008080:	78fa      	ldrb	r2, [r7, #3]
 8008082:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	460b      	mov	r3, r1
 8008098:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	32b0      	adds	r2, #176	; 0xb0
 80080a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	32b0      	adds	r2, #176	; 0xb0
 80080b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80080bc:	2303      	movs	r3, #3
 80080be:	e01a      	b.n	80080f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080c0:	78fb      	ldrb	r3, [r7, #3]
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f002 f9ae 	bl	800a426 <USBD_LL_GetRxDataSize>
 80080ca:	4602      	mov	r2, r0
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	33b0      	adds	r3, #176	; 0xb0
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4413      	add	r3, r2
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80080f0:	4611      	mov	r1, r2
 80080f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	32b0      	adds	r2, #176	; 0xb0
 8008110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008114:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800811c:	2303      	movs	r3, #3
 800811e:	e025      	b.n	800816c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	33b0      	adds	r3, #176	; 0xb0
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01a      	beq.n	800816a <USBD_CDC_EP0_RxReady+0x6c>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800813a:	2bff      	cmp	r3, #255	; 0xff
 800813c:	d015      	beq.n	800816a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	33b0      	adds	r3, #176	; 0xb0
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	4413      	add	r3, r2
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008156:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800815e:	b292      	uxth	r2, r2
 8008160:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	22ff      	movs	r2, #255	; 0xff
 8008166:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800817c:	2182      	movs	r1, #130	; 0x82
 800817e:	4818      	ldr	r0, [pc, #96]	; (80081e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008180:	f000 fd4f 	bl	8008c22 <USBD_GetEpDesc>
 8008184:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008186:	2101      	movs	r1, #1
 8008188:	4815      	ldr	r0, [pc, #84]	; (80081e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800818a:	f000 fd4a 	bl	8008c22 <USBD_GetEpDesc>
 800818e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008190:	2181      	movs	r1, #129	; 0x81
 8008192:	4813      	ldr	r0, [pc, #76]	; (80081e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008194:	f000 fd45 	bl	8008c22 <USBD_GetEpDesc>
 8008198:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2210      	movs	r2, #16
 80081a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d006      	beq.n	80081ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081b4:	711a      	strb	r2, [r3, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d006      	beq.n	80081ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081c8:	711a      	strb	r2, [r3, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2243      	movs	r2, #67	; 0x43
 80081d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081d4:	4b02      	ldr	r3, [pc, #8]	; (80081e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	20000218 	.word	0x20000218

080081e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081ec:	2182      	movs	r1, #130	; 0x82
 80081ee:	4818      	ldr	r0, [pc, #96]	; (8008250 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081f0:	f000 fd17 	bl	8008c22 <USBD_GetEpDesc>
 80081f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081f6:	2101      	movs	r1, #1
 80081f8:	4815      	ldr	r0, [pc, #84]	; (8008250 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081fa:	f000 fd12 	bl	8008c22 <USBD_GetEpDesc>
 80081fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008200:	2181      	movs	r1, #129	; 0x81
 8008202:	4813      	ldr	r0, [pc, #76]	; (8008250 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008204:	f000 fd0d 	bl	8008c22 <USBD_GetEpDesc>
 8008208:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	2210      	movs	r2, #16
 8008214:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d006      	beq.n	800822a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	2200      	movs	r2, #0
 8008220:	711a      	strb	r2, [r3, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f042 0202 	orr.w	r2, r2, #2
 8008228:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d006      	beq.n	800823e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	711a      	strb	r2, [r3, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f042 0202 	orr.w	r2, r2, #2
 800823c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2243      	movs	r2, #67	; 0x43
 8008242:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008244:	4b02      	ldr	r3, [pc, #8]	; (8008250 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000218 	.word	0x20000218

08008254 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800825c:	2182      	movs	r1, #130	; 0x82
 800825e:	4818      	ldr	r0, [pc, #96]	; (80082c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008260:	f000 fcdf 	bl	8008c22 <USBD_GetEpDesc>
 8008264:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008266:	2101      	movs	r1, #1
 8008268:	4815      	ldr	r0, [pc, #84]	; (80082c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800826a:	f000 fcda 	bl	8008c22 <USBD_GetEpDesc>
 800826e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008270:	2181      	movs	r1, #129	; 0x81
 8008272:	4813      	ldr	r0, [pc, #76]	; (80082c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008274:	f000 fcd5 	bl	8008c22 <USBD_GetEpDesc>
 8008278:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2210      	movs	r2, #16
 8008284:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d006      	beq.n	800829a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	2200      	movs	r2, #0
 8008290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008294:	711a      	strb	r2, [r3, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d006      	beq.n	80082ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082a8:	711a      	strb	r2, [r3, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2243      	movs	r2, #67	; 0x43
 80082b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082b4:	4b02      	ldr	r3, [pc, #8]	; (80082c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20000218 	.word	0x20000218

080082c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	220a      	movs	r2, #10
 80082d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80082d2:	4b03      	ldr	r3, [pc, #12]	; (80082e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	200001d4 	.word	0x200001d4

080082e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e009      	b.n	800830c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	33b0      	adds	r3, #176	; 0xb0
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	32b0      	adds	r2, #176	; 0xb0
 800832e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008332:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800833a:	2303      	movs	r3, #3
 800833c:	e008      	b.n	8008350 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	371c      	adds	r7, #28
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	32b0      	adds	r2, #176	; 0xb0
 8008370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008374:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d101      	bne.n	8008380 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800837c:	2303      	movs	r3, #3
 800837e:	e004      	b.n	800838a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
	...

08008398 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	32b0      	adds	r2, #176	; 0xb0
 80083aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80083b0:	2301      	movs	r3, #1
 80083b2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	32b0      	adds	r2, #176	; 0xb0
 80083be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e025      	b.n	8008416 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d11f      	bne.n	8008414 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80083dc:	4b10      	ldr	r3, [pc, #64]	; (8008420 <USBD_CDC_TransmitPacket+0x88>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	f003 020f 	and.w	r2, r3, #15
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	4613      	mov	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4403      	add	r3, r0
 80083f6:	3318      	adds	r3, #24
 80083f8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80083fa:	4b09      	ldr	r3, [pc, #36]	; (8008420 <USBD_CDC_TransmitPacket+0x88>)
 80083fc:	7819      	ldrb	r1, [r3, #0]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 ffc9 	bl	800a3a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	2000025b 	.word	0x2000025b

08008424 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	32b0      	adds	r2, #176	; 0xb0
 8008436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	32b0      	adds	r2, #176	; 0xb0
 8008446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d101      	bne.n	8008452 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800844e:	2303      	movs	r3, #3
 8008450:	e018      	b.n	8008484 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	7c1b      	ldrb	r3, [r3, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10a      	bne.n	8008470 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800845a:	4b0c      	ldr	r3, [pc, #48]	; (800848c <USBD_CDC_ReceivePacket+0x68>)
 800845c:	7819      	ldrb	r1, [r3, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f001 ffbb 	bl	800a3e4 <USBD_LL_PrepareReceive>
 800846e:	e008      	b.n	8008482 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008470:	4b06      	ldr	r3, [pc, #24]	; (800848c <USBD_CDC_ReceivePacket+0x68>)
 8008472:	7819      	ldrb	r1, [r3, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800847a:	2340      	movs	r3, #64	; 0x40
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f001 ffb1 	bl	800a3e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	2000025c 	.word	0x2000025c

08008490 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	4613      	mov	r3, r2
 800849c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e01f      	b.n	80084e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	79fa      	ldrb	r2, [r7, #7]
 80084da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f001 fe25 	bl	800a12c <USBD_LL_Init>
 80084e2:	4603      	mov	r3, r0
 80084e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3718      	adds	r7, #24
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d101      	bne.n	8008508 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008504:	2303      	movs	r3, #3
 8008506:	e025      	b.n	8008554 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	32ae      	adds	r2, #174	; 0xae
 800851a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00f      	beq.n	8008544 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	32ae      	adds	r2, #174	; 0xae
 800852e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	f107 020e 	add.w	r2, r7, #14
 8008538:	4610      	mov	r0, r2
 800853a:	4798      	blx	r3
 800853c:	4602      	mov	r2, r0
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800854a:	1c5a      	adds	r2, r3, #1
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 fe33 	bl	800a1d0 <USBD_LL_Start>
 800856a:	4603      	mov	r3, r0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800857c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800857e:	4618      	mov	r0, r3
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	460b      	mov	r3, r1
 8008594:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d009      	beq.n	80085b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	78fa      	ldrb	r2, [r7, #3]
 80085ae:	4611      	mov	r1, r2
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	4798      	blx	r3
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	460b      	mov	r3, r1
 80085cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	78fa      	ldrb	r2, [r7, #3]
 80085dc:	4611      	mov	r1, r2
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	4798      	blx	r3
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085e8:	2303      	movs	r3, #3
 80085ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b084      	sub	sp, #16
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	4618      	mov	r0, r3
 800860a:	f001 f908 	bl	800981e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800861c:	461a      	mov	r2, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800862a:	f003 031f 	and.w	r3, r3, #31
 800862e:	2b02      	cmp	r3, #2
 8008630:	d01a      	beq.n	8008668 <USBD_LL_SetupStage+0x72>
 8008632:	2b02      	cmp	r3, #2
 8008634:	d822      	bhi.n	800867c <USBD_LL_SetupStage+0x86>
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <USBD_LL_SetupStage+0x4a>
 800863a:	2b01      	cmp	r3, #1
 800863c:	d00a      	beq.n	8008654 <USBD_LL_SetupStage+0x5e>
 800863e:	e01d      	b.n	800867c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fb5f 	bl	8008d0c <USBD_StdDevReq>
 800864e:	4603      	mov	r3, r0
 8008650:	73fb      	strb	r3, [r7, #15]
      break;
 8008652:	e020      	b.n	8008696 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fbc7 	bl	8008df0 <USBD_StdItfReq>
 8008662:	4603      	mov	r3, r0
 8008664:	73fb      	strb	r3, [r7, #15]
      break;
 8008666:	e016      	b.n	8008696 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fc29 	bl	8008ec8 <USBD_StdEPReq>
 8008676:	4603      	mov	r3, r0
 8008678:	73fb      	strb	r3, [r7, #15]
      break;
 800867a:	e00c      	b.n	8008696 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008682:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008686:	b2db      	uxtb	r3, r3
 8008688:	4619      	mov	r1, r3
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 fe00 	bl	800a290 <USBD_LL_StallEP>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]
      break;
 8008694:	bf00      	nop
  }

  return ret;
 8008696:	7bfb      	ldrb	r3, [r7, #15]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	460b      	mov	r3, r1
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80086b2:	7afb      	ldrb	r3, [r7, #11]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d16e      	bne.n	8008796 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	f040 8098 	bne.w	80087fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	689a      	ldr	r2, [r3, #8]
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d913      	bls.n	8008700 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	1ad2      	subs	r2, r2, r3
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	68da      	ldr	r2, [r3, #12]
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	4293      	cmp	r3, r2
 80086f0:	bf28      	it	cs
 80086f2:	4613      	movcs	r3, r2
 80086f4:	461a      	mov	r2, r3
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f001 f984 	bl	8009a06 <USBD_CtlContinueRx>
 80086fe:	e07d      	b.n	80087fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008706:	f003 031f 	and.w	r3, r3, #31
 800870a:	2b02      	cmp	r3, #2
 800870c:	d014      	beq.n	8008738 <USBD_LL_DataOutStage+0x98>
 800870e:	2b02      	cmp	r3, #2
 8008710:	d81d      	bhi.n	800874e <USBD_LL_DataOutStage+0xae>
 8008712:	2b00      	cmp	r3, #0
 8008714:	d002      	beq.n	800871c <USBD_LL_DataOutStage+0x7c>
 8008716:	2b01      	cmp	r3, #1
 8008718:	d003      	beq.n	8008722 <USBD_LL_DataOutStage+0x82>
 800871a:	e018      	b.n	800874e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	75bb      	strb	r3, [r7, #22]
            break;
 8008720:	e018      	b.n	8008754 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008728:	b2db      	uxtb	r3, r3
 800872a:	4619      	mov	r1, r3
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 fa5e 	bl	8008bee <USBD_CoreFindIF>
 8008732:	4603      	mov	r3, r0
 8008734:	75bb      	strb	r3, [r7, #22]
            break;
 8008736:	e00d      	b.n	8008754 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800873e:	b2db      	uxtb	r3, r3
 8008740:	4619      	mov	r1, r3
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 fa60 	bl	8008c08 <USBD_CoreFindEP>
 8008748:	4603      	mov	r3, r0
 800874a:	75bb      	strb	r3, [r7, #22]
            break;
 800874c:	e002      	b.n	8008754 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800874e:	2300      	movs	r3, #0
 8008750:	75bb      	strb	r3, [r7, #22]
            break;
 8008752:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008754:	7dbb      	ldrb	r3, [r7, #22]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d119      	bne.n	800878e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b03      	cmp	r3, #3
 8008764:	d113      	bne.n	800878e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008766:	7dba      	ldrb	r2, [r7, #22]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	32ae      	adds	r2, #174	; 0xae
 800876c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00b      	beq.n	800878e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008776:	7dba      	ldrb	r2, [r7, #22]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800877e:	7dba      	ldrb	r2, [r7, #22]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	32ae      	adds	r2, #174	; 0xae
 8008784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f001 f94a 	bl	8009a28 <USBD_CtlSendStatus>
 8008794:	e032      	b.n	80087fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008796:	7afb      	ldrb	r3, [r7, #11]
 8008798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800879c:	b2db      	uxtb	r3, r3
 800879e:	4619      	mov	r1, r3
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 fa31 	bl	8008c08 <USBD_CoreFindEP>
 80087a6:	4603      	mov	r3, r0
 80087a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087aa:	7dbb      	ldrb	r3, [r7, #22]
 80087ac:	2bff      	cmp	r3, #255	; 0xff
 80087ae:	d025      	beq.n	80087fc <USBD_LL_DataOutStage+0x15c>
 80087b0:	7dbb      	ldrb	r3, [r7, #22]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d122      	bne.n	80087fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d117      	bne.n	80087f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80087c2:	7dba      	ldrb	r2, [r7, #22]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	32ae      	adds	r2, #174	; 0xae
 80087c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00f      	beq.n	80087f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087d2:	7dba      	ldrb	r2, [r7, #22]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087da:	7dba      	ldrb	r2, [r7, #22]
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	32ae      	adds	r2, #174	; 0xae
 80087e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	7afa      	ldrb	r2, [r7, #11]
 80087e8:	4611      	mov	r1, r2
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	4798      	blx	r3
 80087ee:	4603      	mov	r3, r0
 80087f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	e000      	b.n	80087fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b086      	sub	sp, #24
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	460b      	mov	r3, r1
 8008810:	607a      	str	r2, [r7, #4]
 8008812:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008814:	7afb      	ldrb	r3, [r7, #11]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d16f      	bne.n	80088fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3314      	adds	r3, #20
 800881e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008826:	2b02      	cmp	r3, #2
 8008828:	d15a      	bne.n	80088e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	689a      	ldr	r2, [r3, #8]
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	429a      	cmp	r2, r3
 8008834:	d914      	bls.n	8008860 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	689a      	ldr	r2, [r3, #8]
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	1ad2      	subs	r2, r2, r3
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	461a      	mov	r2, r3
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f001 f8ac 	bl	80099aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008852:	2300      	movs	r3, #0
 8008854:	2200      	movs	r2, #0
 8008856:	2100      	movs	r1, #0
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f001 fdc3 	bl	800a3e4 <USBD_LL_PrepareReceive>
 800885e:	e03f      	b.n	80088e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	68da      	ldr	r2, [r3, #12]
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	429a      	cmp	r2, r3
 800886a:	d11c      	bne.n	80088a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008874:	429a      	cmp	r2, r3
 8008876:	d316      	bcc.n	80088a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008882:	429a      	cmp	r2, r3
 8008884:	d20f      	bcs.n	80088a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008886:	2200      	movs	r2, #0
 8008888:	2100      	movs	r1, #0
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f001 f88d 	bl	80099aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008898:	2300      	movs	r3, #0
 800889a:	2200      	movs	r2, #0
 800889c:	2100      	movs	r1, #0
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f001 fda0 	bl	800a3e4 <USBD_LL_PrepareReceive>
 80088a4:	e01c      	b.n	80088e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d10f      	bne.n	80088d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d009      	beq.n	80088d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088d2:	2180      	movs	r1, #128	; 0x80
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f001 fcdb 	bl	800a290 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f001 f8b7 	bl	8009a4e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d03a      	beq.n	8008960 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f7ff fe42 	bl	8008574 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088f8:	e032      	b.n	8008960 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088fa:	7afb      	ldrb	r3, [r7, #11]
 80088fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008900:	b2db      	uxtb	r3, r3
 8008902:	4619      	mov	r1, r3
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 f97f 	bl	8008c08 <USBD_CoreFindEP>
 800890a:	4603      	mov	r3, r0
 800890c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800890e:	7dfb      	ldrb	r3, [r7, #23]
 8008910:	2bff      	cmp	r3, #255	; 0xff
 8008912:	d025      	beq.n	8008960 <USBD_LL_DataInStage+0x15a>
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d122      	bne.n	8008960 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b03      	cmp	r3, #3
 8008924:	d11c      	bne.n	8008960 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008926:	7dfa      	ldrb	r2, [r7, #23]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	32ae      	adds	r2, #174	; 0xae
 800892c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d014      	beq.n	8008960 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008936:	7dfa      	ldrb	r2, [r7, #23]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800893e:	7dfa      	ldrb	r2, [r7, #23]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	32ae      	adds	r2, #174	; 0xae
 8008944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	7afa      	ldrb	r2, [r7, #11]
 800894c:	4611      	mov	r1, r2
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	4798      	blx	r3
 8008952:	4603      	mov	r3, r0
 8008954:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008956:	7dbb      	ldrb	r3, [r7, #22]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800895c:	7dbb      	ldrb	r3, [r7, #22]
 800895e:	e000      	b.n	8008962 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d014      	beq.n	80089d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00e      	beq.n	80089d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	6852      	ldr	r2, [r2, #4]
 80089be:	b2d2      	uxtb	r2, r2
 80089c0:	4611      	mov	r1, r2
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	4798      	blx	r3
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089cc:	2303      	movs	r3, #3
 80089ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089d0:	2340      	movs	r3, #64	; 0x40
 80089d2:	2200      	movs	r2, #0
 80089d4:	2100      	movs	r1, #0
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f001 fc15 	bl	800a206 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2240      	movs	r2, #64	; 0x40
 80089e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089ec:	2340      	movs	r3, #64	; 0x40
 80089ee:	2200      	movs	r2, #0
 80089f0:	2180      	movs	r1, #128	; 0x80
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 fc07 	bl	800a206 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2240      	movs	r2, #64	; 0x40
 8008a02:	621a      	str	r2, [r3, #32]

  return ret;
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	78fa      	ldrb	r2, [r7, #3]
 8008a1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2204      	movs	r2, #4
 8008a48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a5a:	b480      	push	{r7}
 8008a5c:	b083      	sub	sp, #12
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	d106      	bne.n	8008a7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b082      	sub	sp, #8
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d110      	bne.n	8008ac0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00b      	beq.n	8008ac0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d005      	beq.n	8008ac0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aba:	69db      	ldr	r3, [r3, #28]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	32ae      	adds	r2, #174	; 0xae
 8008ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e01c      	b.n	8008b26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	2b03      	cmp	r3, #3
 8008af6:	d115      	bne.n	8008b24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	32ae      	adds	r2, #174	; 0xae
 8008b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d00b      	beq.n	8008b24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	32ae      	adds	r2, #174	; 0xae
 8008b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	78fa      	ldrb	r2, [r7, #3]
 8008b1e:	4611      	mov	r1, r2
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b082      	sub	sp, #8
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	460b      	mov	r3, r1
 8008b38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	32ae      	adds	r2, #174	; 0xae
 8008b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	e01c      	b.n	8008b8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d115      	bne.n	8008b88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	32ae      	adds	r2, #174	; 0xae
 8008b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00b      	beq.n	8008b88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	32ae      	adds	r2, #174	; 0xae
 8008b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	78fa      	ldrb	r2, [r7, #3]
 8008b82:	4611      	mov	r1, r2
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00e      	beq.n	8008be4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	6852      	ldr	r2, [r2, #4]
 8008bd2:	b2d2      	uxtb	r2, r2
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008be0:	2303      	movs	r3, #3
 8008be2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b083      	sub	sp, #12
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bfa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b086      	sub	sp, #24
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c36:	2300      	movs	r3, #0
 8008c38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	885b      	ldrh	r3, [r3, #2]
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d920      	bls.n	8008c8c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c52:	e013      	b.n	8008c7c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c54:	f107 030a 	add.w	r3, r7, #10
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6978      	ldr	r0, [r7, #20]
 8008c5c:	f000 f81b 	bl	8008c96 <USBD_GetNextDesc>
 8008c60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	2b05      	cmp	r3, #5
 8008c68:	d108      	bne.n	8008c7c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	789b      	ldrb	r3, [r3, #2]
 8008c72:	78fa      	ldrb	r2, [r7, #3]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d008      	beq.n	8008c8a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	885b      	ldrh	r3, [r3, #2]
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	897b      	ldrh	r3, [r7, #10]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d8e5      	bhi.n	8008c54 <USBD_GetEpDesc+0x32>
 8008c88:	e000      	b.n	8008c8c <USBD_GetEpDesc+0x6a>
          break;
 8008c8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c8c:	693b      	ldr	r3, [r7, #16]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b085      	sub	sp, #20
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	881a      	ldrh	r2, [r3, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	4413      	add	r3, r2
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cee:	8a3b      	ldrh	r3, [r7, #16]
 8008cf0:	021b      	lsls	r3, r3, #8
 8008cf2:	b21a      	sxth	r2, r3
 8008cf4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	b21b      	sxth	r3, r3
 8008cfc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008cfe:	89fb      	ldrh	r3, [r7, #14]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	371c      	adds	r7, #28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d22:	2b40      	cmp	r3, #64	; 0x40
 8008d24:	d005      	beq.n	8008d32 <USBD_StdDevReq+0x26>
 8008d26:	2b40      	cmp	r3, #64	; 0x40
 8008d28:	d857      	bhi.n	8008dda <USBD_StdDevReq+0xce>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00f      	beq.n	8008d4e <USBD_StdDevReq+0x42>
 8008d2e:	2b20      	cmp	r3, #32
 8008d30:	d153      	bne.n	8008dda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	32ae      	adds	r2, #174	; 0xae
 8008d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	4798      	blx	r3
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d4c:	e04a      	b.n	8008de4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	785b      	ldrb	r3, [r3, #1]
 8008d52:	2b09      	cmp	r3, #9
 8008d54:	d83b      	bhi.n	8008dce <USBD_StdDevReq+0xc2>
 8008d56:	a201      	add	r2, pc, #4	; (adr r2, 8008d5c <USBD_StdDevReq+0x50>)
 8008d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5c:	08008db1 	.word	0x08008db1
 8008d60:	08008dc5 	.word	0x08008dc5
 8008d64:	08008dcf 	.word	0x08008dcf
 8008d68:	08008dbb 	.word	0x08008dbb
 8008d6c:	08008dcf 	.word	0x08008dcf
 8008d70:	08008d8f 	.word	0x08008d8f
 8008d74:	08008d85 	.word	0x08008d85
 8008d78:	08008dcf 	.word	0x08008dcf
 8008d7c:	08008da7 	.word	0x08008da7
 8008d80:	08008d99 	.word	0x08008d99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fa3c 	bl	8009204 <USBD_GetDescriptor>
          break;
 8008d8c:	e024      	b.n	8008dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fba1 	bl	80094d8 <USBD_SetAddress>
          break;
 8008d96:	e01f      	b.n	8008dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fbe0 	bl	8009560 <USBD_SetConfig>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73fb      	strb	r3, [r7, #15]
          break;
 8008da4:	e018      	b.n	8008dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fc83 	bl	80096b4 <USBD_GetConfig>
          break;
 8008dae:	e013      	b.n	8008dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fcb4 	bl	8009720 <USBD_GetStatus>
          break;
 8008db8:	e00e      	b.n	8008dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fce3 	bl	8009788 <USBD_SetFeature>
          break;
 8008dc2:	e009      	b.n	8008dd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fd07 	bl	80097da <USBD_ClrFeature>
          break;
 8008dcc:	e004      	b.n	8008dd8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fd5e 	bl	8009892 <USBD_CtlError>
          break;
 8008dd6:	bf00      	nop
      }
      break;
 8008dd8:	e004      	b.n	8008de4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fd58 	bl	8009892 <USBD_CtlError>
      break;
 8008de2:	bf00      	nop
  }

  return ret;
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop

08008df0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e06:	2b40      	cmp	r3, #64	; 0x40
 8008e08:	d005      	beq.n	8008e16 <USBD_StdItfReq+0x26>
 8008e0a:	2b40      	cmp	r3, #64	; 0x40
 8008e0c:	d852      	bhi.n	8008eb4 <USBD_StdItfReq+0xc4>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <USBD_StdItfReq+0x26>
 8008e12:	2b20      	cmp	r3, #32
 8008e14:	d14e      	bne.n	8008eb4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d840      	bhi.n	8008ea6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	889b      	ldrh	r3, [r3, #4]
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d836      	bhi.n	8008e9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	889b      	ldrh	r3, [r3, #4]
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	4619      	mov	r1, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7ff fed9 	bl	8008bee <USBD_CoreFindIF>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e40:	7bbb      	ldrb	r3, [r7, #14]
 8008e42:	2bff      	cmp	r3, #255	; 0xff
 8008e44:	d01d      	beq.n	8008e82 <USBD_StdItfReq+0x92>
 8008e46:	7bbb      	ldrb	r3, [r7, #14]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d11a      	bne.n	8008e82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e4c:	7bba      	ldrb	r2, [r7, #14]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	32ae      	adds	r2, #174	; 0xae
 8008e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00f      	beq.n	8008e7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e5c:	7bba      	ldrb	r2, [r7, #14]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e64:	7bba      	ldrb	r2, [r7, #14]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	32ae      	adds	r2, #174	; 0xae
 8008e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	4798      	blx	r3
 8008e76:	4603      	mov	r3, r0
 8008e78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e7a:	e004      	b.n	8008e86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e80:	e001      	b.n	8008e86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e82:	2303      	movs	r3, #3
 8008e84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	88db      	ldrh	r3, [r3, #6]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d110      	bne.n	8008eb0 <USBD_StdItfReq+0xc0>
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10d      	bne.n	8008eb0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fdc7 	bl	8009a28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e9a:	e009      	b.n	8008eb0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fcf7 	bl	8009892 <USBD_CtlError>
          break;
 8008ea4:	e004      	b.n	8008eb0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fcf2 	bl	8009892 <USBD_CtlError>
          break;
 8008eae:	e000      	b.n	8008eb2 <USBD_StdItfReq+0xc2>
          break;
 8008eb0:	bf00      	nop
      }
      break;
 8008eb2:	e004      	b.n	8008ebe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fceb 	bl	8009892 <USBD_CtlError>
      break;
 8008ebc:	bf00      	nop
  }

  return ret;
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	889b      	ldrh	r3, [r3, #4]
 8008eda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ee4:	2b40      	cmp	r3, #64	; 0x40
 8008ee6:	d007      	beq.n	8008ef8 <USBD_StdEPReq+0x30>
 8008ee8:	2b40      	cmp	r3, #64	; 0x40
 8008eea:	f200 817f 	bhi.w	80091ec <USBD_StdEPReq+0x324>
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d02a      	beq.n	8008f48 <USBD_StdEPReq+0x80>
 8008ef2:	2b20      	cmp	r3, #32
 8008ef4:	f040 817a 	bne.w	80091ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff fe83 	bl	8008c08 <USBD_CoreFindEP>
 8008f02:	4603      	mov	r3, r0
 8008f04:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f06:	7b7b      	ldrb	r3, [r7, #13]
 8008f08:	2bff      	cmp	r3, #255	; 0xff
 8008f0a:	f000 8174 	beq.w	80091f6 <USBD_StdEPReq+0x32e>
 8008f0e:	7b7b      	ldrb	r3, [r7, #13]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f040 8170 	bne.w	80091f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f16:	7b7a      	ldrb	r2, [r7, #13]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f1e:	7b7a      	ldrb	r2, [r7, #13]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	32ae      	adds	r2, #174	; 0xae
 8008f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f000 8163 	beq.w	80091f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f30:	7b7a      	ldrb	r2, [r7, #13]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	32ae      	adds	r2, #174	; 0xae
 8008f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	4798      	blx	r3
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f46:	e156      	b.n	80091f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	785b      	ldrb	r3, [r3, #1]
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	d008      	beq.n	8008f62 <USBD_StdEPReq+0x9a>
 8008f50:	2b03      	cmp	r3, #3
 8008f52:	f300 8145 	bgt.w	80091e0 <USBD_StdEPReq+0x318>
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 809b 	beq.w	8009092 <USBD_StdEPReq+0x1ca>
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d03c      	beq.n	8008fda <USBD_StdEPReq+0x112>
 8008f60:	e13e      	b.n	80091e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d002      	beq.n	8008f74 <USBD_StdEPReq+0xac>
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d016      	beq.n	8008fa0 <USBD_StdEPReq+0xd8>
 8008f72:	e02c      	b.n	8008fce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00d      	beq.n	8008f96 <USBD_StdEPReq+0xce>
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	2b80      	cmp	r3, #128	; 0x80
 8008f7e:	d00a      	beq.n	8008f96 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f001 f983 	bl	800a290 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f8a:	2180      	movs	r1, #128	; 0x80
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f001 f97f 	bl	800a290 <USBD_LL_StallEP>
 8008f92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f94:	e020      	b.n	8008fd8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fc7a 	bl	8009892 <USBD_CtlError>
              break;
 8008f9e:	e01b      	b.n	8008fd8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	885b      	ldrh	r3, [r3, #2]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10e      	bne.n	8008fc6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00b      	beq.n	8008fc6 <USBD_StdEPReq+0xfe>
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	2b80      	cmp	r3, #128	; 0x80
 8008fb2:	d008      	beq.n	8008fc6 <USBD_StdEPReq+0xfe>
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	88db      	ldrh	r3, [r3, #6]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d104      	bne.n	8008fc6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f001 f965 	bl	800a290 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fd2e 	bl	8009a28 <USBD_CtlSendStatus>

              break;
 8008fcc:	e004      	b.n	8008fd8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fc5e 	bl	8009892 <USBD_CtlError>
              break;
 8008fd6:	bf00      	nop
          }
          break;
 8008fd8:	e107      	b.n	80091ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d002      	beq.n	8008fec <USBD_StdEPReq+0x124>
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	d016      	beq.n	8009018 <USBD_StdEPReq+0x150>
 8008fea:	e04b      	b.n	8009084 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00d      	beq.n	800900e <USBD_StdEPReq+0x146>
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	2b80      	cmp	r3, #128	; 0x80
 8008ff6:	d00a      	beq.n	800900e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ff8:	7bbb      	ldrb	r3, [r7, #14]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 f947 	bl	800a290 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009002:	2180      	movs	r1, #128	; 0x80
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f001 f943 	bl	800a290 <USBD_LL_StallEP>
 800900a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800900c:	e040      	b.n	8009090 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fc3e 	bl	8009892 <USBD_CtlError>
              break;
 8009016:	e03b      	b.n	8009090 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	885b      	ldrh	r3, [r3, #2]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d136      	bne.n	800908e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009020:	7bbb      	ldrb	r3, [r7, #14]
 8009022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009026:	2b00      	cmp	r3, #0
 8009028:	d004      	beq.n	8009034 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 f94d 	bl	800a2ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fcf7 	bl	8009a28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7ff fde2 	bl	8008c08 <USBD_CoreFindEP>
 8009044:	4603      	mov	r3, r0
 8009046:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009048:	7b7b      	ldrb	r3, [r7, #13]
 800904a:	2bff      	cmp	r3, #255	; 0xff
 800904c:	d01f      	beq.n	800908e <USBD_StdEPReq+0x1c6>
 800904e:	7b7b      	ldrb	r3, [r7, #13]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d11c      	bne.n	800908e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009054:	7b7a      	ldrb	r2, [r7, #13]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800905c:	7b7a      	ldrb	r2, [r7, #13]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	32ae      	adds	r2, #174	; 0xae
 8009062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d010      	beq.n	800908e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800906c:	7b7a      	ldrb	r2, [r7, #13]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	32ae      	adds	r2, #174	; 0xae
 8009072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
 800907e:	4603      	mov	r3, r0
 8009080:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009082:	e004      	b.n	800908e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fc03 	bl	8009892 <USBD_CtlError>
              break;
 800908c:	e000      	b.n	8009090 <USBD_StdEPReq+0x1c8>
              break;
 800908e:	bf00      	nop
          }
          break;
 8009090:	e0ab      	b.n	80091ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b02      	cmp	r3, #2
 800909c:	d002      	beq.n	80090a4 <USBD_StdEPReq+0x1dc>
 800909e:	2b03      	cmp	r3, #3
 80090a0:	d032      	beq.n	8009108 <USBD_StdEPReq+0x240>
 80090a2:	e097      	b.n	80091d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d007      	beq.n	80090ba <USBD_StdEPReq+0x1f2>
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	2b80      	cmp	r3, #128	; 0x80
 80090ae:	d004      	beq.n	80090ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fbed 	bl	8009892 <USBD_CtlError>
                break;
 80090b8:	e091      	b.n	80091de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	da0b      	bge.n	80090da <USBD_StdEPReq+0x212>
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090c8:	4613      	mov	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	3310      	adds	r3, #16
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	4413      	add	r3, r2
 80090d6:	3304      	adds	r3, #4
 80090d8:	e00b      	b.n	80090f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090da:	7bbb      	ldrb	r3, [r7, #14]
 80090dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090e0:	4613      	mov	r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	4413      	add	r3, r2
 80090f0:	3304      	adds	r3, #4
 80090f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2200      	movs	r2, #0
 80090f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2202      	movs	r2, #2
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fc37 	bl	8009974 <USBD_CtlSendData>
              break;
 8009106:	e06a      	b.n	80091de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800910c:	2b00      	cmp	r3, #0
 800910e:	da11      	bge.n	8009134 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	f003 020f 	and.w	r2, r3, #15
 8009116:	6879      	ldr	r1, [r7, #4]
 8009118:	4613      	mov	r3, r2
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	440b      	add	r3, r1
 8009122:	3324      	adds	r3, #36	; 0x24
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d117      	bne.n	800915a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fbb0 	bl	8009892 <USBD_CtlError>
                  break;
 8009132:	e054      	b.n	80091de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	f003 020f 	and.w	r2, r3, #15
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	4613      	mov	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	440b      	add	r3, r1
 8009146:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d104      	bne.n	800915a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fb9d 	bl	8009892 <USBD_CtlError>
                  break;
 8009158:	e041      	b.n	80091de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800915a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800915e:	2b00      	cmp	r3, #0
 8009160:	da0b      	bge.n	800917a <USBD_StdEPReq+0x2b2>
 8009162:	7bbb      	ldrb	r3, [r7, #14]
 8009164:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009168:	4613      	mov	r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	3310      	adds	r3, #16
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	4413      	add	r3, r2
 8009176:	3304      	adds	r3, #4
 8009178:	e00b      	b.n	8009192 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	4413      	add	r3, r2
 8009190:	3304      	adds	r3, #4
 8009192:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <USBD_StdEPReq+0x2d8>
 800919a:	7bbb      	ldrb	r3, [r7, #14]
 800919c:	2b80      	cmp	r3, #128	; 0x80
 800919e:	d103      	bne.n	80091a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	e00e      	b.n	80091c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f001 f8ad 	bl	800a30c <USBD_LL_IsStallEP>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d003      	beq.n	80091c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2201      	movs	r2, #1
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	e002      	b.n	80091c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	2202      	movs	r2, #2
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 fbd1 	bl	8009974 <USBD_CtlSendData>
              break;
 80091d2:	e004      	b.n	80091de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fb5b 	bl	8009892 <USBD_CtlError>
              break;
 80091dc:	bf00      	nop
          }
          break;
 80091de:	e004      	b.n	80091ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fb55 	bl	8009892 <USBD_CtlError>
          break;
 80091e8:	bf00      	nop
      }
      break;
 80091ea:	e005      	b.n	80091f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fb4f 	bl	8009892 <USBD_CtlError>
      break;
 80091f4:	e000      	b.n	80091f8 <USBD_StdEPReq+0x330>
      break;
 80091f6:	bf00      	nop
  }

  return ret;
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800920e:	2300      	movs	r3, #0
 8009210:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009216:	2300      	movs	r3, #0
 8009218:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	885b      	ldrh	r3, [r3, #2]
 800921e:	0a1b      	lsrs	r3, r3, #8
 8009220:	b29b      	uxth	r3, r3
 8009222:	3b01      	subs	r3, #1
 8009224:	2b06      	cmp	r3, #6
 8009226:	f200 8128 	bhi.w	800947a <USBD_GetDescriptor+0x276>
 800922a:	a201      	add	r2, pc, #4	; (adr r2, 8009230 <USBD_GetDescriptor+0x2c>)
 800922c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009230:	0800924d 	.word	0x0800924d
 8009234:	08009265 	.word	0x08009265
 8009238:	080092a5 	.word	0x080092a5
 800923c:	0800947b 	.word	0x0800947b
 8009240:	0800947b 	.word	0x0800947b
 8009244:	0800941b 	.word	0x0800941b
 8009248:	08009447 	.word	0x08009447
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	7c12      	ldrb	r2, [r2, #16]
 8009258:	f107 0108 	add.w	r1, r7, #8
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
 8009260:	60f8      	str	r0, [r7, #12]
      break;
 8009262:	e112      	b.n	800948a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	7c1b      	ldrb	r3, [r3, #16]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d10d      	bne.n	8009288 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009274:	f107 0208 	add.w	r2, r7, #8
 8009278:	4610      	mov	r0, r2
 800927a:	4798      	blx	r3
 800927c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3301      	adds	r3, #1
 8009282:	2202      	movs	r2, #2
 8009284:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009286:	e100      	b.n	800948a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009290:	f107 0208 	add.w	r2, r7, #8
 8009294:	4610      	mov	r0, r2
 8009296:	4798      	blx	r3
 8009298:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	3301      	adds	r3, #1
 800929e:	2202      	movs	r2, #2
 80092a0:	701a      	strb	r2, [r3, #0]
      break;
 80092a2:	e0f2      	b.n	800948a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	885b      	ldrh	r3, [r3, #2]
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b05      	cmp	r3, #5
 80092ac:	f200 80ac 	bhi.w	8009408 <USBD_GetDescriptor+0x204>
 80092b0:	a201      	add	r2, pc, #4	; (adr r2, 80092b8 <USBD_GetDescriptor+0xb4>)
 80092b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b6:	bf00      	nop
 80092b8:	080092d1 	.word	0x080092d1
 80092bc:	08009305 	.word	0x08009305
 80092c0:	08009339 	.word	0x08009339
 80092c4:	0800936d 	.word	0x0800936d
 80092c8:	080093a1 	.word	0x080093a1
 80092cc:	080093d5 	.word	0x080093d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00b      	beq.n	80092f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	7c12      	ldrb	r2, [r2, #16]
 80092e8:	f107 0108 	add.w	r1, r7, #8
 80092ec:	4610      	mov	r0, r2
 80092ee:	4798      	blx	r3
 80092f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092f2:	e091      	b.n	8009418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 facb 	bl	8009892 <USBD_CtlError>
            err++;
 80092fc:	7afb      	ldrb	r3, [r7, #11]
 80092fe:	3301      	adds	r3, #1
 8009300:	72fb      	strb	r3, [r7, #11]
          break;
 8009302:	e089      	b.n	8009418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00b      	beq.n	8009328 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	7c12      	ldrb	r2, [r2, #16]
 800931c:	f107 0108 	add.w	r1, r7, #8
 8009320:	4610      	mov	r0, r2
 8009322:	4798      	blx	r3
 8009324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009326:	e077      	b.n	8009418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fab1 	bl	8009892 <USBD_CtlError>
            err++;
 8009330:	7afb      	ldrb	r3, [r7, #11]
 8009332:	3301      	adds	r3, #1
 8009334:	72fb      	strb	r3, [r7, #11]
          break;
 8009336:	e06f      	b.n	8009418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00b      	beq.n	800935c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	7c12      	ldrb	r2, [r2, #16]
 8009350:	f107 0108 	add.w	r1, r7, #8
 8009354:	4610      	mov	r0, r2
 8009356:	4798      	blx	r3
 8009358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800935a:	e05d      	b.n	8009418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fa97 	bl	8009892 <USBD_CtlError>
            err++;
 8009364:	7afb      	ldrb	r3, [r7, #11]
 8009366:	3301      	adds	r3, #1
 8009368:	72fb      	strb	r3, [r7, #11]
          break;
 800936a:	e055      	b.n	8009418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00b      	beq.n	8009390 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	7c12      	ldrb	r2, [r2, #16]
 8009384:	f107 0108 	add.w	r1, r7, #8
 8009388:	4610      	mov	r0, r2
 800938a:	4798      	blx	r3
 800938c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800938e:	e043      	b.n	8009418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fa7d 	bl	8009892 <USBD_CtlError>
            err++;
 8009398:	7afb      	ldrb	r3, [r7, #11]
 800939a:	3301      	adds	r3, #1
 800939c:	72fb      	strb	r3, [r7, #11]
          break;
 800939e:	e03b      	b.n	8009418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00b      	beq.n	80093c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	7c12      	ldrb	r2, [r2, #16]
 80093b8:	f107 0108 	add.w	r1, r7, #8
 80093bc:	4610      	mov	r0, r2
 80093be:	4798      	blx	r3
 80093c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093c2:	e029      	b.n	8009418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fa63 	bl	8009892 <USBD_CtlError>
            err++;
 80093cc:	7afb      	ldrb	r3, [r7, #11]
 80093ce:	3301      	adds	r3, #1
 80093d0:	72fb      	strb	r3, [r7, #11]
          break;
 80093d2:	e021      	b.n	8009418 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00b      	beq.n	80093f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	7c12      	ldrb	r2, [r2, #16]
 80093ec:	f107 0108 	add.w	r1, r7, #8
 80093f0:	4610      	mov	r0, r2
 80093f2:	4798      	blx	r3
 80093f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093f6:	e00f      	b.n	8009418 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa49 	bl	8009892 <USBD_CtlError>
            err++;
 8009400:	7afb      	ldrb	r3, [r7, #11]
 8009402:	3301      	adds	r3, #1
 8009404:	72fb      	strb	r3, [r7, #11]
          break;
 8009406:	e007      	b.n	8009418 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 fa41 	bl	8009892 <USBD_CtlError>
          err++;
 8009410:	7afb      	ldrb	r3, [r7, #11]
 8009412:	3301      	adds	r3, #1
 8009414:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009416:	bf00      	nop
      }
      break;
 8009418:	e037      	b.n	800948a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	7c1b      	ldrb	r3, [r3, #16]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d109      	bne.n	8009436 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942a:	f107 0208 	add.w	r2, r7, #8
 800942e:	4610      	mov	r0, r2
 8009430:	4798      	blx	r3
 8009432:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009434:	e029      	b.n	800948a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fa2a 	bl	8009892 <USBD_CtlError>
        err++;
 800943e:	7afb      	ldrb	r3, [r7, #11]
 8009440:	3301      	adds	r3, #1
 8009442:	72fb      	strb	r3, [r7, #11]
      break;
 8009444:	e021      	b.n	800948a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	7c1b      	ldrb	r3, [r3, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10d      	bne.n	800946a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	f107 0208 	add.w	r2, r7, #8
 800945a:	4610      	mov	r0, r2
 800945c:	4798      	blx	r3
 800945e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	3301      	adds	r3, #1
 8009464:	2207      	movs	r2, #7
 8009466:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009468:	e00f      	b.n	800948a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fa10 	bl	8009892 <USBD_CtlError>
        err++;
 8009472:	7afb      	ldrb	r3, [r7, #11]
 8009474:	3301      	adds	r3, #1
 8009476:	72fb      	strb	r3, [r7, #11]
      break;
 8009478:	e007      	b.n	800948a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fa08 	bl	8009892 <USBD_CtlError>
      err++;
 8009482:	7afb      	ldrb	r3, [r7, #11]
 8009484:	3301      	adds	r3, #1
 8009486:	72fb      	strb	r3, [r7, #11]
      break;
 8009488:	bf00      	nop
  }

  if (err != 0U)
 800948a:	7afb      	ldrb	r3, [r7, #11]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d11e      	bne.n	80094ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	88db      	ldrh	r3, [r3, #6]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d016      	beq.n	80094c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009498:	893b      	ldrh	r3, [r7, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00e      	beq.n	80094bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	88da      	ldrh	r2, [r3, #6]
 80094a2:	893b      	ldrh	r3, [r7, #8]
 80094a4:	4293      	cmp	r3, r2
 80094a6:	bf28      	it	cs
 80094a8:	4613      	movcs	r3, r2
 80094aa:	b29b      	uxth	r3, r3
 80094ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80094ae:	893b      	ldrh	r3, [r7, #8]
 80094b0:	461a      	mov	r2, r3
 80094b2:	68f9      	ldr	r1, [r7, #12]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fa5d 	bl	8009974 <USBD_CtlSendData>
 80094ba:	e009      	b.n	80094d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f9e7 	bl	8009892 <USBD_CtlError>
 80094c4:	e004      	b.n	80094d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 faae 	bl	8009a28 <USBD_CtlSendStatus>
 80094cc:	e000      	b.n	80094d0 <USBD_GetDescriptor+0x2cc>
    return;
 80094ce:	bf00      	nop
  }
}
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop

080094d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	889b      	ldrh	r3, [r3, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d131      	bne.n	800954e <USBD_SetAddress+0x76>
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	88db      	ldrh	r3, [r3, #6]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d12d      	bne.n	800954e <USBD_SetAddress+0x76>
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	885b      	ldrh	r3, [r3, #2]
 80094f6:	2b7f      	cmp	r3, #127	; 0x7f
 80094f8:	d829      	bhi.n	800954e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	885b      	ldrh	r3, [r3, #2]
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009504:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b03      	cmp	r3, #3
 8009510:	d104      	bne.n	800951c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f9bc 	bl	8009892 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951a:	e01d      	b.n	8009558 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	7bfa      	ldrb	r2, [r7, #15]
 8009520:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	4619      	mov	r1, r3
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 ff1b 	bl	800a364 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fa7a 	bl	8009a28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d004      	beq.n	8009544 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2202      	movs	r2, #2
 800953e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009542:	e009      	b.n	8009558 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800954c:	e004      	b.n	8009558 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f99e 	bl	8009892 <USBD_CtlError>
  }
}
 8009556:	bf00      	nop
 8009558:	bf00      	nop
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800956a:	2300      	movs	r3, #0
 800956c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	885b      	ldrh	r3, [r3, #2]
 8009572:	b2da      	uxtb	r2, r3
 8009574:	4b4e      	ldr	r3, [pc, #312]	; (80096b0 <USBD_SetConfig+0x150>)
 8009576:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009578:	4b4d      	ldr	r3, [pc, #308]	; (80096b0 <USBD_SetConfig+0x150>)
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d905      	bls.n	800958c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009580:	6839      	ldr	r1, [r7, #0]
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 f985 	bl	8009892 <USBD_CtlError>
    return USBD_FAIL;
 8009588:	2303      	movs	r3, #3
 800958a:	e08c      	b.n	80096a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009592:	b2db      	uxtb	r3, r3
 8009594:	2b02      	cmp	r3, #2
 8009596:	d002      	beq.n	800959e <USBD_SetConfig+0x3e>
 8009598:	2b03      	cmp	r3, #3
 800959a:	d029      	beq.n	80095f0 <USBD_SetConfig+0x90>
 800959c:	e075      	b.n	800968a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800959e:	4b44      	ldr	r3, [pc, #272]	; (80096b0 <USBD_SetConfig+0x150>)
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d020      	beq.n	80095e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80095a6:	4b42      	ldr	r3, [pc, #264]	; (80096b0 <USBD_SetConfig+0x150>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095b0:	4b3f      	ldr	r3, [pc, #252]	; (80096b0 <USBD_SetConfig+0x150>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7fe ffe7 	bl	800858a <USBD_SetClassConfig>
 80095bc:	4603      	mov	r3, r0
 80095be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d008      	beq.n	80095d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f962 	bl	8009892 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2202      	movs	r2, #2
 80095d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095d6:	e065      	b.n	80096a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fa25 	bl	8009a28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2203      	movs	r2, #3
 80095e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095e6:	e05d      	b.n	80096a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 fa1d 	bl	8009a28 <USBD_CtlSendStatus>
      break;
 80095ee:	e059      	b.n	80096a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095f0:	4b2f      	ldr	r3, [pc, #188]	; (80096b0 <USBD_SetConfig+0x150>)
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d112      	bne.n	800961e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2202      	movs	r2, #2
 80095fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009600:	4b2b      	ldr	r3, [pc, #172]	; (80096b0 <USBD_SetConfig+0x150>)
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	461a      	mov	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800960a:	4b29      	ldr	r3, [pc, #164]	; (80096b0 <USBD_SetConfig+0x150>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	4619      	mov	r1, r3
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7fe ffd6 	bl	80085c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fa06 	bl	8009a28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800961c:	e042      	b.n	80096a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800961e:	4b24      	ldr	r3, [pc, #144]	; (80096b0 <USBD_SetConfig+0x150>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	429a      	cmp	r2, r3
 800962a:	d02a      	beq.n	8009682 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7fe ffc4 	bl	80085c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800963a:	4b1d      	ldr	r3, [pc, #116]	; (80096b0 <USBD_SetConfig+0x150>)
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009644:	4b1a      	ldr	r3, [pc, #104]	; (80096b0 <USBD_SetConfig+0x150>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7fe ff9d 	bl	800858a <USBD_SetClassConfig>
 8009650:	4603      	mov	r3, r0
 8009652:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00f      	beq.n	800967a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f918 	bl	8009892 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	b2db      	uxtb	r3, r3
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f7fe ffa9 	bl	80085c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2202      	movs	r2, #2
 8009674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009678:	e014      	b.n	80096a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f9d4 	bl	8009a28 <USBD_CtlSendStatus>
      break;
 8009680:	e010      	b.n	80096a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f9d0 	bl	8009a28 <USBD_CtlSendStatus>
      break;
 8009688:	e00c      	b.n	80096a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800968a:	6839      	ldr	r1, [r7, #0]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f900 	bl	8009892 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009692:	4b07      	ldr	r3, [pc, #28]	; (80096b0 <USBD_SetConfig+0x150>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7fe ff92 	bl	80085c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800969e:	2303      	movs	r3, #3
 80096a0:	73fb      	strb	r3, [r7, #15]
      break;
 80096a2:	bf00      	nop
  }

  return ret;
 80096a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	20000578 	.word	0x20000578

080096b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	88db      	ldrh	r3, [r3, #6]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d004      	beq.n	80096d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f8e2 	bl	8009892 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096ce:	e023      	b.n	8009718 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b02      	cmp	r3, #2
 80096da:	dc02      	bgt.n	80096e2 <USBD_GetConfig+0x2e>
 80096dc:	2b00      	cmp	r3, #0
 80096de:	dc03      	bgt.n	80096e8 <USBD_GetConfig+0x34>
 80096e0:	e015      	b.n	800970e <USBD_GetConfig+0x5a>
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d00b      	beq.n	80096fe <USBD_GetConfig+0x4a>
 80096e6:	e012      	b.n	800970e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3308      	adds	r3, #8
 80096f2:	2201      	movs	r2, #1
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f93c 	bl	8009974 <USBD_CtlSendData>
        break;
 80096fc:	e00c      	b.n	8009718 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	3304      	adds	r3, #4
 8009702:	2201      	movs	r2, #1
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f934 	bl	8009974 <USBD_CtlSendData>
        break;
 800970c:	e004      	b.n	8009718 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f8be 	bl	8009892 <USBD_CtlError>
        break;
 8009716:	bf00      	nop
}
 8009718:	bf00      	nop
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009730:	b2db      	uxtb	r3, r3
 8009732:	3b01      	subs	r3, #1
 8009734:	2b02      	cmp	r3, #2
 8009736:	d81e      	bhi.n	8009776 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	88db      	ldrh	r3, [r3, #6]
 800973c:	2b02      	cmp	r3, #2
 800973e:	d004      	beq.n	800974a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f8a5 	bl	8009892 <USBD_CtlError>
        break;
 8009748:	e01a      	b.n	8009780 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009756:	2b00      	cmp	r3, #0
 8009758:	d005      	beq.n	8009766 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	f043 0202 	orr.w	r2, r3, #2
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	330c      	adds	r3, #12
 800976a:	2202      	movs	r2, #2
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f900 	bl	8009974 <USBD_CtlSendData>
      break;
 8009774:	e004      	b.n	8009780 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f88a 	bl	8009892 <USBD_CtlError>
      break;
 800977e:	bf00      	nop
  }
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	885b      	ldrh	r3, [r3, #2]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d107      	bne.n	80097aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f940 	bl	8009a28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80097a8:	e013      	b.n	80097d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	885b      	ldrh	r3, [r3, #2]
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	d10b      	bne.n	80097ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	889b      	ldrh	r3, [r3, #4]
 80097b6:	0a1b      	lsrs	r3, r3, #8
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	b2da      	uxtb	r2, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f930 	bl	8009a28 <USBD_CtlSendStatus>
}
 80097c8:	e003      	b.n	80097d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f860 	bl	8009892 <USBD_CtlError>
}
 80097d2:	bf00      	nop
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b082      	sub	sp, #8
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	3b01      	subs	r3, #1
 80097ee:	2b02      	cmp	r3, #2
 80097f0:	d80b      	bhi.n	800980a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	885b      	ldrh	r3, [r3, #2]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d10c      	bne.n	8009814 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f910 	bl	8009a28 <USBD_CtlSendStatus>
      }
      break;
 8009808:	e004      	b.n	8009814 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f840 	bl	8009892 <USBD_CtlError>
      break;
 8009812:	e000      	b.n	8009816 <USBD_ClrFeature+0x3c>
      break;
 8009814:	bf00      	nop
  }
}
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	781a      	ldrb	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	3301      	adds	r3, #1
 8009838:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	781a      	ldrb	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3301      	adds	r3, #1
 8009846:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f7ff fa41 	bl	8008cd0 <SWAPBYTE>
 800984e:	4603      	mov	r3, r0
 8009850:	461a      	mov	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3301      	adds	r3, #1
 800985a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3301      	adds	r3, #1
 8009860:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f7ff fa34 	bl	8008cd0 <SWAPBYTE>
 8009868:	4603      	mov	r3, r0
 800986a:	461a      	mov	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	3301      	adds	r3, #1
 8009874:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	3301      	adds	r3, #1
 800987a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f7ff fa27 	bl	8008cd0 <SWAPBYTE>
 8009882:	4603      	mov	r3, r0
 8009884:	461a      	mov	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	80da      	strh	r2, [r3, #6]
}
 800988a:	bf00      	nop
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800989c:	2180      	movs	r1, #128	; 0x80
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 fcf6 	bl	800a290 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80098a4:	2100      	movs	r1, #0
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fcf2 	bl	800a290 <USBD_LL_StallEP>
}
 80098ac:	bf00      	nop
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d036      	beq.n	8009938 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80098ce:	6938      	ldr	r0, [r7, #16]
 80098d0:	f000 f836 	bl	8009940 <USBD_GetLen>
 80098d4:	4603      	mov	r3, r0
 80098d6:	3301      	adds	r3, #1
 80098d8:	b29b      	uxth	r3, r3
 80098da:	005b      	lsls	r3, r3, #1
 80098dc:	b29a      	uxth	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	4413      	add	r3, r2
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	7812      	ldrb	r2, [r2, #0]
 80098ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	3301      	adds	r3, #1
 80098f2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	4413      	add	r3, r2
 80098fa:	2203      	movs	r2, #3
 80098fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	3301      	adds	r3, #1
 8009902:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009904:	e013      	b.n	800992e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	4413      	add	r3, r2
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	7812      	ldrb	r2, [r2, #0]
 8009910:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	3301      	adds	r3, #1
 8009916:	613b      	str	r3, [r7, #16]
    idx++;
 8009918:	7dfb      	ldrb	r3, [r7, #23]
 800991a:	3301      	adds	r3, #1
 800991c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800991e:	7dfb      	ldrb	r3, [r7, #23]
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	4413      	add	r3, r2
 8009924:	2200      	movs	r2, #0
 8009926:	701a      	strb	r2, [r3, #0]
    idx++;
 8009928:	7dfb      	ldrb	r3, [r7, #23]
 800992a:	3301      	adds	r3, #1
 800992c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1e7      	bne.n	8009906 <USBD_GetString+0x52>
 8009936:	e000      	b.n	800993a <USBD_GetString+0x86>
    return;
 8009938:	bf00      	nop
  }
}
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009950:	e005      	b.n	800995e <USBD_GetLen+0x1e>
  {
    len++;
 8009952:	7bfb      	ldrb	r3, [r7, #15]
 8009954:	3301      	adds	r3, #1
 8009956:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	3301      	adds	r3, #1
 800995c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1f5      	bne.n	8009952 <USBD_GetLen+0x12>
  }

  return len;
 8009966:	7bfb      	ldrb	r3, [r7, #15]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2202      	movs	r2, #2
 8009984:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	2100      	movs	r1, #0
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f000 fd01 	bl	800a3a2 <USBD_LL_Transmit>

  return USBD_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	60f8      	str	r0, [r7, #12]
 80099b2:	60b9      	str	r1, [r7, #8]
 80099b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	2100      	movs	r1, #0
 80099bc:	68f8      	ldr	r0, [r7, #12]
 80099be:	f000 fcf0 	bl	800a3a2 <USBD_LL_Transmit>

  return USBD_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2203      	movs	r2, #3
 80099dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	2100      	movs	r1, #0
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 fcf4 	bl	800a3e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b084      	sub	sp, #16
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	60f8      	str	r0, [r7, #12]
 8009a0e:	60b9      	str	r1, [r7, #8]
 8009a10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	68ba      	ldr	r2, [r7, #8]
 8009a16:	2100      	movs	r1, #0
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	f000 fce3 	bl	800a3e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3710      	adds	r7, #16
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2204      	movs	r2, #4
 8009a34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a38:	2300      	movs	r3, #0
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fcaf 	bl	800a3a2 <USBD_LL_Transmit>

  return USBD_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2205      	movs	r2, #5
 8009a5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a5e:	2300      	movs	r3, #0
 8009a60:	2200      	movs	r2, #0
 8009a62:	2100      	movs	r1, #0
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fcbd 	bl	800a3e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009a78:	2201      	movs	r2, #1
 8009a7a:	4912      	ldr	r1, [pc, #72]	; (8009ac4 <MX_USB_DEVICE_Init+0x50>)
 8009a7c:	4812      	ldr	r0, [pc, #72]	; (8009ac8 <MX_USB_DEVICE_Init+0x54>)
 8009a7e:	f7fe fd07 	bl	8008490 <USBD_Init>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a88:	f7f6 fe96 	bl	80007b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8009a8c:	490f      	ldr	r1, [pc, #60]	; (8009acc <MX_USB_DEVICE_Init+0x58>)
 8009a8e:	480e      	ldr	r0, [pc, #56]	; (8009ac8 <MX_USB_DEVICE_Init+0x54>)
 8009a90:	f7fe fd2e 	bl	80084f0 <USBD_RegisterClass>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a9a:	f7f6 fe8d 	bl	80007b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8009a9e:	490c      	ldr	r1, [pc, #48]	; (8009ad0 <MX_USB_DEVICE_Init+0x5c>)
 8009aa0:	4809      	ldr	r0, [pc, #36]	; (8009ac8 <MX_USB_DEVICE_Init+0x54>)
 8009aa2:	f7fe fc1f 	bl	80082e4 <USBD_CDC_RegisterInterface>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009aac:	f7f6 fe84 	bl	80007b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009ab0:	4805      	ldr	r0, [pc, #20]	; (8009ac8 <MX_USB_DEVICE_Init+0x54>)
 8009ab2:	f7fe fd53 	bl	800855c <USBD_Start>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009abc:	f7f6 fe7c 	bl	80007b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ac0:	bf00      	nop
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20000274 	.word	0x20000274
 8009ac8:	2000057c 	.word	0x2000057c
 8009acc:	200001e0 	.word	0x200001e0
 8009ad0:	20000260 	.word	0x20000260

08009ad4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8009ad8:	2200      	movs	r2, #0
 8009ada:	4905      	ldr	r1, [pc, #20]	; (8009af0 <CDC_Init_HS+0x1c>)
 8009adc:	4805      	ldr	r0, [pc, #20]	; (8009af4 <CDC_Init_HS+0x20>)
 8009ade:	f7fe fc1b 	bl	8008318 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8009ae2:	4905      	ldr	r1, [pc, #20]	; (8009af8 <CDC_Init_HS+0x24>)
 8009ae4:	4803      	ldr	r0, [pc, #12]	; (8009af4 <CDC_Init_HS+0x20>)
 8009ae6:	f7fe fc39 	bl	800835c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009aea:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	20001058 	.word	0x20001058
 8009af4:	2000057c 	.word	0x2000057c
 8009af8:	20000858 	.word	0x20000858

08009afc <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8009afc:	b480      	push	{r7}
 8009afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009b00:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	6039      	str	r1, [r7, #0]
 8009b16:	71fb      	strb	r3, [r7, #7]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	2b23      	cmp	r3, #35	; 0x23
 8009b20:	d84a      	bhi.n	8009bb8 <CDC_Control_HS+0xac>
 8009b22:	a201      	add	r2, pc, #4	; (adr r2, 8009b28 <CDC_Control_HS+0x1c>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009bb9 	.word	0x08009bb9
 8009b2c:	08009bb9 	.word	0x08009bb9
 8009b30:	08009bb9 	.word	0x08009bb9
 8009b34:	08009bb9 	.word	0x08009bb9
 8009b38:	08009bb9 	.word	0x08009bb9
 8009b3c:	08009bb9 	.word	0x08009bb9
 8009b40:	08009bb9 	.word	0x08009bb9
 8009b44:	08009bb9 	.word	0x08009bb9
 8009b48:	08009bb9 	.word	0x08009bb9
 8009b4c:	08009bb9 	.word	0x08009bb9
 8009b50:	08009bb9 	.word	0x08009bb9
 8009b54:	08009bb9 	.word	0x08009bb9
 8009b58:	08009bb9 	.word	0x08009bb9
 8009b5c:	08009bb9 	.word	0x08009bb9
 8009b60:	08009bb9 	.word	0x08009bb9
 8009b64:	08009bb9 	.word	0x08009bb9
 8009b68:	08009bb9 	.word	0x08009bb9
 8009b6c:	08009bb9 	.word	0x08009bb9
 8009b70:	08009bb9 	.word	0x08009bb9
 8009b74:	08009bb9 	.word	0x08009bb9
 8009b78:	08009bb9 	.word	0x08009bb9
 8009b7c:	08009bb9 	.word	0x08009bb9
 8009b80:	08009bb9 	.word	0x08009bb9
 8009b84:	08009bb9 	.word	0x08009bb9
 8009b88:	08009bb9 	.word	0x08009bb9
 8009b8c:	08009bb9 	.word	0x08009bb9
 8009b90:	08009bb9 	.word	0x08009bb9
 8009b94:	08009bb9 	.word	0x08009bb9
 8009b98:	08009bb9 	.word	0x08009bb9
 8009b9c:	08009bb9 	.word	0x08009bb9
 8009ba0:	08009bb9 	.word	0x08009bb9
 8009ba4:	08009bb9 	.word	0x08009bb9
 8009ba8:	08009bb9 	.word	0x08009bb9
 8009bac:	08009bb9 	.word	0x08009bb9
 8009bb0:	08009bb9 	.word	0x08009bb9
 8009bb4:	08009bb9 	.word	0x08009bb9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009bb8:	bf00      	nop
  }

  return (USBD_OK);
 8009bba:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8009bd2:	6879      	ldr	r1, [r7, #4]
 8009bd4:	480e      	ldr	r0, [pc, #56]	; (8009c10 <CDC_Receive_HS+0x48>)
 8009bd6:	f7fe fbc1 	bl	800835c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8009bda:	480d      	ldr	r0, [pc, #52]	; (8009c10 <CDC_Receive_HS+0x48>)
 8009bdc:	f7fe fc22 	bl	8008424 <USBD_CDC_ReceivePacket>

  memset(receive_d, '\0', 64);
 8009be0:	2240      	movs	r2, #64	; 0x40
 8009be2:	2100      	movs	r1, #0
 8009be4:	480b      	ldr	r0, [pc, #44]	; (8009c14 <CDC_Receive_HS+0x4c>)
 8009be6:	f000 fc75 	bl	800a4d4 <memset>
  memcpy(receive_d, Buf, *Len);
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	6879      	ldr	r1, [r7, #4]
 8009bf2:	4808      	ldr	r0, [pc, #32]	; (8009c14 <CDC_Receive_HS+0x4c>)
 8009bf4:	f000 fc9a 	bl	800a52c <memcpy>
  CDC_Transmit_HS(receive_d,*Len);
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4804      	ldr	r0, [pc, #16]	; (8009c14 <CDC_Receive_HS+0x4c>)
 8009c02:	f000 f809 	bl	8009c18 <CDC_Transmit_HS>
  //memset(Buf, '\0', 64);
  return (USBD_OK);
 8009c06:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	2000057c 	.word	0x2000057c
 8009c14:	200002e0 	.word	0x200002e0

08009c18 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	460b      	mov	r3, r1
 8009c22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8009c28:	4b0d      	ldr	r3, [pc, #52]	; (8009c60 <CDC_Transmit_HS+0x48>)
 8009c2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e00b      	b.n	8009c56 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8009c3e:	887b      	ldrh	r3, [r7, #2]
 8009c40:	461a      	mov	r2, r3
 8009c42:	6879      	ldr	r1, [r7, #4]
 8009c44:	4806      	ldr	r0, [pc, #24]	; (8009c60 <CDC_Transmit_HS+0x48>)
 8009c46:	f7fe fb67 	bl	8008318 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8009c4a:	4805      	ldr	r0, [pc, #20]	; (8009c60 <CDC_Transmit_HS+0x48>)
 8009c4c:	f7fe fba4 	bl	8008398 <USBD_CDC_TransmitPacket>
 8009c50:	4603      	mov	r3, r0
 8009c52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	2000057c 	.word	0x2000057c

08009c64 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8009c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	371c      	adds	r7, #28
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
	...

08009c88 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	6039      	str	r1, [r7, #0]
 8009c92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2212      	movs	r2, #18
 8009c98:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009c9a:	4b03      	ldr	r3, [pc, #12]	; (8009ca8 <USBD_HS_DeviceDescriptor+0x20>)
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	20000290 	.word	0x20000290

08009cac <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	6039      	str	r1, [r7, #0]
 8009cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2204      	movs	r2, #4
 8009cbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009cbe:	4b03      	ldr	r3, [pc, #12]	; (8009ccc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	200002a4 	.word	0x200002a4

08009cd0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	6039      	str	r1, [r7, #0]
 8009cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d105      	bne.n	8009cee <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	4907      	ldr	r1, [pc, #28]	; (8009d04 <USBD_HS_ProductStrDescriptor+0x34>)
 8009ce6:	4808      	ldr	r0, [pc, #32]	; (8009d08 <USBD_HS_ProductStrDescriptor+0x38>)
 8009ce8:	f7ff fde4 	bl	80098b4 <USBD_GetString>
 8009cec:	e004      	b.n	8009cf8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	4904      	ldr	r1, [pc, #16]	; (8009d04 <USBD_HS_ProductStrDescriptor+0x34>)
 8009cf2:	4805      	ldr	r0, [pc, #20]	; (8009d08 <USBD_HS_ProductStrDescriptor+0x38>)
 8009cf4:	f7ff fdde 	bl	80098b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cf8:	4b02      	ldr	r3, [pc, #8]	; (8009d04 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20001858 	.word	0x20001858
 8009d08:	0800a5a8 	.word	0x0800a5a8

08009d0c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	4603      	mov	r3, r0
 8009d14:	6039      	str	r1, [r7, #0]
 8009d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	4904      	ldr	r1, [pc, #16]	; (8009d2c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009d1c:	4804      	ldr	r0, [pc, #16]	; (8009d30 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009d1e:	f7ff fdc9 	bl	80098b4 <USBD_GetString>
  return USBD_StrDesc;
 8009d22:	4b02      	ldr	r3, [pc, #8]	; (8009d2c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	20001858 	.word	0x20001858
 8009d30:	0800a5c0 	.word	0x0800a5c0

08009d34 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	6039      	str	r1, [r7, #0]
 8009d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	221a      	movs	r2, #26
 8009d44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d46:	f000 f843 	bl	8009dd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009d4a:	4b02      	ldr	r3, [pc, #8]	; (8009d54 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	200002a8 	.word	0x200002a8

08009d58 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	4603      	mov	r3, r0
 8009d60:	6039      	str	r1, [r7, #0]
 8009d62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d64:	79fb      	ldrb	r3, [r7, #7]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d105      	bne.n	8009d76 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	4907      	ldr	r1, [pc, #28]	; (8009d8c <USBD_HS_ConfigStrDescriptor+0x34>)
 8009d6e:	4808      	ldr	r0, [pc, #32]	; (8009d90 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009d70:	f7ff fda0 	bl	80098b4 <USBD_GetString>
 8009d74:	e004      	b.n	8009d80 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	4904      	ldr	r1, [pc, #16]	; (8009d8c <USBD_HS_ConfigStrDescriptor+0x34>)
 8009d7a:	4805      	ldr	r0, [pc, #20]	; (8009d90 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009d7c:	f7ff fd9a 	bl	80098b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d80:	4b02      	ldr	r3, [pc, #8]	; (8009d8c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20001858 	.word	0x20001858
 8009d90:	0800a5d4 	.word	0x0800a5d4

08009d94 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	6039      	str	r1, [r7, #0]
 8009d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009da0:	79fb      	ldrb	r3, [r7, #7]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d105      	bne.n	8009db2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009da6:	683a      	ldr	r2, [r7, #0]
 8009da8:	4907      	ldr	r1, [pc, #28]	; (8009dc8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009daa:	4808      	ldr	r0, [pc, #32]	; (8009dcc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009dac:	f7ff fd82 	bl	80098b4 <USBD_GetString>
 8009db0:	e004      	b.n	8009dbc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009db2:	683a      	ldr	r2, [r7, #0]
 8009db4:	4904      	ldr	r1, [pc, #16]	; (8009dc8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009db6:	4805      	ldr	r0, [pc, #20]	; (8009dcc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009db8:	f7ff fd7c 	bl	80098b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009dbc:	4b02      	ldr	r3, [pc, #8]	; (8009dc8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20001858 	.word	0x20001858
 8009dcc:	0800a5e0 	.word	0x0800a5e0

08009dd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009dd6:	4b0f      	ldr	r3, [pc, #60]	; (8009e14 <Get_SerialNum+0x44>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009ddc:	4b0e      	ldr	r3, [pc, #56]	; (8009e18 <Get_SerialNum+0x48>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009de2:	4b0e      	ldr	r3, [pc, #56]	; (8009e1c <Get_SerialNum+0x4c>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4413      	add	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d009      	beq.n	8009e0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009df6:	2208      	movs	r2, #8
 8009df8:	4909      	ldr	r1, [pc, #36]	; (8009e20 <Get_SerialNum+0x50>)
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f000 f814 	bl	8009e28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009e00:	2204      	movs	r2, #4
 8009e02:	4908      	ldr	r1, [pc, #32]	; (8009e24 <Get_SerialNum+0x54>)
 8009e04:	68b8      	ldr	r0, [r7, #8]
 8009e06:	f000 f80f 	bl	8009e28 <IntToUnicode>
  }
}
 8009e0a:	bf00      	nop
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	1fff7a10 	.word	0x1fff7a10
 8009e18:	1fff7a14 	.word	0x1fff7a14
 8009e1c:	1fff7a18 	.word	0x1fff7a18
 8009e20:	200002aa 	.word	0x200002aa
 8009e24:	200002ba 	.word	0x200002ba

08009e28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b087      	sub	sp, #28
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	4613      	mov	r3, r2
 8009e34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	75fb      	strb	r3, [r7, #23]
 8009e3e:	e027      	b.n	8009e90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	0f1b      	lsrs	r3, r3, #28
 8009e44:	2b09      	cmp	r3, #9
 8009e46:	d80b      	bhi.n	8009e60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	0f1b      	lsrs	r3, r3, #28
 8009e4c:	b2da      	uxtb	r2, r3
 8009e4e:	7dfb      	ldrb	r3, [r7, #23]
 8009e50:	005b      	lsls	r3, r3, #1
 8009e52:	4619      	mov	r1, r3
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	440b      	add	r3, r1
 8009e58:	3230      	adds	r2, #48	; 0x30
 8009e5a:	b2d2      	uxtb	r2, r2
 8009e5c:	701a      	strb	r2, [r3, #0]
 8009e5e:	e00a      	b.n	8009e76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	0f1b      	lsrs	r3, r3, #28
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	7dfb      	ldrb	r3, [r7, #23]
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	440b      	add	r3, r1
 8009e70:	3237      	adds	r2, #55	; 0x37
 8009e72:	b2d2      	uxtb	r2, r2
 8009e74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	011b      	lsls	r3, r3, #4
 8009e7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
 8009e7e:	005b      	lsls	r3, r3, #1
 8009e80:	3301      	adds	r3, #1
 8009e82:	68ba      	ldr	r2, [r7, #8]
 8009e84:	4413      	add	r3, r2
 8009e86:	2200      	movs	r2, #0
 8009e88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e8a:	7dfb      	ldrb	r3, [r7, #23]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	75fb      	strb	r3, [r7, #23]
 8009e90:	7dfa      	ldrb	r2, [r7, #23]
 8009e92:	79fb      	ldrb	r3, [r7, #7]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d3d3      	bcc.n	8009e40 <IntToUnicode+0x18>
  }
}
 8009e98:	bf00      	nop
 8009e9a:	bf00      	nop
 8009e9c:	371c      	adds	r7, #28
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
	...

08009ea8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b08a      	sub	sp, #40	; 0x28
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009eb0:	f107 0314 	add.w	r3, r7, #20
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	605a      	str	r2, [r3, #4]
 8009eba:	609a      	str	r2, [r3, #8]
 8009ebc:	60da      	str	r2, [r3, #12]
 8009ebe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a1d      	ldr	r2, [pc, #116]	; (8009f3c <HAL_PCD_MspInit+0x94>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d134      	bne.n	8009f34 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009eca:	2300      	movs	r3, #0
 8009ecc:	613b      	str	r3, [r7, #16]
 8009ece:	4b1c      	ldr	r3, [pc, #112]	; (8009f40 <HAL_PCD_MspInit+0x98>)
 8009ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed2:	4a1b      	ldr	r2, [pc, #108]	; (8009f40 <HAL_PCD_MspInit+0x98>)
 8009ed4:	f043 0302 	orr.w	r3, r3, #2
 8009ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8009eda:	4b19      	ldr	r3, [pc, #100]	; (8009f40 <HAL_PCD_MspInit+0x98>)
 8009edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ede:	f003 0302 	and.w	r3, r3, #2
 8009ee2:	613b      	str	r3, [r7, #16]
 8009ee4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8009ee6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eec:	2302      	movs	r3, #2
 8009eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8009ef8:	230c      	movs	r3, #12
 8009efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009efc:	f107 0314 	add.w	r3, r7, #20
 8009f00:	4619      	mov	r1, r3
 8009f02:	4810      	ldr	r0, [pc, #64]	; (8009f44 <HAL_PCD_MspInit+0x9c>)
 8009f04:	f7f8 fa18 	bl	8002338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009f08:	2300      	movs	r3, #0
 8009f0a:	60fb      	str	r3, [r7, #12]
 8009f0c:	4b0c      	ldr	r3, [pc, #48]	; (8009f40 <HAL_PCD_MspInit+0x98>)
 8009f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f10:	4a0b      	ldr	r2, [pc, #44]	; (8009f40 <HAL_PCD_MspInit+0x98>)
 8009f12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f16:	6313      	str	r3, [r2, #48]	; 0x30
 8009f18:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <HAL_PCD_MspInit+0x98>)
 8009f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f20:	60fb      	str	r3, [r7, #12]
 8009f22:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009f24:	2200      	movs	r2, #0
 8009f26:	2100      	movs	r1, #0
 8009f28:	204d      	movs	r0, #77	; 0x4d
 8009f2a:	f7f8 f810 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009f2e:	204d      	movs	r0, #77	; 0x4d
 8009f30:	f7f8 f829 	bl	8001f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009f34:	bf00      	nop
 8009f36:	3728      	adds	r7, #40	; 0x28
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	40040000 	.word	0x40040000
 8009f40:	40023800 	.word	0x40023800
 8009f44:	40020400 	.word	0x40020400

08009f48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	4610      	mov	r0, r2
 8009f60:	f7fe fb49 	bl	80085f6 <USBD_LL_SetupStage>
}
 8009f64:	bf00      	nop
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	460b      	mov	r3, r1
 8009f76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009f7e:	78fa      	ldrb	r2, [r7, #3]
 8009f80:	6879      	ldr	r1, [r7, #4]
 8009f82:	4613      	mov	r3, r2
 8009f84:	00db      	lsls	r3, r3, #3
 8009f86:	4413      	add	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	440b      	add	r3, r1
 8009f8c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	78fb      	ldrb	r3, [r7, #3]
 8009f94:	4619      	mov	r1, r3
 8009f96:	f7fe fb83 	bl	80086a0 <USBD_LL_DataOutStage>
}
 8009f9a:	bf00      	nop
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
 8009faa:	460b      	mov	r3, r1
 8009fac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009fb4:	78fa      	ldrb	r2, [r7, #3]
 8009fb6:	6879      	ldr	r1, [r7, #4]
 8009fb8:	4613      	mov	r3, r2
 8009fba:	00db      	lsls	r3, r3, #3
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	440b      	add	r3, r1
 8009fc2:	334c      	adds	r3, #76	; 0x4c
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	78fb      	ldrb	r3, [r7, #3]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	f7fe fc1c 	bl	8008806 <USBD_LL_DataInStage>
}
 8009fce:	bf00      	nop
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b082      	sub	sp, #8
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fe fd50 	bl	8008a8a <USBD_LL_SOF>
}
 8009fea:	bf00      	nop
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d102      	bne.n	800a00c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a006:	2300      	movs	r3, #0
 800a008:	73fb      	strb	r3, [r7, #15]
 800a00a:	e008      	b.n	800a01e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	68db      	ldr	r3, [r3, #12]
 800a010:	2b02      	cmp	r3, #2
 800a012:	d102      	bne.n	800a01a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a014:	2301      	movs	r3, #1
 800a016:	73fb      	strb	r3, [r7, #15]
 800a018:	e001      	b.n	800a01e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a01a:	f7f6 fbcd 	bl	80007b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a024:	7bfa      	ldrb	r2, [r7, #15]
 800a026:	4611      	mov	r1, r2
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fe fcf0 	bl	8008a0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a034:	4618      	mov	r0, r3
 800a036:	f7fe fc98 	bl	800896a <USBD_LL_Reset>
}
 800a03a:	bf00      	nop
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a052:	4618      	mov	r0, r3
 800a054:	f7fe fceb 	bl	8008a2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	6812      	ldr	r2, [r2, #0]
 800a066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a06a:	f043 0301 	orr.w	r3, r3, #1
 800a06e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d005      	beq.n	800a084 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a078:	4b04      	ldr	r3, [pc, #16]	; (800a08c <HAL_PCD_SuspendCallback+0x48>)
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	4a03      	ldr	r2, [pc, #12]	; (800a08c <HAL_PCD_SuspendCallback+0x48>)
 800a07e:	f043 0306 	orr.w	r3, r3, #6
 800a082:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a084:	bf00      	nop
 800a086:	3708      	adds	r7, #8
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	e000ed00 	.word	0xe000ed00

0800a090 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe fcdb 	bl	8008a5a <USBD_LL_Resume>
}
 800a0a4:	bf00      	nop
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0be:	78fa      	ldrb	r2, [r7, #3]
 800a0c0:	4611      	mov	r1, r2
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7fe fd33 	bl	8008b2e <USBD_LL_IsoOUTIncomplete>
}
 800a0c8:	bf00      	nop
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a0e2:	78fa      	ldrb	r2, [r7, #3]
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fe fcef 	bl	8008aca <USBD_LL_IsoINIncomplete>
}
 800a0ec:	bf00      	nop
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a102:	4618      	mov	r0, r3
 800a104:	f7fe fd45 	bl	8008b92 <USBD_LL_DevConnected>
}
 800a108:	bf00      	nop
 800a10a:	3708      	adds	r7, #8
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe fd42 	bl	8008ba8 <USBD_LL_DevDisconnected>
}
 800a124:	bf00      	nop
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d140      	bne.n	800a1be <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a13c:	4a22      	ldr	r2, [pc, #136]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a20      	ldr	r2, [pc, #128]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a148:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a14c:	4b1e      	ldr	r3, [pc, #120]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a14e:	4a1f      	ldr	r2, [pc, #124]	; (800a1cc <USBD_LL_Init+0xa0>)
 800a150:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800a152:	4b1d      	ldr	r3, [pc, #116]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a154:	2206      	movs	r2, #6
 800a156:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800a158:	4b1b      	ldr	r3, [pc, #108]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a15a:	2202      	movs	r2, #2
 800a15c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a15e:	4b1a      	ldr	r3, [pc, #104]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a160:	2200      	movs	r2, #0
 800a162:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a164:	4b18      	ldr	r3, [pc, #96]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a166:	2202      	movs	r2, #2
 800a168:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a16a:	4b17      	ldr	r3, [pc, #92]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a170:	4b15      	ldr	r3, [pc, #84]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a172:	2200      	movs	r2, #0
 800a174:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a176:	4b14      	ldr	r3, [pc, #80]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a178:	2200      	movs	r2, #0
 800a17a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a17c:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a17e:	2200      	movs	r2, #0
 800a180:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a182:	4b11      	ldr	r3, [pc, #68]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a184:	2200      	movs	r2, #0
 800a186:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a188:	4b0f      	ldr	r3, [pc, #60]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a18e:	480e      	ldr	r0, [pc, #56]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a190:	f7f8 fa97 	bl	80026c2 <HAL_PCD_Init>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a19a:	f7f6 fb0d 	bl	80007b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a19e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1a2:	4809      	ldr	r0, [pc, #36]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a1a4:	f7f9 fced 	bl	8003b82 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a1a8:	2280      	movs	r2, #128	; 0x80
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	4806      	ldr	r0, [pc, #24]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a1ae:	f7f9 fca1 	bl	8003af4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a1b2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	4803      	ldr	r0, [pc, #12]	; (800a1c8 <USBD_LL_Init+0x9c>)
 800a1ba:	f7f9 fc9b 	bl	8003af4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20001a58 	.word	0x20001a58
 800a1cc:	40040000 	.word	0x40040000

0800a1d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f7f8 fb88 	bl	80028fc <HAL_PCD_Start>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1f0:	7bfb      	ldrb	r3, [r7, #15]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 f942 	bl	800a47c <USBD_Get_USB_Status>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b084      	sub	sp, #16
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	4608      	mov	r0, r1
 800a210:	4611      	mov	r1, r2
 800a212:	461a      	mov	r2, r3
 800a214:	4603      	mov	r3, r0
 800a216:	70fb      	strb	r3, [r7, #3]
 800a218:	460b      	mov	r3, r1
 800a21a:	70bb      	strb	r3, [r7, #2]
 800a21c:	4613      	mov	r3, r2
 800a21e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a22e:	78bb      	ldrb	r3, [r7, #2]
 800a230:	883a      	ldrh	r2, [r7, #0]
 800a232:	78f9      	ldrb	r1, [r7, #3]
 800a234:	f7f9 f859 	bl	80032ea <HAL_PCD_EP_Open>
 800a238:	4603      	mov	r3, r0
 800a23a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
 800a23e:	4618      	mov	r0, r3
 800a240:	f000 f91c 	bl	800a47c <USBD_Get_USB_Status>
 800a244:	4603      	mov	r3, r0
 800a246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a248:	7bbb      	ldrb	r3, [r7, #14]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b084      	sub	sp, #16
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	460b      	mov	r3, r1
 800a25c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a26c:	78fa      	ldrb	r2, [r7, #3]
 800a26e:	4611      	mov	r1, r2
 800a270:	4618      	mov	r0, r3
 800a272:	f7f9 f8a2 	bl	80033ba <HAL_PCD_EP_Close>
 800a276:	4603      	mov	r3, r0
 800a278:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a27a:	7bfb      	ldrb	r3, [r7, #15]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 f8fd 	bl	800a47c <USBD_Get_USB_Status>
 800a282:	4603      	mov	r3, r0
 800a284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a286:	7bbb      	ldrb	r3, [r7, #14]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	460b      	mov	r3, r1
 800a29a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a29c:	2300      	movs	r3, #0
 800a29e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2aa:	78fa      	ldrb	r2, [r7, #3]
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7f9 f97a 	bl	80035a8 <HAL_PCD_EP_SetStall>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 f8de 	bl	800a47c <USBD_Get_USB_Status>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2e8:	78fa      	ldrb	r2, [r7, #3]
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7f9 f9bf 	bl	8003670 <HAL_PCD_EP_ClrStall>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 f8bf 	bl	800a47c <USBD_Get_USB_Status>
 800a2fe:	4603      	mov	r3, r0
 800a300:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a302:	7bbb      	ldrb	r3, [r7, #14]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b085      	sub	sp, #20
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a31e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a324:	2b00      	cmp	r3, #0
 800a326:	da0b      	bge.n	800a340 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a328:	78fb      	ldrb	r3, [r7, #3]
 800a32a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a32e:	68f9      	ldr	r1, [r7, #12]
 800a330:	4613      	mov	r3, r2
 800a332:	00db      	lsls	r3, r3, #3
 800a334:	4413      	add	r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	440b      	add	r3, r1
 800a33a:	333e      	adds	r3, #62	; 0x3e
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	e00b      	b.n	800a358 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a340:	78fb      	ldrb	r3, [r7, #3]
 800a342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a346:	68f9      	ldr	r1, [r7, #12]
 800a348:	4613      	mov	r3, r2
 800a34a:	00db      	lsls	r3, r3, #3
 800a34c:	4413      	add	r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	440b      	add	r3, r1
 800a352:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a356:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3714      	adds	r7, #20
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	460b      	mov	r3, r1
 800a36e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a37e:	78fa      	ldrb	r2, [r7, #3]
 800a380:	4611      	mov	r1, r2
 800a382:	4618      	mov	r0, r3
 800a384:	f7f8 ff8c 	bl	80032a0 <HAL_PCD_SetAddress>
 800a388:	4603      	mov	r3, r0
 800a38a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 f874 	bl	800a47c <USBD_Get_USB_Status>
 800a394:	4603      	mov	r3, r0
 800a396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a398:	7bbb      	ldrb	r3, [r7, #14]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b086      	sub	sp, #24
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	60f8      	str	r0, [r7, #12]
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	603b      	str	r3, [r7, #0]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a3c0:	7af9      	ldrb	r1, [r7, #11]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	687a      	ldr	r2, [r7, #4]
 800a3c6:	f7f9 f8a5 	bl	8003514 <HAL_PCD_EP_Transmit>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ce:	7dfb      	ldrb	r3, [r7, #23]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f000 f853 	bl	800a47c <USBD_Get_USB_Status>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3da:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3718      	adds	r7, #24
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	607a      	str	r2, [r7, #4]
 800a3ee:	603b      	str	r3, [r7, #0]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a402:	7af9      	ldrb	r1, [r7, #11]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	f7f9 f821 	bl	800344e <HAL_PCD_EP_Receive>
 800a40c:	4603      	mov	r3, r0
 800a40e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a410:	7dfb      	ldrb	r3, [r7, #23]
 800a412:	4618      	mov	r0, r3
 800a414:	f000 f832 	bl	800a47c <USBD_Get_USB_Status>
 800a418:	4603      	mov	r3, r0
 800a41a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a41c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3718      	adds	r7, #24
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b082      	sub	sp, #8
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	460b      	mov	r3, r1
 800a430:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a438:	78fa      	ldrb	r2, [r7, #3]
 800a43a:	4611      	mov	r1, r2
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7f9 f851 	bl	80034e4 <HAL_PCD_EP_GetRxCount>
 800a442:	4603      	mov	r3, r0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a454:	4b03      	ldr	r3, [pc, #12]	; (800a464 <USBD_static_malloc+0x18>)
}
 800a456:	4618      	mov	r0, r3
 800a458:	370c      	adds	r7, #12
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	20001f64 	.word	0x20001f64

0800a468 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]

}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	4603      	mov	r3, r0
 800a484:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	2b03      	cmp	r3, #3
 800a48e:	d817      	bhi.n	800a4c0 <USBD_Get_USB_Status+0x44>
 800a490:	a201      	add	r2, pc, #4	; (adr r2, 800a498 <USBD_Get_USB_Status+0x1c>)
 800a492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a496:	bf00      	nop
 800a498:	0800a4a9 	.word	0x0800a4a9
 800a49c:	0800a4af 	.word	0x0800a4af
 800a4a0:	0800a4b5 	.word	0x0800a4b5
 800a4a4:	0800a4bb 	.word	0x0800a4bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ac:	e00b      	b.n	800a4c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b2:	e008      	b.n	800a4c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b8:	e005      	b.n	800a4c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	73fb      	strb	r3, [r7, #15]
    break;
 800a4be:	e002      	b.n	800a4c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4c4:	bf00      	nop
  }
  return usb_status;
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <memset>:
 800a4d4:	4402      	add	r2, r0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d100      	bne.n	800a4de <memset+0xa>
 800a4dc:	4770      	bx	lr
 800a4de:	f803 1b01 	strb.w	r1, [r3], #1
 800a4e2:	e7f9      	b.n	800a4d8 <memset+0x4>

0800a4e4 <__libc_init_array>:
 800a4e4:	b570      	push	{r4, r5, r6, lr}
 800a4e6:	4d0d      	ldr	r5, [pc, #52]	; (800a51c <__libc_init_array+0x38>)
 800a4e8:	4c0d      	ldr	r4, [pc, #52]	; (800a520 <__libc_init_array+0x3c>)
 800a4ea:	1b64      	subs	r4, r4, r5
 800a4ec:	10a4      	asrs	r4, r4, #2
 800a4ee:	2600      	movs	r6, #0
 800a4f0:	42a6      	cmp	r6, r4
 800a4f2:	d109      	bne.n	800a508 <__libc_init_array+0x24>
 800a4f4:	4d0b      	ldr	r5, [pc, #44]	; (800a524 <__libc_init_array+0x40>)
 800a4f6:	4c0c      	ldr	r4, [pc, #48]	; (800a528 <__libc_init_array+0x44>)
 800a4f8:	f000 f826 	bl	800a548 <_init>
 800a4fc:	1b64      	subs	r4, r4, r5
 800a4fe:	10a4      	asrs	r4, r4, #2
 800a500:	2600      	movs	r6, #0
 800a502:	42a6      	cmp	r6, r4
 800a504:	d105      	bne.n	800a512 <__libc_init_array+0x2e>
 800a506:	bd70      	pop	{r4, r5, r6, pc}
 800a508:	f855 3b04 	ldr.w	r3, [r5], #4
 800a50c:	4798      	blx	r3
 800a50e:	3601      	adds	r6, #1
 800a510:	e7ee      	b.n	800a4f0 <__libc_init_array+0xc>
 800a512:	f855 3b04 	ldr.w	r3, [r5], #4
 800a516:	4798      	blx	r3
 800a518:	3601      	adds	r6, #1
 800a51a:	e7f2      	b.n	800a502 <__libc_init_array+0x1e>
 800a51c:	0800c0c8 	.word	0x0800c0c8
 800a520:	0800c0c8 	.word	0x0800c0c8
 800a524:	0800c0c8 	.word	0x0800c0c8
 800a528:	0800c0cc 	.word	0x0800c0cc

0800a52c <memcpy>:
 800a52c:	440a      	add	r2, r1
 800a52e:	4291      	cmp	r1, r2
 800a530:	f100 33ff 	add.w	r3, r0, #4294967295
 800a534:	d100      	bne.n	800a538 <memcpy+0xc>
 800a536:	4770      	bx	lr
 800a538:	b510      	push	{r4, lr}
 800a53a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a53e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a542:	4291      	cmp	r1, r2
 800a544:	d1f9      	bne.n	800a53a <memcpy+0xe>
 800a546:	bd10      	pop	{r4, pc}

0800a548 <_init>:
 800a548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a54a:	bf00      	nop
 800a54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a54e:	bc08      	pop	{r3}
 800a550:	469e      	mov	lr, r3
 800a552:	4770      	bx	lr

0800a554 <_fini>:
 800a554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a556:	bf00      	nop
 800a558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a55a:	bc08      	pop	{r3}
 800a55c:	469e      	mov	lr, r3
 800a55e:	4770      	bx	lr
