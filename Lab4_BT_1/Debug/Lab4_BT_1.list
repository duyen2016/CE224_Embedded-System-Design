
Lab4_BT_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f1c  08011768  08011768  00021768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013684  08013684  00030344  2**0
                  CONTENTS
  4 .ARM          00000008  08013684  08013684  00023684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801368c  0801368c  00030344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801368c  0801368c  0002368c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013690  08013690  00023690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  08013694  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030344  2**0
                  CONTENTS
 10 .bss          00005fdc  20000344  20000344  00030344  2**2
                  ALLOC
 11 ._user_heap_stack 00002400  20006320  20006320  00030344  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030344  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030374  2**0
                  CONTENTS, READONLY
 14 .debug_info   000254a4  00000000  00000000  000303b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006225  00000000  00000000  0005585b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000022c0  00000000  00000000  0005ba80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a7b  00000000  00000000  0005dd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cc9d  00000000  00000000  0005f7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002b5fc  00000000  00000000  0008c458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f5fe9  00000000  00000000  000b7a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a1e8  00000000  00000000  001ada40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  001b7c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000344 	.word	0x20000344
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801174c 	.word	0x0801174c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000348 	.word	0x20000348
 80001ec:	0801174c 	.word	0x0801174c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <vApplicationGetIdleTaskMemory+0x30>)
 8000eda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000360 	.word	0x20000360
 8000ef4:	200003b4 	.word	0x200003b4

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b5b0      	push	{r4, r5, r7, lr}
 8000efa:	b092      	sub	sp, #72	; 0x48
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f002 f927 	bl	8003150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f86d 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 f8d5 	bl	80010b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init();
 8000f0a:	f001 ff57 	bl	8002dbc <BSP_SDRAM_Init>
  *((uint32_t*)SDRAM_DEVICE_ADDR)=0x12345678;
 8000f0e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000f12:	4a2c      	ldr	r2, [pc, #176]	; (8000fc4 <main+0xcc>)
 8000f14:	601a      	str	r2, [r3, #0]
  value=*((uint32_t*)SDRAM_DEVICE_ADDR);
 8000f16:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a2a      	ldr	r2, [pc, #168]	; (8000fc8 <main+0xd0>)
 8000f1e:	6013      	str	r3, [r2, #0]
  BSP_LCD_Init();
 8000f20:	f001 fab4 	bl	800248c <BSP_LCD_Init>
  BSP_GYRO_Init();
 8000f24:	f001 fa38 	bl	8002398 <BSP_GYRO_Init>
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000f28:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f001 fb2f 	bl	8002590 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we
 8000f32:	2001      	movs	r0, #1
 8000f34:	f001 fb90 	bl	8002658 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000f38:	f001 fd42 	bl	80029c0 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);//clear the LCD on blACK
 8000f3c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f40:	f001 fbfc 	bl	800273c <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);//set text background color
 8000f44:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f48:	f001 fbae 	bl	80026a8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f001 fb92 	bl	8002678 <BSP_LCD_SetTextColor>

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */


  osMailQDef( myMailQ, 3, float );
 8000f54:	2303      	movs	r3, #3
 8000f56:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f58:	2304      	movs	r3, #4
 8000f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f60:	643b      	str	r3, [r7, #64]	; 0x40

  myMailQID = osMailCreate(osMailQ(myMailQ), NULL);
 8000f62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f00a fc93 	bl	800b894 <osMailCreate>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <main+0xd4>)
 8000f72:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 256);
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <main+0xd8>)
 8000f76:	f107 041c 	add.w	r4, r7, #28
 8000f7a:	461d      	mov	r5, r3
 8000f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00a faa7 	bl	800b4e2 <osThreadCreate>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <main+0xdc>)
 8000f98:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <main+0xe0>)
 8000f9c:	463c      	mov	r4, r7
 8000f9e:	461d      	mov	r5, r3
 8000fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000fac:	463b      	mov	r3, r7
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f00a fa96 	bl	800b4e2 <osThreadCreate>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <main+0xe4>)
 8000fba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fbc:	f00a fa8a 	bl	800b4d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <main+0xc8>
 8000fc2:	bf00      	nop
 8000fc4:	12345678 	.word	0x12345678
 8000fc8:	200005bc 	.word	0x200005bc
 8000fcc:	200005c0 	.word	0x200005c0
 8000fd0:	08011770 	.word	0x08011770
 8000fd4:	200005b4 	.word	0x200005b4
 8000fd8:	08011794 	.word	0x08011794
 8000fdc:	200005b8 	.word	0x200005b8

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	; 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2230      	movs	r2, #48	; 0x30
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00e fb69 	bl	800f6c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <SystemClock_Config+0xcc>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <SystemClock_Config+0xcc>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001012:	6413      	str	r3, [r2, #64]	; 0x40
 8001014:	4b25      	ldr	r3, [pc, #148]	; (80010ac <SystemClock_Config+0xcc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <SystemClock_Config+0xd0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <SystemClock_Config+0xd0>)
 800102a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <SystemClock_Config+0xd0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001046:	2302      	movs	r3, #2
 8001048:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001050:	2304      	movs	r3, #4
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001054:	23a8      	movs	r3, #168	; 0xa8
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800105c:	2307      	movs	r3, #7
 800105e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	4618      	mov	r0, r3
 8001066:	f003 ffbb 	bl	8004fe0 <HAL_RCC_OscConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001070:	f000 f990 	bl	8001394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001074:	230f      	movs	r3, #15
 8001076:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	2302      	movs	r3, #2
 800107a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001080:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001084:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2105      	movs	r1, #5
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fa1c 	bl	80054d0 <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800109e:	f000 f979 	bl	8001394 <Error_Handler>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3750      	adds	r7, #80	; 0x50
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40007000 	.word	0x40007000

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_GPIO_Init+0x68>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a16      	ldr	r2, [pc, #88]	; (800111c <MX_GPIO_Init+0x68>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_GPIO_Init+0x68>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_GPIO_Init+0x68>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <MX_GPIO_Init+0x68>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <MX_GPIO_Init+0x68>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_GPIO_Init+0x68>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <MX_GPIO_Init+0x68>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_GPIO_Init+0x68>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8001120:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001124:	b0c0      	sub	sp, #256	; 0x100
 8001126:	af04      	add	r7, sp, #16
 8001128:	6178      	str	r0, [r7, #20]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800112a:	f00c ff27 	bl	800df7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	uint8_t buffer[200];//text buffer
	osSignalWait(0x1, osWaitForever);
 800112e:	463b      	mov	r3, r7
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	2101      	movs	r1, #1
 8001136:	4618      	mov	r0, r3
 8001138:	f00a fa60 	bl	800b5fc <osSignalWait>
	osSignalSet(Task02Handle, 0x1);
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <StartTask01+0xa8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	4618      	mov	r0, r3
 8001144:	f00a fa1a 	bl	800b57c <osSignalSet>
  /* Infinite loop */
  for(;;)
  {
	  osEvent event = osMailGet(myMailQID, osWaitForever); //Get mail
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <StartTask01+0xac>)
 800114a:	6819      	ldr	r1, [r3, #0]
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	f04f 32ff 	mov.w	r2, #4294967295
 8001154:	4618      	mov	r0, r3
 8001156:	f00a fc49 	bl	800b9ec <osMailGet>
	  float *valxyz = event.value.p;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  sprintf(buffer,"xyz:	%f	%f	%f\r\n",valxyz[0],valxyz[1],valxyz[2]);
 8001160:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9fe 	bl	8000568 <__aeabi_f2d>
 800116c:	4680      	mov	r8, r0
 800116e:	4689      	mov	r9, r1
 8001170:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001174:	3304      	adds	r3, #4
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9f5 	bl	8000568 <__aeabi_f2d>
 800117e:	4604      	mov	r4, r0
 8001180:	460d      	mov	r5, r1
 8001182:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001186:	3308      	adds	r3, #8
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9ec 	bl	8000568 <__aeabi_f2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001198:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800119c:	e9cd 4500 	strd	r4, r5, [sp]
 80011a0:	4642      	mov	r2, r8
 80011a2:	464b      	mov	r3, r9
 80011a4:	490a      	ldr	r1, [pc, #40]	; (80011d0 <StartTask01+0xb0>)
 80011a6:	f00e fa2b 	bl	800f600 <siprintf>
	  osMailFree(myMailQID, valxyz); //Free mail queue memory
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <StartTask01+0xac>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80011b2:	4618      	mov	r0, r3
 80011b4:	f00a fc8e 	bl	800bad4 <osMailFree>
	  CDC_Transmit_HS(buffer,64);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	2140      	movs	r1, #64	; 0x40
 80011be:	4618      	mov	r0, r3
 80011c0:	f00c ffee 	bl	800e1a0 <CDC_Transmit_HS>
  {
 80011c4:	e7c0      	b.n	8001148 <StartTask01+0x28>
 80011c6:	bf00      	nop
 80011c8:	200005b8 	.word	0x200005b8
 80011cc:	200005c0 	.word	0x200005c0
 80011d0:	080117b0 	.word	0x080117b0

080011d4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	if (BSP_GYRO_Init() != GYRO_OK)
 80011dc:	f001 f8dc 	bl	8002398 <BSP_GYRO_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <StartTask02+0x16>
	  {
	    Error_Handler();
 80011e6:	f000 f8d5 	bl	8001394 <Error_Handler>
	  }
	float valxyz[3];

	osSignalWait(0x1, osWaitForever);
 80011ea:	463b      	mov	r3, r7
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	2101      	movs	r1, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00a fa02 	bl	800b5fc <osSignalWait>
  for(;;)
  {
	  BSP_GYRO_GetXYZ(valxyz);
 80011f8:	f107 0318 	add.w	r3, r7, #24
 80011fc:	4618      	mov	r0, r3
 80011fe:	f001 f931 	bl	8002464 <BSP_GYRO_GetXYZ>
	  float *transmit_d;
	  transmit_d = NULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
	  do
	      {
	        transmit_d = (float *)osMailAlloc(myMailQID, osWaitForever); //Allocate memory slot
 8001206:	4b54      	ldr	r3, [pc, #336]	; (8001358 <StartTask02+0x184>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f04f 31ff 	mov.w	r1, #4294967295
 800120e:	4618      	mov	r0, r3
 8001210:	f00a fb98 	bl	800b944 <osMailAlloc>
 8001214:	6278      	str	r0, [r7, #36]	; 0x24
	      } while (NULL == transmit_d);
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0f4      	beq.n	8001206 <StartTask02+0x32>

	  transmit_d = valxyz;
 800121c:	f107 0318 	add.w	r3, r7, #24
 8001220:	627b      	str	r3, [r7, #36]	; 0x24

	  osMailPut(myMailQID, transmit_d); //Put data into mail queue. Check cmsis_os.c for API named
 8001222:	4b4d      	ldr	r3, [pc, #308]	; (8001358 <StartTask02+0x184>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001228:	4618      	mov	r0, r3
 800122a:	f00a fba1 	bl	800b970 <osMailPut>
	  if ((valxyz[0]<0) && (valxyz[1]<0) && (valxyz[2] > 0)){
 800122e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123a:	d51a      	bpl.n	8001272 <StartTask02+0x9e>
 800123c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	d513      	bpl.n	8001272 <StartTask02+0x9e>
 800124a:	edd7 7a08 	vldr	s15, [r7, #32]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd0c      	ble.n	8001272 <StartTask02+0x9e>
		  BSP_LCD_Clear(LCD_COLOR_BLACK);//clear the LCD on blACK
 8001258:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800125c:	f001 fa6e 	bl	800273c <BSP_LCD_Clear>
		  BSP_LCD_DisplayStringAtLine(1,"      ^");
 8001260:	493e      	ldr	r1, [pc, #248]	; (800135c <StartTask02+0x188>)
 8001262:	2001      	movs	r0, #1
 8001264:	f001 fb94 	bl	8002990 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine(4,"<");
 8001268:	493d      	ldr	r1, [pc, #244]	; (8001360 <StartTask02+0x18c>)
 800126a:	2004      	movs	r0, #4
 800126c:	f001 fb90 	bl	8002990 <BSP_LCD_DisplayStringAtLine>
 8001270:	e06d      	b.n	800134e <StartTask02+0x17a>
	  } else if ((valxyz[0] <0) && (valxyz[1]>0) && (valxyz[2] < 0)){
 8001272:	edd7 7a06 	vldr	s15, [r7, #24]
 8001276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127e:	d51a      	bpl.n	80012b6 <StartTask02+0xe2>
 8001280:	edd7 7a07 	vldr	s15, [r7, #28]
 8001284:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	dd13      	ble.n	80012b6 <StartTask02+0xe2>
 800128e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001292:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d50c      	bpl.n	80012b6 <StartTask02+0xe2>
		  BSP_LCD_Clear(LCD_COLOR_BLACK);//clear the LCD on blACK
 800129c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80012a0:	f001 fa4c 	bl	800273c <BSP_LCD_Clear>
		  BSP_LCD_DisplayStringAtLine(1,"      ^");
 80012a4:	492d      	ldr	r1, [pc, #180]	; (800135c <StartTask02+0x188>)
 80012a6:	2001      	movs	r0, #1
 80012a8:	f001 fb72 	bl	8002990 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine(4,"             >");
 80012ac:	492d      	ldr	r1, [pc, #180]	; (8001364 <StartTask02+0x190>)
 80012ae:	2004      	movs	r0, #4
 80012b0:	f001 fb6e 	bl	8002990 <BSP_LCD_DisplayStringAtLine>
 80012b4:	e04b      	b.n	800134e <StartTask02+0x17a>
	  } else if (valxyz[0] > 0 && valxyz[1] < 0 && valxyz[2] < 0){
 80012b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80012ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	dd1a      	ble.n	80012fa <StartTask02+0x126>
 80012c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80012c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d0:	d513      	bpl.n	80012fa <StartTask02+0x126>
 80012d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80012d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012de:	d50c      	bpl.n	80012fa <StartTask02+0x126>
		  BSP_LCD_Clear(LCD_COLOR_BLACK);//clear the LCD on blACK
 80012e0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80012e4:	f001 fa2a 	bl	800273c <BSP_LCD_Clear>
		  BSP_LCD_DisplayStringAtLine(4,"<");
 80012e8:	491d      	ldr	r1, [pc, #116]	; (8001360 <StartTask02+0x18c>)
 80012ea:	2004      	movs	r0, #4
 80012ec:	f001 fb50 	bl	8002990 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine(8,"      v");
 80012f0:	491d      	ldr	r1, [pc, #116]	; (8001368 <StartTask02+0x194>)
 80012f2:	2008      	movs	r0, #8
 80012f4:	f001 fb4c 	bl	8002990 <BSP_LCD_DisplayStringAtLine>
 80012f8:	e029      	b.n	800134e <StartTask02+0x17a>
	  } else if (valxyz[0] >0 && valxyz[1] >0 && valxyz[2] > 0){
 80012fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80012fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	dd1a      	ble.n	800133e <StartTask02+0x16a>
 8001308:	edd7 7a07 	vldr	s15, [r7, #28]
 800130c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001314:	dd13      	ble.n	800133e <StartTask02+0x16a>
 8001316:	edd7 7a08 	vldr	s15, [r7, #32]
 800131a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	dd0c      	ble.n	800133e <StartTask02+0x16a>
		  BSP_LCD_Clear(LCD_COLOR_BLACK);//clear the LCD on blACK
 8001324:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001328:	f001 fa08 	bl	800273c <BSP_LCD_Clear>
		  BSP_LCD_DisplayStringAtLine(4,"             >");
 800132c:	490d      	ldr	r1, [pc, #52]	; (8001364 <StartTask02+0x190>)
 800132e:	2004      	movs	r0, #4
 8001330:	f001 fb2e 	bl	8002990 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_DisplayStringAtLine(8,"      v");
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <StartTask02+0x194>)
 8001336:	2008      	movs	r0, #8
 8001338:	f001 fb2a 	bl	8002990 <BSP_LCD_DisplayStringAtLine>
 800133c:	e007      	b.n	800134e <StartTask02+0x17a>
	  } else {
		  BSP_LCD_Clear(LCD_COLOR_BLACK);//clear the LCD on blACK
 800133e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001342:	f001 f9fb 	bl	800273c <BSP_LCD_Clear>
		  BSP_LCD_DisplayStringAtLine(4,"      *");
 8001346:	4909      	ldr	r1, [pc, #36]	; (800136c <StartTask02+0x198>)
 8001348:	2004      	movs	r0, #4
 800134a:	f001 fb21 	bl	8002990 <BSP_LCD_DisplayStringAtLine>
	  }
	  free(transmit_d);
 800134e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001350:	f00d fb8c 	bl	800ea6c <free>
  {
 8001354:	e750      	b.n	80011f8 <StartTask02+0x24>
 8001356:	bf00      	nop
 8001358:	200005c0 	.word	0x200005c0
 800135c:	080117c0 	.word	0x080117c0
 8001360:	080117c8 	.word	0x080117c8
 8001364:	080117cc 	.word	0x080117cc
 8001368:	080117dc 	.word	0x080117dc
 800136c:	080117e4 	.word	0x080117e4

08001370 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001382:	f001 ff07 	bl	8003194 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40001000 	.word	0x40001000

08001394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001398:	b672      	cpsid	i
}
 800139a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800139c:	e7fe      	b.n	800139c <Error_Handler+0x8>
	...

080013a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <HAL_MspInit+0x54>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <HAL_MspInit+0x54>)
 80013b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_MspInit+0x54>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_MspInit+0x54>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_MspInit+0x54>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_MspInit+0x54>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	210f      	movs	r1, #15
 80013e2:	f06f 0001 	mvn.w	r0, #1
 80013e6:	f001 ffd1 	bl	800338c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08e      	sub	sp, #56	; 0x38
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <HAL_InitTick+0xe4>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	4a32      	ldr	r2, [pc, #200]	; (80014dc <HAL_InitTick+0xe4>)
 8001412:	f043 0310 	orr.w	r3, r3, #16
 8001416:	6413      	str	r3, [r2, #64]	; 0x40
 8001418:	4b30      	ldr	r3, [pc, #192]	; (80014dc <HAL_InitTick+0xe4>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001424:	f107 0210 	add.w	r2, r7, #16
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4611      	mov	r1, r2
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fa5a 	bl	80058e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800143e:	f004 fa3f 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8001442:	6378      	str	r0, [r7, #52]	; 0x34
 8001444:	e004      	b.n	8001450 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001446:	f004 fa3b 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 800144a:	4603      	mov	r3, r0
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001452:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <HAL_InitTick+0xe8>)
 8001454:	fba2 2303 	umull	r2, r3, r2, r3
 8001458:	0c9b      	lsrs	r3, r3, #18
 800145a:	3b01      	subs	r3, #1
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <HAL_InitTick+0xec>)
 8001460:	4a21      	ldr	r2, [pc, #132]	; (80014e8 <HAL_InitTick+0xf0>)
 8001462:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <HAL_InitTick+0xec>)
 8001466:	f240 32e7 	movw	r2, #999	; 0x3e7
 800146a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_InitTick+0xec>)
 800146e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001470:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <HAL_InitTick+0xec>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_InitTick+0xec>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <HAL_InitTick+0xec>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001484:	4817      	ldr	r0, [pc, #92]	; (80014e4 <HAL_InitTick+0xec>)
 8001486:	f004 fc21 	bl	8005ccc <HAL_TIM_Base_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001490:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001494:	2b00      	cmp	r3, #0
 8001496:	d11b      	bne.n	80014d0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001498:	4812      	ldr	r0, [pc, #72]	; (80014e4 <HAL_InitTick+0xec>)
 800149a:	f004 fc71 	bl	8005d80 <HAL_TIM_Base_Start_IT>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d111      	bne.n	80014d0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014ac:	2036      	movs	r0, #54	; 0x36
 80014ae:	f001 ff89 	bl	80033c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b0f      	cmp	r3, #15
 80014b6:	d808      	bhi.n	80014ca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014b8:	2200      	movs	r2, #0
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	2036      	movs	r0, #54	; 0x36
 80014be:	f001 ff65 	bl	800338c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_InitTick+0xf4>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e002      	b.n	80014d0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3738      	adds	r7, #56	; 0x38
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	431bde83 	.word	0x431bde83
 80014e4:	200005c4 	.word	0x200005c4
 80014e8:	40001000 	.word	0x40001000
 80014ec:	20000080 	.word	0x20000080

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <TIM6_DAC_IRQHandler+0x10>)
 8001522:	f004 fc9d 	bl	8005e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200005c4 	.word	0x200005c4

08001530 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <OTG_HS_IRQHandler+0x10>)
 8001536:	f002 fc26 	bl	8003d86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20005aa8 	.word	0x20005aa8

08001544 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return 1;
 8001548:	2301      	movs	r3, #1
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <_kill>:

int _kill(int pid, int sig)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800155e:	f00e f915 	bl	800f78c <__errno>
 8001562:	4603      	mov	r3, r0
 8001564:	2216      	movs	r2, #22
 8001566:	601a      	str	r2, [r3, #0]
  return -1;
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <_exit>:

void _exit (int status)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ffe7 	bl	8001554 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001586:	e7fe      	b.n	8001586 <_exit+0x12>

08001588 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e00a      	b.n	80015b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800159a:	f3af 8000 	nop.w
 800159e:	4601      	mov	r1, r0
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	60ba      	str	r2, [r7, #8]
 80015a6:	b2ca      	uxtb	r2, r1
 80015a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbf0      	blt.n	800159a <_read+0x12>
  }

  return len;
 80015b8:	687b      	ldr	r3, [r7, #4]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b086      	sub	sp, #24
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e009      	b.n	80015e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	60ba      	str	r2, [r7, #8]
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	3301      	adds	r3, #1
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697a      	ldr	r2, [r7, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbf1      	blt.n	80015d4 <_write+0x12>
  }
  return len;
 80015f0:	687b      	ldr	r3, [r7, #4]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_close>:

int _close(int file)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001622:	605a      	str	r2, [r3, #4]
  return 0;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_isatty>:

int _isatty(int file)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <_sbrk+0x5c>)
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <_sbrk+0x60>)
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <_sbrk+0x64>)
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <_sbrk+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	d207      	bcs.n	80016a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001694:	f00e f87a 	bl	800f78c <__errno>
 8001698:	4603      	mov	r3, r0
 800169a:	220c      	movs	r2, #12
 800169c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	e009      	b.n	80016b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <_sbrk+0x64>)
 80016b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20030000 	.word	0x20030000
 80016c4:	00000400 	.word	0x00000400
 80016c8:	2000060c 	.word	0x2000060c
 80016cc:	20006320 	.word	0x20006320

080016d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <SystemInit+0x20>)
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <SystemInit+0x20>)
 80016dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800172c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016fa:	490e      	ldr	r1, [pc, #56]	; (8001734 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001710:	4c0b      	ldr	r4, [pc, #44]	; (8001740 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800171e:	f7ff ffd7 	bl	80016d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001722:	f00e f839 	bl	800f798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001726:	f7ff fbe7 	bl	8000ef8 <main>
  bx  lr    
 800172a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800172c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001738:	08013694 	.word	0x08013694
  ldr r2, =_sbss
 800173c:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001740:	20006320 	.word	0x20006320

08001744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC_IRQHandler>

08001746 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800174a:	f000 fc73 	bl	8002034 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800174e:	20ca      	movs	r0, #202	; 0xca
 8001750:	f000 f95d 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001754:	20c3      	movs	r0, #195	; 0xc3
 8001756:	f000 f967 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800175a:	2008      	movs	r0, #8
 800175c:	f000 f964 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001760:	2050      	movs	r0, #80	; 0x50
 8001762:	f000 f961 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001766:	20cf      	movs	r0, #207	; 0xcf
 8001768:	f000 f951 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800176c:	2000      	movs	r0, #0
 800176e:	f000 f95b 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001772:	20c1      	movs	r0, #193	; 0xc1
 8001774:	f000 f958 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001778:	2030      	movs	r0, #48	; 0x30
 800177a:	f000 f955 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800177e:	20ed      	movs	r0, #237	; 0xed
 8001780:	f000 f945 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001784:	2064      	movs	r0, #100	; 0x64
 8001786:	f000 f94f 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800178a:	2003      	movs	r0, #3
 800178c:	f000 f94c 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001790:	2012      	movs	r0, #18
 8001792:	f000 f949 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001796:	2081      	movs	r0, #129	; 0x81
 8001798:	f000 f946 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800179c:	20e8      	movs	r0, #232	; 0xe8
 800179e:	f000 f936 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80017a2:	2085      	movs	r0, #133	; 0x85
 80017a4:	f000 f940 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017a8:	2000      	movs	r0, #0
 80017aa:	f000 f93d 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80017ae:	2078      	movs	r0, #120	; 0x78
 80017b0:	f000 f93a 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80017b4:	20cb      	movs	r0, #203	; 0xcb
 80017b6:	f000 f92a 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80017ba:	2039      	movs	r0, #57	; 0x39
 80017bc:	f000 f934 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80017c0:	202c      	movs	r0, #44	; 0x2c
 80017c2:	f000 f931 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 f92e 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80017cc:	2034      	movs	r0, #52	; 0x34
 80017ce:	f000 f92b 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80017d2:	2002      	movs	r0, #2
 80017d4:	f000 f928 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80017d8:	20f7      	movs	r0, #247	; 0xf7
 80017da:	f000 f918 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80017de:	2020      	movs	r0, #32
 80017e0:	f000 f922 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80017e4:	20ea      	movs	r0, #234	; 0xea
 80017e6:	f000 f912 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 f91c 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 f919 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80017f6:	20b1      	movs	r0, #177	; 0xb1
 80017f8:	f000 f909 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f000 f913 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001802:	201b      	movs	r0, #27
 8001804:	f000 f910 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001808:	20b6      	movs	r0, #182	; 0xb6
 800180a:	f000 f900 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800180e:	200a      	movs	r0, #10
 8001810:	f000 f90a 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001814:	20a2      	movs	r0, #162	; 0xa2
 8001816:	f000 f907 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800181a:	20c0      	movs	r0, #192	; 0xc0
 800181c:	f000 f8f7 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001820:	2010      	movs	r0, #16
 8001822:	f000 f901 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001826:	20c1      	movs	r0, #193	; 0xc1
 8001828:	f000 f8f1 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800182c:	2010      	movs	r0, #16
 800182e:	f000 f8fb 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001832:	20c5      	movs	r0, #197	; 0xc5
 8001834:	f000 f8eb 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001838:	2045      	movs	r0, #69	; 0x45
 800183a:	f000 f8f5 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800183e:	2015      	movs	r0, #21
 8001840:	f000 f8f2 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001844:	20c7      	movs	r0, #199	; 0xc7
 8001846:	f000 f8e2 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800184a:	2090      	movs	r0, #144	; 0x90
 800184c:	f000 f8ec 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001850:	2036      	movs	r0, #54	; 0x36
 8001852:	f000 f8dc 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001856:	20c8      	movs	r0, #200	; 0xc8
 8001858:	f000 f8e6 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800185c:	20f2      	movs	r0, #242	; 0xf2
 800185e:	f000 f8d6 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001862:	2000      	movs	r0, #0
 8001864:	f000 f8e0 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001868:	20b0      	movs	r0, #176	; 0xb0
 800186a:	f000 f8d0 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800186e:	20c2      	movs	r0, #194	; 0xc2
 8001870:	f000 f8da 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001874:	20b6      	movs	r0, #182	; 0xb6
 8001876:	f000 f8ca 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800187a:	200a      	movs	r0, #10
 800187c:	f000 f8d4 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001880:	20a7      	movs	r0, #167	; 0xa7
 8001882:	f000 f8d1 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001886:	2027      	movs	r0, #39	; 0x27
 8001888:	f000 f8ce 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800188c:	2004      	movs	r0, #4
 800188e:	f000 f8cb 	bl	8001a28 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001892:	202a      	movs	r0, #42	; 0x2a
 8001894:	f000 f8bb 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001898:	2000      	movs	r0, #0
 800189a:	f000 f8c5 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800189e:	2000      	movs	r0, #0
 80018a0:	f000 f8c2 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f000 f8bf 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80018aa:	20ef      	movs	r0, #239	; 0xef
 80018ac:	f000 f8bc 	bl	8001a28 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80018b0:	202b      	movs	r0, #43	; 0x2b
 80018b2:	f000 f8ac 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f8b6 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018bc:	2000      	movs	r0, #0
 80018be:	f000 f8b3 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f000 f8b0 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80018c8:	203f      	movs	r0, #63	; 0x3f
 80018ca:	f000 f8ad 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80018ce:	20f6      	movs	r0, #246	; 0xf6
 80018d0:	f000 f89d 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80018d4:	2001      	movs	r0, #1
 80018d6:	f000 f8a7 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018da:	2000      	movs	r0, #0
 80018dc:	f000 f8a4 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80018e0:	2006      	movs	r0, #6
 80018e2:	f000 f8a1 	bl	8001a28 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80018e6:	202c      	movs	r0, #44	; 0x2c
 80018e8:	f000 f891 	bl	8001a0e <ili9341_WriteReg>
  LCD_Delay(200);
 80018ec:	20c8      	movs	r0, #200	; 0xc8
 80018ee:	f000 fc8f 	bl	8002210 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80018f2:	2026      	movs	r0, #38	; 0x26
 80018f4:	f000 f88b 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80018f8:	2001      	movs	r0, #1
 80018fa:	f000 f895 	bl	8001a28 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80018fe:	20e0      	movs	r0, #224	; 0xe0
 8001900:	f000 f885 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001904:	200f      	movs	r0, #15
 8001906:	f000 f88f 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800190a:	2029      	movs	r0, #41	; 0x29
 800190c:	f000 f88c 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001910:	2024      	movs	r0, #36	; 0x24
 8001912:	f000 f889 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001916:	200c      	movs	r0, #12
 8001918:	f000 f886 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800191c:	200e      	movs	r0, #14
 800191e:	f000 f883 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001922:	2009      	movs	r0, #9
 8001924:	f000 f880 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001928:	204e      	movs	r0, #78	; 0x4e
 800192a:	f000 f87d 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800192e:	2078      	movs	r0, #120	; 0x78
 8001930:	f000 f87a 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001934:	203c      	movs	r0, #60	; 0x3c
 8001936:	f000 f877 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800193a:	2009      	movs	r0, #9
 800193c:	f000 f874 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001940:	2013      	movs	r0, #19
 8001942:	f000 f871 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001946:	2005      	movs	r0, #5
 8001948:	f000 f86e 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800194c:	2017      	movs	r0, #23
 800194e:	f000 f86b 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001952:	2011      	movs	r0, #17
 8001954:	f000 f868 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001958:	2000      	movs	r0, #0
 800195a:	f000 f865 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800195e:	20e1      	movs	r0, #225	; 0xe1
 8001960:	f000 f855 	bl	8001a0e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001964:	2000      	movs	r0, #0
 8001966:	f000 f85f 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800196a:	2016      	movs	r0, #22
 800196c:	f000 f85c 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001970:	201b      	movs	r0, #27
 8001972:	f000 f859 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001976:	2004      	movs	r0, #4
 8001978:	f000 f856 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800197c:	2011      	movs	r0, #17
 800197e:	f000 f853 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001982:	2007      	movs	r0, #7
 8001984:	f000 f850 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001988:	2031      	movs	r0, #49	; 0x31
 800198a:	f000 f84d 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800198e:	2033      	movs	r0, #51	; 0x33
 8001990:	f000 f84a 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001994:	2042      	movs	r0, #66	; 0x42
 8001996:	f000 f847 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800199a:	2005      	movs	r0, #5
 800199c:	f000 f844 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80019a0:	200c      	movs	r0, #12
 80019a2:	f000 f841 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80019a6:	200a      	movs	r0, #10
 80019a8:	f000 f83e 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80019ac:	2028      	movs	r0, #40	; 0x28
 80019ae:	f000 f83b 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80019b2:	202f      	movs	r0, #47	; 0x2f
 80019b4:	f000 f838 	bl	8001a28 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80019b8:	200f      	movs	r0, #15
 80019ba:	f000 f835 	bl	8001a28 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80019be:	2011      	movs	r0, #17
 80019c0:	f000 f825 	bl	8001a0e <ili9341_WriteReg>
  LCD_Delay(200);
 80019c4:	20c8      	movs	r0, #200	; 0xc8
 80019c6:	f000 fc23 	bl	8002210 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80019ca:	2029      	movs	r0, #41	; 0x29
 80019cc:	f000 f81f 	bl	8001a0e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80019d0:	202c      	movs	r0, #44	; 0x2c
 80019d2:	f000 f81c 	bl	8001a0e <ili9341_WriteReg>
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}

080019da <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80019de:	f000 fb29 	bl	8002034 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80019e2:	2103      	movs	r1, #3
 80019e4:	20d3      	movs	r0, #211	; 0xd3
 80019e6:	f000 f82c 	bl	8001a42 <ili9341_ReadData>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b29b      	uxth	r3, r3
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80019f6:	2029      	movs	r0, #41	; 0x29
 80019f8:	f000 f809 	bl	8001a0e <ili9341_WriteReg>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001a04:	2028      	movs	r0, #40	; 0x28
 8001a06:	f000 f802 	bl	8001a0e <ili9341_WriteReg>
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fba4 	bl	8002168 <LCD_IO_WriteReg>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fb75 	bl	8002124 <LCD_IO_WriteData>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	460a      	mov	r2, r1
 8001a4c:	80fb      	strh	r3, [r7, #6]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001a52:	797a      	ldrb	r2, [r7, #5]
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 fba7 	bl	80021ac <LCD_IO_ReadData>
 8001a5e:	4603      	mov	r3, r0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001a6c:	23f0      	movs	r3, #240	; 0xf0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001a7c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b084      	sub	sp, #16
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001a98:	f000 fbc6 	bl	8002228 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001aa2:	f107 030f 	add.w	r3, r7, #15
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	2120      	movs	r1, #32
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 fc08 	bl	80022c0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001aba:	f107 030f 	add.w	r3, r7, #15
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2123      	movs	r1, #35	; 0x23
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 fbfc 	bl	80022c0 <GYRO_IO_Write>
}
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001ae4:	f000 fba0 	bl	8002228 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001ae8:	1dfb      	adds	r3, r7, #7
 8001aea:	2201      	movs	r2, #1
 8001aec:	210f      	movs	r1, #15
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fc18 	bl	8002324 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001af4:	79fb      	ldrb	r3, [r7, #7]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001b04:	1dfb      	adds	r3, r7, #7
 8001b06:	2201      	movs	r2, #1
 8001b08:	2124      	movs	r1, #36	; 0x24
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 fc0a 	bl	8002324 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001b1a:	1dfb      	adds	r3, r7, #7
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2124      	movs	r1, #36	; 0x24
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 fbcd 	bl	80022c0 <GYRO_IO_Write>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b084      	sub	sp, #16
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001b3c:	88fb      	ldrh	r3, [r7, #6]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001b42:	f107 030f 	add.w	r3, r7, #15
 8001b46:	2201      	movs	r2, #1
 8001b48:	2120      	movs	r1, #32
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fbb8 	bl	80022c0 <GYRO_IO_Write>
}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73fb      	strb	r3, [r7, #15]
 8001b66:	2300      	movs	r3, #0
 8001b68:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001b6a:	f107 030f 	add.w	r3, r7, #15
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2130      	movs	r1, #48	; 0x30
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fbd6 	bl	8002324 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001b78:	f107 030e 	add.w	r3, r7, #14
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2122      	movs	r1, #34	; 0x22
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 fbcf 	bl	8002324 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	121b      	asrs	r3, r3, #8
 8001b96:	b25a      	sxtb	r2, r3
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	b25b      	sxtb	r3, r3
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	b25b      	sxtb	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001ba4:	7bbb      	ldrb	r3, [r7, #14]
 8001ba6:	f023 0320 	bic.w	r3, r3, #32
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	7bbb      	ldrb	r3, [r7, #14]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001bba:	f107 030f 	add.w	r3, r7, #15
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2130      	movs	r1, #48	; 0x30
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 fb7c 	bl	80022c0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001bc8:	f107 030e 	add.w	r3, r7, #14
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2122      	movs	r1, #34	; 0x22
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fb75 	bl	80022c0 <GYRO_IO_Write>
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001be8:	f107 030f 	add.w	r3, r7, #15
 8001bec:	2201      	movs	r2, #1
 8001bee:	2122      	movs	r1, #34	; 0x22
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 fb97 	bl	8002324 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10a      	bne.n	8001c12 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e00c      	b.n	8001c2c <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d109      	bne.n	8001c2c <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	f023 0308 	bic.w	r3, r3, #8
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c2c:	f107 030f 	add.w	r3, r7, #15
 8001c30:	2201      	movs	r2, #1
 8001c32:	2122      	movs	r1, #34	; 0x22
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fb43 	bl	80022c0 <GYRO_IO_Write>
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c4c:	f107 030f 	add.w	r3, r7, #15
 8001c50:	2201      	movs	r2, #1
 8001c52:	2122      	movs	r1, #34	; 0x22
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fb65 	bl	8002324 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d107      	bne.n	8001c70 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	73fb      	strb	r3, [r7, #15]
 8001c6e:	e009      	b.n	8001c84 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d106      	bne.n	8001c84 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	f023 0308 	bic.w	r3, r3, #8
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
 8001c82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001c84:	f107 030f 	add.w	r3, r7, #15
 8001c88:	2201      	movs	r2, #1
 8001c8a:	2122      	movs	r1, #34	; 0x22
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fb17 	bl	80022c0 <GYRO_IO_Write>
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001ca4:	f107 030f 	add.w	r3, r7, #15
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2121      	movs	r1, #33	; 0x21
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 fb39 	bl	8002324 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001cc6:	f107 030f 	add.w	r3, r7, #15
 8001cca:	2201      	movs	r2, #1
 8001ccc:	2121      	movs	r1, #33	; 0x21
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 faf6 	bl	80022c0 <GYRO_IO_Write>
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001ce6:	f107 030f 	add.w	r3, r7, #15
 8001cea:	2201      	movs	r2, #1
 8001cec:	2124      	movs	r1, #36	; 0x24
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 fb18 	bl	8002324 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	f023 0310 	bic.w	r3, r3, #16
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001d08:	f107 030f 	add.w	r3, r7, #15
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	2124      	movs	r1, #36	; 0x24
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fad5 	bl	80022c0 <GYRO_IO_Write>
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001d48:	f107 030f 	add.w	r3, r7, #15
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2123      	movs	r1, #35	; 0x23
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fae7 	bl	8002324 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001d56:	f107 0318 	add.w	r3, r7, #24
 8001d5a:	2206      	movs	r2, #6
 8001d5c:	2128      	movs	r1, #40	; 0x28
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fae0 	bl	8002324 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d123      	bne.n	8001db6 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
 8001d72:	e01c      	b.n	8001dae <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	3301      	adds	r3, #1
 8001d7a:	3328      	adds	r3, #40	; 0x28
 8001d7c:	443b      	add	r3, r7
 8001d7e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	3328      	adds	r3, #40	; 0x28
 8001d8e:	443b      	add	r3, r7
 8001d90:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b21a      	sxth	r2, r3
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	3328      	adds	r3, #40	; 0x28
 8001da2:	443b      	add	r3, r7
 8001da4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	3301      	adds	r3, #1
 8001dac:	623b      	str	r3, [r7, #32]
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	dddf      	ble.n	8001d74 <L3GD20_ReadXYZAngRate+0x54>
 8001db4:	e022      	b.n	8001dfc <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
 8001dba:	e01c      	b.n	8001df6 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	3328      	adds	r3, #40	; 0x28
 8001dc2:	443b      	add	r3, r7
 8001dc4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	3328      	adds	r3, #40	; 0x28
 8001dd6:	443b      	add	r3, r7
 8001dd8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	3328      	adds	r3, #40	; 0x28
 8001dea:	443b      	add	r3, r7
 8001dec:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	3301      	adds	r3, #1
 8001df4:	623b      	str	r3, [r7, #32]
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	dddf      	ble.n	8001dbc <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	d00c      	beq.n	8001e20 <L3GD20_ReadXYZAngRate+0x100>
 8001e06:	2b20      	cmp	r3, #32
 8001e08:	dc0d      	bgt.n	8001e26 <L3GD20_ReadXYZAngRate+0x106>
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <L3GD20_ReadXYZAngRate+0xf4>
 8001e0e:	2b10      	cmp	r3, #16
 8001e10:	d003      	beq.n	8001e1a <L3GD20_ReadXYZAngRate+0xfa>
 8001e12:	e008      	b.n	8001e26 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <L3GD20_ReadXYZAngRate+0x14c>)
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001e18:	e005      	b.n	8001e26 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <L3GD20_ReadXYZAngRate+0x150>)
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001e1e:	e002      	b.n	8001e26 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <L3GD20_ReadXYZAngRate+0x154>)
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001e24:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
 8001e2a:	e016      	b.n	8001e5a <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	3328      	adds	r3, #40	; 0x28
 8001e32:	443b      	add	r3, r7
 8001e34:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	3301      	adds	r3, #1
 8001e58:	623b      	str	r3, [r7, #32]
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	dde5      	ble.n	8001e2c <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	; 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	410c0000 	.word	0x410c0000
 8001e70:	418c0000 	.word	0x418c0000
 8001e74:	428c0000 	.word	0x428c0000

08001e78 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001e7c:	4819      	ldr	r0, [pc, #100]	; (8001ee4 <SPIx_Init+0x6c>)
 8001e7e:	f007 f8df 	bl	8009040 <HAL_SPI_GetState>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d12b      	bne.n	8001ee0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <SPIx_Init+0x6c>)
 8001e8a:	4a17      	ldr	r2, [pc, #92]	; (8001ee8 <SPIx_Init+0x70>)
 8001e8c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <SPIx_Init+0x6c>)
 8001e90:	2218      	movs	r2, #24
 8001e92:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <SPIx_Init+0x6c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <SPIx_Init+0x6c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <SPIx_Init+0x6c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <SPIx_Init+0x6c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <SPIx_Init+0x6c>)
 8001eae:	2207      	movs	r2, #7
 8001eb0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <SPIx_Init+0x6c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <SPIx_Init+0x6c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <SPIx_Init+0x6c>)
 8001ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <SPIx_Init+0x6c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <SPIx_Init+0x6c>)
 8001ece:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ed2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <SPIx_Init+0x6c>)
 8001ed6:	f000 f873 	bl	8001fc0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001eda:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <SPIx_Init+0x6c>)
 8001edc:	f006 fbfc 	bl	80086d8 <HAL_SPI_Init>
  } 
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000610 	.word	0x20000610
 8001ee8:	40015000 	.word	0x40015000

08001eec <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <SPIx_Read+0x38>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f107 0108 	add.w	r1, r7, #8
 8001f06:	4808      	ldr	r0, [pc, #32]	; (8001f28 <SPIx_Read+0x3c>)
 8001f08:	f006 fde7 	bl	8008ada <HAL_SPI_Receive>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001f16:	f000 f847 	bl	8001fa8 <SPIx_Error>
  }
  
  return readvalue;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000070 	.word	0x20000070
 8001f28:	20000610 	.word	0x20000610

08001f2c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <SPIx_Write+0x34>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	1db9      	adds	r1, r7, #6
 8001f40:	2201      	movs	r2, #1
 8001f42:	4808      	ldr	r0, [pc, #32]	; (8001f64 <SPIx_Write+0x38>)
 8001f44:	f006 fc8d 	bl	8008862 <HAL_SPI_Transmit>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001f4c:	7bfb      	ldrb	r3, [r7, #15]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001f52:	f000 f829 	bl	8001fa8 <SPIx_Error>
  }
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000070 	.word	0x20000070
 8001f64:	20000610 	.word	0x20000610

08001f68 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af02      	add	r7, sp, #8
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <SPIx_WriteRead+0x38>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f107 020f 	add.w	r2, r7, #15
 8001f7e:	1df9      	adds	r1, r7, #7
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2301      	movs	r3, #1
 8001f84:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <SPIx_WriteRead+0x3c>)
 8001f86:	f006 feb9 	bl	8008cfc <HAL_SPI_TransmitReceive>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001f90:	f000 f80a 	bl	8001fa8 <SPIx_Error>
  }
  
  return receivedbyte;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000070 	.word	0x20000070
 8001fa4:	20000610 	.word	0x20000610

08001fa8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <SPIx_Error+0x14>)
 8001fae:	f006 fc1c 	bl	80087ea <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001fb2:	f7ff ff61 	bl	8001e78 <SPIx_Init>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000610 	.word	0x20000610

08001fc0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <SPIx_MspInit+0x6c>)
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	4a16      	ldr	r2, [pc, #88]	; (800202c <SPIx_MspInit+0x6c>)
 8001fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <SPIx_MspInit+0x6c>)
 8001fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <SPIx_MspInit+0x6c>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	4a0f      	ldr	r2, [pc, #60]	; (800202c <SPIx_MspInit+0x6c>)
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <SPIx_MspInit+0x6c>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002000:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002004:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800200a:	2302      	movs	r3, #2
 800200c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800200e:	2301      	movs	r3, #1
 8002010:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002012:	2305      	movs	r3, #5
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <SPIx_MspInit+0x70>)
 800201e:	f001 fb9d 	bl	800375c <HAL_GPIO_Init>
}
 8002022:	bf00      	nop
 8002024:	3728      	adds	r7, #40	; 0x28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	40021400 	.word	0x40021400

08002034 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800203a:	4b36      	ldr	r3, [pc, #216]	; (8002114 <LCD_IO_Init+0xe0>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d164      	bne.n	800210c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002042:	4b34      	ldr	r3, [pc, #208]	; (8002114 <LCD_IO_Init+0xe0>)
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	4b32      	ldr	r3, [pc, #200]	; (8002118 <LCD_IO_Init+0xe4>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	4a31      	ldr	r2, [pc, #196]	; (8002118 <LCD_IO_Init+0xe4>)
 8002052:	f043 0308 	orr.w	r3, r3, #8
 8002056:	6313      	str	r3, [r2, #48]	; 0x30
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <LCD_IO_Init+0xe4>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002068:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800206a:	2301      	movs	r3, #1
 800206c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002072:	2302      	movs	r3, #2
 8002074:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	4619      	mov	r1, r3
 800207c:	4827      	ldr	r0, [pc, #156]	; (800211c <LCD_IO_Init+0xe8>)
 800207e:	f001 fb6d 	bl	800375c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	4b24      	ldr	r3, [pc, #144]	; (8002118 <LCD_IO_Init+0xe4>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a23      	ldr	r2, [pc, #140]	; (8002118 <LCD_IO_Init+0xe4>)
 800208c:	f043 0308 	orr.w	r3, r3, #8
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b21      	ldr	r3, [pc, #132]	; (8002118 <LCD_IO_Init+0xe4>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800209e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	4619      	mov	r1, r3
 80020b6:	4819      	ldr	r0, [pc, #100]	; (800211c <LCD_IO_Init+0xe8>)
 80020b8:	f001 fb50 	bl	800375c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80020bc:	2300      	movs	r3, #0
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	4b15      	ldr	r3, [pc, #84]	; (8002118 <LCD_IO_Init+0xe4>)
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <LCD_IO_Init+0xe4>)
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	6313      	str	r3, [r2, #48]	; 0x30
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <LCD_IO_Init+0xe4>)
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80020d8:	2304      	movs	r3, #4
 80020da:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80020dc:	2301      	movs	r3, #1
 80020de:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	4619      	mov	r1, r3
 80020ee:	480c      	ldr	r0, [pc, #48]	; (8002120 <LCD_IO_Init+0xec>)
 80020f0:	f001 fb34 	bl	800375c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80020f4:	2200      	movs	r2, #0
 80020f6:	2104      	movs	r1, #4
 80020f8:	4809      	ldr	r0, [pc, #36]	; (8002120 <LCD_IO_Init+0xec>)
 80020fa:	f001 fcdb 	bl	8003ab4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80020fe:	2201      	movs	r2, #1
 8002100:	2104      	movs	r1, #4
 8002102:	4807      	ldr	r0, [pc, #28]	; (8002120 <LCD_IO_Init+0xec>)
 8002104:	f001 fcd6 	bl	8003ab4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002108:	f7ff feb6 	bl	8001e78 <SPIx_Init>
  }
}
 800210c:	bf00      	nop
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000668 	.word	0x20000668
 8002118:	40023800 	.word	0x40023800
 800211c:	40020c00 	.word	0x40020c00
 8002120:	40020800 	.word	0x40020800

08002124 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800212e:	2201      	movs	r2, #1
 8002130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002134:	480a      	ldr	r0, [pc, #40]	; (8002160 <LCD_IO_WriteData+0x3c>)
 8002136:	f001 fcbd 	bl	8003ab4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800213a:	2200      	movs	r2, #0
 800213c:	2104      	movs	r1, #4
 800213e:	4809      	ldr	r0, [pc, #36]	; (8002164 <LCD_IO_WriteData+0x40>)
 8002140:	f001 fcb8 	bl	8003ab4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fef0 	bl	8001f2c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800214c:	2201      	movs	r2, #1
 800214e:	2104      	movs	r1, #4
 8002150:	4804      	ldr	r0, [pc, #16]	; (8002164 <LCD_IO_WriteData+0x40>)
 8002152:	f001 fcaf 	bl	8003ab4 <HAL_GPIO_WritePin>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40020c00 	.word	0x40020c00
 8002164:	40020800 	.word	0x40020800

08002168 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002172:	2200      	movs	r2, #0
 8002174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002178:	480a      	ldr	r0, [pc, #40]	; (80021a4 <LCD_IO_WriteReg+0x3c>)
 800217a:	f001 fc9b 	bl	8003ab4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800217e:	2200      	movs	r2, #0
 8002180:	2104      	movs	r1, #4
 8002182:	4809      	ldr	r0, [pc, #36]	; (80021a8 <LCD_IO_WriteReg+0x40>)
 8002184:	f001 fc96 	bl	8003ab4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fecd 	bl	8001f2c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002192:	2201      	movs	r2, #1
 8002194:	2104      	movs	r1, #4
 8002196:	4804      	ldr	r0, [pc, #16]	; (80021a8 <LCD_IO_WriteReg+0x40>)
 8002198:	f001 fc8c 	bl	8003ab4 <HAL_GPIO_WritePin>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40020c00 	.word	0x40020c00
 80021a8:	40020800 	.word	0x40020800

080021ac <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	460a      	mov	r2, r1
 80021b6:	80fb      	strh	r3, [r7, #6]
 80021b8:	4613      	mov	r3, r2
 80021ba:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80021c0:	2200      	movs	r2, #0
 80021c2:	2104      	movs	r1, #4
 80021c4:	4810      	ldr	r0, [pc, #64]	; (8002208 <LCD_IO_ReadData+0x5c>)
 80021c6:	f001 fc75 	bl	8003ab4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80021ca:	2200      	movs	r2, #0
 80021cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d0:	480e      	ldr	r0, [pc, #56]	; (800220c <LCD_IO_ReadData+0x60>)
 80021d2:	f001 fc6f 	bl	8003ab4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80021d6:	88fb      	ldrh	r3, [r7, #6]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fea7 	bl	8001f2c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80021de:	797b      	ldrb	r3, [r7, #5]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fe83 	bl	8001eec <SPIx_Read>
 80021e6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80021e8:	2201      	movs	r2, #1
 80021ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <LCD_IO_ReadData+0x60>)
 80021f0:	f001 fc60 	bl	8003ab4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80021f4:	2201      	movs	r2, #1
 80021f6:	2104      	movs	r1, #4
 80021f8:	4803      	ldr	r0, [pc, #12]	; (8002208 <LCD_IO_ReadData+0x5c>)
 80021fa:	f001 fc5b 	bl	8003ab4 <HAL_GPIO_WritePin>
  
  return readvalue;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40020800 	.word	0x40020800
 800220c:	40020c00 	.word	0x40020c00

08002210 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 ffdb 	bl	80031d4 <HAL_Delay>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <GYRO_IO_Init+0x8c>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a1f      	ldr	r2, [pc, #124]	; (80022b4 <GYRO_IO_Init+0x8c>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <GYRO_IO_Init+0x8c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800224a:	2302      	movs	r3, #2
 800224c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800224e:	2301      	movs	r3, #1
 8002250:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8002256:	2301      	movs	r3, #1
 8002258:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	4619      	mov	r1, r3
 8002260:	4815      	ldr	r0, [pc, #84]	; (80022b8 <GYRO_IO_Init+0x90>)
 8002262:	f001 fa7b 	bl	800375c <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8002266:	2201      	movs	r2, #1
 8002268:	2102      	movs	r1, #2
 800226a:	4813      	ldr	r0, [pc, #76]	; (80022b8 <GYRO_IO_Init+0x90>)
 800226c:	f001 fc22 	bl	8003ab4 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <GYRO_IO_Init+0x8c>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <GYRO_IO_Init+0x8c>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6313      	str	r3, [r2, #48]	; 0x30
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <GYRO_IO_Init+0x8c>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800228c:	2306      	movs	r3, #6
 800228e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002294:	2302      	movs	r3, #2
 8002296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	4619      	mov	r1, r3
 80022a2:	4806      	ldr	r0, [pc, #24]	; (80022bc <GYRO_IO_Init+0x94>)
 80022a4:	f001 fa5a 	bl	800375c <HAL_GPIO_Init>

  SPIx_Init();
 80022a8:	f7ff fde6 	bl	8001e78 <SPIx_Init>
}
 80022ac:	bf00      	nop
 80022ae:	3720      	adds	r7, #32
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020000 	.word	0x40020000

080022c0 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
 80022cc:	4613      	mov	r3, r2
 80022ce:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80022d0:	883b      	ldrh	r3, [r7, #0]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d903      	bls.n	80022de <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022dc:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80022de:	2200      	movs	r2, #0
 80022e0:	2102      	movs	r1, #2
 80022e2:	480f      	ldr	r0, [pc, #60]	; (8002320 <GYRO_IO_Write+0x60>)
 80022e4:	f001 fbe6 	bl	8003ab4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fe3c 	bl	8001f68 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80022f0:	e00a      	b.n	8002308 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fe36 	bl	8001f68 <SPIx_WriteRead>
    NumByteToWrite--;
 80022fc:	883b      	ldrh	r3, [r7, #0]
 80022fe:	3b01      	subs	r3, #1
 8002300:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3301      	adds	r3, #1
 8002306:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8002308:	883b      	ldrh	r3, [r7, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f1      	bne.n	80022f2 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800230e:	2201      	movs	r2, #1
 8002310:	2102      	movs	r1, #2
 8002312:	4803      	ldr	r0, [pc, #12]	; (8002320 <GYRO_IO_Write+0x60>)
 8002314:	f001 fbce 	bl	8003ab4 <HAL_GPIO_WritePin>
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40020800 	.word	0x40020800

08002324 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
 8002330:	4613      	mov	r3, r2
 8002332:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002334:	883b      	ldrh	r3, [r7, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d904      	bls.n	8002344 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002340:	70fb      	strb	r3, [r7, #3]
 8002342:	e003      	b.n	800234c <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800234a:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800234c:	2200      	movs	r2, #0
 800234e:	2102      	movs	r1, #2
 8002350:	4810      	ldr	r0, [pc, #64]	; (8002394 <GYRO_IO_Read+0x70>)
 8002352:	f001 fbaf 	bl	8003ab4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fe05 	bl	8001f68 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800235e:	e00c      	b.n	800237a <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff fe01 	bl	8001f68 <SPIx_WriteRead>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800236e:	883b      	ldrh	r3, [r7, #0]
 8002370:	3b01      	subs	r3, #1
 8002372:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3301      	adds	r3, #1
 8002378:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800237a:	883b      	ldrh	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1ef      	bne.n	8002360 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002380:	2201      	movs	r2, #1
 8002382:	2102      	movs	r1, #2
 8002384:	4803      	ldr	r0, [pc, #12]	; (8002394 <GYRO_IO_Read+0x70>)
 8002386:	f001 fb95 	bl	8003ab4 <HAL_GPIO_WritePin>
}  
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40020800 	.word	0x40020800

08002398 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80023a2:	2300      	movs	r3, #0
 80023a4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 80023a6:	2300      	movs	r3, #0
 80023a8:	703b      	strb	r3, [r7, #0]
 80023aa:	2300      	movs	r3, #0
 80023ac:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80023ae:	4b2b      	ldr	r3, [pc, #172]	; (800245c <BSP_GYRO_Init+0xc4>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4798      	blx	r3
 80023b4:	4603      	mov	r3, r0
 80023b6:	2bd4      	cmp	r3, #212	; 0xd4
 80023b8:	d005      	beq.n	80023c6 <BSP_GYRO_Init+0x2e>
 80023ba:	4b28      	ldr	r3, [pc, #160]	; (800245c <BSP_GYRO_Init+0xc4>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	4798      	blx	r3
 80023c0:	4603      	mov	r3, r0
 80023c2:	2bd5      	cmp	r3, #213	; 0xd5
 80023c4:	d145      	bne.n	8002452 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <BSP_GYRO_Init+0xc8>)
 80023c8:	4a24      	ldr	r2, [pc, #144]	; (800245c <BSP_GYRO_Init+0xc4>)
 80023ca:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80023cc:	2308      	movs	r3, #8
 80023ce:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80023d4:	2307      	movs	r3, #7
 80023d6:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80023d8:	2330      	movs	r3, #48	; 0x30
 80023da:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80023dc:	2300      	movs	r3, #0
 80023de:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80023e0:	2300      	movs	r3, #0
 80023e2:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80023e4:	2310      	movs	r3, #16
 80023e6:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80023e8:	793a      	ldrb	r2, [r7, #4]
 80023ea:	797b      	ldrb	r3, [r7, #5]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80023f0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80023f2:	4313      	orrs	r3, r2
 80023f4:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80023f6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80023f8:	4313      	orrs	r3, r2
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80023fe:	7a3a      	ldrb	r2, [r7, #8]
 8002400:	7a7b      	ldrb	r3, [r7, #9]
 8002402:	4313      	orrs	r3, r2
 8002404:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8002406:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002408:	4313      	orrs	r3, r2
 800240a:	b2db      	uxtb	r3, r3
 800240c:	b29b      	uxth	r3, r3
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	b29a      	uxth	r2, r3
 8002412:	89bb      	ldrh	r3, [r7, #12]
 8002414:	4313      	orrs	r3, r2
 8002416:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <BSP_GYRO_Init+0xc8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	89ba      	ldrh	r2, [r7, #12]
 8002420:	4610      	mov	r0, r2
 8002422:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002424:	2300      	movs	r3, #0
 8002426:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002428:	2300      	movs	r3, #0
 800242a:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800242c:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800242e:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002430:	4313      	orrs	r3, r2
 8002432:	b2db      	uxtb	r3, r3
 8002434:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <BSP_GYRO_Init+0xc8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	89ba      	ldrh	r2, [r7, #12]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	4610      	mov	r0, r2
 8002442:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <BSP_GYRO_Init+0xc8>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	2010      	movs	r0, #16
 800244c:	4798      	blx	r3

    ret = GYRO_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2000003c 	.word	0x2000003c
 8002460:	2000066c 	.word	0x2000066c

08002464 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <BSP_GYRO_GetXYZ+0x24>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	2b00      	cmp	r3, #0
 8002474:	d004      	beq.n	8002480 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002476:	4b04      	ldr	r3, [pc, #16]	; (8002488 <BSP_GYRO_GetXYZ+0x24>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	4798      	blx	r3
  }
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	2000066c 	.word	0x2000066c

0800248c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002490:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <BSP_LCD_Init+0xbc>)
 8002492:	4a2e      	ldr	r2, [pc, #184]	; (800254c <BSP_LCD_Init+0xc0>)
 8002494:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002496:	4b2c      	ldr	r3, [pc, #176]	; (8002548 <BSP_LCD_Init+0xbc>)
 8002498:	2209      	movs	r2, #9
 800249a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800249c:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <BSP_LCD_Init+0xbc>)
 800249e:	2201      	movs	r2, #1
 80024a0:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80024a2:	4b29      	ldr	r3, [pc, #164]	; (8002548 <BSP_LCD_Init+0xbc>)
 80024a4:	221d      	movs	r2, #29
 80024a6:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <BSP_LCD_Init+0xbc>)
 80024aa:	2203      	movs	r2, #3
 80024ac:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <BSP_LCD_Init+0xbc>)
 80024b0:	f240 120d 	movw	r2, #269	; 0x10d
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <BSP_LCD_Init+0xbc>)
 80024b8:	f240 1243 	movw	r2, #323	; 0x143
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80024be:	4b22      	ldr	r3, [pc, #136]	; (8002548 <BSP_LCD_Init+0xbc>)
 80024c0:	f240 1217 	movw	r2, #279	; 0x117
 80024c4:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <BSP_LCD_Init+0xbc>)
 80024c8:	f240 1247 	movw	r2, #327	; 0x147
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80024ce:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <BSP_LCD_Init+0xbc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <BSP_LCD_Init+0xbc>)
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <BSP_LCD_Init+0xbc>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <BSP_LCD_Init+0xc4>)
 80024e8:	2208      	movs	r2, #8
 80024ea:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80024ec:	4b18      	ldr	r3, [pc, #96]	; (8002550 <BSP_LCD_Init+0xc4>)
 80024ee:	22c0      	movs	r2, #192	; 0xc0
 80024f0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80024f2:	4b17      	ldr	r3, [pc, #92]	; (8002550 <BSP_LCD_Init+0xc4>)
 80024f4:	2204      	movs	r2, #4
 80024f6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <BSP_LCD_Init+0xc4>)
 80024fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002500:	4813      	ldr	r0, [pc, #76]	; (8002550 <BSP_LCD_Init+0xc4>)
 8002502:	f003 fa23 	bl	800594c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <BSP_LCD_Init+0xbc>)
 8002508:	2200      	movs	r2, #0
 800250a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <BSP_LCD_Init+0xbc>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <BSP_LCD_Init+0xbc>)
 8002514:	2200      	movs	r2, #0
 8002516:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <BSP_LCD_Init+0xbc>)
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800251e:	f000 fa5f 	bl	80029e0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002522:	4809      	ldr	r0, [pc, #36]	; (8002548 <BSP_LCD_Init+0xbc>)
 8002524:	f005 fd64 	bl	8007ff0 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <BSP_LCD_Init+0xc8>)
 800252a:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <BSP_LCD_Init+0xcc>)
 800252c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <BSP_LCD_Init+0xc8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002536:	f000 fc41 	bl	8002dbc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800253a:	4808      	ldr	r0, [pc, #32]	; (800255c <BSP_LCD_Init+0xd0>)
 800253c:	f000 f8ce 	bl	80026dc <BSP_LCD_SetFont>

  return LCD_OK;
 8002540:	2300      	movs	r3, #0
}  
 8002542:	4618      	mov	r0, r3
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000670 	.word	0x20000670
 800254c:	40016800 	.word	0x40016800
 8002550:	20000758 	.word	0x20000758
 8002554:	200007a4 	.word	0x200007a4
 8002558:	20000004 	.word	0x20000004
 800255c:	20000074 	.word	0x20000074

08002560 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <BSP_LCD_GetXSize+0x14>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	4798      	blx	r3
 800256c:	4603      	mov	r3, r0
}
 800256e:	4618      	mov	r0, r3
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	200007a4 	.word	0x200007a4

08002578 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <BSP_LCD_GetYSize+0x14>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	4798      	blx	r3
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200007a4 	.word	0x200007a4

08002590 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002590:	b580      	push	{r7, lr}
 8002592:	b090      	sub	sp, #64	; 0x40
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80025a0:	f7ff ffde 	bl	8002560 <BSP_LCD_GetXSize>
 80025a4:	4603      	mov	r3, r0
 80025a6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80025ac:	f7ff ffe4 	bl	8002578 <BSP_LCD_GetYSize>
 80025b0:	4603      	mov	r3, r0
 80025b2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80025bc:	23ff      	movs	r3, #255	; 0xff
 80025be:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80025d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025da:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80025dc:	2307      	movs	r3, #7
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80025e0:	f7ff ffbe 	bl	8002560 <BSP_LCD_GetXSize>
 80025e4:	4603      	mov	r3, r0
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80025e8:	f7ff ffc6 	bl	8002578 <BSP_LCD_GetYSize>
 80025ec:	4603      	mov	r3, r0
 80025ee:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80025f0:	88fa      	ldrh	r2, [r7, #6]
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	4619      	mov	r1, r3
 80025f8:	4814      	ldr	r0, [pc, #80]	; (800264c <BSP_LCD_LayerDefaultInit+0xbc>)
 80025fa:	f005 fdd3 	bl	80081a4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80025fe:	88fa      	ldrh	r2, [r7, #6]
 8002600:	4913      	ldr	r1, [pc, #76]	; (8002650 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3304      	adds	r3, #4
 800260e:	f04f 32ff 	mov.w	r2, #4294967295
 8002612:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002614:	88fa      	ldrh	r2, [r7, #6]
 8002616:	490e      	ldr	r1, [pc, #56]	; (8002650 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002618:	4613      	mov	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	3308      	adds	r3, #8
 8002624:	4a0b      	ldr	r2, [pc, #44]	; (8002654 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002626:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002628:	88fa      	ldrh	r2, [r7, #6]
 800262a:	4909      	ldr	r1, [pc, #36]	; (8002650 <BSP_LCD_LayerDefaultInit+0xc0>)
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800263a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800263c:	4803      	ldr	r0, [pc, #12]	; (800264c <BSP_LCD_LayerDefaultInit+0xbc>)
 800263e:	f005 fdef 	bl	8008220 <HAL_LTDC_EnableDither>
}
 8002642:	bf00      	nop
 8002644:	3740      	adds	r7, #64	; 0x40
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000670 	.word	0x20000670
 8002650:	2000078c 	.word	0x2000078c
 8002654:	20000074 	.word	0x20000074

08002658 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <BSP_LCD_SelectLayer+0x1c>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6013      	str	r3, [r2, #0]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000788 	.word	0x20000788

08002678 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002680:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <BSP_LCD_SetTextColor+0x28>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <BSP_LCD_SetTextColor+0x2c>)
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	601a      	str	r2, [r3, #0]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	20000788 	.word	0x20000788
 80026a4:	2000078c 	.word	0x2000078c

080026a8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <BSP_LCD_SetBackColor+0x2c>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4908      	ldr	r1, [pc, #32]	; (80026d8 <BSP_LCD_SetBackColor+0x30>)
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	3304      	adds	r3, #4
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	601a      	str	r2, [r3, #0]
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000788 	.word	0x20000788
 80026d8:	2000078c 	.word	0x2000078c

080026dc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <BSP_LCD_SetFont+0x2c>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4908      	ldr	r1, [pc, #32]	; (800270c <BSP_LCD_SetFont+0x30>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3308      	adds	r3, #8
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	601a      	str	r2, [r3, #0]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000788 	.word	0x20000788
 800270c:	2000078c 	.word	0x2000078c

08002710 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <BSP_LCD_GetFont+0x24>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4907      	ldr	r1, [pc, #28]	; (8002738 <BSP_LCD_GetFont+0x28>)
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	3308      	adds	r3, #8
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	20000788 	.word	0x20000788
 8002738:	2000078c 	.word	0x2000078c

0800273c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800273c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273e:	b085      	sub	sp, #20
 8002740:	af02      	add	r7, sp, #8
 8002742:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <BSP_LCD_Clear+0x48>)
 8002746:	681c      	ldr	r4, [r3, #0]
 8002748:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <BSP_LCD_Clear+0x48>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0e      	ldr	r2, [pc, #56]	; (8002788 <BSP_LCD_Clear+0x4c>)
 800274e:	2134      	movs	r1, #52	; 0x34
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	335c      	adds	r3, #92	; 0x5c
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	461e      	mov	r6, r3
 800275c:	f7ff ff00 	bl	8002560 <BSP_LCD_GetXSize>
 8002760:	4605      	mov	r5, r0
 8002762:	f7ff ff09 	bl	8002578 <BSP_LCD_GetYSize>
 8002766:	4602      	mov	r2, r0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	2300      	movs	r3, #0
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	462a      	mov	r2, r5
 8002774:	4631      	mov	r1, r6
 8002776:	4620      	mov	r0, r4
 8002778:	f000 fae8 	bl	8002d4c <FillBuffer>
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002784:	20000788 	.word	0x20000788
 8002788:	20000670 	.word	0x20000670

0800278c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	80fb      	strh	r3, [r7, #6]
 8002796:	460b      	mov	r3, r1
 8002798:	80bb      	strh	r3, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800279e:	4b1b      	ldr	r3, [pc, #108]	; (800280c <BSP_LCD_DisplayChar+0x80>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	491b      	ldr	r1, [pc, #108]	; (8002810 <BSP_LCD_DisplayChar+0x84>)
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	3308      	adds	r3, #8
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <BSP_LCD_DisplayChar+0x80>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4c14      	ldr	r4, [pc, #80]	; (8002810 <BSP_LCD_DisplayChar+0x84>)
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4423      	add	r3, r4
 80027ca:	3308      	adds	r3, #8
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80027d0:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <BSP_LCD_DisplayChar+0x80>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4c0d      	ldr	r4, [pc, #52]	; (8002810 <BSP_LCD_DisplayChar+0x84>)
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4423      	add	r3, r4
 80027e4:	3308      	adds	r3, #8
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	889b      	ldrh	r3, [r3, #4]
 80027ea:	3307      	adds	r3, #7
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	da00      	bge.n	80027f2 <BSP_LCD_DisplayChar+0x66>
 80027f0:	3307      	adds	r3, #7
 80027f2:	10db      	asrs	r3, r3, #3
 80027f4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80027f8:	18ca      	adds	r2, r1, r3
 80027fa:	88b9      	ldrh	r1, [r7, #4]
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f9ea 	bl	8002bd8 <DrawChar>
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bd90      	pop	{r4, r7, pc}
 800280c:	20000788 	.word	0x20000788
 8002810:	2000078c 	.word	0x2000078c

08002814 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002814:	b5b0      	push	{r4, r5, r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	60ba      	str	r2, [r7, #8]
 800281c:	461a      	mov	r2, r3
 800281e:	4603      	mov	r3, r0
 8002820:	81fb      	strh	r3, [r7, #14]
 8002822:	460b      	mov	r3, r1
 8002824:	81bb      	strh	r3, [r7, #12]
 8002826:	4613      	mov	r3, r2
 8002828:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800282a:	2301      	movs	r3, #1
 800282c:	83fb      	strh	r3, [r7, #30]
 800282e:	2300      	movs	r3, #0
 8002830:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800283e:	e002      	b.n	8002846 <BSP_LCD_DisplayStringAt+0x32>
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	3301      	adds	r3, #1
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	617a      	str	r2, [r7, #20]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f6      	bne.n	8002840 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002852:	f7ff fe85 	bl	8002560 <BSP_LCD_GetXSize>
 8002856:	4601      	mov	r1, r0
 8002858:	4b4b      	ldr	r3, [pc, #300]	; (8002988 <BSP_LCD_DisplayStringAt+0x174>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	484b      	ldr	r0, [pc, #300]	; (800298c <BSP_LCD_DisplayStringAt+0x178>)
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4403      	add	r3, r0
 8002868:	3308      	adds	r3, #8
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	889b      	ldrh	r3, [r3, #4]
 800286e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002872:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	2b03      	cmp	r3, #3
 8002878:	d01c      	beq.n	80028b4 <BSP_LCD_DisplayStringAt+0xa0>
 800287a:	2b03      	cmp	r3, #3
 800287c:	dc33      	bgt.n	80028e6 <BSP_LCD_DisplayStringAt+0xd2>
 800287e:	2b01      	cmp	r3, #1
 8002880:	d002      	beq.n	8002888 <BSP_LCD_DisplayStringAt+0x74>
 8002882:	2b02      	cmp	r3, #2
 8002884:	d019      	beq.n	80028ba <BSP_LCD_DisplayStringAt+0xa6>
 8002886:	e02e      	b.n	80028e6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	1ad1      	subs	r1, r2, r3
 800288e:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <BSP_LCD_DisplayStringAt+0x174>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	483e      	ldr	r0, [pc, #248]	; (800298c <BSP_LCD_DisplayStringAt+0x178>)
 8002894:	4613      	mov	r3, r2
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4413      	add	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4403      	add	r3, r0
 800289e:	3308      	adds	r3, #8
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	889b      	ldrh	r3, [r3, #4]
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	085b      	lsrs	r3, r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	89fb      	ldrh	r3, [r7, #14]
 80028ae:	4413      	add	r3, r2
 80028b0:	83fb      	strh	r3, [r7, #30]
      break;
 80028b2:	e01b      	b.n	80028ec <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80028b4:	89fb      	ldrh	r3, [r7, #14]
 80028b6:	83fb      	strh	r3, [r7, #30]
      break;
 80028b8:	e018      	b.n	80028ec <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	b299      	uxth	r1, r3
 80028c2:	4b31      	ldr	r3, [pc, #196]	; (8002988 <BSP_LCD_DisplayStringAt+0x174>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4831      	ldr	r0, [pc, #196]	; (800298c <BSP_LCD_DisplayStringAt+0x178>)
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4403      	add	r3, r0
 80028d2:	3308      	adds	r3, #8
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	889b      	ldrh	r3, [r3, #4]
 80028d8:	fb11 f303 	smulbb	r3, r1, r3
 80028dc:	b29a      	uxth	r2, r3
 80028de:	89fb      	ldrh	r3, [r7, #14]
 80028e0:	4413      	add	r3, r2
 80028e2:	83fb      	strh	r3, [r7, #30]
      break;
 80028e4:	e002      	b.n	80028ec <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80028e6:	89fb      	ldrh	r3, [r7, #14]
 80028e8:	83fb      	strh	r3, [r7, #30]
      break;
 80028ea:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80028ec:	e01a      	b.n	8002924 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	89b9      	ldrh	r1, [r7, #12]
 80028f4:	8bfb      	ldrh	r3, [r7, #30]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff ff48 	bl	800278c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80028fc:	4b22      	ldr	r3, [pc, #136]	; (8002988 <BSP_LCD_DisplayStringAt+0x174>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4922      	ldr	r1, [pc, #136]	; (800298c <BSP_LCD_DisplayStringAt+0x178>)
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3308      	adds	r3, #8
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	889a      	ldrh	r2, [r3, #4]
 8002912:	8bfb      	ldrh	r3, [r7, #30]
 8002914:	4413      	add	r3, r2
 8002916:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	3301      	adds	r3, #1
 800291c:	60bb      	str	r3, [r7, #8]
    i++;
 800291e:	8bbb      	ldrh	r3, [r7, #28]
 8002920:	3301      	adds	r3, #1
 8002922:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	b2dc      	uxtb	r4, r3
 8002932:	f7ff fe15 	bl	8002560 <BSP_LCD_GetXSize>
 8002936:	8bb9      	ldrh	r1, [r7, #28]
 8002938:	4b13      	ldr	r3, [pc, #76]	; (8002988 <BSP_LCD_DisplayStringAt+0x174>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4d13      	ldr	r5, [pc, #76]	; (800298c <BSP_LCD_DisplayStringAt+0x178>)
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	442b      	add	r3, r5
 8002948:	3308      	adds	r3, #8
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	889b      	ldrh	r3, [r3, #4]
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	1ac3      	subs	r3, r0, r3
 8002954:	b299      	uxth	r1, r3
 8002956:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <BSP_LCD_DisplayStringAt+0x174>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	480c      	ldr	r0, [pc, #48]	; (800298c <BSP_LCD_DisplayStringAt+0x178>)
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4403      	add	r3, r0
 8002966:	3308      	adds	r3, #8
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	889b      	ldrh	r3, [r3, #4]
 800296c:	4299      	cmp	r1, r3
 800296e:	bf2c      	ite	cs
 8002970:	2301      	movcs	r3, #1
 8002972:	2300      	movcc	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	4023      	ands	r3, r4
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1b7      	bne.n	80028ee <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800297e:	bf00      	nop
 8002980:	bf00      	nop
 8002982:	3720      	adds	r7, #32
 8002984:	46bd      	mov	sp, r7
 8002986:	bdb0      	pop	{r4, r5, r7, pc}
 8002988:	20000788 	.word	0x20000788
 800298c:	2000078c 	.word	0x2000078c

08002990 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	6039      	str	r1, [r7, #0]
 800299a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800299c:	f7ff feb8 	bl	8002710 <BSP_LCD_GetFont>
 80029a0:	4603      	mov	r3, r0
 80029a2:	88db      	ldrh	r3, [r3, #6]
 80029a4:	88fa      	ldrh	r2, [r7, #6]
 80029a6:	fb12 f303 	smulbb	r3, r2, r3
 80029aa:	b299      	uxth	r1, r3
 80029ac:	2303      	movs	r3, #3
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7ff ff2f 	bl	8002814 <BSP_LCD_DisplayStringAt>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <BSP_LCD_DisplayOn+0x1c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80029ce:	4b03      	ldr	r3, [pc, #12]	; (80029dc <BSP_LCD_DisplayOn+0x1c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4798      	blx	r3
  }
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200007a4 	.word	0x200007a4

080029e0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	; 0x38
 80029e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	623b      	str	r3, [r7, #32]
 80029ea:	4b61      	ldr	r3, [pc, #388]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a60      	ldr	r2, [pc, #384]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 80029f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b5e      	ldr	r3, [pc, #376]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029fe:	623b      	str	r3, [r7, #32]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	4b5a      	ldr	r3, [pc, #360]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a59      	ldr	r2, [pc, #356]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b57      	ldr	r3, [pc, #348]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	4b53      	ldr	r3, [pc, #332]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	4a52      	ldr	r2, [pc, #328]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2e:	4b50      	ldr	r3, [pc, #320]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	4b4c      	ldr	r3, [pc, #304]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	4a4b      	ldr	r2, [pc, #300]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	6313      	str	r3, [r2, #48]	; 0x30
 8002a4a:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	4b45      	ldr	r3, [pc, #276]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a44      	ldr	r2, [pc, #272]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b42      	ldr	r3, [pc, #264]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	4b3e      	ldr	r3, [pc, #248]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a3d      	ldr	r2, [pc, #244]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a7c:	f043 0308 	orr.w	r3, r3, #8
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	4b37      	ldr	r3, [pc, #220]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	4a36      	ldr	r2, [pc, #216]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002a98:	f043 0320 	orr.w	r3, r3, #32
 8002a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9e:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <BSP_LCD_MspInit+0x190>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002ac6:	f641 0358 	movw	r3, #6232	; 0x1858
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002acc:	2302      	movs	r3, #2
 8002ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002ad8:	230e      	movs	r3, #14
 8002ada:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4824      	ldr	r0, [pc, #144]	; (8002b74 <BSP_LCD_MspInit+0x194>)
 8002ae4:	f000 fe3a 	bl	800375c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002ae8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af2:	4619      	mov	r1, r3
 8002af4:	4820      	ldr	r0, [pc, #128]	; (8002b78 <BSP_LCD_MspInit+0x198>)
 8002af6:	f000 fe31 	bl	800375c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002afa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b04:	4619      	mov	r1, r3
 8002b06:	481d      	ldr	r0, [pc, #116]	; (8002b7c <BSP_LCD_MspInit+0x19c>)
 8002b08:	f000 fe28 	bl	800375c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002b0c:	2348      	movs	r3, #72	; 0x48
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b14:	4619      	mov	r1, r3
 8002b16:	481a      	ldr	r0, [pc, #104]	; (8002b80 <BSP_LCD_MspInit+0x1a0>)
 8002b18:	f000 fe20 	bl	800375c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b26:	4619      	mov	r1, r3
 8002b28:	4816      	ldr	r0, [pc, #88]	; (8002b84 <BSP_LCD_MspInit+0x1a4>)
 8002b2a:	f000 fe17 	bl	800375c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002b2e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4813      	ldr	r0, [pc, #76]	; (8002b88 <BSP_LCD_MspInit+0x1a8>)
 8002b3c:	f000 fe0e 	bl	800375c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002b40:	2303      	movs	r3, #3
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002b44:	2309      	movs	r3, #9
 8002b46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	480a      	ldr	r0, [pc, #40]	; (8002b78 <BSP_LCD_MspInit+0x198>)
 8002b50:	f000 fe04 	bl	800375c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002b54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4809      	ldr	r0, [pc, #36]	; (8002b88 <BSP_LCD_MspInit+0x1a8>)
 8002b62:	f000 fdfb 	bl	800375c <HAL_GPIO_Init>
}
 8002b66:	bf00      	nop
 8002b68:	3738      	adds	r7, #56	; 0x38
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40020800 	.word	0x40020800
 8002b80:	40020c00 	.word	0x40020c00
 8002b84:	40021400 	.word	0x40021400
 8002b88:	40021800 	.word	0x40021800

08002b8c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002b8c:	b5b0      	push	{r4, r5, r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	603a      	str	r2, [r7, #0]
 8002b96:	80fb      	strh	r3, [r7, #6]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <BSP_LCD_DrawPixel+0x44>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <BSP_LCD_DrawPixel+0x48>)
 8002ba2:	2134      	movs	r1, #52	; 0x34
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	335c      	adds	r3, #92	; 0x5c
 8002bac:	681c      	ldr	r4, [r3, #0]
 8002bae:	88bd      	ldrh	r5, [r7, #4]
 8002bb0:	f7ff fcd6 	bl	8002560 <BSP_LCD_GetXSize>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	fb03 f205 	mul.w	r2, r3, r5
 8002bba:	88fb      	ldrh	r3, [r7, #6]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4423      	add	r3, r4
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd0:	20000788 	.word	0x20000788
 8002bd4:	20000670 	.word	0x20000670

08002bd8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	603a      	str	r2, [r7, #0]
 8002be2:	80fb      	strh	r3, [r7, #6]
 8002be4:	460b      	mov	r3, r1
 8002be6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
 8002bec:	2300      	movs	r3, #0
 8002bee:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002bf4:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <DrawChar+0x16c>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4953      	ldr	r1, [pc, #332]	; (8002d48 <DrawChar+0x170>)
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	3308      	adds	r3, #8
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	88db      	ldrh	r3, [r3, #6]
 8002c0a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002c0c:	4b4d      	ldr	r3, [pc, #308]	; (8002d44 <DrawChar+0x16c>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	494d      	ldr	r1, [pc, #308]	; (8002d48 <DrawChar+0x170>)
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	889b      	ldrh	r3, [r3, #4]
 8002c22:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002c24:	8a3b      	ldrh	r3, [r7, #16]
 8002c26:	3307      	adds	r3, #7
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	da00      	bge.n	8002c2e <DrawChar+0x56>
 8002c2c:	3307      	adds	r3, #7
 8002c2e:	10db      	asrs	r3, r3, #3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	8a3b      	ldrh	r3, [r7, #16]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61fb      	str	r3, [r7, #28]
 8002c42:	e076      	b.n	8002d32 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002c44:	8a3b      	ldrh	r3, [r7, #16]
 8002c46:	3307      	adds	r3, #7
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	da00      	bge.n	8002c4e <DrawChar+0x76>
 8002c4c:	3307      	adds	r3, #7
 8002c4e:	10db      	asrs	r3, r3, #3
 8002c50:	461a      	mov	r2, r3
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002c5e:	8a3b      	ldrh	r3, [r7, #16]
 8002c60:	3307      	adds	r3, #7
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	da00      	bge.n	8002c68 <DrawChar+0x90>
 8002c66:	3307      	adds	r3, #7
 8002c68:	10db      	asrs	r3, r3, #3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d002      	beq.n	8002c74 <DrawChar+0x9c>
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d004      	beq.n	8002c7c <DrawChar+0xa4>
 8002c72:	e00c      	b.n	8002c8e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	617b      	str	r3, [r7, #20]
      break;
 8002c7a:	e016      	b.n	8002caa <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	3201      	adds	r2, #1
 8002c86:	7812      	ldrb	r2, [r2, #0]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
      break;
 8002c8c:	e00d      	b.n	8002caa <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	041a      	lsls	r2, r3, #16
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	3301      	adds	r3, #1
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	3202      	adds	r2, #2
 8002ca2:	7812      	ldrb	r2, [r2, #0]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
      break;
 8002ca8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	e036      	b.n	8002d1e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002cb0:	8a3a      	ldrh	r2, [r7, #16]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	1ad2      	subs	r2, r2, r3
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	4413      	add	r3, r2
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d012      	beq.n	8002cf2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	b298      	uxth	r0, r3
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <DrawChar+0x16c>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	491b      	ldr	r1, [pc, #108]	; (8002d48 <DrawChar+0x170>)
 8002cdc:	4613      	mov	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	88bb      	ldrh	r3, [r7, #4]
 8002cea:	4619      	mov	r1, r3
 8002cec:	f7ff ff4e 	bl	8002b8c <BSP_LCD_DrawPixel>
 8002cf0:	e012      	b.n	8002d18 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	88fb      	ldrh	r3, [r7, #6]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b298      	uxth	r0, r3
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <DrawChar+0x16c>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4911      	ldr	r1, [pc, #68]	; (8002d48 <DrawChar+0x170>)
 8002d02:	4613      	mov	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	88bb      	ldrh	r3, [r7, #4]
 8002d12:	4619      	mov	r1, r3
 8002d14:	f7ff ff3a 	bl	8002b8c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	8a3b      	ldrh	r3, [r7, #16]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d3c4      	bcc.n	8002cb0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8002d26:	88bb      	ldrh	r3, [r7, #4]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
 8002d32:	8a7b      	ldrh	r3, [r7, #18]
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d384      	bcc.n	8002c44 <DrawChar+0x6c>
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	bf00      	nop
 8002d3e:	3720      	adds	r7, #32
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000788 	.word	0x20000788
 8002d48:	2000078c 	.word	0x2000078c

08002d4c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002d5a:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <FillBuffer+0x68>)
 8002d5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d60:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002d62:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <FillBuffer+0x68>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002d68:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <FillBuffer+0x68>)
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <FillBuffer+0x68>)
 8002d70:	4a11      	ldr	r2, [pc, #68]	; (8002db8 <FillBuffer+0x6c>)
 8002d72:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002d74:	480f      	ldr	r0, [pc, #60]	; (8002db4 <FillBuffer+0x68>)
 8002d76:	f004 fea5 	bl	8007ac4 <HAL_DMA2D_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d115      	bne.n	8002dac <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002d80:	68f9      	ldr	r1, [r7, #12]
 8002d82:	480c      	ldr	r0, [pc, #48]	; (8002db4 <FillBuffer+0x68>)
 8002d84:	f005 f806 	bl	8007d94 <HAL_DMA2D_ConfigLayer>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10e      	bne.n	8002dac <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69f9      	ldr	r1, [r7, #28]
 8002d98:	4806      	ldr	r0, [pc, #24]	; (8002db4 <FillBuffer+0x68>)
 8002d9a:	f004 fee6 	bl	8007b6a <HAL_DMA2D_Start>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d103      	bne.n	8002dac <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002da4:	210a      	movs	r1, #10
 8002da6:	4803      	ldr	r0, [pc, #12]	; (8002db4 <FillBuffer+0x68>)
 8002da8:	f004 ff0a 	bl	8007bc0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000718 	.word	0x20000718
 8002db8:	4002b000 	.word	0x4002b000

08002dbc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <BSP_SDRAM_Init+0xac>)
 8002dc2:	4a2a      	ldr	r2, [pc, #168]	; (8002e6c <BSP_SDRAM_Init+0xb0>)
 8002dc4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <BSP_SDRAM_Init+0xb4>)
 8002dc8:	2202      	movs	r2, #2
 8002dca:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <BSP_SDRAM_Init+0xb4>)
 8002dce:	2207      	movs	r2, #7
 8002dd0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002dd2:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <BSP_SDRAM_Init+0xb4>)
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <BSP_SDRAM_Init+0xb4>)
 8002dda:	2207      	movs	r2, #7
 8002ddc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <BSP_SDRAM_Init+0xb4>)
 8002de0:	2202      	movs	r2, #2
 8002de2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002de4:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <BSP_SDRAM_Init+0xb4>)
 8002de6:	2202      	movs	r2, #2
 8002de8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002dea:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <BSP_SDRAM_Init+0xb4>)
 8002dec:	2202      	movs	r2, #2
 8002dee:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002df0:	4b1d      	ldr	r3, [pc, #116]	; (8002e68 <BSP_SDRAM_Init+0xac>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002df6:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <BSP_SDRAM_Init+0xac>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <BSP_SDRAM_Init+0xac>)
 8002dfe:	2204      	movs	r2, #4
 8002e00:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <BSP_SDRAM_Init+0xac>)
 8002e04:	2210      	movs	r2, #16
 8002e06:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <BSP_SDRAM_Init+0xac>)
 8002e0a:	2240      	movs	r2, #64	; 0x40
 8002e0c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <BSP_SDRAM_Init+0xac>)
 8002e10:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002e14:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <BSP_SDRAM_Init+0xac>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <BSP_SDRAM_Init+0xac>)
 8002e1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e22:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002e24:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <BSP_SDRAM_Init+0xac>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <BSP_SDRAM_Init+0xac>)
 8002e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e30:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002e32:	2100      	movs	r1, #0
 8002e34:	480c      	ldr	r0, [pc, #48]	; (8002e68 <BSP_SDRAM_Init+0xac>)
 8002e36:	f000 f87f 	bl	8002f38 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002e3a:	490d      	ldr	r1, [pc, #52]	; (8002e70 <BSP_SDRAM_Init+0xb4>)
 8002e3c:	480a      	ldr	r0, [pc, #40]	; (8002e68 <BSP_SDRAM_Init+0xac>)
 8002e3e:	f005 fbb0 	bl	80085a2 <HAL_SDRAM_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <BSP_SDRAM_Init+0xb8>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e002      	b.n	8002e56 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <BSP_SDRAM_Init+0xb8>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002e56:	f240 506a 	movw	r0, #1386	; 0x56a
 8002e5a:	f000 f80d 	bl	8002e78 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <BSP_SDRAM_Init+0xb8>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	200007a8 	.word	0x200007a8
 8002e6c:	a0000140 	.word	0xa0000140
 8002e70:	200007dc 	.word	0x200007dc
 8002e74:	2000007c 	.word	0x2000007c

08002e78 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002e84:	4b2a      	ldr	r3, [pc, #168]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002e8a:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ea0:	4923      	ldr	r1, [pc, #140]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ea2:	4824      	ldr	r0, [pc, #144]	; (8002f34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ea4:	f005 fbbb 	bl	800861e <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f000 f993 	bl	80031d4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002ec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eca:	4919      	ldr	r1, [pc, #100]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ecc:	4819      	ldr	r0, [pc, #100]	; (8002f34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ece:	f005 fba6 	bl	800861e <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002ed8:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002eda:	2208      	movs	r2, #8
 8002edc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002ee4:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eee:	4910      	ldr	r1, [pc, #64]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ef0:	4810      	ldr	r0, [pc, #64]	; (8002f34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ef2:	f005 fb94 	bl	800861e <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002ef6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002efa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002efe:	2204      	movs	r2, #4
 8002f00:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f04:	2208      	movs	r2, #8
 8002f06:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4a07      	ldr	r2, [pc, #28]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f12:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f18:	4905      	ldr	r1, [pc, #20]	; (8002f30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002f1a:	4806      	ldr	r0, [pc, #24]	; (8002f34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f1c:	f005 fb7f 	bl	800861e <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4804      	ldr	r0, [pc, #16]	; (8002f34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002f24:	f005 fbb0 	bl	8008688 <HAL_SDRAM_ProgramRefreshRate>
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200007f8 	.word	0x200007f8
 8002f34:	200007a8 	.word	0x200007a8

08002f38 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b090      	sub	sp, #64	; 0x40
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80ec 	beq.w	8003122 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f4e:	4b77      	ldr	r3, [pc, #476]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f52:	4a76      	ldr	r2, [pc, #472]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6393      	str	r3, [r2, #56]	; 0x38
 8002f5a:	4b74      	ldr	r3, [pc, #464]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6a:	4b70      	ldr	r3, [pc, #448]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	4a6f      	ldr	r2, [pc, #444]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002f70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f74:	6313      	str	r3, [r2, #48]	; 0x30
 8002f76:	4b6d      	ldr	r3, [pc, #436]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
 8002f86:	4b69      	ldr	r3, [pc, #420]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4a68      	ldr	r2, [pc, #416]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	6313      	str	r3, [r2, #48]	; 0x30
 8002f92:	4b66      	ldr	r3, [pc, #408]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	623b      	str	r3, [r7, #32]
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	4b62      	ldr	r3, [pc, #392]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a61      	ldr	r2, [pc, #388]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b5f      	ldr	r3, [pc, #380]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	61fb      	str	r3, [r7, #28]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	4b5b      	ldr	r3, [pc, #364]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a5a      	ldr	r2, [pc, #360]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002fc4:	f043 0308 	orr.w	r3, r3, #8
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b58      	ldr	r3, [pc, #352]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	61bb      	str	r3, [r7, #24]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	4b54      	ldr	r3, [pc, #336]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a53      	ldr	r2, [pc, #332]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002fe0:	f043 0310 	orr.w	r3, r3, #16
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b51      	ldr	r3, [pc, #324]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	4b4d      	ldr	r3, [pc, #308]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a4c      	ldr	r2, [pc, #304]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8002ffc:	f043 0320 	orr.w	r3, r3, #32
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b4a      	ldr	r3, [pc, #296]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0320 	and.w	r3, r3, #32
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b46      	ldr	r3, [pc, #280]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	4a45      	ldr	r2, [pc, #276]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8003018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800301c:	6313      	str	r3, [r2, #48]	; 0x30
 800301e:	4b43      	ldr	r3, [pc, #268]	; (800312c <BSP_SDRAM_MspInit+0x1f4>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800302e:	2302      	movs	r3, #2
 8003030:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003036:	230c      	movs	r3, #12
 8003038:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800303a:	2360      	movs	r3, #96	; 0x60
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800303e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003042:	4619      	mov	r1, r3
 8003044:	483a      	ldr	r0, [pc, #232]	; (8003130 <BSP_SDRAM_MspInit+0x1f8>)
 8003046:	f000 fb89 	bl	800375c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800304a:	2301      	movs	r3, #1
 800304c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800304e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003052:	4619      	mov	r1, r3
 8003054:	4837      	ldr	r0, [pc, #220]	; (8003134 <BSP_SDRAM_MspInit+0x1fc>)
 8003056:	f000 fb81 	bl	800375c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800305a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003064:	4619      	mov	r1, r3
 8003066:	4834      	ldr	r0, [pc, #208]	; (8003138 <BSP_SDRAM_MspInit+0x200>)
 8003068:	f000 fb78 	bl	800375c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800306c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003076:	4619      	mov	r1, r3
 8003078:	4830      	ldr	r0, [pc, #192]	; (800313c <BSP_SDRAM_MspInit+0x204>)
 800307a:	f000 fb6f 	bl	800375c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800307e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003088:	4619      	mov	r1, r3
 800308a:	482d      	ldr	r0, [pc, #180]	; (8003140 <BSP_SDRAM_MspInit+0x208>)
 800308c:	f000 fb66 	bl	800375c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003090:	f248 1333 	movw	r3, #33075	; 0x8133
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003096:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800309a:	4619      	mov	r1, r3
 800309c:	4829      	ldr	r0, [pc, #164]	; (8003144 <BSP_SDRAM_MspInit+0x20c>)
 800309e:	f000 fb5d 	bl	800375c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80030a2:	4b29      	ldr	r3, [pc, #164]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80030a8:	4b27      	ldr	r3, [pc, #156]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030aa:	2280      	movs	r2, #128	; 0x80
 80030ac:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030b4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80030b6:	4b24      	ldr	r3, [pc, #144]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030bc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030be:	4b22      	ldr	r3, [pc, #136]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030c4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030cc:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80030ce:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030da:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80030dc:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030de:	2200      	movs	r2, #0
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80030e2:	4b19      	ldr	r3, [pc, #100]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030e4:	2203      	movs	r2, #3
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80030e8:	4b17      	ldr	r3, [pc, #92]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80030ee:	4b16      	ldr	r3, [pc, #88]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030f6:	4a15      	ldr	r2, [pc, #84]	; (800314c <BSP_SDRAM_MspInit+0x214>)
 80030f8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a12      	ldr	r2, [pc, #72]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003100:	4a11      	ldr	r2, [pc, #68]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003106:	4810      	ldr	r0, [pc, #64]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 8003108:	f000 fa18 	bl	800353c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800310c:	480e      	ldr	r0, [pc, #56]	; (8003148 <BSP_SDRAM_MspInit+0x210>)
 800310e:	f000 f967 	bl	80033e0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	210f      	movs	r1, #15
 8003116:	2038      	movs	r0, #56	; 0x38
 8003118:	f000 f938 	bl	800338c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800311c:	2038      	movs	r0, #56	; 0x38
 800311e:	f000 f951 	bl	80033c4 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003122:	bf00      	nop
 8003124:	3740      	adds	r7, #64	; 0x40
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	40020400 	.word	0x40020400
 8003134:	40020800 	.word	0x40020800
 8003138:	40020c00 	.word	0x40020c00
 800313c:	40021000 	.word	0x40021000
 8003140:	40021400 	.word	0x40021400
 8003144:	40021800 	.word	0x40021800
 8003148:	20000808 	.word	0x20000808
 800314c:	40026410 	.word	0x40026410

08003150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003154:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <HAL_Init+0x40>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a0d      	ldr	r2, [pc, #52]	; (8003190 <HAL_Init+0x40>)
 800315a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800315e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_Init+0x40>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <HAL_Init+0x40>)
 8003166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800316a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_Init+0x40>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a07      	ldr	r2, [pc, #28]	; (8003190 <HAL_Init+0x40>)
 8003172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003178:	2003      	movs	r0, #3
 800317a:	f000 f8fc 	bl	8003376 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800317e:	200f      	movs	r0, #15
 8003180:	f7fe f93a 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003184:	f7fe f90c 	bl	80013a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023c00 	.word	0x40023c00

08003194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_IncTick+0x20>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_IncTick+0x24>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <HAL_IncTick+0x24>)
 80031a6:	6013      	str	r3, [r2, #0]
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000084 	.word	0x20000084
 80031b8:	20000868 	.word	0x20000868

080031bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return uwTick;
 80031c0:	4b03      	ldr	r3, [pc, #12]	; (80031d0 <HAL_GetTick+0x14>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	20000868 	.word	0x20000868

080031d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031dc:	f7ff ffee 	bl	80031bc <HAL_GetTick>
 80031e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d005      	beq.n	80031fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_Delay+0x44>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031fa:	bf00      	nop
 80031fc:	f7ff ffde 	bl	80031bc <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	429a      	cmp	r2, r3
 800320a:	d8f7      	bhi.n	80031fc <HAL_Delay+0x28>
  {
  }
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000084 	.word	0x20000084

0800321c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003238:	4013      	ands	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324e:	4a04      	ldr	r2, [pc, #16]	; (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	60d3      	str	r3, [r2, #12]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <__NVIC_GetPriorityGrouping+0x18>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 0307 	and.w	r3, r3, #7
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	2b00      	cmp	r3, #0
 8003290:	db0b      	blt.n	80032aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	f003 021f 	and.w	r2, r3, #31
 8003298:	4907      	ldr	r1, [pc, #28]	; (80032b8 <__NVIC_EnableIRQ+0x38>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2001      	movs	r0, #1
 80032a2:	fa00 f202 	lsl.w	r2, r0, r2
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000e100 	.word	0xe000e100

080032bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	db0a      	blt.n	80032e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	490c      	ldr	r1, [pc, #48]	; (8003308 <__NVIC_SetPriority+0x4c>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	0112      	lsls	r2, r2, #4
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	440b      	add	r3, r1
 80032e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e4:	e00a      	b.n	80032fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4908      	ldr	r1, [pc, #32]	; (800330c <__NVIC_SetPriority+0x50>)
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	3b04      	subs	r3, #4
 80032f4:	0112      	lsls	r2, r2, #4
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	440b      	add	r3, r1
 80032fa:	761a      	strb	r2, [r3, #24]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000e100 	.word	0xe000e100
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f1c3 0307 	rsb	r3, r3, #7
 800332a:	2b04      	cmp	r3, #4
 800332c:	bf28      	it	cs
 800332e:	2304      	movcs	r3, #4
 8003330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3304      	adds	r3, #4
 8003336:	2b06      	cmp	r3, #6
 8003338:	d902      	bls.n	8003340 <NVIC_EncodePriority+0x30>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3b03      	subs	r3, #3
 800333e:	e000      	b.n	8003342 <NVIC_EncodePriority+0x32>
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003344:	f04f 32ff 	mov.w	r2, #4294967295
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43da      	mvns	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	401a      	ands	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003358:	f04f 31ff 	mov.w	r1, #4294967295
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	43d9      	mvns	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003368:	4313      	orrs	r3, r2
         );
}
 800336a:	4618      	mov	r0, r3
 800336c:	3724      	adds	r7, #36	; 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7ff ff4c 	bl	800321c <__NVIC_SetPriorityGrouping>
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
 8003398:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800339a:	2300      	movs	r3, #0
 800339c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800339e:	f7ff ff61 	bl	8003264 <__NVIC_GetPriorityGrouping>
 80033a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	6978      	ldr	r0, [r7, #20]
 80033aa:	f7ff ffb1 	bl	8003310 <NVIC_EncodePriority>
 80033ae:	4602      	mov	r2, r0
 80033b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff ff80 	bl	80032bc <__NVIC_SetPriority>
}
 80033bc:	bf00      	nop
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ff54 	bl	8003280 <__NVIC_EnableIRQ>
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff fee6 	bl	80031bc <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e099      	b.n	8003530 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800341c:	e00f      	b.n	800343e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800341e:	f7ff fecd 	bl	80031bc <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b05      	cmp	r3, #5
 800342a:	d908      	bls.n	800343e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2203      	movs	r2, #3
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e078      	b.n	8003530 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e8      	bne.n	800341e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4b38      	ldr	r3, [pc, #224]	; (8003538 <HAL_DMA_Init+0x158>)
 8003458:	4013      	ands	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800346a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2b04      	cmp	r3, #4
 8003496:	d107      	bne.n	80034a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	4313      	orrs	r3, r2
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f023 0307 	bic.w	r3, r3, #7
 80034be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d117      	bne.n	8003502 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00e      	beq.n	8003502 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f8bd 	bl	8003664 <DMA_CheckFifoParam>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2240      	movs	r2, #64	; 0x40
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034fe:	2301      	movs	r3, #1
 8003500:	e016      	b.n	8003530 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f874 	bl	80035f8 <DMA_CalcBaseAndBitshift>
 8003510:	4603      	mov	r3, r0
 8003512:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	223f      	movs	r2, #63	; 0x3f
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	f010803f 	.word	0xf010803f

0800353c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e050      	b.n	80035f0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d101      	bne.n	800355e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800355a:	2302      	movs	r3, #2
 800355c:	e048      	b.n	80035f0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2200      	movs	r2, #0
 800357c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2200      	movs	r2, #0
 8003584:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2200      	movs	r2, #0
 800358c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2200      	movs	r2, #0
 8003594:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2221      	movs	r2, #33	; 0x21
 800359c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f82a 	bl	80035f8 <DMA_CalcBaseAndBitshift>
 80035a4:	4603      	mov	r3, r0
 80035a6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	223f      	movs	r2, #63	; 0x3f
 80035d2:	409a      	lsls	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	b2db      	uxtb	r3, r3
 8003606:	3b10      	subs	r3, #16
 8003608:	4a14      	ldr	r2, [pc, #80]	; (800365c <DMA_CalcBaseAndBitshift+0x64>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	091b      	lsrs	r3, r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003612:	4a13      	ldr	r2, [pc, #76]	; (8003660 <DMA_CalcBaseAndBitshift+0x68>)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d909      	bls.n	800363a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	1d1a      	adds	r2, r3, #4
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	659a      	str	r2, [r3, #88]	; 0x58
 8003638:	e007      	b.n	800364a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003642:	f023 0303 	bic.w	r3, r3, #3
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	aaaaaaab 	.word	0xaaaaaaab
 8003660:	0801330c 	.word	0x0801330c

08003664 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d11f      	bne.n	80036be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d856      	bhi.n	8003732 <DMA_CheckFifoParam+0xce>
 8003684:	a201      	add	r2, pc, #4	; (adr r2, 800368c <DMA_CheckFifoParam+0x28>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036af 	.word	0x080036af
 8003694:	0800369d 	.word	0x0800369d
 8003698:	08003733 	.word	0x08003733
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d046      	beq.n	8003736 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ac:	e043      	b.n	8003736 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036b6:	d140      	bne.n	800373a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036bc:	e03d      	b.n	800373a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c6:	d121      	bne.n	800370c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d837      	bhi.n	800373e <DMA_CheckFifoParam+0xda>
 80036ce:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <DMA_CheckFifoParam+0x70>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	080036e5 	.word	0x080036e5
 80036d8:	080036eb 	.word	0x080036eb
 80036dc:	080036e5 	.word	0x080036e5
 80036e0:	080036fd 	.word	0x080036fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
      break;
 80036e8:	e030      	b.n	800374c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d025      	beq.n	8003742 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036fa:	e022      	b.n	8003742 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003704:	d11f      	bne.n	8003746 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800370a:	e01c      	b.n	8003746 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b02      	cmp	r3, #2
 8003710:	d903      	bls.n	800371a <DMA_CheckFifoParam+0xb6>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d003      	beq.n	8003720 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003718:	e018      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
      break;
 800371e:	e015      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00e      	beq.n	800374a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      break;
 8003730:	e00b      	b.n	800374a <DMA_CheckFifoParam+0xe6>
      break;
 8003732:	bf00      	nop
 8003734:	e00a      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
 8003738:	e008      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 800373a:	bf00      	nop
 800373c:	e006      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 800373e:	bf00      	nop
 8003740:	e004      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 8003742:	bf00      	nop
 8003744:	e002      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;   
 8003746:	bf00      	nop
 8003748:	e000      	b.n	800374c <DMA_CheckFifoParam+0xe8>
      break;
 800374a:	bf00      	nop
    }
  } 
  
  return status; 
 800374c:	7bfb      	ldrb	r3, [r7, #15]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop

0800375c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800375c:	b480      	push	{r7}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800376e:	2300      	movs	r3, #0
 8003770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	e177      	b.n	8003a68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003778:	2201      	movs	r2, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	429a      	cmp	r2, r3
 8003792:	f040 8166 	bne.w	8003a62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d005      	beq.n	80037ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d130      	bne.n	8003810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	2203      	movs	r2, #3
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037e4:	2201      	movs	r2, #1
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 0201 	and.w	r2, r3, #1
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 0303 	and.w	r3, r3, #3
 8003818:	2b03      	cmp	r3, #3
 800381a:	d017      	beq.n	800384c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	2203      	movs	r2, #3
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d123      	bne.n	80038a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	08da      	lsrs	r2, r3, #3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3208      	adds	r2, #8
 8003860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	220f      	movs	r2, #15
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	08da      	lsrs	r2, r3, #3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3208      	adds	r2, #8
 800389a:	69b9      	ldr	r1, [r7, #24]
 800389c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2203      	movs	r2, #3
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43db      	mvns	r3, r3
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4013      	ands	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0203 	and.w	r2, r3, #3
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80c0 	beq.w	8003a62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	4b66      	ldr	r3, [pc, #408]	; (8003a80 <HAL_GPIO_Init+0x324>)
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	4a65      	ldr	r2, [pc, #404]	; (8003a80 <HAL_GPIO_Init+0x324>)
 80038ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038f0:	6453      	str	r3, [r2, #68]	; 0x44
 80038f2:	4b63      	ldr	r3, [pc, #396]	; (8003a80 <HAL_GPIO_Init+0x324>)
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038fe:	4a61      	ldr	r2, [pc, #388]	; (8003a84 <HAL_GPIO_Init+0x328>)
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	3302      	adds	r3, #2
 8003906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0303 	and.w	r3, r3, #3
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	220f      	movs	r2, #15
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a58      	ldr	r2, [pc, #352]	; (8003a88 <HAL_GPIO_Init+0x32c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d037      	beq.n	800399a <HAL_GPIO_Init+0x23e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a57      	ldr	r2, [pc, #348]	; (8003a8c <HAL_GPIO_Init+0x330>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d031      	beq.n	8003996 <HAL_GPIO_Init+0x23a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a56      	ldr	r2, [pc, #344]	; (8003a90 <HAL_GPIO_Init+0x334>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d02b      	beq.n	8003992 <HAL_GPIO_Init+0x236>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a55      	ldr	r2, [pc, #340]	; (8003a94 <HAL_GPIO_Init+0x338>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d025      	beq.n	800398e <HAL_GPIO_Init+0x232>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a54      	ldr	r2, [pc, #336]	; (8003a98 <HAL_GPIO_Init+0x33c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d01f      	beq.n	800398a <HAL_GPIO_Init+0x22e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a53      	ldr	r2, [pc, #332]	; (8003a9c <HAL_GPIO_Init+0x340>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d019      	beq.n	8003986 <HAL_GPIO_Init+0x22a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a52      	ldr	r2, [pc, #328]	; (8003aa0 <HAL_GPIO_Init+0x344>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <HAL_GPIO_Init+0x226>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a51      	ldr	r2, [pc, #324]	; (8003aa4 <HAL_GPIO_Init+0x348>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00d      	beq.n	800397e <HAL_GPIO_Init+0x222>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a50      	ldr	r2, [pc, #320]	; (8003aa8 <HAL_GPIO_Init+0x34c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d007      	beq.n	800397a <HAL_GPIO_Init+0x21e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a4f      	ldr	r2, [pc, #316]	; (8003aac <HAL_GPIO_Init+0x350>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d101      	bne.n	8003976 <HAL_GPIO_Init+0x21a>
 8003972:	2309      	movs	r3, #9
 8003974:	e012      	b.n	800399c <HAL_GPIO_Init+0x240>
 8003976:	230a      	movs	r3, #10
 8003978:	e010      	b.n	800399c <HAL_GPIO_Init+0x240>
 800397a:	2308      	movs	r3, #8
 800397c:	e00e      	b.n	800399c <HAL_GPIO_Init+0x240>
 800397e:	2307      	movs	r3, #7
 8003980:	e00c      	b.n	800399c <HAL_GPIO_Init+0x240>
 8003982:	2306      	movs	r3, #6
 8003984:	e00a      	b.n	800399c <HAL_GPIO_Init+0x240>
 8003986:	2305      	movs	r3, #5
 8003988:	e008      	b.n	800399c <HAL_GPIO_Init+0x240>
 800398a:	2304      	movs	r3, #4
 800398c:	e006      	b.n	800399c <HAL_GPIO_Init+0x240>
 800398e:	2303      	movs	r3, #3
 8003990:	e004      	b.n	800399c <HAL_GPIO_Init+0x240>
 8003992:	2302      	movs	r3, #2
 8003994:	e002      	b.n	800399c <HAL_GPIO_Init+0x240>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <HAL_GPIO_Init+0x240>
 800399a:	2300      	movs	r3, #0
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f002 0203 	and.w	r2, r2, #3
 80039a2:	0092      	lsls	r2, r2, #2
 80039a4:	4093      	lsls	r3, r2
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039ac:	4935      	ldr	r1, [pc, #212]	; (8003a84 <HAL_GPIO_Init+0x328>)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	3302      	adds	r3, #2
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ba:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039de:	4a34      	ldr	r2, [pc, #208]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039e4:	4b32      	ldr	r3, [pc, #200]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a08:	4a29      	ldr	r2, [pc, #164]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a0e:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a32:	4a1f      	ldr	r2, [pc, #124]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a38:	4b1d      	ldr	r3, [pc, #116]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <HAL_GPIO_Init+0x354>)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3301      	adds	r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	f67f ae84 	bls.w	8003778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	3724      	adds	r7, #36	; 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800
 8003a84:	40013800 	.word	0x40013800
 8003a88:	40020000 	.word	0x40020000
 8003a8c:	40020400 	.word	0x40020400
 8003a90:	40020800 	.word	0x40020800
 8003a94:	40020c00 	.word	0x40020c00
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40021400 	.word	0x40021400
 8003aa0:	40021800 	.word	0x40021800
 8003aa4:	40021c00 	.word	0x40021c00
 8003aa8:	40022000 	.word	0x40022000
 8003aac:	40022400 	.word	0x40022400
 8003ab0:	40013c00 	.word	0x40013c00

08003ab4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	807b      	strh	r3, [r7, #2]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ac4:	787b      	ldrb	r3, [r7, #1]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aca:	887a      	ldrh	r2, [r7, #2]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ad0:	e003      	b.n	8003ada <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ad2:	887b      	ldrh	r3, [r7, #2]
 8003ad4:	041a      	lsls	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	619a      	str	r2, [r3, #24]
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ae8:	b08f      	sub	sp, #60	; 0x3c
 8003aea:	af0a      	add	r7, sp, #40	; 0x28
 8003aec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e10f      	b.n	8003d18 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f00a fc8c 	bl	800e430 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d102      	bne.n	8003b32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f002 fc8b 	bl	8006452 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	687e      	ldr	r6, [r7, #4]
 8003b44:	466d      	mov	r5, sp
 8003b46:	f106 0410 	add.w	r4, r6, #16
 8003b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b56:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b5a:	1d33      	adds	r3, r6, #4
 8003b5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b5e:	6838      	ldr	r0, [r7, #0]
 8003b60:	f002 fb62 	bl	8006228 <USB_CoreInit>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e0d0      	b.n	8003d18 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f002 fc79 	bl	8006474 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b82:	2300      	movs	r3, #0
 8003b84:	73fb      	strb	r3, [r7, #15]
 8003b86:	e04a      	b.n	8003c1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4413      	add	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	333d      	adds	r3, #61	; 0x3d
 8003b98:	2201      	movs	r2, #1
 8003b9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	333c      	adds	r3, #60	; 0x3c
 8003bac:	7bfa      	ldrb	r2, [r7, #15]
 8003bae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	b298      	uxth	r0, r3
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3344      	adds	r3, #68	; 0x44
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3340      	adds	r3, #64	; 0x40
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	3348      	adds	r3, #72	; 0x48
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bf0:	7bfa      	ldrb	r2, [r7, #15]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	334c      	adds	r3, #76	; 0x4c
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c04:	7bfa      	ldrb	r2, [r7, #15]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3354      	adds	r3, #84	; 0x54
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	7bfa      	ldrb	r2, [r7, #15]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d3af      	bcc.n	8003b88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]
 8003c2c:	e044      	b.n	8003cb8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c2e:	7bfa      	ldrb	r2, [r7, #15]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c44:	7bfa      	ldrb	r2, [r7, #15]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003c56:	7bfa      	ldrb	r2, [r7, #15]
 8003c58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c5a:	7bfa      	ldrb	r2, [r7, #15]
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4413      	add	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c70:	7bfa      	ldrb	r2, [r7, #15]
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c86:	7bfa      	ldrb	r2, [r7, #15]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c9c:	7bfa      	ldrb	r2, [r7, #15]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	73fb      	strb	r3, [r7, #15]
 8003cb8:	7bfa      	ldrb	r2, [r7, #15]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d3b5      	bcc.n	8003c2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	687e      	ldr	r6, [r7, #4]
 8003cca:	466d      	mov	r5, sp
 8003ccc:	f106 0410 	add.w	r4, r6, #16
 8003cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ce0:	1d33      	adds	r3, r6, #4
 8003ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ce4:	6838      	ldr	r0, [r7, #0]
 8003ce6:	f002 fc11 	bl	800650c <USB_DevInit>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e00d      	b.n	8003d18 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f003 fd60 	bl	80077d6 <USB_DevDisconnect>

  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_PCD_Start+0x1c>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e020      	b.n	8003d7e <HAL_PCD_Start+0x5e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d109      	bne.n	8003d60 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d005      	beq.n	8003d60 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f002 fb63 	bl	8006430 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f003 fd10 	bl	8007794 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d86:	b590      	push	{r4, r7, lr}
 8003d88:	b08d      	sub	sp, #52	; 0x34
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f003 fdce 	bl	800793e <USB_GetMode>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f040 848a 	bne.w	80046be <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 fd32 	bl	8007818 <USB_ReadInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8480 	beq.w	80046bc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	0a1b      	lsrs	r3, r3, #8
 8003dc6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f003 fd1f 	bl	8007818 <USB_ReadInterrupts>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d107      	bne.n	8003df4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f002 0202 	and.w	r2, r2, #2
 8003df2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f003 fd0d 	bl	8007818 <USB_ReadInterrupts>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d161      	bne.n	8003ecc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0210 	bic.w	r2, r2, #16
 8003e16:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f003 020f 	and.w	r2, r3, #15
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4413      	add	r3, r2
 8003e34:	3304      	adds	r3, #4
 8003e36:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	0c5b      	lsrs	r3, r3, #17
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d124      	bne.n	8003e8e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d035      	beq.n	8003ebc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	091b      	lsrs	r3, r3, #4
 8003e58:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	6a38      	ldr	r0, [r7, #32]
 8003e64:	f003 fb44 	bl	80074f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	091b      	lsrs	r3, r3, #4
 8003e70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e74:	441a      	add	r2, r3
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e86:	441a      	add	r2, r3
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	621a      	str	r2, [r3, #32]
 8003e8c:	e016      	b.n	8003ebc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	0c5b      	lsrs	r3, r3, #17
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d110      	bne.n	8003ebc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ea0:	2208      	movs	r2, #8
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6a38      	ldr	r0, [r7, #32]
 8003ea6:	f003 fb23 	bl	80074f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	6a1a      	ldr	r2, [r3, #32]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eb6:	441a      	add	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0210 	orr.w	r2, r2, #16
 8003eca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f003 fca1 	bl	8007818 <USB_ReadInterrupts>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003edc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ee0:	f040 80a7 	bne.w	8004032 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f003 fca6 	bl	800783e <USB_ReadDevAllOutEpInterrupt>
 8003ef2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ef4:	e099      	b.n	800402a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f000 808e 	beq.w	800401e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f003 fcca 	bl	80078a6 <USB_ReadDevOutEPInterrupt>
 8003f12:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00c      	beq.n	8003f38 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 fec2 	bl	8004cbc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00c      	beq.n	8003f5c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2308      	movs	r3, #8
 8003f52:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 ff98 	bl	8004e8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d008      	beq.n	8003f78 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f72:	461a      	mov	r2, r3
 8003f74:	2310      	movs	r3, #16
 8003f76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d030      	beq.n	8003fe4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	2b80      	cmp	r3, #128	; 0x80
 8003f8c:	d109      	bne.n	8003fa2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fa0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	78db      	ldrb	r3, [r3, #3]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d108      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f00a fb31 	bl	800e634 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	2320      	movs	r3, #32
 8003ffe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004016:	461a      	mov	r2, r3
 8004018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800401c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	3301      	adds	r3, #1
 8004022:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	085b      	lsrs	r3, r3, #1
 8004028:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	2b00      	cmp	r3, #0
 800402e:	f47f af62 	bne.w	8003ef6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f003 fbee 	bl	8007818 <USB_ReadInterrupts>
 800403c:	4603      	mov	r3, r0
 800403e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004042:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004046:	f040 80db 	bne.w	8004200 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f003 fc0f 	bl	8007872 <USB_ReadDevAllInEpInterrupt>
 8004054:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800405a:	e0cd      	b.n	80041f8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800405c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80c2 	beq.w	80041ec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	4611      	mov	r1, r2
 8004072:	4618      	mov	r0, r3
 8004074:	f003 fc35 	bl	80078e2 <USB_ReadDevInEPInterrupt>
 8004078:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d057      	beq.n	8004134 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	2201      	movs	r2, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	43db      	mvns	r3, r3
 800409e:	69f9      	ldr	r1, [r7, #28]
 80040a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040a4:	4013      	ands	r3, r2
 80040a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b4:	461a      	mov	r2, r3
 80040b6:	2301      	movs	r3, #1
 80040b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d132      	bne.n	8004128 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	334c      	adds	r3, #76	; 0x4c
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4403      	add	r3, r0
 80040e2:	3348      	adds	r3, #72	; 0x48
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4419      	add	r1, r3
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4403      	add	r3, r0
 80040f6:	334c      	adds	r3, #76	; 0x4c
 80040f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d113      	bne.n	8004128 <HAL_PCD_IRQHandler+0x3a2>
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004104:	4613      	mov	r3, r2
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	3354      	adds	r3, #84	; 0x54
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d108      	bne.n	8004128 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004120:	461a      	mov	r2, r3
 8004122:	2101      	movs	r1, #1
 8004124:	f003 fc3c 	bl	80079a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	b2db      	uxtb	r3, r3
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f00a f9fb 	bl	800e52a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414a:	461a      	mov	r2, r3
 800414c:	2308      	movs	r3, #8
 800414e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f003 0310 	and.w	r3, r3, #16
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004166:	461a      	mov	r2, r3
 8004168:	2310      	movs	r3, #16
 800416a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004182:	461a      	mov	r2, r3
 8004184:	2340      	movs	r3, #64	; 0x40
 8004186:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d023      	beq.n	80041da <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004192:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004194:	6a38      	ldr	r0, [r7, #32]
 8004196:	f002 fb1d 	bl	80067d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800419a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419c:	4613      	mov	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	3338      	adds	r3, #56	; 0x38
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	3304      	adds	r3, #4
 80041ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	78db      	ldrb	r3, [r3, #3]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d108      	bne.n	80041c8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2200      	movs	r2, #0
 80041ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f00a fa48 	bl	800e658 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	461a      	mov	r2, r3
 80041d6:	2302      	movs	r3, #2
 80041d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80041e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fcdb 	bl	8004ba2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	3301      	adds	r3, #1
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	085b      	lsrs	r3, r3, #1
 80041f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f47f af2e 	bne.w	800405c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f003 fb07 	bl	8007818 <USB_ReadInterrupts>
 800420a:	4603      	mov	r3, r0
 800420c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004214:	d122      	bne.n	800425c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004230:	2b01      	cmp	r3, #1
 8004232:	d108      	bne.n	8004246 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800423c:	2100      	movs	r1, #0
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fec2 	bl	8004fc8 <HAL_PCDEx_LPM_Callback>
 8004244:	e002      	b.n	800424c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f00a f9e6 	bl	800e618 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800425a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f003 fad9 	bl	8007818 <USB_ReadInterrupts>
 8004266:	4603      	mov	r3, r0
 8004268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800426c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004270:	d112      	bne.n	8004298 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b01      	cmp	r3, #1
 8004280:	d102      	bne.n	8004288 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f00a f9a2 	bl	800e5cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004296:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4618      	mov	r0, r3
 800429e:	f003 fabb 	bl	8007818 <USB_ReadInterrupts>
 80042a2:	4603      	mov	r3, r0
 80042a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ac:	f040 80b7 	bne.w	800441e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2110      	movs	r1, #16
 80042ca:	4618      	mov	r0, r3
 80042cc:	f002 fa82 	bl	80067d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d4:	e046      	b.n	8004364 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e2:	461a      	mov	r2, r3
 80042e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042fa:	0151      	lsls	r1, r2, #5
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	440a      	add	r2, r1
 8004300:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004304:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004308:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	461a      	mov	r2, r3
 8004318:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800431c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800432e:	0151      	lsls	r1, r2, #5
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	440a      	add	r2, r1
 8004334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004338:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800433c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800434e:	0151      	lsls	r1, r2, #5
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	440a      	add	r2, r1
 8004354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004358:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800435c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004360:	3301      	adds	r3, #1
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436a:	429a      	cmp	r2, r3
 800436c:	d3b3      	bcc.n	80042d6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004380:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	2b00      	cmp	r3, #0
 8004388:	d016      	beq.n	80043b8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004394:	69fa      	ldr	r2, [r7, #28]
 8004396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800439a:	f043 030b 	orr.w	r3, r3, #11
 800439e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b0:	f043 030b 	orr.w	r3, r3, #11
 80043b4:	6453      	str	r3, [r2, #68]	; 0x44
 80043b6:	e015      	b.n	80043e4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043ca:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80043ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043de:	f043 030b 	orr.w	r3, r3, #11
 80043e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80043f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004408:	461a      	mov	r2, r3
 800440a:	f003 fac9 	bl	80079a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800441c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f003 f9f8 	bl	8007818 <USB_ReadInterrupts>
 8004428:	4603      	mov	r3, r0
 800442a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800442e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004432:	d124      	bne.n	800447e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f003 fa8e 	bl	800795a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f002 fa43 	bl	80068ce <USB_GetDevSpeed>
 8004448:	4603      	mov	r3, r0
 800444a:	461a      	mov	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681c      	ldr	r4, [r3, #0]
 8004454:	f001 fa28 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 8004458:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	4620      	mov	r0, r4
 8004464:	f001 ff42 	bl	80062ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f00a f886 	bl	800e57a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800447c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f003 f9c8 	bl	8007818 <USB_ReadInterrupts>
 8004488:	4603      	mov	r3, r0
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b08      	cmp	r3, #8
 8004490:	d10a      	bne.n	80044a8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f00a f863 	bl	800e55e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f002 0208 	and.w	r2, r2, #8
 80044a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f003 f9b3 	bl	8007818 <USB_ReadInterrupts>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b8:	2b80      	cmp	r3, #128	; 0x80
 80044ba:	d122      	bne.n	8004502 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044c8:	2301      	movs	r3, #1
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
 80044cc:	e014      	b.n	80044f8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d2:	4613      	mov	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d105      	bne.n	80044f2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fb27 	bl	8004b40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	3301      	adds	r3, #1
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fe:	429a      	cmp	r2, r3
 8004500:	d3e5      	bcc.n	80044ce <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f003 f986 	bl	8007818 <USB_ReadInterrupts>
 800450c:	4603      	mov	r3, r0
 800450e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004516:	d13b      	bne.n	8004590 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004518:	2301      	movs	r3, #1
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
 800451c:	e02b      	b.n	8004576 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004532:	4613      	mov	r3, r2
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	3340      	adds	r3, #64	; 0x40
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d115      	bne.n	8004570 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004544:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004546:	2b00      	cmp	r3, #0
 8004548:	da12      	bge.n	8004570 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454e:	4613      	mov	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	440b      	add	r3, r1
 8004558:	333f      	adds	r3, #63	; 0x3f
 800455a:	2201      	movs	r2, #1
 800455c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	b2db      	uxtb	r3, r3
 8004562:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004566:	b2db      	uxtb	r3, r3
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fae8 	bl	8004b40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	3301      	adds	r3, #1
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457c:	429a      	cmp	r2, r3
 800457e:	d3ce      	bcc.n	800451e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695a      	ldr	r2, [r3, #20]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800458e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f003 f93f 	bl	8007818 <USB_ReadInterrupts>
 800459a:	4603      	mov	r3, r0
 800459c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045a4:	d155      	bne.n	8004652 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045a6:	2301      	movs	r3, #1
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	e045      	b.n	8004638 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c0:	4613      	mov	r3, r2
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d12e      	bne.n	8004632 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	da2b      	bge.n	8004632 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80045e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d121      	bne.n	8004632 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f2:	4613      	mov	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10a      	bne.n	8004632 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800462a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800462e:	6053      	str	r3, [r2, #4]
            break;
 8004630:	e007      	b.n	8004642 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	3301      	adds	r3, #1
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463e:	429a      	cmp	r2, r3
 8004640:	d3b4      	bcc.n	80045ac <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004650:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f003 f8de 	bl	8007818 <USB_ReadInterrupts>
 800465c:	4603      	mov	r3, r0
 800465e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004666:	d10a      	bne.n	800467e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f00a f807 	bl	800e67c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695a      	ldr	r2, [r3, #20]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800467c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f003 f8c8 	bl	8007818 <USB_ReadInterrupts>
 8004688:	4603      	mov	r3, r0
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b04      	cmp	r3, #4
 8004690:	d115      	bne.n	80046be <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f009 fff7 	bl	800e698 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6859      	ldr	r1, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	e000      	b.n	80046be <HAL_PCD_IRQHandler+0x938>
      return;
 80046bc:	bf00      	nop
    }
  }
}
 80046be:	3734      	adds	r7, #52	; 0x34
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd90      	pop	{r4, r7, pc}

080046c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_PCD_SetAddress+0x1a>
 80046da:	2302      	movs	r3, #2
 80046dc:	e013      	b.n	8004706 <HAL_PCD_SetAddress+0x42>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	78fa      	ldrb	r2, [r7, #3]
 80046ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	4611      	mov	r1, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f003 f826 	bl	8007748 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	4608      	mov	r0, r1
 8004718:	4611      	mov	r1, r2
 800471a:	461a      	mov	r2, r3
 800471c:	4603      	mov	r3, r0
 800471e:	70fb      	strb	r3, [r7, #3]
 8004720:	460b      	mov	r3, r1
 8004722:	803b      	strh	r3, [r7, #0]
 8004724:	4613      	mov	r3, r2
 8004726:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800472c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004730:	2b00      	cmp	r3, #0
 8004732:	da0f      	bge.n	8004754 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	f003 020f 	and.w	r2, r3, #15
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	3338      	adds	r3, #56	; 0x38
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	4413      	add	r3, r2
 8004748:	3304      	adds	r3, #4
 800474a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	705a      	strb	r2, [r3, #1]
 8004752:	e00f      	b.n	8004774 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	f003 020f 	and.w	r2, r3, #15
 800475a:	4613      	mov	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	4413      	add	r3, r2
 800476a:	3304      	adds	r3, #4
 800476c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	b2da      	uxtb	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004780:	883a      	ldrh	r2, [r7, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	78ba      	ldrb	r2, [r7, #2]
 800478a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	785b      	ldrb	r3, [r3, #1]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800479e:	78bb      	ldrb	r3, [r7, #2]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d102      	bne.n	80047aa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_PCD_EP_Open+0xaa>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e00e      	b.n	80047d6 <HAL_PCD_EP_Open+0xc8>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68f9      	ldr	r1, [r7, #12]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f002 f8a6 	bl	8006918 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80047d4:	7afb      	ldrb	r3, [r7, #11]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	da0f      	bge.n	8004812 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	4613      	mov	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	3338      	adds	r3, #56	; 0x38
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	4413      	add	r3, r2
 8004806:	3304      	adds	r3, #4
 8004808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	705a      	strb	r2, [r3, #1]
 8004810:	e00f      	b.n	8004832 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	f003 020f 	and.w	r2, r3, #15
 8004818:	4613      	mov	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	4413      	add	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	4413      	add	r3, r2
 8004828:	3304      	adds	r3, #4
 800482a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	b2da      	uxtb	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_PCD_EP_Close+0x6e>
 8004848:	2302      	movs	r3, #2
 800484a:	e00e      	b.n	800486a <HAL_PCD_EP_Close+0x8c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68f9      	ldr	r1, [r7, #12]
 800485a:	4618      	mov	r0, r3
 800485c:	f002 f8e4 	bl	8006a28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b086      	sub	sp, #24
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	460b      	mov	r3, r1
 8004880:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004882:	7afb      	ldrb	r3, [r7, #11]
 8004884:	f003 020f 	and.w	r2, r3, #15
 8004888:	4613      	mov	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	3304      	adds	r3, #4
 800489a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2200      	movs	r2, #0
 80048ac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2200      	movs	r2, #0
 80048b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048b4:	7afb      	ldrb	r3, [r7, #11]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d102      	bne.n	80048ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048ce:	7afb      	ldrb	r3, [r7, #11]
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	6979      	ldr	r1, [r7, #20]
 80048e6:	f002 fbc3 	bl	8007070 <USB_EP0StartXfer>
 80048ea:	e008      	b.n	80048fe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	6979      	ldr	r1, [r7, #20]
 80048fa:	f002 f971 	bl	8006be0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	f003 020f 	and.w	r2, r3, #15
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800492a:	681b      	ldr	r3, [r3, #0]
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	460b      	mov	r3, r1
 8004946:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004948:	7afb      	ldrb	r3, [r7, #11]
 800494a:	f003 020f 	and.w	r2, r3, #15
 800494e:	4613      	mov	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	3338      	adds	r3, #56	; 0x38
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	3304      	adds	r3, #4
 800495e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2200      	movs	r2, #0
 8004970:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2201      	movs	r2, #1
 8004976:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004978:	7afb      	ldrb	r3, [r7, #11]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	b2da      	uxtb	r2, r3
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d102      	bne.n	8004992 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004992:	7afb      	ldrb	r3, [r7, #11]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	6979      	ldr	r1, [r7, #20]
 80049aa:	f002 fb61 	bl	8007070 <USB_EP0StartXfer>
 80049ae:	e008      	b.n	80049c2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	6979      	ldr	r1, [r7, #20]
 80049be:	f002 f90f 	bl	8006be0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	f003 020f 	and.w	r2, r3, #15
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d901      	bls.n	80049ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e050      	b.n	8004a8c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	da0f      	bge.n	8004a12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	f003 020f 	and.w	r2, r3, #15
 80049f8:	4613      	mov	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	3338      	adds	r3, #56	; 0x38
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	3304      	adds	r3, #4
 8004a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	705a      	strb	r2, [r3, #1]
 8004a10:	e00d      	b.n	8004a2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4413      	add	r3, r2
 8004a24:	3304      	adds	r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_PCD_EP_SetStall+0x82>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e01e      	b.n	8004a8c <HAL_PCD_EP_SetStall+0xc0>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68f9      	ldr	r1, [r7, #12]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f002 fd9f 	bl	80075a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	b2d9      	uxtb	r1, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f002 ff8f 	bl	80079a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	f003 020f 	and.w	r2, r3, #15
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d901      	bls.n	8004ab2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e042      	b.n	8004b38 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	da0f      	bge.n	8004ada <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	f003 020f 	and.w	r2, r3, #15
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	3338      	adds	r3, #56	; 0x38
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	4413      	add	r3, r2
 8004ace:	3304      	adds	r3, #4
 8004ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	705a      	strb	r2, [r3, #1]
 8004ad8:	e00f      	b.n	8004afa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	f003 020f 	and.w	r2, r3, #15
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	4413      	add	r3, r2
 8004af0:	3304      	adds	r3, #4
 8004af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_PCD_EP_ClrStall+0x86>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e00e      	b.n	8004b38 <HAL_PCD_EP_ClrStall+0xa4>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f002 fda7 	bl	800767c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	da0c      	bge.n	8004b6e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	f003 020f 	and.w	r2, r3, #15
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	3338      	adds	r3, #56	; 0x38
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	4413      	add	r3, r2
 8004b68:	3304      	adds	r3, #4
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	e00c      	b.n	8004b88 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	f003 020f 	and.w	r2, r3, #15
 8004b74:	4613      	mov	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	4413      	add	r3, r2
 8004b84:	3304      	adds	r3, #4
 8004b86:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f002 fbc6 	bl	8007320 <USB_EPStopXfer>
 8004b94:	4603      	mov	r3, r0
 8004b96:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b98:	7afb      	ldrb	r3, [r7, #11]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b08a      	sub	sp, #40	; 0x28
 8004ba6:	af02      	add	r7, sp, #8
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	3338      	adds	r3, #56	; 0x38
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1a      	ldr	r2, [r3, #32]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d901      	bls.n	8004bda <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e06c      	b.n	8004cb4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d902      	bls.n	8004bf6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	3303      	adds	r3, #3
 8004bfa:	089b      	lsrs	r3, r3, #2
 8004bfc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bfe:	e02b      	b.n	8004c58 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	699a      	ldr	r2, [r3, #24]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d902      	bls.n	8004c1c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	3303      	adds	r3, #3
 8004c20:	089b      	lsrs	r3, r3, #2
 8004c22:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6919      	ldr	r1, [r3, #16]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	4603      	mov	r3, r0
 8004c3a:	6978      	ldr	r0, [r7, #20]
 8004c3c:	f002 fc1a 	bl	8007474 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	441a      	add	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a1a      	ldr	r2, [r3, #32]
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	441a      	add	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d809      	bhi.n	8004c82 <PCD_WriteEmptyTxFifo+0xe0>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a1a      	ldr	r2, [r3, #32]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d203      	bcs.n	8004c82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1be      	bne.n	8004c00 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d811      	bhi.n	8004cb2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	2201      	movs	r2, #1
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	6939      	ldr	r1, [r7, #16]
 8004caa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cae:	4013      	ands	r3, r2
 8004cb0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	333c      	adds	r3, #60	; 0x3c
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d17b      	bne.n	8004dea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d015      	beq.n	8004d28 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	4a61      	ldr	r2, [pc, #388]	; (8004e84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	f240 80b9 	bls.w	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80b3 	beq.w	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d24:	6093      	str	r3, [r2, #8]
 8004d26:	e0a7      	b.n	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2320      	movs	r3, #32
 8004d42:	6093      	str	r3, [r2, #8]
 8004d44:	e098      	b.n	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f040 8093 	bne.w	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4a4b      	ldr	r2, [pc, #300]	; (8004e84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d90f      	bls.n	8004d7a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d70:	461a      	mov	r2, r3
 8004d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d76:	6093      	str	r3, [r2, #8]
 8004d78:	e07e      	b.n	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	0159      	lsls	r1, r3, #5
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	440b      	add	r3, r1
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da6:	1ad2      	subs	r2, r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d114      	bne.n	8004ddc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	f002 fdea 	bl	80079a0 <USB_EP0_OutStart>
 8004dcc:	e006      	b.n	8004ddc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	441a      	add	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	4619      	mov	r1, r3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f009 fb86 	bl	800e4f4 <HAL_PCD_DataOutStageCallback>
 8004de8:	e046      	b.n	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	4a26      	ldr	r2, [pc, #152]	; (8004e88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d124      	bne.n	8004e3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0e:	6093      	str	r3, [r2, #8]
 8004e10:	e032      	b.n	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	461a      	mov	r2, r3
 8004e2a:	2320      	movs	r3, #32
 8004e2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f009 fb5d 	bl	800e4f4 <HAL_PCD_DataOutStageCallback>
 8004e3a:	e01d      	b.n	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d114      	bne.n	8004e6c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	4613      	mov	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d108      	bne.n	8004e6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e64:	461a      	mov	r2, r3
 8004e66:	2100      	movs	r1, #0
 8004e68:	f002 fd9a 	bl	80079a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	4619      	mov	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f009 fb3e 	bl	800e4f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	4f54300a 	.word	0x4f54300a
 8004e88:	4f54310a 	.word	0x4f54310a

08004e8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	333c      	adds	r3, #60	; 0x3c
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a15      	ldr	r2, [pc, #84]	; (8004f14 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d90e      	bls.n	8004ee0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ede:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f009 faf5 	bl	800e4d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a0a      	ldr	r2, [pc, #40]	; (8004f14 <PCD_EP_OutSetupPacket_int+0x88>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d90c      	bls.n	8004f08 <PCD_EP_OutSetupPacket_int+0x7c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d108      	bne.n	8004f08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f00:	461a      	mov	r2, r3
 8004f02:	2101      	movs	r1, #1
 8004f04:	f002 fd4c 	bl	80079a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	4f54300a 	.word	0x4f54300a

08004f18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
 8004f24:	4613      	mov	r3, r2
 8004f26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d107      	bne.n	8004f46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f36:	883b      	ldrh	r3, [r7, #0]
 8004f38:	0419      	lsls	r1, r3, #16
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28
 8004f44:	e028      	b.n	8004f98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	0c1b      	lsrs	r3, r3, #16
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f54:	2300      	movs	r3, #0
 8004f56:	73fb      	strb	r3, [r7, #15]
 8004f58:	e00d      	b.n	8004f76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	3340      	adds	r3, #64	; 0x40
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	3301      	adds	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
 8004f76:	7bfa      	ldrb	r2, [r7, #15]
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d3ec      	bcc.n	8004f5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f80:	883b      	ldrh	r3, [r7, #0]
 8004f82:	0418      	lsls	r0, r3, #16
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6819      	ldr	r1, [r3, #0]
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	4302      	orrs	r2, r0
 8004f90:	3340      	adds	r3, #64	; 0x40
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	887a      	ldrh	r2, [r7, #2]
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e267      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d075      	beq.n	80050ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ffe:	4b88      	ldr	r3, [pc, #544]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b04      	cmp	r3, #4
 8005008:	d00c      	beq.n	8005024 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800500a:	4b85      	ldr	r3, [pc, #532]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005012:	2b08      	cmp	r3, #8
 8005014:	d112      	bne.n	800503c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005016:	4b82      	ldr	r3, [pc, #520]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005022:	d10b      	bne.n	800503c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005024:	4b7e      	ldr	r3, [pc, #504]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d05b      	beq.n	80050e8 <HAL_RCC_OscConfig+0x108>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d157      	bne.n	80050e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e242      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005044:	d106      	bne.n	8005054 <HAL_RCC_OscConfig+0x74>
 8005046:	4b76      	ldr	r3, [pc, #472]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a75      	ldr	r2, [pc, #468]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e01d      	b.n	8005090 <HAL_RCC_OscConfig+0xb0>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800505c:	d10c      	bne.n	8005078 <HAL_RCC_OscConfig+0x98>
 800505e:	4b70      	ldr	r3, [pc, #448]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a6f      	ldr	r2, [pc, #444]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	4b6d      	ldr	r3, [pc, #436]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a6c      	ldr	r2, [pc, #432]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e00b      	b.n	8005090 <HAL_RCC_OscConfig+0xb0>
 8005078:	4b69      	ldr	r3, [pc, #420]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a68      	ldr	r2, [pc, #416]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800507e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	4b66      	ldr	r3, [pc, #408]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a65      	ldr	r2, [pc, #404]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800508a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800508e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d013      	beq.n	80050c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005098:	f7fe f890 	bl	80031bc <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a0:	f7fe f88c 	bl	80031bc <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b64      	cmp	r3, #100	; 0x64
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e207      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b2:	4b5b      	ldr	r3, [pc, #364]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0xc0>
 80050be:	e014      	b.n	80050ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c0:	f7fe f87c 	bl	80031bc <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050c8:	f7fe f878 	bl	80031bc <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b64      	cmp	r3, #100	; 0x64
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e1f3      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050da:	4b51      	ldr	r3, [pc, #324]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0xe8>
 80050e6:	e000      	b.n	80050ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d063      	beq.n	80051be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050f6:	4b4a      	ldr	r3, [pc, #296]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 030c 	and.w	r3, r3, #12
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005102:	4b47      	ldr	r3, [pc, #284]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800510a:	2b08      	cmp	r3, #8
 800510c:	d11c      	bne.n	8005148 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800510e:	4b44      	ldr	r3, [pc, #272]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d116      	bne.n	8005148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800511a:	4b41      	ldr	r3, [pc, #260]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_RCC_OscConfig+0x152>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d001      	beq.n	8005132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e1c7      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005132:	4b3b      	ldr	r3, [pc, #236]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4937      	ldr	r1, [pc, #220]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005142:	4313      	orrs	r3, r2
 8005144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005146:	e03a      	b.n	80051be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d020      	beq.n	8005192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005150:	4b34      	ldr	r3, [pc, #208]	; (8005224 <HAL_RCC_OscConfig+0x244>)
 8005152:	2201      	movs	r2, #1
 8005154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005156:	f7fe f831 	bl	80031bc <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800515e:	f7fe f82d 	bl	80031bc <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e1a8      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005170:	4b2b      	ldr	r3, [pc, #172]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517c:	4b28      	ldr	r3, [pc, #160]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	4925      	ldr	r1, [pc, #148]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800518c:	4313      	orrs	r3, r2
 800518e:	600b      	str	r3, [r1, #0]
 8005190:	e015      	b.n	80051be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <HAL_RCC_OscConfig+0x244>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fe f810 	bl	80031bc <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a0:	f7fe f80c 	bl	80031bc <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e187      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b2:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d036      	beq.n	8005238 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d016      	beq.n	8005200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <HAL_RCC_OscConfig+0x248>)
 80051d4:	2201      	movs	r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fd fff0 	bl	80031bc <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051e0:	f7fd ffec 	bl	80031bc <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e167      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f2:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 80051f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x200>
 80051fe:	e01b      	b.n	8005238 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <HAL_RCC_OscConfig+0x248>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005206:	f7fd ffd9 	bl	80031bc <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800520c:	e00e      	b.n	800522c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800520e:	f7fd ffd5 	bl	80031bc <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d907      	bls.n	800522c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e150      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
 8005220:	40023800 	.word	0x40023800
 8005224:	42470000 	.word	0x42470000
 8005228:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800522c:	4b88      	ldr	r3, [pc, #544]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800522e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1ea      	bne.n	800520e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8097 	beq.w	8005374 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800524a:	4b81      	ldr	r3, [pc, #516]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10f      	bne.n	8005276 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005256:	2300      	movs	r3, #0
 8005258:	60bb      	str	r3, [r7, #8]
 800525a:	4b7d      	ldr	r3, [pc, #500]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	4a7c      	ldr	r2, [pc, #496]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 8005260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005264:	6413      	str	r3, [r2, #64]	; 0x40
 8005266:	4b7a      	ldr	r3, [pc, #488]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526e:	60bb      	str	r3, [r7, #8]
 8005270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005272:	2301      	movs	r3, #1
 8005274:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005276:	4b77      	ldr	r3, [pc, #476]	; (8005454 <HAL_RCC_OscConfig+0x474>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527e:	2b00      	cmp	r3, #0
 8005280:	d118      	bne.n	80052b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005282:	4b74      	ldr	r3, [pc, #464]	; (8005454 <HAL_RCC_OscConfig+0x474>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a73      	ldr	r2, [pc, #460]	; (8005454 <HAL_RCC_OscConfig+0x474>)
 8005288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800528e:	f7fd ff95 	bl	80031bc <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005296:	f7fd ff91 	bl	80031bc <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e10c      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a8:	4b6a      	ldr	r3, [pc, #424]	; (8005454 <HAL_RCC_OscConfig+0x474>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0f0      	beq.n	8005296 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d106      	bne.n	80052ca <HAL_RCC_OscConfig+0x2ea>
 80052bc:	4b64      	ldr	r3, [pc, #400]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	4a63      	ldr	r2, [pc, #396]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052c2:	f043 0301 	orr.w	r3, r3, #1
 80052c6:	6713      	str	r3, [r2, #112]	; 0x70
 80052c8:	e01c      	b.n	8005304 <HAL_RCC_OscConfig+0x324>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	2b05      	cmp	r3, #5
 80052d0:	d10c      	bne.n	80052ec <HAL_RCC_OscConfig+0x30c>
 80052d2:	4b5f      	ldr	r3, [pc, #380]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	4a5e      	ldr	r2, [pc, #376]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052d8:	f043 0304 	orr.w	r3, r3, #4
 80052dc:	6713      	str	r3, [r2, #112]	; 0x70
 80052de:	4b5c      	ldr	r3, [pc, #368]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	4a5b      	ldr	r2, [pc, #364]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ea:	e00b      	b.n	8005304 <HAL_RCC_OscConfig+0x324>
 80052ec:	4b58      	ldr	r3, [pc, #352]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f0:	4a57      	ldr	r2, [pc, #348]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	6713      	str	r3, [r2, #112]	; 0x70
 80052f8:	4b55      	ldr	r3, [pc, #340]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	4a54      	ldr	r2, [pc, #336]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052fe:	f023 0304 	bic.w	r3, r3, #4
 8005302:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d015      	beq.n	8005338 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800530c:	f7fd ff56 	bl	80031bc <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005312:	e00a      	b.n	800532a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005314:	f7fd ff52 	bl	80031bc <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005322:	4293      	cmp	r3, r2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e0cb      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532a:	4b49      	ldr	r3, [pc, #292]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0ee      	beq.n	8005314 <HAL_RCC_OscConfig+0x334>
 8005336:	e014      	b.n	8005362 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005338:	f7fd ff40 	bl	80031bc <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800533e:	e00a      	b.n	8005356 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005340:	f7fd ff3c 	bl	80031bc <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	; 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e0b5      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005356:	4b3e      	ldr	r3, [pc, #248]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1ee      	bne.n	8005340 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005362:	7dfb      	ldrb	r3, [r7, #23]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d105      	bne.n	8005374 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005368:	4b39      	ldr	r3, [pc, #228]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	4a38      	ldr	r2, [pc, #224]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800536e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005372:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80a1 	beq.w	80054c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800537e:	4b34      	ldr	r3, [pc, #208]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
 8005386:	2b08      	cmp	r3, #8
 8005388:	d05c      	beq.n	8005444 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d141      	bne.n	8005416 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005392:	4b31      	ldr	r3, [pc, #196]	; (8005458 <HAL_RCC_OscConfig+0x478>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005398:	f7fd ff10 	bl	80031bc <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fd ff0c 	bl	80031bc <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e087      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b2:	4b27      	ldr	r3, [pc, #156]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	019b      	lsls	r3, r3, #6
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	3b01      	subs	r3, #1
 80053d8:	041b      	lsls	r3, r3, #16
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	061b      	lsls	r3, r3, #24
 80053e2:	491b      	ldr	r1, [pc, #108]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053e8:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <HAL_RCC_OscConfig+0x478>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ee:	f7fd fee5 	bl	80031bc <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f6:	f7fd fee1 	bl	80031bc <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e05c      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005408:	4b11      	ldr	r3, [pc, #68]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x416>
 8005414:	e054      	b.n	80054c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <HAL_RCC_OscConfig+0x478>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541c:	f7fd fece 	bl	80031bc <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005424:	f7fd feca 	bl	80031bc <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e045      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005436:	4b06      	ldr	r3, [pc, #24]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f0      	bne.n	8005424 <HAL_RCC_OscConfig+0x444>
 8005442:	e03d      	b.n	80054c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d107      	bne.n	800545c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e038      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
 8005450:	40023800 	.word	0x40023800
 8005454:	40007000 	.word	0x40007000
 8005458:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800545c:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <HAL_RCC_OscConfig+0x4ec>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d028      	beq.n	80054bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d121      	bne.n	80054bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005482:	429a      	cmp	r2, r3
 8005484:	d11a      	bne.n	80054bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800548c:	4013      	ands	r3, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005492:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005494:	4293      	cmp	r3, r2
 8005496:	d111      	bne.n	80054bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	085b      	lsrs	r3, r3, #1
 80054a4:	3b01      	subs	r3, #1
 80054a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d107      	bne.n	80054bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40023800 	.word	0x40023800

080054d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0cc      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054e4:	4b68      	ldr	r3, [pc, #416]	; (8005688 <HAL_RCC_ClockConfig+0x1b8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d90c      	bls.n	800550c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f2:	4b65      	ldr	r3, [pc, #404]	; (8005688 <HAL_RCC_ClockConfig+0x1b8>)
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fa:	4b63      	ldr	r3, [pc, #396]	; (8005688 <HAL_RCC_ClockConfig+0x1b8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d001      	beq.n	800550c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0b8      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d020      	beq.n	800555a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005524:	4b59      	ldr	r3, [pc, #356]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4a58      	ldr	r2, [pc, #352]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800552e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800553c:	4b53      	ldr	r3, [pc, #332]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	4a52      	ldr	r2, [pc, #328]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005548:	4b50      	ldr	r3, [pc, #320]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	494d      	ldr	r1, [pc, #308]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	4313      	orrs	r3, r2
 8005558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d044      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d107      	bne.n	800557e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556e:	4b47      	ldr	r3, [pc, #284]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d119      	bne.n	80055ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e07f      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d003      	beq.n	800558e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800558a:	2b03      	cmp	r3, #3
 800558c:	d107      	bne.n	800559e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800558e:	4b3f      	ldr	r3, [pc, #252]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d109      	bne.n	80055ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e06f      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800559e:	4b3b      	ldr	r3, [pc, #236]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e067      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ae:	4b37      	ldr	r3, [pc, #220]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f023 0203 	bic.w	r2, r3, #3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4934      	ldr	r1, [pc, #208]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055c0:	f7fd fdfc 	bl	80031bc <HAL_GetTick>
 80055c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c6:	e00a      	b.n	80055de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c8:	f7fd fdf8 	bl	80031bc <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e04f      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055de:	4b2b      	ldr	r3, [pc, #172]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 020c 	and.w	r2, r3, #12
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d1eb      	bne.n	80055c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055f0:	4b25      	ldr	r3, [pc, #148]	; (8005688 <HAL_RCC_ClockConfig+0x1b8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d20c      	bcs.n	8005618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fe:	4b22      	ldr	r3, [pc, #136]	; (8005688 <HAL_RCC_ClockConfig+0x1b8>)
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b20      	ldr	r3, [pc, #128]	; (8005688 <HAL_RCC_ClockConfig+0x1b8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e032      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005624:	4b19      	ldr	r3, [pc, #100]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4916      	ldr	r1, [pc, #88]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	4313      	orrs	r3, r2
 8005634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005642:	4b12      	ldr	r3, [pc, #72]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	490e      	ldr	r1, [pc, #56]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	4313      	orrs	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005656:	f000 f821 	bl	800569c <HAL_RCC_GetSysClockFreq>
 800565a:	4602      	mov	r2, r0
 800565c:	4b0b      	ldr	r3, [pc, #44]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	490a      	ldr	r1, [pc, #40]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 8005668:	5ccb      	ldrb	r3, [r1, r3]
 800566a:	fa22 f303 	lsr.w	r3, r2, r3
 800566e:	4a09      	ldr	r2, [pc, #36]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005672:	4b09      	ldr	r3, [pc, #36]	; (8005698 <HAL_RCC_ClockConfig+0x1c8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f7fb febe 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40023c00 	.word	0x40023c00
 800568c:	40023800 	.word	0x40023800
 8005690:	0801183c 	.word	0x0801183c
 8005694:	20000000 	.word	0x20000000
 8005698:	20000080 	.word	0x20000080

0800569c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800569c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056a0:	b094      	sub	sp, #80	; 0x50
 80056a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	647b      	str	r3, [r7, #68]	; 0x44
 80056a8:	2300      	movs	r3, #0
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ac:	2300      	movs	r3, #0
 80056ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056b4:	4b79      	ldr	r3, [pc, #484]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 030c 	and.w	r3, r3, #12
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d00d      	beq.n	80056dc <HAL_RCC_GetSysClockFreq+0x40>
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	f200 80e1 	bhi.w	8005888 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_RCC_GetSysClockFreq+0x34>
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d003      	beq.n	80056d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ce:	e0db      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056d0:	4b73      	ldr	r3, [pc, #460]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80056d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80056d4:	e0db      	b.n	800588e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056d6:	4b73      	ldr	r3, [pc, #460]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80056d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056da:	e0d8      	b.n	800588e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056dc:	4b6f      	ldr	r3, [pc, #444]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056e6:	4b6d      	ldr	r3, [pc, #436]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d063      	beq.n	80057ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f2:	4b6a      	ldr	r3, [pc, #424]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	099b      	lsrs	r3, r3, #6
 80056f8:	2200      	movs	r2, #0
 80056fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80056fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005704:	633b      	str	r3, [r7, #48]	; 0x30
 8005706:	2300      	movs	r3, #0
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
 800570a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800570e:	4622      	mov	r2, r4
 8005710:	462b      	mov	r3, r5
 8005712:	f04f 0000 	mov.w	r0, #0
 8005716:	f04f 0100 	mov.w	r1, #0
 800571a:	0159      	lsls	r1, r3, #5
 800571c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005720:	0150      	lsls	r0, r2, #5
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4621      	mov	r1, r4
 8005728:	1a51      	subs	r1, r2, r1
 800572a:	6139      	str	r1, [r7, #16]
 800572c:	4629      	mov	r1, r5
 800572e:	eb63 0301 	sbc.w	r3, r3, r1
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005740:	4659      	mov	r1, fp
 8005742:	018b      	lsls	r3, r1, #6
 8005744:	4651      	mov	r1, sl
 8005746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800574a:	4651      	mov	r1, sl
 800574c:	018a      	lsls	r2, r1, #6
 800574e:	4651      	mov	r1, sl
 8005750:	ebb2 0801 	subs.w	r8, r2, r1
 8005754:	4659      	mov	r1, fp
 8005756:	eb63 0901 	sbc.w	r9, r3, r1
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800576a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800576e:	4690      	mov	r8, r2
 8005770:	4699      	mov	r9, r3
 8005772:	4623      	mov	r3, r4
 8005774:	eb18 0303 	adds.w	r3, r8, r3
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	462b      	mov	r3, r5
 800577c:	eb49 0303 	adc.w	r3, r9, r3
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800578e:	4629      	mov	r1, r5
 8005790:	024b      	lsls	r3, r1, #9
 8005792:	4621      	mov	r1, r4
 8005794:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005798:	4621      	mov	r1, r4
 800579a:	024a      	lsls	r2, r1, #9
 800579c:	4610      	mov	r0, r2
 800579e:	4619      	mov	r1, r3
 80057a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057a2:	2200      	movs	r2, #0
 80057a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057ac:	f7fb fa0c 	bl	8000bc8 <__aeabi_uldivmod>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4613      	mov	r3, r2
 80057b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b8:	e058      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ba:	4b38      	ldr	r3, [pc, #224]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	099b      	lsrs	r3, r3, #6
 80057c0:	2200      	movs	r2, #0
 80057c2:	4618      	mov	r0, r3
 80057c4:	4611      	mov	r1, r2
 80057c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057ca:	623b      	str	r3, [r7, #32]
 80057cc:	2300      	movs	r3, #0
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
 80057d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057d4:	4642      	mov	r2, r8
 80057d6:	464b      	mov	r3, r9
 80057d8:	f04f 0000 	mov.w	r0, #0
 80057dc:	f04f 0100 	mov.w	r1, #0
 80057e0:	0159      	lsls	r1, r3, #5
 80057e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057e6:	0150      	lsls	r0, r2, #5
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4641      	mov	r1, r8
 80057ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80057f2:	4649      	mov	r1, r9
 80057f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005804:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005808:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800580c:	ebb2 040a 	subs.w	r4, r2, sl
 8005810:	eb63 050b 	sbc.w	r5, r3, fp
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	00eb      	lsls	r3, r5, #3
 800581e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005822:	00e2      	lsls	r2, r4, #3
 8005824:	4614      	mov	r4, r2
 8005826:	461d      	mov	r5, r3
 8005828:	4643      	mov	r3, r8
 800582a:	18e3      	adds	r3, r4, r3
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	464b      	mov	r3, r9
 8005830:	eb45 0303 	adc.w	r3, r5, r3
 8005834:	607b      	str	r3, [r7, #4]
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005842:	4629      	mov	r1, r5
 8005844:	028b      	lsls	r3, r1, #10
 8005846:	4621      	mov	r1, r4
 8005848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800584c:	4621      	mov	r1, r4
 800584e:	028a      	lsls	r2, r1, #10
 8005850:	4610      	mov	r0, r2
 8005852:	4619      	mov	r1, r3
 8005854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005856:	2200      	movs	r2, #0
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	61fa      	str	r2, [r7, #28]
 800585c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005860:	f7fb f9b2 	bl	8000bc8 <__aeabi_uldivmod>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4613      	mov	r3, r2
 800586a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800586c:	4b0b      	ldr	r3, [pc, #44]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	0c1b      	lsrs	r3, r3, #16
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	3301      	adds	r3, #1
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800587c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800587e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005886:	e002      	b.n	800588e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800588a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800588c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800588e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005890:	4618      	mov	r0, r3
 8005892:	3750      	adds	r7, #80	; 0x50
 8005894:	46bd      	mov	sp, r7
 8005896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800589a:	bf00      	nop
 800589c:	40023800 	.word	0x40023800
 80058a0:	00f42400 	.word	0x00f42400
 80058a4:	007a1200 	.word	0x007a1200

080058a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058ac:	4b03      	ldr	r3, [pc, #12]	; (80058bc <HAL_RCC_GetHCLKFreq+0x14>)
 80058ae:	681b      	ldr	r3, [r3, #0]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000000 	.word	0x20000000

080058c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058c4:	f7ff fff0 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	0a9b      	lsrs	r3, r3, #10
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4903      	ldr	r1, [pc, #12]	; (80058e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40023800 	.word	0x40023800
 80058e4:	0801184c 	.word	0x0801184c

080058e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	220f      	movs	r2, #15
 80058f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058f8:	4b12      	ldr	r3, [pc, #72]	; (8005944 <HAL_RCC_GetClockConfig+0x5c>)
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f003 0203 	and.w	r2, r3, #3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005904:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <HAL_RCC_GetClockConfig+0x5c>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <HAL_RCC_GetClockConfig+0x5c>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800591c:	4b09      	ldr	r3, [pc, #36]	; (8005944 <HAL_RCC_GetClockConfig+0x5c>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	08db      	lsrs	r3, r3, #3
 8005922:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800592a:	4b07      	ldr	r3, [pc, #28]	; (8005948 <HAL_RCC_GetClockConfig+0x60>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 020f 	and.w	r2, r3, #15
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	601a      	str	r2, [r3, #0]
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40023800 	.word	0x40023800
 8005948:	40023c00 	.word	0x40023c00

0800594c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10b      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005970:	2b00      	cmp	r3, #0
 8005972:	d105      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800597c:	2b00      	cmp	r3, #0
 800597e:	d075      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005980:	4b91      	ldr	r3, [pc, #580]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005986:	f7fd fc19 	bl	80031bc <HAL_GetTick>
 800598a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800598c:	e008      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800598e:	f7fd fc15 	bl	80031bc <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e189      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059a0:	4b8a      	ldr	r3, [pc, #552]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f0      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d009      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	019a      	lsls	r2, r3, #6
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	071b      	lsls	r3, r3, #28
 80059c4:	4981      	ldr	r1, [pc, #516]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01f      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059d8:	4b7c      	ldr	r3, [pc, #496]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059de:	0f1b      	lsrs	r3, r3, #28
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	019a      	lsls	r2, r3, #6
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	061b      	lsls	r3, r3, #24
 80059f2:	431a      	orrs	r2, r3
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	071b      	lsls	r3, r3, #28
 80059f8:	4974      	ldr	r1, [pc, #464]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a00:	4b72      	ldr	r3, [pc, #456]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a06:	f023 021f 	bic.w	r2, r3, #31
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	496e      	ldr	r1, [pc, #440]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00d      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	019a      	lsls	r2, r3, #6
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	061b      	lsls	r3, r3, #24
 8005a30:	431a      	orrs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	071b      	lsls	r3, r3, #28
 8005a38:	4964      	ldr	r1, [pc, #400]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a40:	4b61      	ldr	r3, [pc, #388]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a46:	f7fd fbb9 	bl	80031bc <HAL_GetTick>
 8005a4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a4e:	f7fd fbb5 	bl	80031bc <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e129      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a60:	4b5a      	ldr	r3, [pc, #360]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d105      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d079      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a84:	4b52      	ldr	r3, [pc, #328]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a8a:	f7fd fb97 	bl	80031bc <HAL_GetTick>
 8005a8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a90:	e008      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a92:	f7fd fb93 	bl	80031bc <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e107      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005aa4:	4b49      	ldr	r3, [pc, #292]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ab0:	d0ef      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0304 	and.w	r3, r3, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d020      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005abe:	4b43      	ldr	r3, [pc, #268]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac4:	0f1b      	lsrs	r3, r3, #28
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	019a      	lsls	r2, r3, #6
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	061b      	lsls	r3, r3, #24
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	071b      	lsls	r3, r3, #28
 8005ade:	493b      	ldr	r1, [pc, #236]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ae6:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	3b01      	subs	r3, #1
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	4934      	ldr	r1, [pc, #208]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d01e      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b0c:	4b2f      	ldr	r3, [pc, #188]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	0e1b      	lsrs	r3, r3, #24
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	019a      	lsls	r2, r3, #6
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	061b      	lsls	r3, r3, #24
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	071b      	lsls	r3, r3, #28
 8005b2c:	4927      	ldr	r1, [pc, #156]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b34:	4b25      	ldr	r3, [pc, #148]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	4922      	ldr	r1, [pc, #136]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b4a:	4b21      	ldr	r3, [pc, #132]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b50:	f7fd fb34 	bl	80031bc <HAL_GetTick>
 8005b54:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005b58:	f7fd fb30 	bl	80031bc <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e0a4      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b6a:	4b18      	ldr	r3, [pc, #96]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b76:	d1ef      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0320 	and.w	r3, r3, #32
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 808b 	beq.w	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	4b10      	ldr	r3, [pc, #64]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	4a0f      	ldr	r2, [pc, #60]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b94:	6413      	str	r3, [r2, #64]	; 0x40
 8005b96:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a0b      	ldr	r2, [pc, #44]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bae:	f7fd fb05 	bl	80031bc <HAL_GetTick>
 8005bb2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bb4:	e010      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005bb6:	f7fd fb01 	bl	80031bc <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d909      	bls.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e075      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005bc8:	42470068 	.word	0x42470068
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	42470070 	.word	0x42470070
 8005bd4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005bd8:	4b38      	ldr	r3, [pc, #224]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d0e8      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005be4:	4b36      	ldr	r3, [pc, #216]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d02f      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d028      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c02:	4b2f      	ldr	r3, [pc, #188]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c0c:	4b2d      	ldr	r3, [pc, #180]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c12:	4b2c      	ldr	r3, [pc, #176]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c18:	4a29      	ldr	r2, [pc, #164]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c1e:	4b28      	ldr	r3, [pc, #160]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d114      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c2a:	f7fd fac7 	bl	80031bc <HAL_GetTick>
 8005c2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c30:	e00a      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c32:	f7fd fac3 	bl	80031bc <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e035      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c48:	4b1d      	ldr	r3, [pc, #116]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0ee      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c60:	d10d      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005c62:	4b17      	ldr	r3, [pc, #92]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c76:	4912      	ldr	r1, [pc, #72]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	608b      	str	r3, [r1, #8]
 8005c7c:	e005      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005c7e:	4b10      	ldr	r3, [pc, #64]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	4a0f      	ldr	r2, [pc, #60]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c88:	6093      	str	r3, [r2, #8]
 8005c8a:	4b0d      	ldr	r3, [pc, #52]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c96:	490a      	ldr	r1, [pc, #40]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d004      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005cae:	4b06      	ldr	r3, [pc, #24]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005cb0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3718      	adds	r7, #24
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40007000 	.word	0x40007000
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	42470e40 	.word	0x42470e40
 8005cc8:	424711e0 	.word	0x424711e0

08005ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d101      	bne.n	8005cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e041      	b.n	8005d62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f839 	bl	8005d6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f000 f9d8 	bl	80060c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
	...

08005d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d001      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e04e      	b.n	8005e36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a23      	ldr	r2, [pc, #140]	; (8005e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d022      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc2:	d01d      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1f      	ldr	r2, [pc, #124]	; (8005e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d018      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d013      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00e      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d009      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a19      	ldr	r2, [pc, #100]	; (8005e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d004      	beq.n	8005e00 <HAL_TIM_Base_Start_IT+0x80>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d111      	bne.n	8005e24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b06      	cmp	r3, #6
 8005e10:	d010      	beq.n	8005e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0201 	orr.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e22:	e007      	b.n	8005e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40010000 	.word	0x40010000
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	40000c00 	.word	0x40000c00
 8005e54:	40010400 	.word	0x40010400
 8005e58:	40014000 	.word	0x40014000
 8005e5c:	40001800 	.word	0x40001800

08005e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d122      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d11b      	bne.n	8005ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0202 	mvn.w	r2, #2
 8005e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f8ee 	bl	8006084 <HAL_TIM_IC_CaptureCallback>
 8005ea8:	e005      	b.n	8005eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f8e0 	bl	8006070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f8f1 	bl	8006098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d122      	bne.n	8005f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d11b      	bne.n	8005f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0204 	mvn.w	r2, #4
 8005ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f8c4 	bl	8006084 <HAL_TIM_IC_CaptureCallback>
 8005efc:	e005      	b.n	8005f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f8b6 	bl	8006070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f8c7 	bl	8006098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d122      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f003 0308 	and.w	r3, r3, #8
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d11b      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0208 	mvn.w	r2, #8
 8005f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2204      	movs	r2, #4
 8005f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f89a 	bl	8006084 <HAL_TIM_IC_CaptureCallback>
 8005f50:	e005      	b.n	8005f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f88c 	bl	8006070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f89d 	bl	8006098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2b10      	cmp	r3, #16
 8005f70:	d122      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d11b      	bne.n	8005fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0210 	mvn.w	r2, #16
 8005f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2208      	movs	r2, #8
 8005f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69db      	ldr	r3, [r3, #28]
 8005f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f870 	bl	8006084 <HAL_TIM_IC_CaptureCallback>
 8005fa4:	e005      	b.n	8005fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f862 	bl	8006070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f873 	bl	8006098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d10e      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d107      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f06f 0201 	mvn.w	r2, #1
 8005fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fb f9c6 	bl	8001370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fee:	2b80      	cmp	r3, #128	; 0x80
 8005ff0:	d10e      	bne.n	8006010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffc:	2b80      	cmp	r3, #128	; 0x80
 8005ffe:	d107      	bne.n	8006010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f902 	bl	8006214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601a:	2b40      	cmp	r3, #64	; 0x40
 800601c:	d10e      	bne.n	800603c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d107      	bne.n	800603c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f838 	bl	80060ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b20      	cmp	r3, #32
 8006048:	d10e      	bne.n	8006068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b20      	cmp	r3, #32
 8006056:	d107      	bne.n	8006068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0220 	mvn.w	r2, #32
 8006060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f8cc 	bl	8006200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a40      	ldr	r2, [pc, #256]	; (80061d4 <TIM_Base_SetConfig+0x114>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d013      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060de:	d00f      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a3d      	ldr	r2, [pc, #244]	; (80061d8 <TIM_Base_SetConfig+0x118>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00b      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a3c      	ldr	r2, [pc, #240]	; (80061dc <TIM_Base_SetConfig+0x11c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d007      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a3b      	ldr	r2, [pc, #236]	; (80061e0 <TIM_Base_SetConfig+0x120>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a3a      	ldr	r2, [pc, #232]	; (80061e4 <TIM_Base_SetConfig+0x124>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d108      	bne.n	8006112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a2f      	ldr	r2, [pc, #188]	; (80061d4 <TIM_Base_SetConfig+0x114>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d02b      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006120:	d027      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a2c      	ldr	r2, [pc, #176]	; (80061d8 <TIM_Base_SetConfig+0x118>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d023      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a2b      	ldr	r2, [pc, #172]	; (80061dc <TIM_Base_SetConfig+0x11c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d01f      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a2a      	ldr	r2, [pc, #168]	; (80061e0 <TIM_Base_SetConfig+0x120>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01b      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a29      	ldr	r2, [pc, #164]	; (80061e4 <TIM_Base_SetConfig+0x124>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d017      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a28      	ldr	r2, [pc, #160]	; (80061e8 <TIM_Base_SetConfig+0x128>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a27      	ldr	r2, [pc, #156]	; (80061ec <TIM_Base_SetConfig+0x12c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00f      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a26      	ldr	r2, [pc, #152]	; (80061f0 <TIM_Base_SetConfig+0x130>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00b      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a25      	ldr	r2, [pc, #148]	; (80061f4 <TIM_Base_SetConfig+0x134>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d007      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a24      	ldr	r2, [pc, #144]	; (80061f8 <TIM_Base_SetConfig+0x138>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d003      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a23      	ldr	r2, [pc, #140]	; (80061fc <TIM_Base_SetConfig+0x13c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d108      	bne.n	8006184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a0a      	ldr	r2, [pc, #40]	; (80061d4 <TIM_Base_SetConfig+0x114>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_Base_SetConfig+0xf8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a0c      	ldr	r2, [pc, #48]	; (80061e4 <TIM_Base_SetConfig+0x124>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d103      	bne.n	80061c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	615a      	str	r2, [r3, #20]
}
 80061c6:	bf00      	nop
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40010000 	.word	0x40010000
 80061d8:	40000400 	.word	0x40000400
 80061dc:	40000800 	.word	0x40000800
 80061e0:	40000c00 	.word	0x40000c00
 80061e4:	40010400 	.word	0x40010400
 80061e8:	40014000 	.word	0x40014000
 80061ec:	40014400 	.word	0x40014400
 80061f0:	40014800 	.word	0x40014800
 80061f4:	40001800 	.word	0x40001800
 80061f8:	40001c00 	.word	0x40001c00
 80061fc:	40002000 	.word	0x40002000

08006200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006228:	b084      	sub	sp, #16
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	f107 001c 	add.w	r0, r7, #28
 8006236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	2b01      	cmp	r3, #1
 800623e:	d122      	bne.n	8006286 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626a:	2b01      	cmp	r3, #1
 800626c:	d105      	bne.n	800627a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f001 fbee 	bl	8007a5c <USB_CoreReset>
 8006280:	4603      	mov	r3, r0
 8006282:	73fb      	strb	r3, [r7, #15]
 8006284:	e01a      	b.n	80062bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 fbe2 	bl	8007a5c <USB_CoreReset>
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800629c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d106      	bne.n	80062b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	639a      	str	r2, [r3, #56]	; 0x38
 80062ae:	e005      	b.n	80062bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d10b      	bne.n	80062da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f043 0206 	orr.w	r2, r3, #6
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f043 0220 	orr.w	r2, r3, #32
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062e6:	b004      	add	sp, #16
 80062e8:	4770      	bx	lr
	...

080062ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	4613      	mov	r3, r2
 80062f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d165      	bne.n	80063cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4a41      	ldr	r2, [pc, #260]	; (8006408 <USB_SetTurnaroundTime+0x11c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d906      	bls.n	8006316 <USB_SetTurnaroundTime+0x2a>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4a40      	ldr	r2, [pc, #256]	; (800640c <USB_SetTurnaroundTime+0x120>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d202      	bcs.n	8006316 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006310:	230f      	movs	r3, #15
 8006312:	617b      	str	r3, [r7, #20]
 8006314:	e062      	b.n	80063dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4a3c      	ldr	r2, [pc, #240]	; (800640c <USB_SetTurnaroundTime+0x120>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d306      	bcc.n	800632c <USB_SetTurnaroundTime+0x40>
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	4a3b      	ldr	r2, [pc, #236]	; (8006410 <USB_SetTurnaroundTime+0x124>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d202      	bcs.n	800632c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006326:	230e      	movs	r3, #14
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	e057      	b.n	80063dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4a38      	ldr	r2, [pc, #224]	; (8006410 <USB_SetTurnaroundTime+0x124>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d306      	bcc.n	8006342 <USB_SetTurnaroundTime+0x56>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4a37      	ldr	r2, [pc, #220]	; (8006414 <USB_SetTurnaroundTime+0x128>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d202      	bcs.n	8006342 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800633c:	230d      	movs	r3, #13
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e04c      	b.n	80063dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4a33      	ldr	r2, [pc, #204]	; (8006414 <USB_SetTurnaroundTime+0x128>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d306      	bcc.n	8006358 <USB_SetTurnaroundTime+0x6c>
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4a32      	ldr	r2, [pc, #200]	; (8006418 <USB_SetTurnaroundTime+0x12c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d802      	bhi.n	8006358 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006352:	230c      	movs	r3, #12
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	e041      	b.n	80063dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4a2f      	ldr	r2, [pc, #188]	; (8006418 <USB_SetTurnaroundTime+0x12c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d906      	bls.n	800636e <USB_SetTurnaroundTime+0x82>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4a2e      	ldr	r2, [pc, #184]	; (800641c <USB_SetTurnaroundTime+0x130>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d802      	bhi.n	800636e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006368:	230b      	movs	r3, #11
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e036      	b.n	80063dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	4a2a      	ldr	r2, [pc, #168]	; (800641c <USB_SetTurnaroundTime+0x130>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d906      	bls.n	8006384 <USB_SetTurnaroundTime+0x98>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4a29      	ldr	r2, [pc, #164]	; (8006420 <USB_SetTurnaroundTime+0x134>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d802      	bhi.n	8006384 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800637e:	230a      	movs	r3, #10
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	e02b      	b.n	80063dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4a26      	ldr	r2, [pc, #152]	; (8006420 <USB_SetTurnaroundTime+0x134>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d906      	bls.n	800639a <USB_SetTurnaroundTime+0xae>
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4a25      	ldr	r2, [pc, #148]	; (8006424 <USB_SetTurnaroundTime+0x138>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d202      	bcs.n	800639a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006394:	2309      	movs	r3, #9
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	e020      	b.n	80063dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	4a21      	ldr	r2, [pc, #132]	; (8006424 <USB_SetTurnaroundTime+0x138>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d306      	bcc.n	80063b0 <USB_SetTurnaroundTime+0xc4>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	4a20      	ldr	r2, [pc, #128]	; (8006428 <USB_SetTurnaroundTime+0x13c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d802      	bhi.n	80063b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80063aa:	2308      	movs	r3, #8
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	e015      	b.n	80063dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4a1d      	ldr	r2, [pc, #116]	; (8006428 <USB_SetTurnaroundTime+0x13c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d906      	bls.n	80063c6 <USB_SetTurnaroundTime+0xda>
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4a1c      	ldr	r2, [pc, #112]	; (800642c <USB_SetTurnaroundTime+0x140>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d202      	bcs.n	80063c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063c0:	2307      	movs	r3, #7
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	e00a      	b.n	80063dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063c6:	2306      	movs	r3, #6
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	e007      	b.n	80063dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063cc:	79fb      	ldrb	r3, [r7, #7]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063d2:	2309      	movs	r3, #9
 80063d4:	617b      	str	r3, [r7, #20]
 80063d6:	e001      	b.n	80063dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063d8:	2309      	movs	r3, #9
 80063da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	029b      	lsls	r3, r3, #10
 80063f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80063f4:	431a      	orrs	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	371c      	adds	r7, #28
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	00d8acbf 	.word	0x00d8acbf
 800640c:	00e4e1c0 	.word	0x00e4e1c0
 8006410:	00f42400 	.word	0x00f42400
 8006414:	01067380 	.word	0x01067380
 8006418:	011a499f 	.word	0x011a499f
 800641c:	01312cff 	.word	0x01312cff
 8006420:	014ca43f 	.word	0x014ca43f
 8006424:	016e3600 	.word	0x016e3600
 8006428:	01a6ab1f 	.word	0x01a6ab1f
 800642c:	01e84800 	.word	0x01e84800

08006430 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f043 0201 	orr.w	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f023 0201 	bic.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d115      	bne.n	80064c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064a2:	2001      	movs	r0, #1
 80064a4:	f7fc fe96 	bl	80031d4 <HAL_Delay>
      ms++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 fa45 	bl	800793e <USB_GetMode>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d01e      	beq.n	80064f8 <USB_SetCurrentMode+0x84>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b31      	cmp	r3, #49	; 0x31
 80064be:	d9f0      	bls.n	80064a2 <USB_SetCurrentMode+0x2e>
 80064c0:	e01a      	b.n	80064f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064c2:	78fb      	ldrb	r3, [r7, #3]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d115      	bne.n	80064f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064d4:	2001      	movs	r0, #1
 80064d6:	f7fc fe7d 	bl	80031d4 <HAL_Delay>
      ms++;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3301      	adds	r3, #1
 80064de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 fa2c 	bl	800793e <USB_GetMode>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <USB_SetCurrentMode+0x84>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2b31      	cmp	r3, #49	; 0x31
 80064f0:	d9f0      	bls.n	80064d4 <USB_SetCurrentMode+0x60>
 80064f2:	e001      	b.n	80064f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e005      	b.n	8006504 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b32      	cmp	r3, #50	; 0x32
 80064fc:	d101      	bne.n	8006502 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800650c:	b084      	sub	sp, #16
 800650e:	b580      	push	{r7, lr}
 8006510:	b086      	sub	sp, #24
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800651a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006526:	2300      	movs	r3, #0
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	e009      	b.n	8006540 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	3340      	adds	r3, #64	; 0x40
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	2200      	movs	r2, #0
 8006538:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	3301      	adds	r3, #1
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b0e      	cmp	r3, #14
 8006544:	d9f2      	bls.n	800652c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006548:	2b00      	cmp	r3, #0
 800654a:	d11c      	bne.n	8006586 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800655a:	f043 0302 	orr.w	r3, r3, #2
 800655e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	639a      	str	r2, [r3, #56]	; 0x38
 8006584:	e00b      	b.n	800659e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065a4:	461a      	mov	r2, r3
 80065a6:	2300      	movs	r3, #0
 80065a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b0:	4619      	mov	r1, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b8:	461a      	mov	r2, r3
 80065ba:	680b      	ldr	r3, [r1, #0]
 80065bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d10c      	bne.n	80065de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d104      	bne.n	80065d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065ca:	2100      	movs	r1, #0
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f965 	bl	800689c <USB_SetDevSpeed>
 80065d2:	e008      	b.n	80065e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065d4:	2101      	movs	r1, #1
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f960 	bl	800689c <USB_SetDevSpeed>
 80065dc:	e003      	b.n	80065e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065de:	2103      	movs	r1, #3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f95b 	bl	800689c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065e6:	2110      	movs	r1, #16
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f8f3 	bl	80067d4 <USB_FlushTxFifo>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f91f 	bl	800683c <USB_FlushRxFifo>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	461a      	mov	r2, r3
 8006610:	2300      	movs	r3, #0
 8006612:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661a:	461a      	mov	r2, r3
 800661c:	2300      	movs	r3, #0
 800661e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006626:	461a      	mov	r2, r3
 8006628:	2300      	movs	r3, #0
 800662a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	e043      	b.n	80066ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006648:	d118      	bne.n	800667c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665c:	461a      	mov	r2, r3
 800665e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	e013      	b.n	800668e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006672:	461a      	mov	r2, r3
 8006674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	e008      	b.n	800668e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	461a      	mov	r2, r3
 800668a:	2300      	movs	r3, #0
 800668c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669a:	461a      	mov	r2, r3
 800669c:	2300      	movs	r3, #0
 800669e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ac:	461a      	mov	r2, r3
 80066ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80066b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	3301      	adds	r3, #1
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d3b7      	bcc.n	8006632 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066c2:	2300      	movs	r3, #0
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	e043      	b.n	8006750 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066de:	d118      	bne.n	8006712 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f2:	461a      	mov	r2, r3
 80066f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	e013      	b.n	8006724 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006708:	461a      	mov	r2, r3
 800670a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	e008      	b.n	8006724 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671e:	461a      	mov	r2, r3
 8006720:	2300      	movs	r3, #0
 8006722:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	461a      	mov	r2, r3
 8006732:	2300      	movs	r3, #0
 8006734:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006742:	461a      	mov	r2, r3
 8006744:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006748:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	3301      	adds	r3, #1
 800674e:	613b      	str	r3, [r7, #16]
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	429a      	cmp	r2, r3
 8006756:	d3b7      	bcc.n	80066c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800676a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006778:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	2b00      	cmp	r3, #0
 800677e:	d105      	bne.n	800678c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	f043 0210 	orr.w	r2, r3, #16
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699a      	ldr	r2, [r3, #24]
 8006790:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <USB_DevInit+0x2c4>)
 8006792:	4313      	orrs	r3, r2
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d005      	beq.n	80067aa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	f043 0208 	orr.w	r2, r3, #8
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80067aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d107      	bne.n	80067c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b8:	f043 0304 	orr.w	r3, r3, #4
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067cc:	b004      	add	sp, #16
 80067ce:	4770      	bx	lr
 80067d0:	803c3800 	.word	0x803c3800

080067d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3301      	adds	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4a13      	ldr	r2, [pc, #76]	; (8006838 <USB_FlushTxFifo+0x64>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d901      	bls.n	80067f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e01b      	b.n	800682c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	daf2      	bge.n	80067e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	019b      	lsls	r3, r3, #6
 8006804:	f043 0220 	orr.w	r2, r3, #32
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3301      	adds	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4a08      	ldr	r2, [pc, #32]	; (8006838 <USB_FlushTxFifo+0x64>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d901      	bls.n	800681e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e006      	b.n	800682c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b20      	cmp	r3, #32
 8006828:	d0f0      	beq.n	800680c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	00030d40 	.word	0x00030d40

0800683c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4a11      	ldr	r2, [pc, #68]	; (8006898 <USB_FlushRxFifo+0x5c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d901      	bls.n	800685a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e018      	b.n	800688c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	daf2      	bge.n	8006848 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2210      	movs	r2, #16
 800686a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3301      	adds	r3, #1
 8006870:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4a08      	ldr	r2, [pc, #32]	; (8006898 <USB_FlushRxFifo+0x5c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d901      	bls.n	800687e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e006      	b.n	800688c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0310 	and.w	r3, r3, #16
 8006886:	2b10      	cmp	r3, #16
 8006888:	d0f0      	beq.n	800686c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	00030d40 	.word	0x00030d40

0800689c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	68f9      	ldr	r1, [r7, #12]
 80068b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068bc:	4313      	orrs	r3, r2
 80068be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b087      	sub	sp, #28
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 0306 	and.w	r3, r3, #6
 80068e6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d102      	bne.n	80068f4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80068ee:	2300      	movs	r3, #0
 80068f0:	75fb      	strb	r3, [r7, #23]
 80068f2:	e00a      	b.n	800690a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d002      	beq.n	8006900 <USB_GetDevSpeed+0x32>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b06      	cmp	r3, #6
 80068fe:	d102      	bne.n	8006906 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006900:	2302      	movs	r3, #2
 8006902:	75fb      	strb	r3, [r7, #23]
 8006904:	e001      	b.n	800690a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006906:	230f      	movs	r3, #15
 8006908:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800690a:	7dfb      	ldrb	r3, [r7, #23]
}
 800690c:	4618      	mov	r0, r3
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	785b      	ldrb	r3, [r3, #1]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d13a      	bne.n	80069aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800693a:	69da      	ldr	r2, [r3, #28]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f003 030f 	and.w	r3, r3, #15
 8006944:	2101      	movs	r1, #1
 8006946:	fa01 f303 	lsl.w	r3, r1, r3
 800694a:	b29b      	uxth	r3, r3
 800694c:	68f9      	ldr	r1, [r7, #12]
 800694e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006952:	4313      	orrs	r3, r2
 8006954:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4413      	add	r3, r2
 800695e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d155      	bne.n	8006a18 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	791b      	ldrb	r3, [r3, #4]
 8006986:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006988:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	059b      	lsls	r3, r3, #22
 800698e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006990:	4313      	orrs	r3, r2
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a6:	6013      	str	r3, [r2, #0]
 80069a8:	e036      	b.n	8006a18 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b0:	69da      	ldr	r2, [r3, #28]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	2101      	movs	r1, #1
 80069bc:	fa01 f303 	lsl.w	r3, r1, r3
 80069c0:	041b      	lsls	r3, r3, #16
 80069c2:	68f9      	ldr	r1, [r7, #12]
 80069c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069c8:	4313      	orrs	r3, r2
 80069ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d11a      	bne.n	8006a18 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	791b      	ldrb	r3, [r3, #4]
 80069fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069fe:	430b      	orrs	r3, r1
 8006a00:	4313      	orrs	r3, r2
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a16:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
	...

08006a28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	785b      	ldrb	r3, [r3, #1]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d161      	bne.n	8006b08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a5a:	d11f      	bne.n	8006a9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	0151      	lsls	r1, r2, #5
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	440a      	add	r2, r1
 8006a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	0151      	lsls	r1, r2, #5
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	440a      	add	r2, r1
 8006a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	f003 030f 	and.w	r3, r3, #15
 8006aac:	2101      	movs	r1, #1
 8006aae:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	68f9      	ldr	r1, [r7, #12]
 8006ab8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006abc:	4013      	ands	r3, r2
 8006abe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac6:	69da      	ldr	r2, [r3, #28]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	015a      	lsls	r2, r3, #5
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4413      	add	r3, r2
 8006aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	0159      	lsls	r1, r3, #5
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	440b      	add	r3, r1
 8006afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afe:	4619      	mov	r1, r3
 8006b00:	4b35      	ldr	r3, [pc, #212]	; (8006bd8 <USB_DeactivateEndpoint+0x1b0>)
 8006b02:	4013      	ands	r3, r2
 8006b04:	600b      	str	r3, [r1, #0]
 8006b06:	e060      	b.n	8006bca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b1e:	d11f      	bne.n	8006b60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	2101      	movs	r1, #1
 8006b72:	fa01 f303 	lsl.w	r3, r1, r3
 8006b76:	041b      	lsls	r3, r3, #16
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b80:	4013      	ands	r3, r2
 8006b82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8a:	69da      	ldr	r2, [r3, #28]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	2101      	movs	r1, #1
 8006b96:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9a:	041b      	lsls	r3, r3, #16
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	68f9      	ldr	r1, [r7, #12]
 8006ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	0159      	lsls	r1, r3, #5
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	440b      	add	r3, r1
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <USB_DeactivateEndpoint+0x1b4>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	ec337800 	.word	0xec337800
 8006bdc:	eff37800 	.word	0xeff37800

08006be0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08a      	sub	sp, #40	; 0x28
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	4613      	mov	r3, r2
 8006bec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	785b      	ldrb	r3, [r3, #1]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	f040 815c 	bne.w	8006eba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d132      	bne.n	8006c70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	69ba      	ldr	r2, [r7, #24]
 8006c1a:	0151      	lsls	r1, r2, #5
 8006c1c:	69fa      	ldr	r2, [r7, #28]
 8006c1e:	440a      	add	r2, r1
 8006c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	0151      	lsls	r1, r2, #5
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	440a      	add	r2, r1
 8006c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c68:	0cdb      	lsrs	r3, r3, #19
 8006c6a:	04db      	lsls	r3, r3, #19
 8006c6c:	6113      	str	r3, [r2, #16]
 8006c6e:	e074      	b.n	8006d5a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	69fa      	ldr	r2, [r7, #28]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c8a:	0cdb      	lsrs	r3, r3, #19
 8006c8c:	04db      	lsls	r3, r3, #19
 8006c8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	0151      	lsls	r1, r2, #5
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	440a      	add	r2, r1
 8006ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006caa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	6999      	ldr	r1, [r3, #24]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	440b      	add	r3, r1
 8006ccc:	1e59      	subs	r1, r3, #1
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cd6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006cd8:	4b9d      	ldr	r3, [pc, #628]	; (8006f50 <USB_EPStartXfer+0x370>)
 8006cda:	400b      	ands	r3, r1
 8006cdc:	69b9      	ldr	r1, [r7, #24]
 8006cde:	0148      	lsls	r0, r1, #5
 8006ce0:	69f9      	ldr	r1, [r7, #28]
 8006ce2:	4401      	add	r1, r0
 8006ce4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf8:	691a      	ldr	r2, [r3, #16]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d02:	69b9      	ldr	r1, [r7, #24]
 8006d04:	0148      	lsls	r0, r1, #5
 8006d06:	69f9      	ldr	r1, [r7, #28]
 8006d08:	4401      	add	r1, r0
 8006d0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	791b      	ldrb	r3, [r3, #4]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d11f      	bne.n	8006d5a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	69ba      	ldr	r2, [r7, #24]
 8006d2a:	0151      	lsls	r1, r2, #5
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	440a      	add	r2, r1
 8006d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d34:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006d38:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	0151      	lsls	r1, r2, #5
 8006d4c:	69fa      	ldr	r2, [r7, #28]
 8006d4e:	440a      	add	r2, r1
 8006d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d58:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006d5a:	79fb      	ldrb	r3, [r7, #7]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d14b      	bne.n	8006df8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d74:	461a      	mov	r2, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	791b      	ldrb	r3, [r3, #4]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d128      	bne.n	8006dd6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d110      	bne.n	8006db6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	0151      	lsls	r1, r2, #5
 8006da6:	69fa      	ldr	r2, [r7, #28]
 8006da8:	440a      	add	r2, r1
 8006daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	e00f      	b.n	8006dd6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	0151      	lsls	r1, r2, #5
 8006dc8:	69fa      	ldr	r2, [r7, #28]
 8006dca:	440a      	add	r2, r1
 8006dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	0151      	lsls	r1, r2, #5
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	440a      	add	r2, r1
 8006dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	e133      	b.n	8007060 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	0151      	lsls	r1, r2, #5
 8006e0a:	69fa      	ldr	r2, [r7, #28]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006e16:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	791b      	ldrb	r3, [r3, #4]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d015      	beq.n	8006e4c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 811b 	beq.w	8007060 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e40:	69f9      	ldr	r1, [r7, #28]
 8006e42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e46:	4313      	orrs	r3, r2
 8006e48:	634b      	str	r3, [r1, #52]	; 0x34
 8006e4a:	e109      	b.n	8007060 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d110      	bne.n	8006e7e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	0151      	lsls	r1, r2, #5
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	440a      	add	r2, r1
 8006e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	e00f      	b.n	8006e9e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	69fa      	ldr	r2, [r7, #28]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e9c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	6919      	ldr	r1, [r3, #16]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	781a      	ldrb	r2, [r3, #0]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	b298      	uxth	r0, r3
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 fade 	bl	8007474 <USB_WritePacket>
 8006eb8:	e0d2      	b.n	8007060 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ed4:	0cdb      	lsrs	r3, r3, #19
 8006ed6:	04db      	lsls	r3, r3, #19
 8006ed8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	015a      	lsls	r2, r3, #5
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	0151      	lsls	r1, r2, #5
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	440a      	add	r2, r1
 8006ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ef8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006efc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d126      	bne.n	8006f54 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f12:	691a      	ldr	r2, [r3, #16]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f1c:	69b9      	ldr	r1, [r7, #24]
 8006f1e:	0148      	lsls	r0, r1, #5
 8006f20:	69f9      	ldr	r1, [r7, #28]
 8006f22:	4401      	add	r1, r0
 8006f24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	0151      	lsls	r1, r2, #5
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	440a      	add	r2, r1
 8006f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f4a:	6113      	str	r3, [r2, #16]
 8006f4c:	e03a      	b.n	8006fc4 <USB_EPStartXfer+0x3e4>
 8006f4e:	bf00      	nop
 8006f50:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	699a      	ldr	r2, [r3, #24]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	1e5a      	subs	r2, r3, #1
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f68:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	8afa      	ldrh	r2, [r7, #22]
 8006f70:	fb03 f202 	mul.w	r2, r3, r2
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f84:	691a      	ldr	r2, [r3, #16]
 8006f86:	8afb      	ldrh	r3, [r7, #22]
 8006f88:	04d9      	lsls	r1, r3, #19
 8006f8a:	4b38      	ldr	r3, [pc, #224]	; (800706c <USB_EPStartXfer+0x48c>)
 8006f8c:	400b      	ands	r3, r1
 8006f8e:	69b9      	ldr	r1, [r7, #24]
 8006f90:	0148      	lsls	r0, r1, #5
 8006f92:	69f9      	ldr	r1, [r7, #28]
 8006f94:	4401      	add	r1, r0
 8006f96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	015a      	lsls	r2, r3, #5
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006faa:	691a      	ldr	r2, [r3, #16]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fb4:	69b9      	ldr	r1, [r7, #24]
 8006fb6:	0148      	lsls	r0, r1, #5
 8006fb8:	69f9      	ldr	r1, [r7, #28]
 8006fba:	4401      	add	r1, r0
 8006fbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fc4:	79fb      	ldrb	r3, [r7, #7]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d10d      	bne.n	8006fe6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d009      	beq.n	8006fe6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	6919      	ldr	r1, [r3, #16]
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	015a      	lsls	r2, r3, #5
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	4413      	add	r3, r2
 8006fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe2:	460a      	mov	r2, r1
 8006fe4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	791b      	ldrb	r3, [r3, #4]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d128      	bne.n	8007040 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d110      	bne.n	8007020 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	0151      	lsls	r1, r2, #5
 8007010:	69fa      	ldr	r2, [r7, #28]
 8007012:	440a      	add	r2, r1
 8007014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007018:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	e00f      	b.n	8007040 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	0151      	lsls	r1, r2, #5
 8007032:	69fa      	ldr	r2, [r7, #28]
 8007034:	440a      	add	r2, r1
 8007036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800703a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800703e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	4413      	add	r3, r2
 8007048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	0151      	lsls	r1, r2, #5
 8007052:	69fa      	ldr	r2, [r7, #28]
 8007054:	440a      	add	r2, r1
 8007056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800705a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800705e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3720      	adds	r7, #32
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	1ff80000 	.word	0x1ff80000

08007070 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007070:	b480      	push	{r7}
 8007072:	b087      	sub	sp, #28
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	4613      	mov	r3, r2
 800707c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	2b01      	cmp	r3, #1
 800708e:	f040 80ce 	bne.w	800722e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d132      	bne.n	8007100 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	0151      	lsls	r1, r2, #5
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	440a      	add	r2, r1
 80070b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	0151      	lsls	r1, r2, #5
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	440a      	add	r2, r1
 80070d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	0151      	lsls	r1, r2, #5
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	440a      	add	r2, r1
 80070f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f8:	0cdb      	lsrs	r3, r3, #19
 80070fa:	04db      	lsls	r3, r3, #19
 80070fc:	6113      	str	r3, [r2, #16]
 80070fe:	e04e      	b.n	800719e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800711a:	0cdb      	lsrs	r3, r3, #19
 800711c:	04db      	lsls	r3, r3, #19
 800711e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800713a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800713e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007142:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	699a      	ldr	r2, [r3, #24]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	429a      	cmp	r2, r3
 800714e:	d903      	bls.n	8007158 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	440a      	add	r2, r1
 800716e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007172:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007176:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007184:	691a      	ldr	r2, [r3, #16]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800718e:	6939      	ldr	r1, [r7, #16]
 8007190:	0148      	lsls	r0, r1, #5
 8007192:	6979      	ldr	r1, [r7, #20]
 8007194:	4401      	add	r1, r0
 8007196:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800719a:	4313      	orrs	r3, r2
 800719c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800719e:	79fb      	ldrb	r3, [r7, #7]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d11e      	bne.n	80071e2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d009      	beq.n	80071c0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b8:	461a      	mov	r2, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	695b      	ldr	r3, [r3, #20]
 80071be:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	0151      	lsls	r1, r2, #5
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	440a      	add	r2, r1
 80071d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	e097      	b.n	8007312 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007200:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 8083 	beq.w	8007312 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	2101      	movs	r1, #1
 800721e:	fa01 f303 	lsl.w	r3, r1, r3
 8007222:	6979      	ldr	r1, [r7, #20]
 8007224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007228:	4313      	orrs	r3, r2
 800722a:	634b      	str	r3, [r1, #52]	; 0x34
 800722c:	e071      	b.n	8007312 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	440a      	add	r2, r1
 8007244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007248:	0cdb      	lsrs	r3, r3, #19
 800724a:	04db      	lsls	r3, r3, #19
 800724c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	0151      	lsls	r1, r2, #5
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	440a      	add	r2, r1
 8007264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007268:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800726c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007270:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d003      	beq.n	8007282 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	0151      	lsls	r1, r2, #5
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	440a      	add	r2, r1
 80072a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c0:	6939      	ldr	r1, [r7, #16]
 80072c2:	0148      	lsls	r0, r1, #5
 80072c4:	6979      	ldr	r1, [r7, #20]
 80072c6:	4401      	add	r1, r0
 80072c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072cc:	4313      	orrs	r3, r2
 80072ce:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d10d      	bne.n	80072f2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d009      	beq.n	80072f2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6919      	ldr	r1, [r3, #16]
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ee:	460a      	mov	r2, r1
 80072f0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	0151      	lsls	r1, r2, #5
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	440a      	add	r2, r1
 8007308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800730c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007310:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d14a      	bne.n	80073d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007356:	f040 8086 	bne.w	8007466 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	683a      	ldr	r2, [r7, #0]
 800736c:	7812      	ldrb	r2, [r2, #0]
 800736e:	0151      	lsls	r1, r2, #5
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	440a      	add	r2, r1
 8007374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007378:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800737c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	683a      	ldr	r2, [r7, #0]
 8007390:	7812      	ldrb	r2, [r2, #0]
 8007392:	0151      	lsls	r1, r2, #5
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	440a      	add	r2, r1
 8007398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800739c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3301      	adds	r3, #1
 80073a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d902      	bls.n	80073b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	75fb      	strb	r3, [r7, #23]
          break;
 80073b6:	e056      	b.n	8007466 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073d0:	d0e7      	beq.n	80073a2 <USB_EPStopXfer+0x82>
 80073d2:	e048      	b.n	8007466 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073ec:	d13b      	bne.n	8007466 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	7812      	ldrb	r2, [r2, #0]
 8007402:	0151      	lsls	r1, r2, #5
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	440a      	add	r2, r1
 8007408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800740c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007410:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	7812      	ldrb	r2, [r2, #0]
 8007426:	0151      	lsls	r1, r2, #5
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	440a      	add	r2, r1
 800742c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007434:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3301      	adds	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007442:	4293      	cmp	r3, r2
 8007444:	d902      	bls.n	800744c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	75fb      	strb	r3, [r7, #23]
          break;
 800744a:	e00c      	b.n	8007466 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007460:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007464:	d0e7      	beq.n	8007436 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007466:	7dfb      	ldrb	r3, [r7, #23]
}
 8007468:	4618      	mov	r0, r3
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007474:	b480      	push	{r7}
 8007476:	b089      	sub	sp, #36	; 0x24
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	4611      	mov	r1, r2
 8007480:	461a      	mov	r2, r3
 8007482:	460b      	mov	r3, r1
 8007484:	71fb      	strb	r3, [r7, #7]
 8007486:	4613      	mov	r3, r2
 8007488:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007492:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007496:	2b00      	cmp	r3, #0
 8007498:	d123      	bne.n	80074e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800749a:	88bb      	ldrh	r3, [r7, #4]
 800749c:	3303      	adds	r3, #3
 800749e:	089b      	lsrs	r3, r3, #2
 80074a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074a2:	2300      	movs	r3, #0
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	e018      	b.n	80074da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	031a      	lsls	r2, r3, #12
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b4:	461a      	mov	r2, r3
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	3301      	adds	r3, #1
 80074c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	3301      	adds	r3, #1
 80074c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	3301      	adds	r3, #1
 80074cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	3301      	adds	r3, #1
 80074d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	3301      	adds	r3, #1
 80074d8:	61bb      	str	r3, [r7, #24]
 80074da:	69ba      	ldr	r2, [r7, #24]
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d3e2      	bcc.n	80074a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3724      	adds	r7, #36	; 0x24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b08b      	sub	sp, #44	; 0x2c
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	4613      	mov	r3, r2
 80074fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007506:	88fb      	ldrh	r3, [r7, #6]
 8007508:	089b      	lsrs	r3, r3, #2
 800750a:	b29b      	uxth	r3, r3
 800750c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800750e:	88fb      	ldrh	r3, [r7, #6]
 8007510:	f003 0303 	and.w	r3, r3, #3
 8007514:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007516:	2300      	movs	r3, #0
 8007518:	623b      	str	r3, [r7, #32]
 800751a:	e014      	b.n	8007546 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	601a      	str	r2, [r3, #0]
    pDest++;
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	3301      	adds	r3, #1
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	3301      	adds	r3, #1
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	3301      	adds	r3, #1
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	3301      	adds	r3, #1
 800753e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007540:	6a3b      	ldr	r3, [r7, #32]
 8007542:	3301      	adds	r3, #1
 8007544:	623b      	str	r3, [r7, #32]
 8007546:	6a3a      	ldr	r2, [r7, #32]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	429a      	cmp	r2, r3
 800754c:	d3e6      	bcc.n	800751c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800754e:	8bfb      	ldrh	r3, [r7, #30]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d01e      	beq.n	8007592 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800755e:	461a      	mov	r2, r3
 8007560:	f107 0310 	add.w	r3, r7, #16
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	b2db      	uxtb	r3, r3
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	fa22 f303 	lsr.w	r3, r2, r3
 8007574:	b2da      	uxtb	r2, r3
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	701a      	strb	r2, [r3, #0]
      i++;
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	3301      	adds	r3, #1
 800757e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	3301      	adds	r3, #1
 8007584:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007586:	8bfb      	ldrh	r3, [r7, #30]
 8007588:	3b01      	subs	r3, #1
 800758a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800758c:	8bfb      	ldrh	r3, [r7, #30]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1ea      	bne.n	8007568 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007594:	4618      	mov	r0, r3
 8007596:	372c      	adds	r7, #44	; 0x2c
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	785b      	ldrb	r3, [r3, #1]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d12c      	bne.n	8007616 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	db12      	blt.n	80075f4 <USB_EPSetStall+0x54>
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00f      	beq.n	80075f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	0151      	lsls	r1, r2, #5
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	440a      	add	r2, r1
 80075ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	0151      	lsls	r1, r2, #5
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	440a      	add	r2, r1
 800760a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800760e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	e02b      	b.n	800766e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	015a      	lsls	r2, r3, #5
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4413      	add	r3, r2
 800761e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	db12      	blt.n	800764e <USB_EPSetStall+0xae>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00f      	beq.n	800764e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007648:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800764c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	0151      	lsls	r1, r2, #5
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	440a      	add	r2, r1
 8007664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800766c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	785b      	ldrb	r3, [r3, #1]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d128      	bne.n	80076ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	0151      	lsls	r1, r2, #5
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	440a      	add	r2, r1
 80076ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	791b      	ldrb	r3, [r3, #4]
 80076bc:	2b03      	cmp	r3, #3
 80076be:	d003      	beq.n	80076c8 <USB_EPClearStall+0x4c>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	791b      	ldrb	r3, [r3, #4]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d138      	bne.n	800773a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	0151      	lsls	r1, r2, #5
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	440a      	add	r2, r1
 80076de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	e027      	b.n	800773a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	0151      	lsls	r1, r2, #5
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	440a      	add	r2, r1
 8007700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007704:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007708:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	791b      	ldrb	r3, [r3, #4]
 800770e:	2b03      	cmp	r3, #3
 8007710:	d003      	beq.n	800771a <USB_EPClearStall+0x9e>
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	791b      	ldrb	r3, [r3, #4]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d10f      	bne.n	800773a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	0151      	lsls	r1, r2, #5
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	440a      	add	r2, r1
 8007730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007738:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007766:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800776a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800777c:	68f9      	ldr	r1, [r7, #12]
 800777e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007782:	4313      	orrs	r3, r2
 8007784:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3714      	adds	r7, #20
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077ae:	f023 0303 	bic.w	r3, r3, #3
 80077b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077c2:	f023 0302 	bic.w	r3, r3, #2
 80077c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077f0:	f023 0303 	bic.w	r3, r3, #3
 80077f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007804:	f043 0302 	orr.w	r3, r3, #2
 8007808:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	695b      	ldr	r3, [r3, #20]
 8007824:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	4013      	ands	r3, r2
 800782e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007830:	68fb      	ldr	r3, [r7, #12]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800783e:	b480      	push	{r7}
 8007840:	b085      	sub	sp, #20
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	4013      	ands	r3, r2
 8007860:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	0c1b      	lsrs	r3, r3, #16
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007872:	b480      	push	{r7}
 8007874:	b085      	sub	sp, #20
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	4013      	ands	r3, r2
 8007894:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	b29b      	uxth	r3, r3
}
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b085      	sub	sp, #20
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	460b      	mov	r3, r1
 80078b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078b6:	78fb      	ldrb	r3, [r7, #3]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	68ba      	ldr	r2, [r7, #8]
 80078d0:	4013      	ands	r3, r2
 80078d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078d4:	68bb      	ldr	r3, [r7, #8]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b087      	sub	sp, #28
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
 80078ea:	460b      	mov	r3, r1
 80078ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f8:	691b      	ldr	r3, [r3, #16]
 80078fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007904:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	fa22 f303 	lsr.w	r3, r2, r3
 8007912:	01db      	lsls	r3, r3, #7
 8007914:	b2db      	uxtb	r3, r3
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	4313      	orrs	r3, r2
 800791a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4013      	ands	r3, r2
 800792e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007930:	68bb      	ldr	r3, [r7, #8]
}
 8007932:	4618      	mov	r0, r3
 8007934:	371c      	adds	r7, #28
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	f003 0301 	and.w	r3, r3, #1
}
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800795a:	b480      	push	{r7}
 800795c:	b085      	sub	sp, #20
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007974:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007978:	f023 0307 	bic.w	r3, r3, #7
 800797c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800798c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007990:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3714      	adds	r7, #20
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	460b      	mov	r3, r1
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	333c      	adds	r3, #60	; 0x3c
 80079b6:	3304      	adds	r3, #4
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	4a26      	ldr	r2, [pc, #152]	; (8007a58 <USB_EP0_OutStart+0xb8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d90a      	bls.n	80079da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079d4:	d101      	bne.n	80079da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	e037      	b.n	8007a4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e0:	461a      	mov	r2, r3
 80079e2:	2300      	movs	r3, #0
 80079e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a08:	f043 0318 	orr.w	r3, r3, #24
 8007a0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a1c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a22:	7afb      	ldrb	r3, [r7, #11]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d10f      	bne.n	8007a48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2e:	461a      	mov	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a42:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	4f54300a 	.word	0x4f54300a

08007a5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	4a13      	ldr	r2, [pc, #76]	; (8007ac0 <USB_CoreReset+0x64>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d901      	bls.n	8007a7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e01b      	b.n	8007ab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	daf2      	bge.n	8007a68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f043 0201 	orr.w	r2, r3, #1
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3301      	adds	r3, #1
 8007a96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <USB_CoreReset+0x64>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d901      	bls.n	8007aa4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e006      	b.n	8007ab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d0f0      	beq.n	8007a92 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	00030d40 	.word	0x00030d40

08007ac4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e03b      	b.n	8007b4e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d106      	bne.n	8007af0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f833 	bl	8007b56 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	f023 0107 	bic.w	r1, r3, #7
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007b2e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	68d1      	ldr	r1, [r2, #12]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	6812      	ldr	r2, [r2, #0]
 8007b3a:	430b      	orrs	r3, r1
 8007b3c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af02      	add	r7, sp, #8
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	60b9      	str	r1, [r7, #8]
 8007b74:	607a      	str	r2, [r7, #4]
 8007b76:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d101      	bne.n	8007b86 <HAL_DMA2D_Start+0x1c>
 8007b82:	2302      	movs	r3, #2
 8007b84:	e018      	b.n	8007bb8 <HAL_DMA2D_Start+0x4e>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2202      	movs	r2, #2
 8007b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	68b9      	ldr	r1, [r7, #8]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 f989 	bl	8007eb8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0201 	orr.w	r2, r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d056      	beq.n	8007c8a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bdc:	f7fb faee 	bl	80031bc <HAL_GetTick>
 8007be0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007be2:	e04b      	b.n	8007c7c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d023      	beq.n	8007c3e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f003 0320 	and.w	r3, r3, #32
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c04:	f043 0202 	orr.w	r2, r3, #2
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d005      	beq.n	8007c22 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1a:	f043 0201 	orr.w	r2, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2221      	movs	r2, #33	; 0x21
 8007c28:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2204      	movs	r2, #4
 8007c2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e0a5      	b.n	8007d8a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c44:	d01a      	beq.n	8007c7c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c46:	f7fb fab9 	bl	80031bc <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d302      	bcc.n	8007c5c <HAL_DMA2D_PollForTransfer+0x9c>
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10f      	bne.n	8007c7c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c60:	f043 0220 	orr.w	r2, r3, #32
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2203      	movs	r2, #3
 8007c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e086      	b.n	8007d8a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0ac      	beq.n	8007be4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	f003 0320 	and.w	r3, r3, #32
 8007c94:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	693a      	ldr	r2, [r7, #16]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d061      	beq.n	8007d70 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cac:	f7fb fa86 	bl	80031bc <HAL_GetTick>
 8007cb0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007cb2:	e056      	b.n	8007d62 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d02e      	beq.n	8007d24 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d005      	beq.n	8007cdc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd4:	f043 0204 	orr.w	r2, r3, #4
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f003 0320 	and.w	r3, r3, #32
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d005      	beq.n	8007cf2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cea:	f043 0202 	orr.w	r2, r3, #2
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d00:	f043 0201 	orr.w	r2, r3, #1
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2229      	movs	r2, #41	; 0x29
 8007d0e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2204      	movs	r2, #4
 8007d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e032      	b.n	8007d8a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2a:	d01a      	beq.n	8007d62 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d2c:	f7fb fa46 	bl	80031bc <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d302      	bcc.n	8007d42 <HAL_DMA2D_PollForTransfer+0x182>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10f      	bne.n	8007d62 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d46:	f043 0220 	orr.w	r2, r3, #32
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2203      	movs	r2, #3
 8007d52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e013      	b.n	8007d8a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f003 0310 	and.w	r3, r3, #16
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0a1      	beq.n	8007cb4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2212      	movs	r2, #18
 8007d76:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_DMA2D_ConfigLayer+0x20>
 8007db0:	2302      	movs	r3, #2
 8007db2:	e079      	b.n	8007ea8 <HAL_DMA2D_ConfigLayer+0x114>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	3318      	adds	r3, #24
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	4413      	add	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	041b      	lsls	r3, r3, #16
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007dde:	4b35      	ldr	r3, [pc, #212]	; (8007eb4 <HAL_DMA2D_ConfigLayer+0x120>)
 8007de0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2b0a      	cmp	r3, #10
 8007de8:	d003      	beq.n	8007df2 <HAL_DMA2D_ConfigLayer+0x5e>
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	2b09      	cmp	r3, #9
 8007df0:	d107      	bne.n	8007e02 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	617b      	str	r3, [r7, #20]
 8007e00:	e005      	b.n	8007e0e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	061b      	lsls	r3, r3, #24
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d120      	bne.n	8007e56 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	43db      	mvns	r3, r3
 8007e1e:	ea02 0103 	and.w	r1, r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	6812      	ldr	r2, [r2, #0]
 8007e34:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b0a      	cmp	r3, #10
 8007e3c:	d003      	beq.n	8007e46 <HAL_DMA2D_ConfigLayer+0xb2>
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	2b09      	cmp	r3, #9
 8007e44:	d127      	bne.n	8007e96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007e52:	629a      	str	r2, [r3, #40]	; 0x28
 8007e54:	e01f      	b.n	8007e96 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69da      	ldr	r2, [r3, #28]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	43db      	mvns	r3, r3
 8007e60:	ea02 0103 	and.w	r1, r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	6812      	ldr	r2, [r2, #0]
 8007e76:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	2b0a      	cmp	r3, #10
 8007e7e:	d003      	beq.n	8007e88 <HAL_DMA2D_ConfigLayer+0xf4>
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	2b09      	cmp	r3, #9
 8007e86:	d106      	bne.n	8007e96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	68da      	ldr	r2, [r3, #12]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007e94:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	371c      	adds	r7, #28
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	ff03000f 	.word	0xff03000f

08007eb8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b08b      	sub	sp, #44	; 0x2c
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
 8007ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ecc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	041a      	lsls	r2, r3, #16
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ef0:	d174      	bne.n	8007fdc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007ef8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f00:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f08:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d108      	bne.n	8007f2a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
 8007f28:	e053      	b.n	8007fd2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d106      	bne.n	8007f40 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f3e:	e048      	b.n	8007fd2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d111      	bne.n	8007f6c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	0cdb      	lsrs	r3, r3, #19
 8007f4c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	0a9b      	lsrs	r3, r3, #10
 8007f52:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	08db      	lsrs	r3, r3, #3
 8007f58:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	02db      	lsls	r3, r3, #11
 8007f62:	4313      	orrs	r3, r2
 8007f64:	697a      	ldr	r2, [r7, #20]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	627b      	str	r3, [r7, #36]	; 0x24
 8007f6a:	e032      	b.n	8007fd2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d117      	bne.n	8007fa4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	0fdb      	lsrs	r3, r3, #31
 8007f78:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	0cdb      	lsrs	r3, r3, #19
 8007f7e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	0adb      	lsrs	r3, r3, #11
 8007f84:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	08db      	lsrs	r3, r3, #3
 8007f8a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	029b      	lsls	r3, r3, #10
 8007f94:	431a      	orrs	r2, r3
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	03db      	lsls	r3, r3, #15
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fa2:	e016      	b.n	8007fd2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	0f1b      	lsrs	r3, r3, #28
 8007fa8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	0d1b      	lsrs	r3, r3, #20
 8007fae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	0b1b      	lsrs	r3, r3, #12
 8007fb4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	091b      	lsrs	r3, r3, #4
 8007fba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	011a      	lsls	r2, r3, #4
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	021b      	lsls	r3, r3, #8
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	031b      	lsls	r3, r3, #12
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8007fda:	e003      	b.n	8007fe4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	60da      	str	r2, [r3, #12]
}
 8007fe4:	bf00      	nop
 8007fe6:	372c      	adds	r7, #44	; 0x2c
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e0bf      	b.n	8008182 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d106      	bne.n	800801c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f8ba 	bl	8008190 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699a      	ldr	r2, [r3, #24]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008032:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6999      	ldr	r1, [r3, #24]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685a      	ldr	r2, [r3, #4]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008048:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	430a      	orrs	r2, r1
 8008056:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6899      	ldr	r1, [r3, #8]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b4a      	ldr	r3, [pc, #296]	; (800818c <HAL_LTDC_Init+0x19c>)
 8008064:	400b      	ands	r3, r1
 8008066:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	695b      	ldr	r3, [r3, #20]
 800806c:	041b      	lsls	r3, r3, #16
 800806e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6899      	ldr	r1, [r3, #8]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	699a      	ldr	r2, [r3, #24]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	431a      	orrs	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68d9      	ldr	r1, [r3, #12]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	4b3e      	ldr	r3, [pc, #248]	; (800818c <HAL_LTDC_Init+0x19c>)
 8008092:	400b      	ands	r3, r1
 8008094:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	041b      	lsls	r3, r3, #16
 800809c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68d9      	ldr	r1, [r3, #12]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1a      	ldr	r2, [r3, #32]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	431a      	orrs	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6919      	ldr	r1, [r3, #16]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	4b33      	ldr	r3, [pc, #204]	; (800818c <HAL_LTDC_Init+0x19c>)
 80080c0:	400b      	ands	r3, r1
 80080c2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	041b      	lsls	r3, r3, #16
 80080ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6919      	ldr	r1, [r3, #16]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6959      	ldr	r1, [r3, #20]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681a      	ldr	r2, [r3, #0]
 80080ec:	4b27      	ldr	r3, [pc, #156]	; (800818c <HAL_LTDC_Init+0x19c>)
 80080ee:	400b      	ands	r3, r1
 80080f0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f6:	041b      	lsls	r3, r3, #16
 80080f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6959      	ldr	r1, [r3, #20]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	431a      	orrs	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008116:	021b      	lsls	r3, r3, #8
 8008118:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008120:	041b      	lsls	r3, r3, #16
 8008122:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008132:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4313      	orrs	r3, r2
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008146:	431a      	orrs	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f042 0206 	orr.w	r2, r2, #6
 800815e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699a      	ldr	r2, [r3, #24]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f042 0201 	orr.w	r2, r2, #1
 800816e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	f000f800 	.word	0xf000f800

08008190 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80081a4:	b5b0      	push	{r4, r5, r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <HAL_LTDC_ConfigLayer+0x1a>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e02c      	b.n	8008218 <HAL_LTDC_ConfigLayer+0x74>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2202      	movs	r2, #2
 80081ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2134      	movs	r1, #52	; 0x34
 80081d4:	fb01 f303 	mul.w	r3, r1, r3
 80081d8:	4413      	add	r3, r2
 80081da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4614      	mov	r4, r2
 80081e2:	461d      	mov	r5, r3
 80081e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f83b 	bl	8008274 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2201      	movs	r2, #1
 8008204:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bdb0      	pop	{r4, r5, r7, pc}

08008220 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_LTDC_EnableDither+0x16>
 8008232:	2302      	movs	r3, #2
 8008234:	e016      	b.n	8008264 <HAL_LTDC_EnableDither+0x44>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2202      	movs	r2, #2
 8008242:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8008246:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <HAL_LTDC_EnableDither+0x50>)
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	4a09      	ldr	r2, [pc, #36]	; (8008270 <HAL_LTDC_EnableDither+0x50>)
 800824c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008250:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	40016800 	.word	0x40016800

08008274 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008274:	b480      	push	{r7}
 8008276:	b089      	sub	sp, #36	; 0x24
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	685a      	ldr	r2, [r3, #4]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	0c1b      	lsrs	r3, r3, #16
 800828c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008290:	4413      	add	r3, r2
 8008292:	041b      	lsls	r3, r3, #16
 8008294:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	01db      	lsls	r3, r3, #7
 80082a0:	4413      	add	r3, r2
 80082a2:	3384      	adds	r3, #132	; 0x84
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	4611      	mov	r1, r2
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	01d2      	lsls	r2, r2, #7
 80082b0:	440a      	add	r2, r1
 80082b2:	3284      	adds	r2, #132	; 0x84
 80082b4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80082b8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	0c1b      	lsrs	r3, r3, #16
 80082c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80082ca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80082cc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4619      	mov	r1, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	01db      	lsls	r3, r3, #7
 80082d8:	440b      	add	r3, r1
 80082da:	3384      	adds	r3, #132	; 0x84
 80082dc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80082e2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082f2:	4413      	add	r3, r2
 80082f4:	041b      	lsls	r3, r3, #16
 80082f6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	461a      	mov	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	01db      	lsls	r3, r3, #7
 8008302:	4413      	add	r3, r2
 8008304:	3384      	adds	r3, #132	; 0x84
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	6812      	ldr	r2, [r2, #0]
 800830c:	4611      	mov	r1, r2
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	01d2      	lsls	r2, r2, #7
 8008312:	440a      	add	r2, r1
 8008314:	3284      	adds	r2, #132	; 0x84
 8008316:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800831a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800832a:	4413      	add	r3, r2
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4619      	mov	r1, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	01db      	lsls	r3, r3, #7
 8008338:	440b      	add	r3, r1
 800833a:	3384      	adds	r3, #132	; 0x84
 800833c:	4619      	mov	r1, r3
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	4313      	orrs	r3, r2
 8008342:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	461a      	mov	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	01db      	lsls	r3, r3, #7
 800834e:	4413      	add	r3, r2
 8008350:	3384      	adds	r3, #132	; 0x84
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	6812      	ldr	r2, [r2, #0]
 8008358:	4611      	mov	r1, r2
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	01d2      	lsls	r2, r2, #7
 800835e:	440a      	add	r2, r1
 8008360:	3284      	adds	r2, #132	; 0x84
 8008362:	f023 0307 	bic.w	r3, r3, #7
 8008366:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	461a      	mov	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	01db      	lsls	r3, r3, #7
 8008372:	4413      	add	r3, r2
 8008374:	3384      	adds	r3, #132	; 0x84
 8008376:	461a      	mov	r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800838e:	041b      	lsls	r3, r3, #16
 8008390:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	061b      	lsls	r3, r3, #24
 8008398:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	01db      	lsls	r3, r3, #7
 80083a4:	4413      	add	r3, r2
 80083a6:	3384      	adds	r3, #132	; 0x84
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	01db      	lsls	r3, r3, #7
 80083b4:	4413      	add	r3, r2
 80083b6:	3384      	adds	r3, #132	; 0x84
 80083b8:	461a      	mov	r2, r3
 80083ba:	2300      	movs	r3, #0
 80083bc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083c4:	461a      	mov	r2, r3
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	431a      	orrs	r2, r3
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	431a      	orrs	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4619      	mov	r1, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	01db      	lsls	r3, r3, #7
 80083d8:	440b      	add	r3, r1
 80083da:	3384      	adds	r3, #132	; 0x84
 80083dc:	4619      	mov	r1, r3
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	01db      	lsls	r3, r3, #7
 80083ee:	4413      	add	r3, r2
 80083f0:	3384      	adds	r3, #132	; 0x84
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	6812      	ldr	r2, [r2, #0]
 80083f8:	4611      	mov	r1, r2
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	01d2      	lsls	r2, r2, #7
 80083fe:	440a      	add	r2, r1
 8008400:	3284      	adds	r2, #132	; 0x84
 8008402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008406:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	01db      	lsls	r3, r3, #7
 8008412:	4413      	add	r3, r2
 8008414:	3384      	adds	r3, #132	; 0x84
 8008416:	461a      	mov	r2, r3
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	01db      	lsls	r3, r3, #7
 8008428:	4413      	add	r3, r2
 800842a:	3384      	adds	r3, #132	; 0x84
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	6812      	ldr	r2, [r2, #0]
 8008432:	4611      	mov	r1, r2
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	01d2      	lsls	r2, r2, #7
 8008438:	440a      	add	r2, r1
 800843a:	3284      	adds	r2, #132	; 0x84
 800843c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008440:	f023 0307 	bic.w	r3, r3, #7
 8008444:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	69da      	ldr	r2, [r3, #28]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	68f9      	ldr	r1, [r7, #12]
 8008450:	6809      	ldr	r1, [r1, #0]
 8008452:	4608      	mov	r0, r1
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	01c9      	lsls	r1, r1, #7
 8008458:	4401      	add	r1, r0
 800845a:	3184      	adds	r1, #132	; 0x84
 800845c:	4313      	orrs	r3, r2
 800845e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	01db      	lsls	r3, r3, #7
 800846a:	4413      	add	r3, r2
 800846c:	3384      	adds	r3, #132	; 0x84
 800846e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	461a      	mov	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	01db      	lsls	r3, r3, #7
 800847a:	4413      	add	r3, r2
 800847c:	3384      	adds	r3, #132	; 0x84
 800847e:	461a      	mov	r2, r3
 8008480:	2300      	movs	r3, #0
 8008482:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	461a      	mov	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	01db      	lsls	r3, r3, #7
 800848e:	4413      	add	r3, r2
 8008490:	3384      	adds	r3, #132	; 0x84
 8008492:	461a      	mov	r2, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d102      	bne.n	80084a8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80084a2:	2304      	movs	r3, #4
 80084a4:	61fb      	str	r3, [r7, #28]
 80084a6:	e01b      	b.n	80084e0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d102      	bne.n	80084b6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80084b0:	2303      	movs	r3, #3
 80084b2:	61fb      	str	r3, [r7, #28]
 80084b4:	e014      	b.n	80084e0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	d00b      	beq.n	80084d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d007      	beq.n	80084d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80084ca:	2b03      	cmp	r3, #3
 80084cc:	d003      	beq.n	80084d6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80084d2:	2b07      	cmp	r3, #7
 80084d4:	d102      	bne.n	80084dc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80084d6:	2302      	movs	r3, #2
 80084d8:	61fb      	str	r3, [r7, #28]
 80084da:	e001      	b.n	80084e0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80084dc:	2301      	movs	r3, #1
 80084de:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	461a      	mov	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	01db      	lsls	r3, r3, #7
 80084ea:	4413      	add	r3, r2
 80084ec:	3384      	adds	r3, #132	; 0x84
 80084ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f0:	68fa      	ldr	r2, [r7, #12]
 80084f2:	6812      	ldr	r2, [r2, #0]
 80084f4:	4611      	mov	r1, r2
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	01d2      	lsls	r2, r2, #7
 80084fa:	440a      	add	r2, r1
 80084fc:	3284      	adds	r2, #132	; 0x84
 80084fe:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008502:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	69fa      	ldr	r2, [r7, #28]
 800850a:	fb02 f303 	mul.w	r3, r2, r3
 800850e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	6859      	ldr	r1, [r3, #4]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	1acb      	subs	r3, r1, r3
 800851a:	69f9      	ldr	r1, [r7, #28]
 800851c:	fb01 f303 	mul.w	r3, r1, r3
 8008520:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008522:	68f9      	ldr	r1, [r7, #12]
 8008524:	6809      	ldr	r1, [r1, #0]
 8008526:	4608      	mov	r0, r1
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	01c9      	lsls	r1, r1, #7
 800852c:	4401      	add	r1, r0
 800852e:	3184      	adds	r1, #132	; 0x84
 8008530:	4313      	orrs	r3, r2
 8008532:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	461a      	mov	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	01db      	lsls	r3, r3, #7
 800853e:	4413      	add	r3, r2
 8008540:	3384      	adds	r3, #132	; 0x84
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	6812      	ldr	r2, [r2, #0]
 8008548:	4611      	mov	r1, r2
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	01d2      	lsls	r2, r2, #7
 800854e:	440a      	add	r2, r1
 8008550:	3284      	adds	r2, #132	; 0x84
 8008552:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008556:	f023 0307 	bic.w	r3, r3, #7
 800855a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	01db      	lsls	r3, r3, #7
 8008566:	4413      	add	r3, r2
 8008568:	3384      	adds	r3, #132	; 0x84
 800856a:	461a      	mov	r2, r3
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	01db      	lsls	r3, r3, #7
 800857c:	4413      	add	r3, r2
 800857e:	3384      	adds	r3, #132	; 0x84
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	6812      	ldr	r2, [r2, #0]
 8008586:	4611      	mov	r1, r2
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	01d2      	lsls	r2, r2, #7
 800858c:	440a      	add	r2, r1
 800858e:	3284      	adds	r2, #132	; 0x84
 8008590:	f043 0301 	orr.w	r3, r3, #1
 8008594:	6013      	str	r3, [r2, #0]
}
 8008596:	bf00      	nop
 8008598:	3724      	adds	r7, #36	; 0x24
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b082      	sub	sp, #8
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e025      	b.n	8008602 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d106      	bne.n	80085d0 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f81d 	bl	800860a <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	3304      	adds	r3, #4
 80085e0:	4619      	mov	r1, r3
 80085e2:	4610      	mov	r0, r2
 80085e4:	f000 fe6a 	bl	80092bc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	461a      	mov	r2, r3
 80085f2:	6839      	ldr	r1, [r7, #0]
 80085f4:	f000 febf 	bl	8009376 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008600:	2300      	movs	r3, #0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8008612:	bf00      	nop
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b086      	sub	sp, #24
 8008622:	af00      	add	r7, sp, #0
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	60b9      	str	r1, [r7, #8]
 8008628:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008630:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008632:	7dfb      	ldrb	r3, [r7, #23]
 8008634:	2b02      	cmp	r3, #2
 8008636:	d101      	bne.n	800863c <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008638:	2302      	movs	r3, #2
 800863a:	e021      	b.n	8008680 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800863c:	7dfb      	ldrb	r3, [r7, #23]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d002      	beq.n	8008648 <HAL_SDRAM_SendCommand+0x2a>
 8008642:	7dfb      	ldrb	r3, [r7, #23]
 8008644:	2b05      	cmp	r3, #5
 8008646:	d118      	bne.n	800867a <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2202      	movs	r2, #2
 800864c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	68b9      	ldr	r1, [r7, #8]
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fef5 	bl	8009448 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b02      	cmp	r3, #2
 8008664:	d104      	bne.n	8008670 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2205      	movs	r2, #5
 800866a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800866e:	e006      	b.n	800867e <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008678:	e001      	b.n	800867e <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e000      	b.n	8008680 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b02      	cmp	r3, #2
 800869c:	d101      	bne.n	80086a2 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800869e:	2302      	movs	r3, #2
 80086a0:	e016      	b.n	80086d0 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d10f      	bne.n	80086ce <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2202      	movs	r2, #2
 80086b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 ff00 	bl	80094c2 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e000      	b.n	80086d0 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e07b      	b.n	80087e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d108      	bne.n	8008704 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086fa:	d009      	beq.n	8008710 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	61da      	str	r2, [r3, #28]
 8008702:	e005      	b.n	8008710 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d106      	bne.n	8008730 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f885 	bl	800883a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008746:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008758:	431a      	orrs	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008762:	431a      	orrs	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	f003 0302 	and.w	r3, r3, #2
 800876c:	431a      	orrs	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	431a      	orrs	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008780:	431a      	orrs	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	69db      	ldr	r3, [r3, #28]
 8008786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800878a:	431a      	orrs	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a1b      	ldr	r3, [r3, #32]
 8008790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008794:	ea42 0103 	orr.w	r1, r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	0c1b      	lsrs	r3, r3, #16
 80087ae:	f003 0104 	and.w	r1, r3, #4
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	f003 0210 	and.w	r2, r3, #16
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	69da      	ldr	r2, [r3, #28]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d101      	bne.n	80087fc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e01a      	b.n	8008832 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2202      	movs	r2, #2
 8008800:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008812:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f81a 	bl	800884e <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b088      	sub	sp, #32
 8008866:	af00      	add	r7, sp, #0
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	603b      	str	r3, [r7, #0]
 800886e:	4613      	mov	r3, r2
 8008870:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800887c:	2b01      	cmp	r3, #1
 800887e:	d101      	bne.n	8008884 <HAL_SPI_Transmit+0x22>
 8008880:	2302      	movs	r3, #2
 8008882:	e126      	b.n	8008ad2 <HAL_SPI_Transmit+0x270>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800888c:	f7fa fc96 	bl	80031bc <HAL_GetTick>
 8008890:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008892:	88fb      	ldrh	r3, [r7, #6]
 8008894:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d002      	beq.n	80088a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80088a2:	2302      	movs	r3, #2
 80088a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088a6:	e10b      	b.n	8008ac0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <HAL_SPI_Transmit+0x52>
 80088ae:	88fb      	ldrh	r3, [r7, #6]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d102      	bne.n	80088ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80088b8:	e102      	b.n	8008ac0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2203      	movs	r2, #3
 80088be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	88fa      	ldrh	r2, [r7, #6]
 80088d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	88fa      	ldrh	r2, [r7, #6]
 80088d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2200      	movs	r2, #0
 80088e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008900:	d10f      	bne.n	8008922 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008910:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008920:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800892c:	2b40      	cmp	r3, #64	; 0x40
 800892e:	d007      	beq.n	8008940 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800893e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008948:	d14b      	bne.n	80089e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d002      	beq.n	8008958 <HAL_SPI_Transmit+0xf6>
 8008952:	8afb      	ldrh	r3, [r7, #22]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d13e      	bne.n	80089d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895c:	881a      	ldrh	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008968:	1c9a      	adds	r2, r3, #2
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008972:	b29b      	uxth	r3, r3
 8008974:	3b01      	subs	r3, #1
 8008976:	b29a      	uxth	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800897c:	e02b      	b.n	80089d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f003 0302 	and.w	r3, r3, #2
 8008988:	2b02      	cmp	r3, #2
 800898a:	d112      	bne.n	80089b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008990:	881a      	ldrh	r2, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	1c9a      	adds	r2, r3, #2
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	3b01      	subs	r3, #1
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80089b0:	e011      	b.n	80089d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089b2:	f7fa fc03 	bl	80031bc <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d803      	bhi.n	80089ca <HAL_SPI_Transmit+0x168>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c8:	d102      	bne.n	80089d0 <HAL_SPI_Transmit+0x16e>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d102      	bne.n	80089d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80089d4:	e074      	b.n	8008ac0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089da:	b29b      	uxth	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1ce      	bne.n	800897e <HAL_SPI_Transmit+0x11c>
 80089e0:	e04c      	b.n	8008a7c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <HAL_SPI_Transmit+0x18e>
 80089ea:	8afb      	ldrh	r3, [r7, #22]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d140      	bne.n	8008a72 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	330c      	adds	r3, #12
 80089fa:	7812      	ldrb	r2, [r2, #0]
 80089fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a02:	1c5a      	adds	r2, r3, #1
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008a16:	e02c      	b.n	8008a72 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	f003 0302 	and.w	r3, r3, #2
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d113      	bne.n	8008a4e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	330c      	adds	r3, #12
 8008a30:	7812      	ldrb	r2, [r2, #0]
 8008a32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	3b01      	subs	r3, #1
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8008a4c:	e011      	b.n	8008a72 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a4e:	f7fa fbb5 	bl	80031bc <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d803      	bhi.n	8008a66 <HAL_SPI_Transmit+0x204>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a64:	d102      	bne.n	8008a6c <HAL_SPI_Transmit+0x20a>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d102      	bne.n	8008a72 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008a70:	e026      	b.n	8008ac0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1cd      	bne.n	8008a18 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008a7c:	69ba      	ldr	r2, [r7, #24]
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 fbd9 	bl	8009238 <SPI_EndRxTxTransaction>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2220      	movs	r2, #32
 8008a90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10a      	bne.n	8008ab0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	613b      	str	r3, [r7, #16]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	613b      	str	r3, [r7, #16]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	613b      	str	r3, [r7, #16]
 8008aae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	77fb      	strb	r3, [r7, #31]
 8008abc:	e000      	b.n	8008ac0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8008abe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008ad0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3720      	adds	r7, #32
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b088      	sub	sp, #32
 8008ade:	af02      	add	r7, sp, #8
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	603b      	str	r3, [r7, #0]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008af6:	d112      	bne.n	8008b1e <HAL_SPI_Receive+0x44>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10e      	bne.n	8008b1e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2204      	movs	r2, #4
 8008b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008b08:	88fa      	ldrh	r2, [r7, #6]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	68b9      	ldr	r1, [r7, #8]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f000 f8f1 	bl	8008cfc <HAL_SPI_TransmitReceive>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	e0ea      	b.n	8008cf4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d101      	bne.n	8008b2c <HAL_SPI_Receive+0x52>
 8008b28:	2302      	movs	r3, #2
 8008b2a:	e0e3      	b.n	8008cf4 <HAL_SPI_Receive+0x21a>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b34:	f7fa fb42 	bl	80031bc <HAL_GetTick>
 8008b38:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d002      	beq.n	8008b4c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008b46:	2302      	movs	r3, #2
 8008b48:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b4a:	e0ca      	b.n	8008ce2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <HAL_SPI_Receive+0x7e>
 8008b52:	88fb      	ldrh	r3, [r7, #6]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d102      	bne.n	8008b5e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b5c:	e0c1      	b.n	8008ce2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2204      	movs	r2, #4
 8008b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	88fa      	ldrh	r2, [r7, #6]
 8008b76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	88fa      	ldrh	r2, [r7, #6]
 8008b7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ba4:	d10f      	bne.n	8008bc6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bc4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd0:	2b40      	cmp	r3, #64	; 0x40
 8008bd2:	d007      	beq.n	8008be4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008be2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d162      	bne.n	8008cb2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008bec:	e02e      	b.n	8008c4c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d115      	bne.n	8008c28 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f103 020c 	add.w	r2, r3, #12
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	7812      	ldrb	r2, [r2, #0]
 8008c0a:	b2d2      	uxtb	r2, r2
 8008c0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c26:	e011      	b.n	8008c4c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c28:	f7fa fac8 	bl	80031bc <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	683a      	ldr	r2, [r7, #0]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d803      	bhi.n	8008c40 <HAL_SPI_Receive+0x166>
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3e:	d102      	bne.n	8008c46 <HAL_SPI_Receive+0x16c>
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d102      	bne.n	8008c4c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008c4a:	e04a      	b.n	8008ce2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1cb      	bne.n	8008bee <HAL_SPI_Receive+0x114>
 8008c56:	e031      	b.n	8008cbc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d113      	bne.n	8008c8e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c70:	b292      	uxth	r2, r2
 8008c72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c78:	1c9a      	adds	r2, r3, #2
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	3b01      	subs	r3, #1
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c8c:	e011      	b.n	8008cb2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c8e:	f7fa fa95 	bl	80031bc <HAL_GetTick>
 8008c92:	4602      	mov	r2, r0
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	683a      	ldr	r2, [r7, #0]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d803      	bhi.n	8008ca6 <HAL_SPI_Receive+0x1cc>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca4:	d102      	bne.n	8008cac <HAL_SPI_Receive+0x1d2>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d102      	bne.n	8008cb2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008cb0:	e017      	b.n	8008ce2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1cd      	bne.n	8008c58 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 fa53 	bl	800916c <SPI_EndRxTransaction>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2220      	movs	r2, #32
 8008cd0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	75fb      	strb	r3, [r7, #23]
 8008cde:	e000      	b.n	8008ce2 <HAL_SPI_Receive+0x208>
  }

error :
 8008ce0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08c      	sub	sp, #48	; 0x30
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d101      	bne.n	8008d22 <HAL_SPI_TransmitReceive+0x26>
 8008d1e:	2302      	movs	r3, #2
 8008d20:	e18a      	b.n	8009038 <HAL_SPI_TransmitReceive+0x33c>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d2a:	f7fa fa47 	bl	80031bc <HAL_GetTick>
 8008d2e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008d40:	887b      	ldrh	r3, [r7, #2]
 8008d42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d00f      	beq.n	8008d6c <HAL_SPI_TransmitReceive+0x70>
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d52:	d107      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d103      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x68>
 8008d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d003      	beq.n	8008d6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d64:	2302      	movs	r3, #2
 8008d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d6a:	e15b      	b.n	8009024 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d005      	beq.n	8008d7e <HAL_SPI_TransmitReceive+0x82>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d002      	beq.n	8008d7e <HAL_SPI_TransmitReceive+0x82>
 8008d78:	887b      	ldrh	r3, [r7, #2]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d103      	bne.n	8008d86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008d84:	e14e      	b.n	8009024 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d003      	beq.n	8008d9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2205      	movs	r2, #5
 8008d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	887a      	ldrh	r2, [r7, #2]
 8008daa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	887a      	ldrh	r2, [r7, #2]
 8008db0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	887a      	ldrh	r2, [r7, #2]
 8008dbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	887a      	ldrh	r2, [r7, #2]
 8008dc2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dda:	2b40      	cmp	r3, #64	; 0x40
 8008ddc:	d007      	beq.n	8008dee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008df6:	d178      	bne.n	8008eea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <HAL_SPI_TransmitReceive+0x10a>
 8008e00:	8b7b      	ldrh	r3, [r7, #26]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d166      	bne.n	8008ed4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0a:	881a      	ldrh	r2, [r3, #0]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e16:	1c9a      	adds	r2, r3, #2
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	3b01      	subs	r3, #1
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e2a:	e053      	b.n	8008ed4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d11b      	bne.n	8008e72 <HAL_SPI_TransmitReceive+0x176>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d016      	beq.n	8008e72 <HAL_SPI_TransmitReceive+0x176>
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d113      	bne.n	8008e72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	881a      	ldrh	r2, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5a:	1c9a      	adds	r2, r3, #2
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	3b01      	subs	r3, #1
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d119      	bne.n	8008eb4 <HAL_SPI_TransmitReceive+0x1b8>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d014      	beq.n	8008eb4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68da      	ldr	r2, [r3, #12]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e94:	b292      	uxth	r2, r2
 8008e96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9c:	1c9a      	adds	r2, r3, #2
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008eb4:	f7fa f982 	bl	80031bc <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d807      	bhi.n	8008ed4 <HAL_SPI_TransmitReceive+0x1d8>
 8008ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eca:	d003      	beq.n	8008ed4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ed2:	e0a7      	b.n	8009024 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1a6      	bne.n	8008e2c <HAL_SPI_TransmitReceive+0x130>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1a1      	bne.n	8008e2c <HAL_SPI_TransmitReceive+0x130>
 8008ee8:	e07c      	b.n	8008fe4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d002      	beq.n	8008ef8 <HAL_SPI_TransmitReceive+0x1fc>
 8008ef2:	8b7b      	ldrh	r3, [r7, #26]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d16b      	bne.n	8008fd0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	7812      	ldrb	r2, [r2, #0]
 8008f04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f1e:	e057      	b.n	8008fd0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f003 0302 	and.w	r3, r3, #2
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d11c      	bne.n	8008f68 <HAL_SPI_TransmitReceive+0x26c>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d017      	beq.n	8008f68 <HAL_SPI_TransmitReceive+0x26c>
 8008f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d114      	bne.n	8008f68 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	330c      	adds	r3, #12
 8008f48:	7812      	ldrb	r2, [r2, #0]
 8008f4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f50:	1c5a      	adds	r2, r3, #1
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d119      	bne.n	8008faa <HAL_SPI_TransmitReceive+0x2ae>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d014      	beq.n	8008faa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8a:	b2d2      	uxtb	r2, r2
 8008f8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f92:	1c5a      	adds	r2, r3, #1
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008faa:	f7fa f907 	bl	80031bc <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d803      	bhi.n	8008fc2 <HAL_SPI_TransmitReceive+0x2c6>
 8008fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc0:	d102      	bne.n	8008fc8 <HAL_SPI_TransmitReceive+0x2cc>
 8008fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d103      	bne.n	8008fd0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008fce:	e029      	b.n	8009024 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1a2      	bne.n	8008f20 <HAL_SPI_TransmitReceive+0x224>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d19d      	bne.n	8008f20 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 f925 	bl	8009238 <SPI_EndRxTxTransaction>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d006      	beq.n	8009002 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2220      	movs	r2, #32
 8008ffe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009000:	e010      	b.n	8009024 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10b      	bne.n	8009022 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800900a:	2300      	movs	r3, #0
 800900c:	617b      	str	r3, [r7, #20]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	617b      	str	r3, [r7, #20]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	617b      	str	r3, [r7, #20]
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	e000      	b.n	8009024 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009022:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009034:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009038:	4618      	mov	r0, r3
 800903a:	3730      	adds	r7, #48	; 0x30
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800904e:	b2db      	uxtb	r3, r3
}
 8009050:	4618      	mov	r0, r3
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b088      	sub	sp, #32
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	4613      	mov	r3, r2
 800906a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800906c:	f7fa f8a6 	bl	80031bc <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009074:	1a9b      	subs	r3, r3, r2
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	4413      	add	r3, r2
 800907a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800907c:	f7fa f89e 	bl	80031bc <HAL_GetTick>
 8009080:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009082:	4b39      	ldr	r3, [pc, #228]	; (8009168 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	015b      	lsls	r3, r3, #5
 8009088:	0d1b      	lsrs	r3, r3, #20
 800908a:	69fa      	ldr	r2, [r7, #28]
 800908c:	fb02 f303 	mul.w	r3, r2, r3
 8009090:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009092:	e054      	b.n	800913e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909a:	d050      	beq.n	800913e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800909c:	f7fa f88e 	bl	80031bc <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	69fa      	ldr	r2, [r7, #28]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d902      	bls.n	80090b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d13d      	bne.n	800912e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090ca:	d111      	bne.n	80090f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090d4:	d004      	beq.n	80090e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090de:	d107      	bne.n	80090f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f8:	d10f      	bne.n	800911a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009118:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2201      	movs	r2, #1
 800911e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e017      	b.n	800915e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009134:	2300      	movs	r3, #0
 8009136:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	3b01      	subs	r3, #1
 800913c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	689a      	ldr	r2, [r3, #8]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	4013      	ands	r3, r2
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	429a      	cmp	r2, r3
 800914c:	bf0c      	ite	eq
 800914e:	2301      	moveq	r3, #1
 8009150:	2300      	movne	r3, #0
 8009152:	b2db      	uxtb	r3, r3
 8009154:	461a      	mov	r2, r3
 8009156:	79fb      	ldrb	r3, [r7, #7]
 8009158:	429a      	cmp	r2, r3
 800915a:	d19b      	bne.n	8009094 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3720      	adds	r7, #32
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	20000000 	.word	0x20000000

0800916c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af02      	add	r7, sp, #8
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009180:	d111      	bne.n	80091a6 <SPI_EndRxTransaction+0x3a>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800918a:	d004      	beq.n	8009196 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009194:	d107      	bne.n	80091a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091ae:	d12a      	bne.n	8009206 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091b8:	d012      	beq.n	80091e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2200      	movs	r2, #0
 80091c2:	2180      	movs	r1, #128	; 0x80
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f7ff ff49 	bl	800905c <SPI_WaitFlagStateUntilTimeout>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d02d      	beq.n	800922c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d4:	f043 0220 	orr.w	r2, r3, #32
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e026      	b.n	800922e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	2200      	movs	r2, #0
 80091e8:	2101      	movs	r1, #1
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f7ff ff36 	bl	800905c <SPI_WaitFlagStateUntilTimeout>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d01a      	beq.n	800922c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091fa:	f043 0220 	orr.w	r2, r3, #32
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e013      	b.n	800922e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2200      	movs	r2, #0
 800920e:	2101      	movs	r1, #1
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f7ff ff23 	bl	800905c <SPI_WaitFlagStateUntilTimeout>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d007      	beq.n	800922c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009220:	f043 0220 	orr.w	r2, r3, #32
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e000      	b.n	800922e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af02      	add	r7, sp, #8
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009244:	4b1b      	ldr	r3, [pc, #108]	; (80092b4 <SPI_EndRxTxTransaction+0x7c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a1b      	ldr	r2, [pc, #108]	; (80092b8 <SPI_EndRxTxTransaction+0x80>)
 800924a:	fba2 2303 	umull	r2, r3, r2, r3
 800924e:	0d5b      	lsrs	r3, r3, #21
 8009250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009254:	fb02 f303 	mul.w	r3, r2, r3
 8009258:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009262:	d112      	bne.n	800928a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2200      	movs	r2, #0
 800926c:	2180      	movs	r1, #128	; 0x80
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f7ff fef4 	bl	800905c <SPI_WaitFlagStateUntilTimeout>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d016      	beq.n	80092a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800927e:	f043 0220 	orr.w	r2, r3, #32
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009286:	2303      	movs	r3, #3
 8009288:	e00f      	b.n	80092aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00a      	beq.n	80092a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	3b01      	subs	r3, #1
 8009294:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092a0:	2b80      	cmp	r3, #128	; 0x80
 80092a2:	d0f2      	beq.n	800928a <SPI_EndRxTxTransaction+0x52>
 80092a4:	e000      	b.n	80092a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80092a6:	bf00      	nop
  }

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3718      	adds	r7, #24
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20000000 	.word	0x20000000
 80092b8:	165e9f81 	.word	0x165e9f81

080092bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d123      	bne.n	8009316 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80092d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	6851      	ldr	r1, [r2, #4]
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	6892      	ldr	r2, [r2, #8]
 80092e2:	4311      	orrs	r1, r2
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	68d2      	ldr	r2, [r2, #12]
 80092e8:	4311      	orrs	r1, r2
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	6912      	ldr	r2, [r2, #16]
 80092ee:	4311      	orrs	r1, r2
 80092f0:	683a      	ldr	r2, [r7, #0]
 80092f2:	6952      	ldr	r2, [r2, #20]
 80092f4:	4311      	orrs	r1, r2
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	6992      	ldr	r2, [r2, #24]
 80092fa:	4311      	orrs	r1, r2
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	69d2      	ldr	r2, [r2, #28]
 8009300:	4311      	orrs	r1, r2
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	6a12      	ldr	r2, [r2, #32]
 8009306:	4311      	orrs	r1, r2
 8009308:	683a      	ldr	r2, [r7, #0]
 800930a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800930c:	430a      	orrs	r2, r1
 800930e:	431a      	orrs	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	601a      	str	r2, [r3, #0]
 8009314:	e028      	b.n	8009368 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	69d9      	ldr	r1, [r3, #28]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	4319      	orrs	r1, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932c:	430b      	orrs	r3, r1
 800932e:	431a      	orrs	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800933c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009340:	683a      	ldr	r2, [r7, #0]
 8009342:	6851      	ldr	r1, [r2, #4]
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	6892      	ldr	r2, [r2, #8]
 8009348:	4311      	orrs	r1, r2
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	68d2      	ldr	r2, [r2, #12]
 800934e:	4311      	orrs	r1, r2
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	6912      	ldr	r2, [r2, #16]
 8009354:	4311      	orrs	r1, r2
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	6952      	ldr	r2, [r2, #20]
 800935a:	4311      	orrs	r1, r2
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	6992      	ldr	r2, [r2, #24]
 8009360:	430a      	orrs	r2, r1
 8009362:	431a      	orrs	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009376:	b480      	push	{r7}
 8009378:	b085      	sub	sp, #20
 800937a:	af00      	add	r7, sp, #0
 800937c:	60f8      	str	r0, [r7, #12]
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d128      	bne.n	80093da <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	1e59      	subs	r1, r3, #1
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	3b01      	subs	r3, #1
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	4319      	orrs	r1, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	3b01      	subs	r3, #1
 80093a6:	021b      	lsls	r3, r3, #8
 80093a8:	4319      	orrs	r1, r3
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	031b      	lsls	r3, r3, #12
 80093b2:	4319      	orrs	r1, r3
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	041b      	lsls	r3, r3, #16
 80093bc:	4319      	orrs	r1, r3
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	695b      	ldr	r3, [r3, #20]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	051b      	lsls	r3, r3, #20
 80093c6:	4319      	orrs	r1, r3
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	3b01      	subs	r3, #1
 80093ce:	061b      	lsls	r3, r3, #24
 80093d0:	430b      	orrs	r3, r1
 80093d2:	431a      	orrs	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	609a      	str	r2, [r3, #8]
 80093d8:	e02f      	b.n	800943a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	68d2      	ldr	r2, [r2, #12]
 80093ea:	3a01      	subs	r2, #1
 80093ec:	0311      	lsls	r1, r2, #12
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	6952      	ldr	r2, [r2, #20]
 80093f2:	3a01      	subs	r2, #1
 80093f4:	0512      	lsls	r2, r2, #20
 80093f6:	430a      	orrs	r2, r1
 80093f8:	431a      	orrs	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	1e59      	subs	r1, r3, #1
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	3b01      	subs	r3, #1
 8009412:	011b      	lsls	r3, r3, #4
 8009414:	4319      	orrs	r1, r3
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	3b01      	subs	r3, #1
 800941c:	021b      	lsls	r3, r3, #8
 800941e:	4319      	orrs	r1, r3
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	3b01      	subs	r3, #1
 8009426:	041b      	lsls	r3, r3, #16
 8009428:	4319      	orrs	r1, r3
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	3b01      	subs	r3, #1
 8009430:	061b      	lsls	r3, r3, #24
 8009432:	430b      	orrs	r3, r1
 8009434:	431a      	orrs	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009454:	2300      	movs	r3, #0
 8009456:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	0d9b      	lsrs	r3, r3, #22
 800945e:	059b      	lsls	r3, r3, #22
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	6811      	ldr	r1, [r2, #0]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	6852      	ldr	r2, [r2, #4]
 8009468:	4311      	orrs	r1, r2
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	6892      	ldr	r2, [r2, #8]
 800946e:	3a01      	subs	r2, #1
 8009470:	0152      	lsls	r2, r2, #5
 8009472:	4311      	orrs	r1, r2
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	68d2      	ldr	r2, [r2, #12]
 8009478:	0252      	lsls	r2, r2, #9
 800947a:	430a      	orrs	r2, r1
 800947c:	431a      	orrs	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8009482:	f7f9 fe9b 	bl	80031bc <HAL_GetTick>
 8009486:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009488:	e010      	b.n	80094ac <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009490:	d00c      	beq.n	80094ac <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d007      	beq.n	80094a8 <FMC_SDRAM_SendCommand+0x60>
 8009498:	f7f9 fe90 	bl	80031bc <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d201      	bcs.n	80094ac <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e006      	b.n	80094ba <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	f003 0320 	and.w	r3, r3, #32
 80094b4:	2b20      	cmp	r3, #32
 80094b6:	d0e8      	beq.n	800948a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3718      	adds	r7, #24
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b083      	sub	sp, #12
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80094d4:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	0052      	lsls	r2, r2, #1
 80094dc:	431a      	orrs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	460b      	mov	r3, r1
 80094fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80094fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009500:	f005 fa68 	bl	800e9d4 <USBD_static_malloc>
 8009504:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d109      	bne.n	8009520 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	32b0      	adds	r2, #176	; 0xb0
 8009516:	2100      	movs	r1, #0
 8009518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800951c:	2302      	movs	r3, #2
 800951e:	e0d4      	b.n	80096ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009520:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009524:	2100      	movs	r1, #0
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f006 f8cd 	bl	800f6c6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	32b0      	adds	r2, #176	; 0xb0
 8009536:	68f9      	ldr	r1, [r7, #12]
 8009538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	32b0      	adds	r2, #176	; 0xb0
 8009546:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	7c1b      	ldrb	r3, [r3, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d138      	bne.n	80095ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009558:	4b5e      	ldr	r3, [pc, #376]	; (80096d4 <USBD_CDC_Init+0x1e4>)
 800955a:	7819      	ldrb	r1, [r3, #0]
 800955c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009560:	2202      	movs	r2, #2
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f005 f913 	bl	800e78e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009568:	4b5a      	ldr	r3, [pc, #360]	; (80096d4 <USBD_CDC_Init+0x1e4>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	f003 020f 	and.w	r2, r3, #15
 8009570:	6879      	ldr	r1, [r7, #4]
 8009572:	4613      	mov	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	4413      	add	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	440b      	add	r3, r1
 800957c:	3324      	adds	r3, #36	; 0x24
 800957e:	2201      	movs	r2, #1
 8009580:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009582:	4b55      	ldr	r3, [pc, #340]	; (80096d8 <USBD_CDC_Init+0x1e8>)
 8009584:	7819      	ldrb	r1, [r3, #0]
 8009586:	f44f 7300 	mov.w	r3, #512	; 0x200
 800958a:	2202      	movs	r2, #2
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f005 f8fe 	bl	800e78e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009592:	4b51      	ldr	r3, [pc, #324]	; (80096d8 <USBD_CDC_Init+0x1e8>)
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	f003 020f 	and.w	r2, r3, #15
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	4613      	mov	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095aa:	2201      	movs	r2, #1
 80095ac:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80095ae:	4b4b      	ldr	r3, [pc, #300]	; (80096dc <USBD_CDC_Init+0x1ec>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	f003 020f 	and.w	r2, r3, #15
 80095b6:	6879      	ldr	r1, [r7, #4]
 80095b8:	4613      	mov	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	440b      	add	r3, r1
 80095c2:	3326      	adds	r3, #38	; 0x26
 80095c4:	2210      	movs	r2, #16
 80095c6:	801a      	strh	r2, [r3, #0]
 80095c8:	e035      	b.n	8009636 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80095ca:	4b42      	ldr	r3, [pc, #264]	; (80096d4 <USBD_CDC_Init+0x1e4>)
 80095cc:	7819      	ldrb	r1, [r3, #0]
 80095ce:	2340      	movs	r3, #64	; 0x40
 80095d0:	2202      	movs	r2, #2
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f005 f8db 	bl	800e78e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80095d8:	4b3e      	ldr	r3, [pc, #248]	; (80096d4 <USBD_CDC_Init+0x1e4>)
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	f003 020f 	and.w	r2, r3, #15
 80095e0:	6879      	ldr	r1, [r7, #4]
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	440b      	add	r3, r1
 80095ec:	3324      	adds	r3, #36	; 0x24
 80095ee:	2201      	movs	r2, #1
 80095f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80095f2:	4b39      	ldr	r3, [pc, #228]	; (80096d8 <USBD_CDC_Init+0x1e8>)
 80095f4:	7819      	ldrb	r1, [r3, #0]
 80095f6:	2340      	movs	r3, #64	; 0x40
 80095f8:	2202      	movs	r2, #2
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f005 f8c7 	bl	800e78e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009600:	4b35      	ldr	r3, [pc, #212]	; (80096d8 <USBD_CDC_Init+0x1e8>)
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	f003 020f 	and.w	r2, r3, #15
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	4613      	mov	r3, r2
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	4413      	add	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	440b      	add	r3, r1
 8009614:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009618:	2201      	movs	r2, #1
 800961a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800961c:	4b2f      	ldr	r3, [pc, #188]	; (80096dc <USBD_CDC_Init+0x1ec>)
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	f003 020f 	and.w	r2, r3, #15
 8009624:	6879      	ldr	r1, [r7, #4]
 8009626:	4613      	mov	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4413      	add	r3, r2
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	440b      	add	r3, r1
 8009630:	3326      	adds	r3, #38	; 0x26
 8009632:	2210      	movs	r2, #16
 8009634:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009636:	4b29      	ldr	r3, [pc, #164]	; (80096dc <USBD_CDC_Init+0x1ec>)
 8009638:	7819      	ldrb	r1, [r3, #0]
 800963a:	2308      	movs	r3, #8
 800963c:	2203      	movs	r2, #3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f005 f8a5 	bl	800e78e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009644:	4b25      	ldr	r3, [pc, #148]	; (80096dc <USBD_CDC_Init+0x1ec>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	f003 020f 	and.w	r2, r3, #15
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	440b      	add	r3, r1
 8009658:	3324      	adds	r3, #36	; 0x24
 800965a:	2201      	movs	r2, #1
 800965c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	33b0      	adds	r3, #176	; 0xb0
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009694:	2302      	movs	r3, #2
 8009696:	e018      	b.n	80096ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	7c1b      	ldrb	r3, [r3, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10a      	bne.n	80096b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80096a0:	4b0d      	ldr	r3, [pc, #52]	; (80096d8 <USBD_CDC_Init+0x1e8>)
 80096a2:	7819      	ldrb	r1, [r3, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f005 f95c 	bl	800e96c <USBD_LL_PrepareReceive>
 80096b4:	e008      	b.n	80096c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80096b6:	4b08      	ldr	r3, [pc, #32]	; (80096d8 <USBD_CDC_Init+0x1e8>)
 80096b8:	7819      	ldrb	r1, [r3, #0]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096c0:	2340      	movs	r3, #64	; 0x40
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f005 f952 	bl	800e96c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	2000010f 	.word	0x2000010f
 80096d8:	20000110 	.word	0x20000110
 80096dc:	20000111 	.word	0x20000111

080096e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80096ec:	4b3a      	ldr	r3, [pc, #232]	; (80097d8 <USBD_CDC_DeInit+0xf8>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f005 f871 	bl	800e7da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80096f8:	4b37      	ldr	r3, [pc, #220]	; (80097d8 <USBD_CDC_DeInit+0xf8>)
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	f003 020f 	and.w	r2, r3, #15
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	4613      	mov	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	4413      	add	r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	440b      	add	r3, r1
 800970c:	3324      	adds	r3, #36	; 0x24
 800970e:	2200      	movs	r2, #0
 8009710:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009712:	4b32      	ldr	r3, [pc, #200]	; (80097dc <USBD_CDC_DeInit+0xfc>)
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f005 f85e 	bl	800e7da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800971e:	4b2f      	ldr	r3, [pc, #188]	; (80097dc <USBD_CDC_DeInit+0xfc>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	f003 020f 	and.w	r2, r3, #15
 8009726:	6879      	ldr	r1, [r7, #4]
 8009728:	4613      	mov	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	440b      	add	r3, r1
 8009732:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009736:	2200      	movs	r2, #0
 8009738:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800973a:	4b29      	ldr	r3, [pc, #164]	; (80097e0 <USBD_CDC_DeInit+0x100>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f005 f84a 	bl	800e7da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009746:	4b26      	ldr	r3, [pc, #152]	; (80097e0 <USBD_CDC_DeInit+0x100>)
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	f003 020f 	and.w	r2, r3, #15
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	4613      	mov	r3, r2
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	4413      	add	r3, r2
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	440b      	add	r3, r1
 800975a:	3324      	adds	r3, #36	; 0x24
 800975c:	2200      	movs	r2, #0
 800975e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009760:	4b1f      	ldr	r3, [pc, #124]	; (80097e0 <USBD_CDC_DeInit+0x100>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	f003 020f 	and.w	r2, r3, #15
 8009768:	6879      	ldr	r1, [r7, #4]
 800976a:	4613      	mov	r3, r2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	440b      	add	r3, r1
 8009774:	3326      	adds	r3, #38	; 0x26
 8009776:	2200      	movs	r2, #0
 8009778:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	32b0      	adds	r2, #176	; 0xb0
 8009784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d01f      	beq.n	80097cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	33b0      	adds	r3, #176	; 0xb0
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4413      	add	r3, r2
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	32b0      	adds	r2, #176	; 0xb0
 80097aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f005 f91e 	bl	800e9f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	32b0      	adds	r2, #176	; 0xb0
 80097be:	2100      	movs	r1, #0
 80097c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3708      	adds	r7, #8
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	2000010f 	.word	0x2000010f
 80097dc:	20000110 	.word	0x20000110
 80097e0:	20000111 	.word	0x20000111

080097e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	32b0      	adds	r2, #176	; 0xb0
 80097f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80097fe:	2300      	movs	r3, #0
 8009800:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009802:	2300      	movs	r3, #0
 8009804:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009810:	2303      	movs	r3, #3
 8009812:	e0bf      	b.n	8009994 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800981c:	2b00      	cmp	r3, #0
 800981e:	d050      	beq.n	80098c2 <USBD_CDC_Setup+0xde>
 8009820:	2b20      	cmp	r3, #32
 8009822:	f040 80af 	bne.w	8009984 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	88db      	ldrh	r3, [r3, #6]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d03a      	beq.n	80098a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	b25b      	sxtb	r3, r3
 8009834:	2b00      	cmp	r3, #0
 8009836:	da1b      	bge.n	8009870 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	33b0      	adds	r3, #176	; 0xb0
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800984e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	88d2      	ldrh	r2, [r2, #6]
 8009854:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	88db      	ldrh	r3, [r3, #6]
 800985a:	2b07      	cmp	r3, #7
 800985c:	bf28      	it	cs
 800985e:	2307      	movcs	r3, #7
 8009860:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	89fa      	ldrh	r2, [r7, #14]
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f001 fd89 	bl	800b380 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800986e:	e090      	b.n	8009992 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	785a      	ldrb	r2, [r3, #1]
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	88db      	ldrh	r3, [r3, #6]
 800987e:	2b3f      	cmp	r3, #63	; 0x3f
 8009880:	d803      	bhi.n	800988a <USBD_CDC_Setup+0xa6>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	88db      	ldrh	r3, [r3, #6]
 8009886:	b2da      	uxtb	r2, r3
 8009888:	e000      	b.n	800988c <USBD_CDC_Setup+0xa8>
 800988a:	2240      	movs	r2, #64	; 0x40
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009892:	6939      	ldr	r1, [r7, #16]
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800989a:	461a      	mov	r2, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f001 fd9b 	bl	800b3d8 <USBD_CtlPrepareRx>
      break;
 80098a2:	e076      	b.n	8009992 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	33b0      	adds	r3, #176	; 0xb0
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	7850      	ldrb	r0, [r2, #1]
 80098ba:	2200      	movs	r2, #0
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	4798      	blx	r3
      break;
 80098c0:	e067      	b.n	8009992 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	785b      	ldrb	r3, [r3, #1]
 80098c6:	2b0b      	cmp	r3, #11
 80098c8:	d851      	bhi.n	800996e <USBD_CDC_Setup+0x18a>
 80098ca:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <USBD_CDC_Setup+0xec>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	08009901 	.word	0x08009901
 80098d4:	0800997d 	.word	0x0800997d
 80098d8:	0800996f 	.word	0x0800996f
 80098dc:	0800996f 	.word	0x0800996f
 80098e0:	0800996f 	.word	0x0800996f
 80098e4:	0800996f 	.word	0x0800996f
 80098e8:	0800996f 	.word	0x0800996f
 80098ec:	0800996f 	.word	0x0800996f
 80098f0:	0800996f 	.word	0x0800996f
 80098f4:	0800996f 	.word	0x0800996f
 80098f8:	0800992b 	.word	0x0800992b
 80098fc:	08009955 	.word	0x08009955
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b03      	cmp	r3, #3
 800990a:	d107      	bne.n	800991c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800990c:	f107 030a 	add.w	r3, r7, #10
 8009910:	2202      	movs	r2, #2
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 fd33 	bl	800b380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800991a:	e032      	b.n	8009982 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f001 fcbd 	bl	800b29e <USBD_CtlError>
            ret = USBD_FAIL;
 8009924:	2303      	movs	r3, #3
 8009926:	75fb      	strb	r3, [r7, #23]
          break;
 8009928:	e02b      	b.n	8009982 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b03      	cmp	r3, #3
 8009934:	d107      	bne.n	8009946 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009936:	f107 030d 	add.w	r3, r7, #13
 800993a:	2201      	movs	r2, #1
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 fd1e 	bl	800b380 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009944:	e01d      	b.n	8009982 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f001 fca8 	bl	800b29e <USBD_CtlError>
            ret = USBD_FAIL;
 800994e:	2303      	movs	r3, #3
 8009950:	75fb      	strb	r3, [r7, #23]
          break;
 8009952:	e016      	b.n	8009982 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800995a:	b2db      	uxtb	r3, r3
 800995c:	2b03      	cmp	r3, #3
 800995e:	d00f      	beq.n	8009980 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f001 fc9b 	bl	800b29e <USBD_CtlError>
            ret = USBD_FAIL;
 8009968:	2303      	movs	r3, #3
 800996a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800996c:	e008      	b.n	8009980 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f001 fc94 	bl	800b29e <USBD_CtlError>
          ret = USBD_FAIL;
 8009976:	2303      	movs	r3, #3
 8009978:	75fb      	strb	r3, [r7, #23]
          break;
 800997a:	e002      	b.n	8009982 <USBD_CDC_Setup+0x19e>
          break;
 800997c:	bf00      	nop
 800997e:	e008      	b.n	8009992 <USBD_CDC_Setup+0x1ae>
          break;
 8009980:	bf00      	nop
      }
      break;
 8009982:	e006      	b.n	8009992 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f001 fc89 	bl	800b29e <USBD_CtlError>
      ret = USBD_FAIL;
 800998c:	2303      	movs	r3, #3
 800998e:	75fb      	strb	r3, [r7, #23]
      break;
 8009990:	bf00      	nop
  }

  return (uint8_t)ret;
 8009992:	7dfb      	ldrb	r3, [r7, #23]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3718      	adds	r7, #24
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	460b      	mov	r3, r1
 80099a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	32b0      	adds	r2, #176	; 0xb0
 80099ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d101      	bne.n	80099c6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80099c2:	2303      	movs	r3, #3
 80099c4:	e065      	b.n	8009a92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	32b0      	adds	r2, #176	; 0xb0
 80099d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80099d6:	78fb      	ldrb	r3, [r7, #3]
 80099d8:	f003 020f 	and.w	r2, r3, #15
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	4613      	mov	r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	440b      	add	r3, r1
 80099e8:	3318      	adds	r3, #24
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d02f      	beq.n	8009a50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80099f0:	78fb      	ldrb	r3, [r7, #3]
 80099f2:	f003 020f 	and.w	r2, r3, #15
 80099f6:	6879      	ldr	r1, [r7, #4]
 80099f8:	4613      	mov	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	440b      	add	r3, r1
 8009a02:	3318      	adds	r3, #24
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	78fb      	ldrb	r3, [r7, #3]
 8009a08:	f003 010f 	and.w	r1, r3, #15
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	460b      	mov	r3, r1
 8009a10:	00db      	lsls	r3, r3, #3
 8009a12:	440b      	add	r3, r1
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4403      	add	r3, r0
 8009a18:	3348      	adds	r3, #72	; 0x48
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a20:	fb01 f303 	mul.w	r3, r1, r3
 8009a24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d112      	bne.n	8009a50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009a2a:	78fb      	ldrb	r3, [r7, #3]
 8009a2c:	f003 020f 	and.w	r2, r3, #15
 8009a30:	6879      	ldr	r1, [r7, #4]
 8009a32:	4613      	mov	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	440b      	add	r3, r1
 8009a3c:	3318      	adds	r3, #24
 8009a3e:	2200      	movs	r2, #0
 8009a40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009a42:	78f9      	ldrb	r1, [r7, #3]
 8009a44:	2300      	movs	r3, #0
 8009a46:	2200      	movs	r2, #0
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f004 ff6e 	bl	800e92a <USBD_LL_Transmit>
 8009a4e:	e01f      	b.n	8009a90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	33b0      	adds	r3, #176	; 0xb0
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d010      	beq.n	8009a90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	33b0      	adds	r3, #176	; 0xb0
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009a8c:	78fa      	ldrb	r2, [r7, #3]
 8009a8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	32b0      	adds	r2, #176	; 0xb0
 8009ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	32b0      	adds	r2, #176	; 0xb0
 8009ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	e01a      	b.n	8009b02 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009acc:	78fb      	ldrb	r3, [r7, #3]
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f004 ff6c 	bl	800e9ae <USBD_LL_GetRxDataSize>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	33b0      	adds	r3, #176	; 0xb0
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009afc:	4611      	mov	r1, r2
 8009afe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b084      	sub	sp, #16
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	32b0      	adds	r2, #176	; 0xb0
 8009b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d101      	bne.n	8009b2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009b28:	2303      	movs	r3, #3
 8009b2a:	e025      	b.n	8009b78 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	33b0      	adds	r3, #176	; 0xb0
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d01a      	beq.n	8009b76 <USBD_CDC_EP0_RxReady+0x6c>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009b46:	2bff      	cmp	r3, #255	; 0xff
 8009b48:	d015      	beq.n	8009b76 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	33b0      	adds	r3, #176	; 0xb0
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009b62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009b6a:	b292      	uxth	r2, r2
 8009b6c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	22ff      	movs	r2, #255	; 0xff
 8009b72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b88:	2182      	movs	r1, #130	; 0x82
 8009b8a:	4818      	ldr	r0, [pc, #96]	; (8009bec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b8c:	f000 fd4f 	bl	800a62e <USBD_GetEpDesc>
 8009b90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b92:	2101      	movs	r1, #1
 8009b94:	4815      	ldr	r0, [pc, #84]	; (8009bec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009b96:	f000 fd4a 	bl	800a62e <USBD_GetEpDesc>
 8009b9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b9c:	2181      	movs	r1, #129	; 0x81
 8009b9e:	4813      	ldr	r0, [pc, #76]	; (8009bec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ba0:	f000 fd45 	bl	800a62e <USBD_GetEpDesc>
 8009ba4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	2210      	movs	r2, #16
 8009bb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d006      	beq.n	8009bc6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bc0:	711a      	strb	r2, [r3, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d006      	beq.n	8009bda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bd4:	711a      	strb	r2, [r3, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2243      	movs	r2, #67	; 0x43
 8009bde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009be0:	4b02      	ldr	r3, [pc, #8]	; (8009bec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	200000cc 	.word	0x200000cc

08009bf0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009bf8:	2182      	movs	r1, #130	; 0x82
 8009bfa:	4818      	ldr	r0, [pc, #96]	; (8009c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009bfc:	f000 fd17 	bl	800a62e <USBD_GetEpDesc>
 8009c00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c02:	2101      	movs	r1, #1
 8009c04:	4815      	ldr	r0, [pc, #84]	; (8009c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009c06:	f000 fd12 	bl	800a62e <USBD_GetEpDesc>
 8009c0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c0c:	2181      	movs	r1, #129	; 0x81
 8009c0e:	4813      	ldr	r0, [pc, #76]	; (8009c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009c10:	f000 fd0d 	bl	800a62e <USBD_GetEpDesc>
 8009c14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2210      	movs	r2, #16
 8009c20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d006      	beq.n	8009c36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	711a      	strb	r2, [r3, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f042 0202 	orr.w	r2, r2, #2
 8009c34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d006      	beq.n	8009c4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	711a      	strb	r2, [r3, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f042 0202 	orr.w	r2, r2, #2
 8009c48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2243      	movs	r2, #67	; 0x43
 8009c4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c50:	4b02      	ldr	r3, [pc, #8]	; (8009c5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	200000cc 	.word	0x200000cc

08009c60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c68:	2182      	movs	r1, #130	; 0x82
 8009c6a:	4818      	ldr	r0, [pc, #96]	; (8009ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c6c:	f000 fcdf 	bl	800a62e <USBD_GetEpDesc>
 8009c70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c72:	2101      	movs	r1, #1
 8009c74:	4815      	ldr	r0, [pc, #84]	; (8009ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c76:	f000 fcda 	bl	800a62e <USBD_GetEpDesc>
 8009c7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c7c:	2181      	movs	r1, #129	; 0x81
 8009c7e:	4813      	ldr	r0, [pc, #76]	; (8009ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009c80:	f000 fcd5 	bl	800a62e <USBD_GetEpDesc>
 8009c84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2210      	movs	r2, #16
 8009c90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d006      	beq.n	8009ca6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ca0:	711a      	strb	r2, [r3, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d006      	beq.n	8009cba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cb4:	711a      	strb	r2, [r3, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2243      	movs	r2, #67	; 0x43
 8009cbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009cc0:	4b02      	ldr	r3, [pc, #8]	; (8009ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	200000cc 	.word	0x200000cc

08009cd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	220a      	movs	r2, #10
 8009cdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009cde:	4b03      	ldr	r3, [pc, #12]	; (8009cec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	20000088 	.word	0x20000088

08009cf0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e009      	b.n	8009d18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	33b0      	adds	r3, #176	; 0xb0
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	4413      	add	r3, r2
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009d16:	2300      	movs	r3, #0
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b087      	sub	sp, #28
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	32b0      	adds	r2, #176	; 0xb0
 8009d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e008      	b.n	8009d5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	32b0      	adds	r2, #176	; 0xb0
 8009d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e004      	b.n	8009d96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3714      	adds	r7, #20
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
	...

08009da4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	32b0      	adds	r2, #176	; 0xb0
 8009db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	32b0      	adds	r2, #176	; 0xb0
 8009dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d101      	bne.n	8009dd6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009dd2:	2303      	movs	r3, #3
 8009dd4:	e025      	b.n	8009e22 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d11f      	bne.n	8009e20 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009de8:	4b10      	ldr	r3, [pc, #64]	; (8009e2c <USBD_CDC_TransmitPacket+0x88>)
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	f003 020f 	and.w	r2, r3, #15
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4403      	add	r3, r0
 8009e02:	3318      	adds	r3, #24
 8009e04:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009e06:	4b09      	ldr	r3, [pc, #36]	; (8009e2c <USBD_CDC_TransmitPacket+0x88>)
 8009e08:	7819      	ldrb	r1, [r3, #0]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f004 fd87 	bl	800e92a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	2000010f 	.word	0x2000010f

08009e30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	32b0      	adds	r2, #176	; 0xb0
 8009e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e46:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	32b0      	adds	r2, #176	; 0xb0
 8009e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d101      	bne.n	8009e5e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e018      	b.n	8009e90 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	7c1b      	ldrb	r3, [r3, #16]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10a      	bne.n	8009e7c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e66:	4b0c      	ldr	r3, [pc, #48]	; (8009e98 <USBD_CDC_ReceivePacket+0x68>)
 8009e68:	7819      	ldrb	r1, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f004 fd79 	bl	800e96c <USBD_LL_PrepareReceive>
 8009e7a:	e008      	b.n	8009e8e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e7c:	4b06      	ldr	r3, [pc, #24]	; (8009e98 <USBD_CDC_ReceivePacket+0x68>)
 8009e7e:	7819      	ldrb	r1, [r3, #0]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e86:	2340      	movs	r3, #64	; 0x40
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f004 fd6f 	bl	800e96c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20000110 	.word	0x20000110

08009e9c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d101      	bne.n	8009eb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e01f      	b.n	8009ef4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	79fa      	ldrb	r2, [r7, #7]
 8009ee6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f004 fbe3 	bl	800e6b4 <USBD_LL_Init>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f06:	2300      	movs	r3, #0
 8009f08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d101      	bne.n	8009f14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f10:	2303      	movs	r3, #3
 8009f12:	e025      	b.n	8009f60 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	32ae      	adds	r2, #174	; 0xae
 8009f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00f      	beq.n	8009f50 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	32ae      	adds	r2, #174	; 0xae
 8009f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	f107 020e 	add.w	r2, r7, #14
 8009f44:	4610      	mov	r0, r2
 8009f46:	4798      	blx	r3
 8009f48:	4602      	mov	r2, r0
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009f5e:	2300      	movs	r3, #0
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3710      	adds	r7, #16
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f004 fbf1 	bl	800e758 <USBD_LL_Start>
 8009f76:	4603      	mov	r3, r0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f88:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d009      	beq.n	8009fc4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	78fa      	ldrb	r2, [r7, #3]
 8009fba:	4611      	mov	r1, r2
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	4798      	blx	r3
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	78fa      	ldrb	r2, [r7, #3]
 8009fe8:	4611      	mov	r1, r2
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	4798      	blx	r3
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b084      	sub	sp, #16
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a012:	6839      	ldr	r1, [r7, #0]
 800a014:	4618      	mov	r0, r3
 800a016:	f001 f908 	bl	800b22a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a028:	461a      	mov	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a036:	f003 031f 	and.w	r3, r3, #31
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	d01a      	beq.n	800a074 <USBD_LL_SetupStage+0x72>
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d822      	bhi.n	800a088 <USBD_LL_SetupStage+0x86>
 800a042:	2b00      	cmp	r3, #0
 800a044:	d002      	beq.n	800a04c <USBD_LL_SetupStage+0x4a>
 800a046:	2b01      	cmp	r3, #1
 800a048:	d00a      	beq.n	800a060 <USBD_LL_SetupStage+0x5e>
 800a04a:	e01d      	b.n	800a088 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fb5f 	bl	800a718 <USBD_StdDevReq>
 800a05a:	4603      	mov	r3, r0
 800a05c:	73fb      	strb	r3, [r7, #15]
      break;
 800a05e:	e020      	b.n	800a0a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fbc7 	bl	800a7fc <USBD_StdItfReq>
 800a06e:	4603      	mov	r3, r0
 800a070:	73fb      	strb	r3, [r7, #15]
      break;
 800a072:	e016      	b.n	800a0a2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fc29 	bl	800a8d4 <USBD_StdEPReq>
 800a082:	4603      	mov	r3, r0
 800a084:	73fb      	strb	r3, [r7, #15]
      break;
 800a086:	e00c      	b.n	800a0a2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a08e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a092:	b2db      	uxtb	r3, r3
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f004 fbbe 	bl	800e818 <USBD_LL_StallEP>
 800a09c:	4603      	mov	r3, r0
 800a09e:	73fb      	strb	r3, [r7, #15]
      break;
 800a0a0:	bf00      	nop
  }

  return ret;
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3710      	adds	r7, #16
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a0be:	7afb      	ldrb	r3, [r7, #11]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d16e      	bne.n	800a1a2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a0ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0d2:	2b03      	cmp	r3, #3
 800a0d4:	f040 8098 	bne.w	800a208 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	689a      	ldr	r2, [r3, #8]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d913      	bls.n	800a10c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	689a      	ldr	r2, [r3, #8]
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	1ad2      	subs	r2, r2, r3
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	68da      	ldr	r2, [r3, #12]
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	bf28      	it	cs
 800a0fe:	4613      	movcs	r3, r2
 800a100:	461a      	mov	r2, r3
 800a102:	6879      	ldr	r1, [r7, #4]
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f001 f984 	bl	800b412 <USBD_CtlContinueRx>
 800a10a:	e07d      	b.n	800a208 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a112:	f003 031f 	and.w	r3, r3, #31
 800a116:	2b02      	cmp	r3, #2
 800a118:	d014      	beq.n	800a144 <USBD_LL_DataOutStage+0x98>
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d81d      	bhi.n	800a15a <USBD_LL_DataOutStage+0xae>
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <USBD_LL_DataOutStage+0x7c>
 800a122:	2b01      	cmp	r3, #1
 800a124:	d003      	beq.n	800a12e <USBD_LL_DataOutStage+0x82>
 800a126:	e018      	b.n	800a15a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a128:	2300      	movs	r3, #0
 800a12a:	75bb      	strb	r3, [r7, #22]
            break;
 800a12c:	e018      	b.n	800a160 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a134:	b2db      	uxtb	r3, r3
 800a136:	4619      	mov	r1, r3
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 fa5e 	bl	800a5fa <USBD_CoreFindIF>
 800a13e:	4603      	mov	r3, r0
 800a140:	75bb      	strb	r3, [r7, #22]
            break;
 800a142:	e00d      	b.n	800a160 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	4619      	mov	r1, r3
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f000 fa60 	bl	800a614 <USBD_CoreFindEP>
 800a154:	4603      	mov	r3, r0
 800a156:	75bb      	strb	r3, [r7, #22]
            break;
 800a158:	e002      	b.n	800a160 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a15a:	2300      	movs	r3, #0
 800a15c:	75bb      	strb	r3, [r7, #22]
            break;
 800a15e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a160:	7dbb      	ldrb	r3, [r7, #22]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d119      	bne.n	800a19a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d113      	bne.n	800a19a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a172:	7dba      	ldrb	r2, [r7, #22]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	32ae      	adds	r2, #174	; 0xae
 800a178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d00b      	beq.n	800a19a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a182:	7dba      	ldrb	r2, [r7, #22]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a18a:	7dba      	ldrb	r2, [r7, #22]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	32ae      	adds	r2, #174	; 0xae
 800a190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a194:	691b      	ldr	r3, [r3, #16]
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f001 f94a 	bl	800b434 <USBD_CtlSendStatus>
 800a1a0:	e032      	b.n	800a208 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a1a2:	7afb      	ldrb	r3, [r7, #11]
 800a1a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 fa31 	bl	800a614 <USBD_CoreFindEP>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1b6:	7dbb      	ldrb	r3, [r7, #22]
 800a1b8:	2bff      	cmp	r3, #255	; 0xff
 800a1ba:	d025      	beq.n	800a208 <USBD_LL_DataOutStage+0x15c>
 800a1bc:	7dbb      	ldrb	r3, [r7, #22]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d122      	bne.n	800a208 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	2b03      	cmp	r3, #3
 800a1cc:	d117      	bne.n	800a1fe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a1ce:	7dba      	ldrb	r2, [r7, #22]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	32ae      	adds	r2, #174	; 0xae
 800a1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00f      	beq.n	800a1fe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a1de:	7dba      	ldrb	r2, [r7, #22]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a1e6:	7dba      	ldrb	r2, [r7, #22]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	32ae      	adds	r2, #174	; 0xae
 800a1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f0:	699b      	ldr	r3, [r3, #24]
 800a1f2:	7afa      	ldrb	r2, [r7, #11]
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	4798      	blx	r3
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d001      	beq.n	800a208 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a204:	7dfb      	ldrb	r3, [r7, #23]
 800a206:	e000      	b.n	800a20a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3718      	adds	r7, #24
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b086      	sub	sp, #24
 800a216:	af00      	add	r7, sp, #0
 800a218:	60f8      	str	r0, [r7, #12]
 800a21a:	460b      	mov	r3, r1
 800a21c:	607a      	str	r2, [r7, #4]
 800a21e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a220:	7afb      	ldrb	r3, [r7, #11]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d16f      	bne.n	800a306 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3314      	adds	r3, #20
 800a22a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a232:	2b02      	cmp	r3, #2
 800a234:	d15a      	bne.n	800a2ec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	689a      	ldr	r2, [r3, #8]
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d914      	bls.n	800a26c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	689a      	ldr	r2, [r3, #8]
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	68db      	ldr	r3, [r3, #12]
 800a24a:	1ad2      	subs	r2, r2, r3
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	461a      	mov	r2, r3
 800a256:	6879      	ldr	r1, [r7, #4]
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f001 f8ac 	bl	800b3b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a25e:	2300      	movs	r3, #0
 800a260:	2200      	movs	r2, #0
 800a262:	2100      	movs	r1, #0
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f004 fb81 	bl	800e96c <USBD_LL_PrepareReceive>
 800a26a:	e03f      	b.n	800a2ec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	68da      	ldr	r2, [r3, #12]
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	429a      	cmp	r2, r3
 800a276:	d11c      	bne.n	800a2b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a280:	429a      	cmp	r2, r3
 800a282:	d316      	bcc.n	800a2b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a28e:	429a      	cmp	r2, r3
 800a290:	d20f      	bcs.n	800a2b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a292:	2200      	movs	r2, #0
 800a294:	2100      	movs	r1, #0
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f001 f88d 	bl	800b3b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	2100      	movs	r1, #0
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f004 fb5e 	bl	800e96c <USBD_LL_PrepareReceive>
 800a2b0:	e01c      	b.n	800a2ec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d10f      	bne.n	800a2de <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d009      	beq.n	800a2de <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2de:	2180      	movs	r1, #128	; 0x80
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f004 fa99 	bl	800e818 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f001 f8b7 	bl	800b45a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d03a      	beq.n	800a36c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f7ff fe42 	bl	8009f80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a304:	e032      	b.n	800a36c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a306:	7afb      	ldrb	r3, [r7, #11]
 800a308:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	4619      	mov	r1, r3
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 f97f 	bl	800a614 <USBD_CoreFindEP>
 800a316:	4603      	mov	r3, r0
 800a318:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a31a:	7dfb      	ldrb	r3, [r7, #23]
 800a31c:	2bff      	cmp	r3, #255	; 0xff
 800a31e:	d025      	beq.n	800a36c <USBD_LL_DataInStage+0x15a>
 800a320:	7dfb      	ldrb	r3, [r7, #23]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d122      	bne.n	800a36c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	2b03      	cmp	r3, #3
 800a330:	d11c      	bne.n	800a36c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a332:	7dfa      	ldrb	r2, [r7, #23]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	32ae      	adds	r2, #174	; 0xae
 800a338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d014      	beq.n	800a36c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a342:	7dfa      	ldrb	r2, [r7, #23]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a34a:	7dfa      	ldrb	r2, [r7, #23]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	32ae      	adds	r2, #174	; 0xae
 800a350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	7afa      	ldrb	r2, [r7, #11]
 800a358:	4611      	mov	r1, r2
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	4798      	blx	r3
 800a35e:	4603      	mov	r3, r0
 800a360:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a362:	7dbb      	ldrb	r3, [r7, #22]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a368:	7dbb      	ldrb	r3, [r7, #22]
 800a36a:	e000      	b.n	800a36e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d014      	beq.n	800a3dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00e      	beq.n	800a3dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	6852      	ldr	r2, [r2, #4]
 800a3ca:	b2d2      	uxtb	r2, r2
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	4798      	blx	r3
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d001      	beq.n	800a3dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3dc:	2340      	movs	r3, #64	; 0x40
 800a3de:	2200      	movs	r2, #0
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f004 f9d3 	bl	800e78e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2240      	movs	r2, #64	; 0x40
 800a3f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3f8:	2340      	movs	r3, #64	; 0x40
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2180      	movs	r1, #128	; 0x80
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f004 f9c5 	bl	800e78e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2240      	movs	r2, #64	; 0x40
 800a40e:	621a      	str	r2, [r3, #32]

  return ret;
 800a410:	7bfb      	ldrb	r3, [r7, #15]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	460b      	mov	r3, r1
 800a424:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	78fa      	ldrb	r2, [r7, #3]
 800a42a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	370c      	adds	r7, #12
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a43a:	b480      	push	{r7}
 800a43c:	b083      	sub	sp, #12
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2204      	movs	r2, #4
 800a454:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr

0800a466 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b04      	cmp	r3, #4
 800a478:	d106      	bne.n	800a488 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a480:	b2da      	uxtb	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b082      	sub	sp, #8
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d110      	bne.n	800a4cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00b      	beq.n	800a4cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ba:	69db      	ldr	r3, [r3, #28]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d005      	beq.n	800a4cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c6:	69db      	ldr	r3, [r3, #28]
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3708      	adds	r7, #8
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b082      	sub	sp, #8
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	32ae      	adds	r2, #174	; 0xae
 800a4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d101      	bne.n	800a4f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e01c      	b.n	800a532 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b03      	cmp	r3, #3
 800a502:	d115      	bne.n	800a530 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	32ae      	adds	r2, #174	; 0xae
 800a50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a512:	6a1b      	ldr	r3, [r3, #32]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00b      	beq.n	800a530 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	32ae      	adds	r2, #174	; 0xae
 800a522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a526:	6a1b      	ldr	r3, [r3, #32]
 800a528:	78fa      	ldrb	r2, [r7, #3]
 800a52a:	4611      	mov	r1, r2
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3708      	adds	r7, #8
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b082      	sub	sp, #8
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	460b      	mov	r3, r1
 800a544:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	32ae      	adds	r2, #174	; 0xae
 800a550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d101      	bne.n	800a55c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a558:	2303      	movs	r3, #3
 800a55a:	e01c      	b.n	800a596 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b03      	cmp	r3, #3
 800a566:	d115      	bne.n	800a594 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	32ae      	adds	r2, #174	; 0xae
 800a572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00b      	beq.n	800a594 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	32ae      	adds	r2, #174	; 0xae
 800a586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	78fa      	ldrb	r2, [r7, #3]
 800a58e:	4611      	mov	r1, r2
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b083      	sub	sp, #12
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00e      	beq.n	800a5f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d8:	685b      	ldr	r3, [r3, #4]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	6852      	ldr	r2, [r2, #4]
 800a5de:	b2d2      	uxtb	r2, r2
 800a5e0:	4611      	mov	r1, r2
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	4798      	blx	r3
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d001      	beq.n	800a5f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a5fa:	b480      	push	{r7}
 800a5fc:	b083      	sub	sp, #12
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	460b      	mov	r3, r1
 800a604:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a606:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a608:	4618      	mov	r0, r3
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	460b      	mov	r3, r1
 800a61e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a620:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a622:	4618      	mov	r0, r3
 800a624:	370c      	adds	r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b086      	sub	sp, #24
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	460b      	mov	r3, r1
 800a638:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a642:	2300      	movs	r3, #0
 800a644:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	885b      	ldrh	r3, [r3, #2]
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	b29b      	uxth	r3, r3
 800a652:	429a      	cmp	r2, r3
 800a654:	d920      	bls.n	800a698 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a65e:	e013      	b.n	800a688 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a660:	f107 030a 	add.w	r3, r7, #10
 800a664:	4619      	mov	r1, r3
 800a666:	6978      	ldr	r0, [r7, #20]
 800a668:	f000 f81b 	bl	800a6a2 <USBD_GetNextDesc>
 800a66c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	2b05      	cmp	r3, #5
 800a674:	d108      	bne.n	800a688 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	789b      	ldrb	r3, [r3, #2]
 800a67e:	78fa      	ldrb	r2, [r7, #3]
 800a680:	429a      	cmp	r2, r3
 800a682:	d008      	beq.n	800a696 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a684:	2300      	movs	r3, #0
 800a686:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	885b      	ldrh	r3, [r3, #2]
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	897b      	ldrh	r3, [r7, #10]
 800a690:	429a      	cmp	r2, r3
 800a692:	d8e5      	bhi.n	800a660 <USBD_GetEpDesc+0x32>
 800a694:	e000      	b.n	800a698 <USBD_GetEpDesc+0x6a>
          break;
 800a696:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a698:	693b      	ldr	r3, [r7, #16]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3718      	adds	r7, #24
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	b085      	sub	sp, #20
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	881a      	ldrh	r2, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	4413      	add	r3, r2
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a6fa:	8a3b      	ldrh	r3, [r7, #16]
 800a6fc:	021b      	lsls	r3, r3, #8
 800a6fe:	b21a      	sxth	r2, r3
 800a700:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a704:	4313      	orrs	r3, r2
 800a706:	b21b      	sxth	r3, r3
 800a708:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a70a:	89fb      	ldrh	r3, [r7, #14]
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	371c      	adds	r7, #28
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a72e:	2b40      	cmp	r3, #64	; 0x40
 800a730:	d005      	beq.n	800a73e <USBD_StdDevReq+0x26>
 800a732:	2b40      	cmp	r3, #64	; 0x40
 800a734:	d857      	bhi.n	800a7e6 <USBD_StdDevReq+0xce>
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00f      	beq.n	800a75a <USBD_StdDevReq+0x42>
 800a73a:	2b20      	cmp	r3, #32
 800a73c:	d153      	bne.n	800a7e6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	32ae      	adds	r2, #174	; 0xae
 800a748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	4798      	blx	r3
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]
      break;
 800a758:	e04a      	b.n	800a7f0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	785b      	ldrb	r3, [r3, #1]
 800a75e:	2b09      	cmp	r3, #9
 800a760:	d83b      	bhi.n	800a7da <USBD_StdDevReq+0xc2>
 800a762:	a201      	add	r2, pc, #4	; (adr r2, 800a768 <USBD_StdDevReq+0x50>)
 800a764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a768:	0800a7bd 	.word	0x0800a7bd
 800a76c:	0800a7d1 	.word	0x0800a7d1
 800a770:	0800a7db 	.word	0x0800a7db
 800a774:	0800a7c7 	.word	0x0800a7c7
 800a778:	0800a7db 	.word	0x0800a7db
 800a77c:	0800a79b 	.word	0x0800a79b
 800a780:	0800a791 	.word	0x0800a791
 800a784:	0800a7db 	.word	0x0800a7db
 800a788:	0800a7b3 	.word	0x0800a7b3
 800a78c:	0800a7a5 	.word	0x0800a7a5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a790:	6839      	ldr	r1, [r7, #0]
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fa3c 	bl	800ac10 <USBD_GetDescriptor>
          break;
 800a798:	e024      	b.n	800a7e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fba1 	bl	800aee4 <USBD_SetAddress>
          break;
 800a7a2:	e01f      	b.n	800a7e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a7a4:	6839      	ldr	r1, [r7, #0]
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fbe0 	bl	800af6c <USBD_SetConfig>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	73fb      	strb	r3, [r7, #15]
          break;
 800a7b0:	e018      	b.n	800a7e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fc83 	bl	800b0c0 <USBD_GetConfig>
          break;
 800a7ba:	e013      	b.n	800a7e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a7bc:	6839      	ldr	r1, [r7, #0]
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fcb4 	bl	800b12c <USBD_GetStatus>
          break;
 800a7c4:	e00e      	b.n	800a7e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a7c6:	6839      	ldr	r1, [r7, #0]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 fce3 	bl	800b194 <USBD_SetFeature>
          break;
 800a7ce:	e009      	b.n	800a7e4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a7d0:	6839      	ldr	r1, [r7, #0]
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fd07 	bl	800b1e6 <USBD_ClrFeature>
          break;
 800a7d8:	e004      	b.n	800a7e4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a7da:	6839      	ldr	r1, [r7, #0]
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 fd5e 	bl	800b29e <USBD_CtlError>
          break;
 800a7e2:	bf00      	nop
      }
      break;
 800a7e4:	e004      	b.n	800a7f0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 fd58 	bl	800b29e <USBD_CtlError>
      break;
 800a7ee:	bf00      	nop
  }

  return ret;
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop

0800a7fc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a812:	2b40      	cmp	r3, #64	; 0x40
 800a814:	d005      	beq.n	800a822 <USBD_StdItfReq+0x26>
 800a816:	2b40      	cmp	r3, #64	; 0x40
 800a818:	d852      	bhi.n	800a8c0 <USBD_StdItfReq+0xc4>
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d001      	beq.n	800a822 <USBD_StdItfReq+0x26>
 800a81e:	2b20      	cmp	r3, #32
 800a820:	d14e      	bne.n	800a8c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	3b01      	subs	r3, #1
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d840      	bhi.n	800a8b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	889b      	ldrh	r3, [r3, #4]
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b01      	cmp	r3, #1
 800a838:	d836      	bhi.n	800a8a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	889b      	ldrh	r3, [r3, #4]
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	4619      	mov	r1, r3
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7ff fed9 	bl	800a5fa <USBD_CoreFindIF>
 800a848:	4603      	mov	r3, r0
 800a84a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	2bff      	cmp	r3, #255	; 0xff
 800a850:	d01d      	beq.n	800a88e <USBD_StdItfReq+0x92>
 800a852:	7bbb      	ldrb	r3, [r7, #14]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d11a      	bne.n	800a88e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a858:	7bba      	ldrb	r2, [r7, #14]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	32ae      	adds	r2, #174	; 0xae
 800a85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00f      	beq.n	800a888 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a868:	7bba      	ldrb	r2, [r7, #14]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a870:	7bba      	ldrb	r2, [r7, #14]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	32ae      	adds	r2, #174	; 0xae
 800a876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	4798      	blx	r3
 800a882:	4603      	mov	r3, r0
 800a884:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a886:	e004      	b.n	800a892 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a888:	2303      	movs	r3, #3
 800a88a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a88c:	e001      	b.n	800a892 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a88e:	2303      	movs	r3, #3
 800a890:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	88db      	ldrh	r3, [r3, #6]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d110      	bne.n	800a8bc <USBD_StdItfReq+0xc0>
 800a89a:	7bfb      	ldrb	r3, [r7, #15]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10d      	bne.n	800a8bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fdc7 	bl	800b434 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a8a6:	e009      	b.n	800a8bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fcf7 	bl	800b29e <USBD_CtlError>
          break;
 800a8b0:	e004      	b.n	800a8bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fcf2 	bl	800b29e <USBD_CtlError>
          break;
 800a8ba:	e000      	b.n	800a8be <USBD_StdItfReq+0xc2>
          break;
 800a8bc:	bf00      	nop
      }
      break;
 800a8be:	e004      	b.n	800a8ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a8c0:	6839      	ldr	r1, [r7, #0]
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fceb 	bl	800b29e <USBD_CtlError>
      break;
 800a8c8:	bf00      	nop
  }

  return ret;
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	889b      	ldrh	r3, [r3, #4]
 800a8e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8f0:	2b40      	cmp	r3, #64	; 0x40
 800a8f2:	d007      	beq.n	800a904 <USBD_StdEPReq+0x30>
 800a8f4:	2b40      	cmp	r3, #64	; 0x40
 800a8f6:	f200 817f 	bhi.w	800abf8 <USBD_StdEPReq+0x324>
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d02a      	beq.n	800a954 <USBD_StdEPReq+0x80>
 800a8fe:	2b20      	cmp	r3, #32
 800a900:	f040 817a 	bne.w	800abf8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a904:	7bbb      	ldrb	r3, [r7, #14]
 800a906:	4619      	mov	r1, r3
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7ff fe83 	bl	800a614 <USBD_CoreFindEP>
 800a90e:	4603      	mov	r3, r0
 800a910:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a912:	7b7b      	ldrb	r3, [r7, #13]
 800a914:	2bff      	cmp	r3, #255	; 0xff
 800a916:	f000 8174 	beq.w	800ac02 <USBD_StdEPReq+0x32e>
 800a91a:	7b7b      	ldrb	r3, [r7, #13]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f040 8170 	bne.w	800ac02 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a922:	7b7a      	ldrb	r2, [r7, #13]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a92a:	7b7a      	ldrb	r2, [r7, #13]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	32ae      	adds	r2, #174	; 0xae
 800a930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	2b00      	cmp	r3, #0
 800a938:	f000 8163 	beq.w	800ac02 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a93c:	7b7a      	ldrb	r2, [r7, #13]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	32ae      	adds	r2, #174	; 0xae
 800a942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	4798      	blx	r3
 800a94e:	4603      	mov	r3, r0
 800a950:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a952:	e156      	b.n	800ac02 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	785b      	ldrb	r3, [r3, #1]
 800a958:	2b03      	cmp	r3, #3
 800a95a:	d008      	beq.n	800a96e <USBD_StdEPReq+0x9a>
 800a95c:	2b03      	cmp	r3, #3
 800a95e:	f300 8145 	bgt.w	800abec <USBD_StdEPReq+0x318>
 800a962:	2b00      	cmp	r3, #0
 800a964:	f000 809b 	beq.w	800aa9e <USBD_StdEPReq+0x1ca>
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d03c      	beq.n	800a9e6 <USBD_StdEPReq+0x112>
 800a96c:	e13e      	b.n	800abec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b02      	cmp	r3, #2
 800a978:	d002      	beq.n	800a980 <USBD_StdEPReq+0xac>
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d016      	beq.n	800a9ac <USBD_StdEPReq+0xd8>
 800a97e:	e02c      	b.n	800a9da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00d      	beq.n	800a9a2 <USBD_StdEPReq+0xce>
 800a986:	7bbb      	ldrb	r3, [r7, #14]
 800a988:	2b80      	cmp	r3, #128	; 0x80
 800a98a:	d00a      	beq.n	800a9a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a98c:	7bbb      	ldrb	r3, [r7, #14]
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f003 ff41 	bl	800e818 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a996:	2180      	movs	r1, #128	; 0x80
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f003 ff3d 	bl	800e818 <USBD_LL_StallEP>
 800a99e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9a0:	e020      	b.n	800a9e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fc7a 	bl	800b29e <USBD_CtlError>
              break;
 800a9aa:	e01b      	b.n	800a9e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	885b      	ldrh	r3, [r3, #2]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10e      	bne.n	800a9d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00b      	beq.n	800a9d2 <USBD_StdEPReq+0xfe>
 800a9ba:	7bbb      	ldrb	r3, [r7, #14]
 800a9bc:	2b80      	cmp	r3, #128	; 0x80
 800a9be:	d008      	beq.n	800a9d2 <USBD_StdEPReq+0xfe>
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	88db      	ldrh	r3, [r3, #6]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d104      	bne.n	800a9d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f003 ff23 	bl	800e818 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fd2e 	bl	800b434 <USBD_CtlSendStatus>

              break;
 800a9d8:	e004      	b.n	800a9e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fc5e 	bl	800b29e <USBD_CtlError>
              break;
 800a9e2:	bf00      	nop
          }
          break;
 800a9e4:	e107      	b.n	800abf6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d002      	beq.n	800a9f8 <USBD_StdEPReq+0x124>
 800a9f2:	2b03      	cmp	r3, #3
 800a9f4:	d016      	beq.n	800aa24 <USBD_StdEPReq+0x150>
 800a9f6:	e04b      	b.n	800aa90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9f8:	7bbb      	ldrb	r3, [r7, #14]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00d      	beq.n	800aa1a <USBD_StdEPReq+0x146>
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	2b80      	cmp	r3, #128	; 0x80
 800aa02:	d00a      	beq.n	800aa1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	4619      	mov	r1, r3
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f003 ff05 	bl	800e818 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa0e:	2180      	movs	r1, #128	; 0x80
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f003 ff01 	bl	800e818 <USBD_LL_StallEP>
 800aa16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa18:	e040      	b.n	800aa9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aa1a:	6839      	ldr	r1, [r7, #0]
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f000 fc3e 	bl	800b29e <USBD_CtlError>
              break;
 800aa22:	e03b      	b.n	800aa9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	885b      	ldrh	r3, [r3, #2]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d136      	bne.n	800aa9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa2c:	7bbb      	ldrb	r3, [r7, #14]
 800aa2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d004      	beq.n	800aa40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa36:	7bbb      	ldrb	r3, [r7, #14]
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f003 ff0b 	bl	800e856 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fcf7 	bl	800b434 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aa46:	7bbb      	ldrb	r3, [r7, #14]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f7ff fde2 	bl	800a614 <USBD_CoreFindEP>
 800aa50:	4603      	mov	r3, r0
 800aa52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa54:	7b7b      	ldrb	r3, [r7, #13]
 800aa56:	2bff      	cmp	r3, #255	; 0xff
 800aa58:	d01f      	beq.n	800aa9a <USBD_StdEPReq+0x1c6>
 800aa5a:	7b7b      	ldrb	r3, [r7, #13]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d11c      	bne.n	800aa9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aa60:	7b7a      	ldrb	r2, [r7, #13]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aa68:	7b7a      	ldrb	r2, [r7, #13]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	32ae      	adds	r2, #174	; 0xae
 800aa6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d010      	beq.n	800aa9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa78:	7b7a      	ldrb	r2, [r7, #13]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	32ae      	adds	r2, #174	; 0xae
 800aa7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	4798      	blx	r3
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aa8e:	e004      	b.n	800aa9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aa90:	6839      	ldr	r1, [r7, #0]
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fc03 	bl	800b29e <USBD_CtlError>
              break;
 800aa98:	e000      	b.n	800aa9c <USBD_StdEPReq+0x1c8>
              break;
 800aa9a:	bf00      	nop
          }
          break;
 800aa9c:	e0ab      	b.n	800abf6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d002      	beq.n	800aab0 <USBD_StdEPReq+0x1dc>
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d032      	beq.n	800ab14 <USBD_StdEPReq+0x240>
 800aaae:	e097      	b.n	800abe0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d007      	beq.n	800aac6 <USBD_StdEPReq+0x1f2>
 800aab6:	7bbb      	ldrb	r3, [r7, #14]
 800aab8:	2b80      	cmp	r3, #128	; 0x80
 800aaba:	d004      	beq.n	800aac6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aabc:	6839      	ldr	r1, [r7, #0]
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fbed 	bl	800b29e <USBD_CtlError>
                break;
 800aac4:	e091      	b.n	800abea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aac6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	da0b      	bge.n	800aae6 <USBD_StdEPReq+0x212>
 800aace:	7bbb      	ldrb	r3, [r7, #14]
 800aad0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aad4:	4613      	mov	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	3310      	adds	r3, #16
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	4413      	add	r3, r2
 800aae2:	3304      	adds	r3, #4
 800aae4:	e00b      	b.n	800aafe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aae6:	7bbb      	ldrb	r3, [r7, #14]
 800aae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaec:	4613      	mov	r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	4413      	add	r3, r2
 800aafc:	3304      	adds	r3, #4
 800aafe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	2200      	movs	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	2202      	movs	r2, #2
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fc37 	bl	800b380 <USBD_CtlSendData>
              break;
 800ab12:	e06a      	b.n	800abea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	da11      	bge.n	800ab40 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	f003 020f 	and.w	r2, r3, #15
 800ab22:	6879      	ldr	r1, [r7, #4]
 800ab24:	4613      	mov	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	440b      	add	r3, r1
 800ab2e:	3324      	adds	r3, #36	; 0x24
 800ab30:	881b      	ldrh	r3, [r3, #0]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d117      	bne.n	800ab66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fbb0 	bl	800b29e <USBD_CtlError>
                  break;
 800ab3e:	e054      	b.n	800abea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
 800ab42:	f003 020f 	and.w	r2, r3, #15
 800ab46:	6879      	ldr	r1, [r7, #4]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	440b      	add	r3, r1
 800ab52:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab56:	881b      	ldrh	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d104      	bne.n	800ab66 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fb9d 	bl	800b29e <USBD_CtlError>
                  break;
 800ab64:	e041      	b.n	800abea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	da0b      	bge.n	800ab86 <USBD_StdEPReq+0x2b2>
 800ab6e:	7bbb      	ldrb	r3, [r7, #14]
 800ab70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab74:	4613      	mov	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	4413      	add	r3, r2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	3310      	adds	r3, #16
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	4413      	add	r3, r2
 800ab82:	3304      	adds	r3, #4
 800ab84:	e00b      	b.n	800ab9e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab86:	7bbb      	ldrb	r3, [r7, #14]
 800ab88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4413      	add	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aba0:	7bbb      	ldrb	r3, [r7, #14]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d002      	beq.n	800abac <USBD_StdEPReq+0x2d8>
 800aba6:	7bbb      	ldrb	r3, [r7, #14]
 800aba8:	2b80      	cmp	r3, #128	; 0x80
 800abaa:	d103      	bne.n	800abb4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	2200      	movs	r2, #0
 800abb0:	601a      	str	r2, [r3, #0]
 800abb2:	e00e      	b.n	800abd2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	4619      	mov	r1, r3
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f003 fe6b 	bl	800e894 <USBD_LL_IsStallEP>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d003      	beq.n	800abcc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	2201      	movs	r2, #1
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	e002      	b.n	800abd2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2200      	movs	r2, #0
 800abd0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2202      	movs	r2, #2
 800abd6:	4619      	mov	r1, r3
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fbd1 	bl	800b380 <USBD_CtlSendData>
              break;
 800abde:	e004      	b.n	800abea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fb5b 	bl	800b29e <USBD_CtlError>
              break;
 800abe8:	bf00      	nop
          }
          break;
 800abea:	e004      	b.n	800abf6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fb55 	bl	800b29e <USBD_CtlError>
          break;
 800abf4:	bf00      	nop
      }
      break;
 800abf6:	e005      	b.n	800ac04 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fb4f 	bl	800b29e <USBD_CtlError>
      break;
 800ac00:	e000      	b.n	800ac04 <USBD_StdEPReq+0x330>
      break;
 800ac02:	bf00      	nop
  }

  return ret;
 800ac04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac22:	2300      	movs	r3, #0
 800ac24:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	885b      	ldrh	r3, [r3, #2]
 800ac2a:	0a1b      	lsrs	r3, r3, #8
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	3b01      	subs	r3, #1
 800ac30:	2b06      	cmp	r3, #6
 800ac32:	f200 8128 	bhi.w	800ae86 <USBD_GetDescriptor+0x276>
 800ac36:	a201      	add	r2, pc, #4	; (adr r2, 800ac3c <USBD_GetDescriptor+0x2c>)
 800ac38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3c:	0800ac59 	.word	0x0800ac59
 800ac40:	0800ac71 	.word	0x0800ac71
 800ac44:	0800acb1 	.word	0x0800acb1
 800ac48:	0800ae87 	.word	0x0800ae87
 800ac4c:	0800ae87 	.word	0x0800ae87
 800ac50:	0800ae27 	.word	0x0800ae27
 800ac54:	0800ae53 	.word	0x0800ae53
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	7c12      	ldrb	r2, [r2, #16]
 800ac64:	f107 0108 	add.w	r1, r7, #8
 800ac68:	4610      	mov	r0, r2
 800ac6a:	4798      	blx	r3
 800ac6c:	60f8      	str	r0, [r7, #12]
      break;
 800ac6e:	e112      	b.n	800ae96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	7c1b      	ldrb	r3, [r3, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10d      	bne.n	800ac94 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac80:	f107 0208 	add.w	r2, r7, #8
 800ac84:	4610      	mov	r0, r2
 800ac86:	4798      	blx	r3
 800ac88:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	2202      	movs	r2, #2
 800ac90:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac92:	e100      	b.n	800ae96 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9c:	f107 0208 	add.w	r2, r7, #8
 800aca0:	4610      	mov	r0, r2
 800aca2:	4798      	blx	r3
 800aca4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	3301      	adds	r3, #1
 800acaa:	2202      	movs	r2, #2
 800acac:	701a      	strb	r2, [r3, #0]
      break;
 800acae:	e0f2      	b.n	800ae96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	885b      	ldrh	r3, [r3, #2]
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	2b05      	cmp	r3, #5
 800acb8:	f200 80ac 	bhi.w	800ae14 <USBD_GetDescriptor+0x204>
 800acbc:	a201      	add	r2, pc, #4	; (adr r2, 800acc4 <USBD_GetDescriptor+0xb4>)
 800acbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc2:	bf00      	nop
 800acc4:	0800acdd 	.word	0x0800acdd
 800acc8:	0800ad11 	.word	0x0800ad11
 800accc:	0800ad45 	.word	0x0800ad45
 800acd0:	0800ad79 	.word	0x0800ad79
 800acd4:	0800adad 	.word	0x0800adad
 800acd8:	0800ade1 	.word	0x0800ade1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00b      	beq.n	800ad00 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	7c12      	ldrb	r2, [r2, #16]
 800acf4:	f107 0108 	add.w	r1, r7, #8
 800acf8:	4610      	mov	r0, r2
 800acfa:	4798      	blx	r3
 800acfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acfe:	e091      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 facb 	bl	800b29e <USBD_CtlError>
            err++;
 800ad08:	7afb      	ldrb	r3, [r7, #11]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad0e:	e089      	b.n	800ae24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00b      	beq.n	800ad34 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	7c12      	ldrb	r2, [r2, #16]
 800ad28:	f107 0108 	add.w	r1, r7, #8
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4798      	blx	r3
 800ad30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad32:	e077      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fab1 	bl	800b29e <USBD_CtlError>
            err++;
 800ad3c:	7afb      	ldrb	r3, [r7, #11]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	72fb      	strb	r3, [r7, #11]
          break;
 800ad42:	e06f      	b.n	800ae24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d00b      	beq.n	800ad68 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	7c12      	ldrb	r2, [r2, #16]
 800ad5c:	f107 0108 	add.w	r1, r7, #8
 800ad60:	4610      	mov	r0, r2
 800ad62:	4798      	blx	r3
 800ad64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad66:	e05d      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad68:	6839      	ldr	r1, [r7, #0]
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fa97 	bl	800b29e <USBD_CtlError>
            err++;
 800ad70:	7afb      	ldrb	r3, [r7, #11]
 800ad72:	3301      	adds	r3, #1
 800ad74:	72fb      	strb	r3, [r7, #11]
          break;
 800ad76:	e055      	b.n	800ae24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00b      	beq.n	800ad9c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	7c12      	ldrb	r2, [r2, #16]
 800ad90:	f107 0108 	add.w	r1, r7, #8
 800ad94:	4610      	mov	r0, r2
 800ad96:	4798      	blx	r3
 800ad98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad9a:	e043      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fa7d 	bl	800b29e <USBD_CtlError>
            err++;
 800ada4:	7afb      	ldrb	r3, [r7, #11]
 800ada6:	3301      	adds	r3, #1
 800ada8:	72fb      	strb	r3, [r7, #11]
          break;
 800adaa:	e03b      	b.n	800ae24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adb2:	695b      	ldr	r3, [r3, #20]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00b      	beq.n	800add0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adbe:	695b      	ldr	r3, [r3, #20]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	7c12      	ldrb	r2, [r2, #16]
 800adc4:	f107 0108 	add.w	r1, r7, #8
 800adc8:	4610      	mov	r0, r2
 800adca:	4798      	blx	r3
 800adcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adce:	e029      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fa63 	bl	800b29e <USBD_CtlError>
            err++;
 800add8:	7afb      	ldrb	r3, [r7, #11]
 800adda:	3301      	adds	r3, #1
 800addc:	72fb      	strb	r3, [r7, #11]
          break;
 800adde:	e021      	b.n	800ae24 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ade6:	699b      	ldr	r3, [r3, #24]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00b      	beq.n	800ae04 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf2:	699b      	ldr	r3, [r3, #24]
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	7c12      	ldrb	r2, [r2, #16]
 800adf8:	f107 0108 	add.w	r1, r7, #8
 800adfc:	4610      	mov	r0, r2
 800adfe:	4798      	blx	r3
 800ae00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae02:	e00f      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fa49 	bl	800b29e <USBD_CtlError>
            err++;
 800ae0c:	7afb      	ldrb	r3, [r7, #11]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	72fb      	strb	r3, [r7, #11]
          break;
 800ae12:	e007      	b.n	800ae24 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 fa41 	bl	800b29e <USBD_CtlError>
          err++;
 800ae1c:	7afb      	ldrb	r3, [r7, #11]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ae22:	bf00      	nop
      }
      break;
 800ae24:	e037      	b.n	800ae96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	7c1b      	ldrb	r3, [r3, #16]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d109      	bne.n	800ae42 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae36:	f107 0208 	add.w	r2, r7, #8
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	4798      	blx	r3
 800ae3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae40:	e029      	b.n	800ae96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fa2a 	bl	800b29e <USBD_CtlError>
        err++;
 800ae4a:	7afb      	ldrb	r3, [r7, #11]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae50:	e021      	b.n	800ae96 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	7c1b      	ldrb	r3, [r3, #16]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d10d      	bne.n	800ae76 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae62:	f107 0208 	add.w	r2, r7, #8
 800ae66:	4610      	mov	r0, r2
 800ae68:	4798      	blx	r3
 800ae6a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	2207      	movs	r2, #7
 800ae72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae74:	e00f      	b.n	800ae96 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 fa10 	bl	800b29e <USBD_CtlError>
        err++;
 800ae7e:	7afb      	ldrb	r3, [r7, #11]
 800ae80:	3301      	adds	r3, #1
 800ae82:	72fb      	strb	r3, [r7, #11]
      break;
 800ae84:	e007      	b.n	800ae96 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fa08 	bl	800b29e <USBD_CtlError>
      err++;
 800ae8e:	7afb      	ldrb	r3, [r7, #11]
 800ae90:	3301      	adds	r3, #1
 800ae92:	72fb      	strb	r3, [r7, #11]
      break;
 800ae94:	bf00      	nop
  }

  if (err != 0U)
 800ae96:	7afb      	ldrb	r3, [r7, #11]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d11e      	bne.n	800aeda <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	88db      	ldrh	r3, [r3, #6]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d016      	beq.n	800aed2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aea4:	893b      	ldrh	r3, [r7, #8]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00e      	beq.n	800aec8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	88da      	ldrh	r2, [r3, #6]
 800aeae:	893b      	ldrh	r3, [r7, #8]
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	bf28      	it	cs
 800aeb4:	4613      	movcs	r3, r2
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aeba:	893b      	ldrh	r3, [r7, #8]
 800aebc:	461a      	mov	r2, r3
 800aebe:	68f9      	ldr	r1, [r7, #12]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fa5d 	bl	800b380 <USBD_CtlSendData>
 800aec6:	e009      	b.n	800aedc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aec8:	6839      	ldr	r1, [r7, #0]
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f9e7 	bl	800b29e <USBD_CtlError>
 800aed0:	e004      	b.n	800aedc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 faae 	bl	800b434 <USBD_CtlSendStatus>
 800aed8:	e000      	b.n	800aedc <USBD_GetDescriptor+0x2cc>
    return;
 800aeda:	bf00      	nop
  }
}
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop

0800aee4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	889b      	ldrh	r3, [r3, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d131      	bne.n	800af5a <USBD_SetAddress+0x76>
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	88db      	ldrh	r3, [r3, #6]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d12d      	bne.n	800af5a <USBD_SetAddress+0x76>
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	885b      	ldrh	r3, [r3, #2]
 800af02:	2b7f      	cmp	r3, #127	; 0x7f
 800af04:	d829      	bhi.n	800af5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	885b      	ldrh	r3, [r3, #2]
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d104      	bne.n	800af28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800af1e:	6839      	ldr	r1, [r7, #0]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f9bc 	bl	800b29e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af26:	e01d      	b.n	800af64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	7bfa      	ldrb	r2, [r7, #15]
 800af2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	4619      	mov	r1, r3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f003 fcd9 	bl	800e8ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fa7a 	bl	800b434 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800af40:	7bfb      	ldrb	r3, [r7, #15]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d004      	beq.n	800af50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2202      	movs	r2, #2
 800af4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af4e:	e009      	b.n	800af64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af58:	e004      	b.n	800af64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af5a:	6839      	ldr	r1, [r7, #0]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 f99e 	bl	800b29e <USBD_CtlError>
  }
}
 800af62:	bf00      	nop
 800af64:	bf00      	nop
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af76:	2300      	movs	r3, #0
 800af78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	885b      	ldrh	r3, [r3, #2]
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	4b4e      	ldr	r3, [pc, #312]	; (800b0bc <USBD_SetConfig+0x150>)
 800af82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af84:	4b4d      	ldr	r3, [pc, #308]	; (800b0bc <USBD_SetConfig+0x150>)
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d905      	bls.n	800af98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af8c:	6839      	ldr	r1, [r7, #0]
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f985 	bl	800b29e <USBD_CtlError>
    return USBD_FAIL;
 800af94:	2303      	movs	r3, #3
 800af96:	e08c      	b.n	800b0b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d002      	beq.n	800afaa <USBD_SetConfig+0x3e>
 800afa4:	2b03      	cmp	r3, #3
 800afa6:	d029      	beq.n	800affc <USBD_SetConfig+0x90>
 800afa8:	e075      	b.n	800b096 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800afaa:	4b44      	ldr	r3, [pc, #272]	; (800b0bc <USBD_SetConfig+0x150>)
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d020      	beq.n	800aff4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800afb2:	4b42      	ldr	r3, [pc, #264]	; (800b0bc <USBD_SetConfig+0x150>)
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	461a      	mov	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800afbc:	4b3f      	ldr	r3, [pc, #252]	; (800b0bc <USBD_SetConfig+0x150>)
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	4619      	mov	r1, r3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7fe ffe7 	bl	8009f96 <USBD_SetClassConfig>
 800afc8:	4603      	mov	r3, r0
 800afca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800afcc:	7bfb      	ldrb	r3, [r7, #15]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d008      	beq.n	800afe4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f962 	bl	800b29e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2202      	movs	r2, #2
 800afde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afe2:	e065      	b.n	800b0b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fa25 	bl	800b434 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2203      	movs	r2, #3
 800afee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aff2:	e05d      	b.n	800b0b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fa1d 	bl	800b434 <USBD_CtlSendStatus>
      break;
 800affa:	e059      	b.n	800b0b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800affc:	4b2f      	ldr	r3, [pc, #188]	; (800b0bc <USBD_SetConfig+0x150>)
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d112      	bne.n	800b02a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b00c:	4b2b      	ldr	r3, [pc, #172]	; (800b0bc <USBD_SetConfig+0x150>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	461a      	mov	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b016:	4b29      	ldr	r3, [pc, #164]	; (800b0bc <USBD_SetConfig+0x150>)
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7fe ffd6 	bl	8009fce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fa06 	bl	800b434 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b028:	e042      	b.n	800b0b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b02a:	4b24      	ldr	r3, [pc, #144]	; (800b0bc <USBD_SetConfig+0x150>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	429a      	cmp	r2, r3
 800b036:	d02a      	beq.n	800b08e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	4619      	mov	r1, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7fe ffc4 	bl	8009fce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b046:	4b1d      	ldr	r3, [pc, #116]	; (800b0bc <USBD_SetConfig+0x150>)
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	461a      	mov	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b050:	4b1a      	ldr	r3, [pc, #104]	; (800b0bc <USBD_SetConfig+0x150>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	4619      	mov	r1, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7fe ff9d 	bl	8009f96 <USBD_SetClassConfig>
 800b05c:	4603      	mov	r3, r0
 800b05e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00f      	beq.n	800b086 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f918 	bl	800b29e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	b2db      	uxtb	r3, r3
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7fe ffa9 	bl	8009fce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2202      	movs	r2, #2
 800b080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b084:	e014      	b.n	800b0b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f9d4 	bl	800b434 <USBD_CtlSendStatus>
      break;
 800b08c:	e010      	b.n	800b0b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f9d0 	bl	800b434 <USBD_CtlSendStatus>
      break;
 800b094:	e00c      	b.n	800b0b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f900 	bl	800b29e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b09e:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <USBD_SetConfig+0x150>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7fe ff92 	bl	8009fce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ae:	bf00      	nop
  }

  return ret;
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	2000086c 	.word	0x2000086c

0800b0c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	88db      	ldrh	r3, [r3, #6]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d004      	beq.n	800b0dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 f8e2 	bl	800b29e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b0da:	e023      	b.n	800b124 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	dc02      	bgt.n	800b0ee <USBD_GetConfig+0x2e>
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	dc03      	bgt.n	800b0f4 <USBD_GetConfig+0x34>
 800b0ec:	e015      	b.n	800b11a <USBD_GetConfig+0x5a>
 800b0ee:	2b03      	cmp	r3, #3
 800b0f0:	d00b      	beq.n	800b10a <USBD_GetConfig+0x4a>
 800b0f2:	e012      	b.n	800b11a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	3308      	adds	r3, #8
 800b0fe:	2201      	movs	r2, #1
 800b100:	4619      	mov	r1, r3
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f93c 	bl	800b380 <USBD_CtlSendData>
        break;
 800b108:	e00c      	b.n	800b124 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3304      	adds	r3, #4
 800b10e:	2201      	movs	r2, #1
 800b110:	4619      	mov	r1, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f934 	bl	800b380 <USBD_CtlSendData>
        break;
 800b118:	e004      	b.n	800b124 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f8be 	bl	800b29e <USBD_CtlError>
        break;
 800b122:	bf00      	nop
}
 800b124:	bf00      	nop
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	3b01      	subs	r3, #1
 800b140:	2b02      	cmp	r3, #2
 800b142:	d81e      	bhi.n	800b182 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	88db      	ldrh	r3, [r3, #6]
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d004      	beq.n	800b156 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 f8a5 	bl	800b29e <USBD_CtlError>
        break;
 800b154:	e01a      	b.n	800b18c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2201      	movs	r2, #1
 800b15a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b162:	2b00      	cmp	r3, #0
 800b164:	d005      	beq.n	800b172 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	f043 0202 	orr.w	r2, r3, #2
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	330c      	adds	r3, #12
 800b176:	2202      	movs	r2, #2
 800b178:	4619      	mov	r1, r3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f900 	bl	800b380 <USBD_CtlSendData>
      break;
 800b180:	e004      	b.n	800b18c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 f88a 	bl	800b29e <USBD_CtlError>
      break;
 800b18a:	bf00      	nop
  }
}
 800b18c:	bf00      	nop
 800b18e:	3708      	adds	r7, #8
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	885b      	ldrh	r3, [r3, #2]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d107      	bne.n	800b1b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f940 	bl	800b434 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b1b4:	e013      	b.n	800b1de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	885b      	ldrh	r3, [r3, #2]
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d10b      	bne.n	800b1d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	889b      	ldrh	r3, [r3, #4]
 800b1c2:	0a1b      	lsrs	r3, r3, #8
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	b2da      	uxtb	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f930 	bl	800b434 <USBD_CtlSendStatus>
}
 800b1d4:	e003      	b.n	800b1de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f860 	bl	800b29e <USBD_CtlError>
}
 800b1de:	bf00      	nop
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b082      	sub	sp, #8
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d80b      	bhi.n	800b216 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	885b      	ldrh	r3, [r3, #2]
 800b202:	2b01      	cmp	r3, #1
 800b204:	d10c      	bne.n	800b220 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 f910 	bl	800b434 <USBD_CtlSendStatus>
      }
      break;
 800b214:	e004      	b.n	800b220 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b216:	6839      	ldr	r1, [r7, #0]
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 f840 	bl	800b29e <USBD_CtlError>
      break;
 800b21e:	e000      	b.n	800b222 <USBD_ClrFeature+0x3c>
      break;
 800b220:	bf00      	nop
  }
}
 800b222:	bf00      	nop
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b084      	sub	sp, #16
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	781a      	ldrb	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	3301      	adds	r3, #1
 800b244:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3301      	adds	r3, #1
 800b252:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b254:	68f8      	ldr	r0, [r7, #12]
 800b256:	f7ff fa41 	bl	800a6dc <SWAPBYTE>
 800b25a:	4603      	mov	r3, r0
 800b25c:	461a      	mov	r2, r3
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	3301      	adds	r3, #1
 800b266:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	3301      	adds	r3, #1
 800b26c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f7ff fa34 	bl	800a6dc <SWAPBYTE>
 800b274:	4603      	mov	r3, r0
 800b276:	461a      	mov	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	3301      	adds	r3, #1
 800b280:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3301      	adds	r3, #1
 800b286:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f7ff fa27 	bl	800a6dc <SWAPBYTE>
 800b28e:	4603      	mov	r3, r0
 800b290:	461a      	mov	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	80da      	strh	r2, [r3, #6]
}
 800b296:	bf00      	nop
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b082      	sub	sp, #8
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
 800b2a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2a8:	2180      	movs	r1, #128	; 0x80
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f003 fab4 	bl	800e818 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f003 fab0 	bl	800e818 <USBD_LL_StallEP>
}
 800b2b8:	bf00      	nop
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d036      	beq.n	800b344 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b2da:	6938      	ldr	r0, [r7, #16]
 800b2dc:	f000 f836 	bl	800b34c <USBD_GetLen>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	005b      	lsls	r3, r3, #1
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
 800b2f0:	68ba      	ldr	r2, [r7, #8]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	7812      	ldrb	r2, [r2, #0]
 800b2f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2fa:	7dfb      	ldrb	r3, [r7, #23]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b300:	7dfb      	ldrb	r3, [r7, #23]
 800b302:	68ba      	ldr	r2, [r7, #8]
 800b304:	4413      	add	r3, r2
 800b306:	2203      	movs	r2, #3
 800b308:	701a      	strb	r2, [r3, #0]
  idx++;
 800b30a:	7dfb      	ldrb	r3, [r7, #23]
 800b30c:	3301      	adds	r3, #1
 800b30e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b310:	e013      	b.n	800b33a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	68ba      	ldr	r2, [r7, #8]
 800b316:	4413      	add	r3, r2
 800b318:	693a      	ldr	r2, [r7, #16]
 800b31a:	7812      	ldrb	r2, [r2, #0]
 800b31c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	3301      	adds	r3, #1
 800b322:	613b      	str	r3, [r7, #16]
    idx++;
 800b324:	7dfb      	ldrb	r3, [r7, #23]
 800b326:	3301      	adds	r3, #1
 800b328:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b32a:	7dfb      	ldrb	r3, [r7, #23]
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	4413      	add	r3, r2
 800b330:	2200      	movs	r2, #0
 800b332:	701a      	strb	r2, [r3, #0]
    idx++;
 800b334:	7dfb      	ldrb	r3, [r7, #23]
 800b336:	3301      	adds	r3, #1
 800b338:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1e7      	bne.n	800b312 <USBD_GetString+0x52>
 800b342:	e000      	b.n	800b346 <USBD_GetString+0x86>
    return;
 800b344:	bf00      	nop
  }
}
 800b346:	3718      	adds	r7, #24
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b354:	2300      	movs	r3, #0
 800b356:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b35c:	e005      	b.n	800b36a <USBD_GetLen+0x1e>
  {
    len++;
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
 800b360:	3301      	adds	r3, #1
 800b362:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	3301      	adds	r3, #1
 800b368:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1f5      	bne.n	800b35e <USBD_GetLen+0x12>
  }

  return len;
 800b372:	7bfb      	ldrb	r3, [r7, #15]
}
 800b374:	4618      	mov	r0, r3
 800b376:	3714      	adds	r7, #20
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2202      	movs	r2, #2
 800b390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f003 fabf 	bl	800e92a <USBD_LL_Transmit>

  return USBD_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b084      	sub	sp, #16
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	60f8      	str	r0, [r7, #12]
 800b3be:	60b9      	str	r1, [r7, #8]
 800b3c0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	2100      	movs	r1, #0
 800b3c8:	68f8      	ldr	r0, [r7, #12]
 800b3ca:	f003 faae 	bl	800e92a <USBD_LL_Transmit>

  return USBD_OK;
 800b3ce:	2300      	movs	r3, #0
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2203      	movs	r2, #3
 800b3e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	2100      	movs	r1, #0
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f003 fab2 	bl	800e96c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b412:	b580      	push	{r7, lr}
 800b414:	b084      	sub	sp, #16
 800b416:	af00      	add	r7, sp, #0
 800b418:	60f8      	str	r0, [r7, #12]
 800b41a:	60b9      	str	r1, [r7, #8]
 800b41c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	2100      	movs	r1, #0
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f003 faa1 	bl	800e96c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b082      	sub	sp, #8
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2204      	movs	r2, #4
 800b440:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b444:	2300      	movs	r3, #0
 800b446:	2200      	movs	r2, #0
 800b448:	2100      	movs	r1, #0
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f003 fa6d 	bl	800e92a <USBD_LL_Transmit>

  return USBD_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b45a:	b580      	push	{r7, lr}
 800b45c:	b082      	sub	sp, #8
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2205      	movs	r2, #5
 800b466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b46a:	2300      	movs	r3, #0
 800b46c:	2200      	movs	r2, #0
 800b46e:	2100      	movs	r1, #0
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f003 fa7b 	bl	800e96c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	4603      	mov	r3, r0
 800b488:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b48a:	2300      	movs	r3, #0
 800b48c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b48e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b492:	2b84      	cmp	r3, #132	; 0x84
 800b494:	d005      	beq.n	800b4a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b496:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	4413      	add	r3, r2
 800b49e:	3303      	adds	r3, #3
 800b4a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3714      	adds	r7, #20
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4b6:	f3ef 8305 	mrs	r3, IPSR
 800b4ba:	607b      	str	r3, [r7, #4]
  return(result);
 800b4bc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	bf14      	ite	ne
 800b4c2:	2301      	movne	r3, #1
 800b4c4:	2300      	moveq	r3, #0
 800b4c6:	b2db      	uxtb	r3, r3
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b4d8:	f001 fa26 	bl	800c928 <vTaskStartScheduler>
  
  return osOK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b4e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4e4:	b089      	sub	sp, #36	; 0x24
 800b4e6:	af04      	add	r7, sp, #16
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	695b      	ldr	r3, [r3, #20]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d020      	beq.n	800b536 <osThreadCreate+0x54>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	699b      	ldr	r3, [r3, #24]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d01c      	beq.n	800b536 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685c      	ldr	r4, [r3, #4]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	691e      	ldr	r6, [r3, #16]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b50e:	4618      	mov	r0, r3
 800b510:	f7ff ffb6 	bl	800b480 <makeFreeRtosPriority>
 800b514:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b51e:	9202      	str	r2, [sp, #8]
 800b520:	9301      	str	r3, [sp, #4]
 800b522:	9100      	str	r1, [sp, #0]
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	4632      	mov	r2, r6
 800b528:	4629      	mov	r1, r5
 800b52a:	4620      	mov	r0, r4
 800b52c:	f001 f868 	bl	800c600 <xTaskCreateStatic>
 800b530:	4603      	mov	r3, r0
 800b532:	60fb      	str	r3, [r7, #12]
 800b534:	e01c      	b.n	800b570 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	685c      	ldr	r4, [r3, #4]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b542:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7ff ff98 	bl	800b480 <makeFreeRtosPriority>
 800b550:	4602      	mov	r2, r0
 800b552:	f107 030c 	add.w	r3, r7, #12
 800b556:	9301      	str	r3, [sp, #4]
 800b558:	9200      	str	r2, [sp, #0]
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	4632      	mov	r2, r6
 800b55e:	4629      	mov	r1, r5
 800b560:	4620      	mov	r0, r4
 800b562:	f001 f8aa 	bl	800c6ba <xTaskCreate>
 800b566:	4603      	mov	r3, r0
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d001      	beq.n	800b570 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b56c:	2300      	movs	r3, #0
 800b56e:	e000      	b.n	800b572 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b570:	68fb      	ldr	r3, [r7, #12]
}
 800b572:	4618      	mov	r0, r3
 800b574:	3714      	adds	r7, #20
 800b576:	46bd      	mov	sp, r7
 800b578:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b57c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b086      	sub	sp, #24
 800b580:	af02      	add	r7, sp, #8
 800b582:	6078      	str	r0, [r7, #4]
 800b584:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b586:	2300      	movs	r3, #0
 800b588:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800b58e:	f7ff ff8f 	bl	800b4b0 <inHandlerMode>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d01c      	beq.n	800b5d2 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	f107 0208 	add.w	r2, r7, #8
 800b59e:	f107 030c 	add.w	r3, r7, #12
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f001 ff6f 	bl	800d48c <xTaskGenericNotifyFromISR>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d002      	beq.n	800b5ba <osSignalSet+0x3e>
      return 0x80000000;
 800b5b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5b8:	e019      	b.n	800b5ee <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d015      	beq.n	800b5ec <osSignalSet+0x70>
 800b5c0:	4b0d      	ldr	r3, [pc, #52]	; (800b5f8 <osSignalSet+0x7c>)
 800b5c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5c6:	601a      	str	r2, [r3, #0]
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	e00c      	b.n	800b5ec <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800b5d2:	6839      	ldr	r1, [r7, #0]
 800b5d4:	f107 0308 	add.w	r3, r7, #8
 800b5d8:	2201      	movs	r2, #1
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f001 fea0 	bl	800d320 <xTaskGenericNotify>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d002      	beq.n	800b5ec <osSignalSet+0x70>
    return 0x80000000;
 800b5e6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5ea:	e000      	b.n	800b5ee <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800b5ec:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3710      	adds	r7, #16
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	e000ed04 	.word	0xe000ed04

0800b5fc <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800b5fc:	b590      	push	{r4, r7, lr}
 800b5fe:	b089      	sub	sp, #36	; 0x24
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800b608:	2300      	movs	r3, #0
 800b60a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800b60c:	2300      	movs	r3, #0
 800b60e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b616:	d103      	bne.n	800b620 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800b618:	f04f 33ff 	mov.w	r3, #4294967295
 800b61c:	61fb      	str	r3, [r7, #28]
 800b61e:	e009      	b.n	800b634 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d006      	beq.n	800b634 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <osSignalWait+0x38>
      ticks = 1;
 800b630:	2301      	movs	r3, #1
 800b632:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800b634:	f7ff ff3c 	bl	800b4b0 <inHandlerMode>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d002      	beq.n	800b644 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800b63e:	2382      	movs	r3, #130	; 0x82
 800b640:	613b      	str	r3, [r7, #16]
 800b642:	e01b      	b.n	800b67c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800b644:	68b9      	ldr	r1, [r7, #8]
 800b646:	f107 0310 	add.w	r3, r7, #16
 800b64a:	1d1a      	adds	r2, r3, #4
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	2000      	movs	r0, #0
 800b650:	f001 fe0c 	bl	800d26c <xTaskNotifyWait>
 800b654:	4603      	mov	r3, r0
 800b656:	2b01      	cmp	r3, #1
 800b658:	d008      	beq.n	800b66c <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d102      	bne.n	800b666 <osSignalWait+0x6a>
 800b660:	2300      	movs	r3, #0
 800b662:	613b      	str	r3, [r7, #16]
 800b664:	e00a      	b.n	800b67c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800b666:	2340      	movs	r3, #64	; 0x40
 800b668:	613b      	str	r3, [r7, #16]
 800b66a:	e007      	b.n	800b67c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	da02      	bge.n	800b678 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800b672:	2386      	movs	r3, #134	; 0x86
 800b674:	613b      	str	r3, [r7, #16]
 800b676:	e001      	b.n	800b67c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800b678:	2308      	movs	r3, #8
 800b67a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	461c      	mov	r4, r3
 800b680:	f107 0310 	add.w	r3, r7, #16
 800b684:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	3724      	adds	r7, #36	; 0x24
 800b690:	46bd      	mov	sp, r7
 800b692:	bd90      	pop	{r4, r7, pc}

0800b694 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	3303      	adds	r3, #3
 800b6a2:	f023 0303 	bic.w	r3, r3, #3
 800b6a6:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800b6a8:	2014      	movs	r0, #20
 800b6aa:	f002 fa7d 	bl	800dba8 <pvPortMalloc>
 800b6ae:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800b6b0:	697b      	ldr	r3, [r7, #20]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d046      	beq.n	800b744 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681a      	ldr	r2, [r3, #0]
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f002 fa6a 	bl	800dba8 <pvPortMalloc>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d02b      	beq.n	800b73a <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	fb02 f303 	mul.w	r3, r2, r3
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f002 fa5b 	bl	800dba8 <pvPortMalloc>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d011      	beq.n	800b724 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800b700:	2300      	movs	r3, #0
 800b702:	613b      	str	r3, [r7, #16]
 800b704:	e008      	b.n	800b718 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	685a      	ldr	r2, [r3, #4]
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	4413      	add	r3, r2
 800b70e:	2200      	movs	r2, #0
 800b710:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	3301      	adds	r3, #1
 800b716:	613b      	str	r3, [r7, #16]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d3f1      	bcc.n	800b706 <osPoolCreate+0x72>
 800b722:	e00f      	b.n	800b744 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	4618      	mov	r0, r3
 800b72a:	f002 fb09 	bl	800dd40 <vPortFree>
        vPortFree(thePool);
 800b72e:	6978      	ldr	r0, [r7, #20]
 800b730:	f002 fb06 	bl	800dd40 <vPortFree>
        thePool = NULL;
 800b734:	2300      	movs	r3, #0
 800b736:	617b      	str	r3, [r7, #20]
 800b738:	e004      	b.n	800b744 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800b73a:	6978      	ldr	r0, [r7, #20]
 800b73c:	f002 fb00 	bl	800dd40 <vPortFree>
      thePool = NULL;
 800b740:	2300      	movs	r3, #0
 800b742:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800b744:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800b746:	4618      	mov	r0, r3
 800b748:	3718      	adds	r7, #24
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b08a      	sub	sp, #40	; 0x28
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800b75a:	2300      	movs	r3, #0
 800b75c:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800b75e:	f7ff fea7 	bl	800b4b0 <inHandlerMode>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00e      	beq.n	800b786 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b768:	f3ef 8211 	mrs	r2, BASEPRI
 800b76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b770:	f383 8811 	msr	BASEPRI, r3
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	f3bf 8f4f 	dsb	sy
 800b77c:	617a      	str	r2, [r7, #20]
 800b77e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b780:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800b782:	627b      	str	r3, [r7, #36]	; 0x24
 800b784:	e001      	b.n	800b78a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800b786:	f002 f8ed 	bl	800d964 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800b78a:	2300      	movs	r3, #0
 800b78c:	61fb      	str	r3, [r7, #28]
 800b78e:	e029      	b.n	800b7e4 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	691a      	ldr	r2, [r3, #16]
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	4413      	add	r3, r2
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	6892      	ldr	r2, [r2, #8]
 800b79c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7a0:	fb01 f202 	mul.w	r2, r1, r2
 800b7a4:	1a9b      	subs	r3, r3, r2
 800b7a6:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685a      	ldr	r2, [r3, #4]
 800b7ac:	69bb      	ldr	r3, [r7, #24]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d113      	bne.n	800b7de <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	685a      	ldr	r2, [r3, #4]
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	4413      	add	r3, r2
 800b7be:	2201      	movs	r2, #1
 800b7c0:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	69ba      	ldr	r2, [r7, #24]
 800b7ce:	fb02 f303 	mul.w	r3, r2, r3
 800b7d2:	440b      	add	r3, r1
 800b7d4:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	69ba      	ldr	r2, [r7, #24]
 800b7da:	611a      	str	r2, [r3, #16]
      break;
 800b7dc:	e007      	b.n	800b7ee <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	61fb      	str	r3, [r7, #28]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	69fa      	ldr	r2, [r7, #28]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d3d0      	bcc.n	800b790 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800b7ee:	f7ff fe5f 	bl	800b4b0 <inHandlerMode>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d005      	beq.n	800b804 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b802:	e001      	b.n	800b808 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800b804:	f002 f8de 	bl	800d9c4 <vPortExitCritical>
  }
  
  return p;
 800b808:	6a3b      	ldr	r3, [r7, #32]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3728      	adds	r7, #40	; 0x28
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800b812:	b480      	push	{r7}
 800b814:	b085      	sub	sp, #20
 800b816:	af00      	add	r7, sp, #0
 800b818:	6078      	str	r0, [r7, #4]
 800b81a:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d101      	bne.n	800b826 <osPoolFree+0x14>
    return osErrorParameter;
 800b822:	2380      	movs	r3, #128	; 0x80
 800b824:	e030      	b.n	800b888 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <osPoolFree+0x1e>
    return osErrorParameter;
 800b82c:	2380      	movs	r3, #128	; 0x80
 800b82e:	e02b      	b.n	800b888 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	683a      	ldr	r2, [r7, #0]
 800b836:	429a      	cmp	r2, r3
 800b838:	d201      	bcs.n	800b83e <osPoolFree+0x2c>
    return osErrorParameter;
 800b83a:	2380      	movs	r3, #128	; 0x80
 800b83c:	e024      	b.n	800b888 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	6812      	ldr	r2, [r2, #0]
 800b844:	1a9b      	subs	r3, r3, r2
 800b846:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	68da      	ldr	r2, [r3, #12]
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b852:	fb01 f202 	mul.w	r2, r1, r2
 800b856:	1a9b      	subs	r3, r3, r2
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <osPoolFree+0x4e>
    return osErrorParameter;
 800b85c:	2380      	movs	r3, #128	; 0x80
 800b85e:	e013      	b.n	800b888 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	68db      	ldr	r3, [r3, #12]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	fbb2 f3f3 	udiv	r3, r2, r3
 800b86a:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	429a      	cmp	r2, r3
 800b874:	d301      	bcc.n	800b87a <osPoolFree+0x68>
    return osErrorParameter;
 800b876:	2380      	movs	r3, #128	; 0x80
 800b878:	e006      	b.n	800b888 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	685a      	ldr	r2, [r3, #4]
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	4413      	add	r3, r2
 800b882:	2200      	movs	r2, #0
 800b884:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800b894:	b590      	push	{r4, r7, lr}
 800b896:	b087      	sub	sp, #28
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	60fb      	str	r3, [r7, #12]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	613b      	str	r3, [r7, #16]
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	689c      	ldr	r4, [r3, #8]
 800b8b2:	200c      	movs	r0, #12
 800b8b4:	f002 f978 	bl	800dba8 <pvPortMalloc>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <osMailCreate+0x36>
    return NULL;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e038      	b.n	800b93c <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	687a      	ldr	r2, [r7, #4]
 800b8d2:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6818      	ldr	r0, [r3, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	689b      	ldr	r3, [r3, #8]
 800b8dc:	681c      	ldr	r4, [r3, #0]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	2104      	movs	r1, #4
 800b8e2:	f000 fa29 	bl	800bd38 <xQueueGenericCreate>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d107      	bne.n	800b906 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f002 fa1f 	bl	800dd40 <vPortFree>
    return NULL;
 800b902:	2300      	movs	r3, #0
 800b904:	e01a      	b.n	800b93c <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	681c      	ldr	r4, [r3, #0]
 800b90c:	f107 030c 	add.w	r3, r7, #12
 800b910:	4618      	mov	r0, r3
 800b912:	f7ff febf 	bl	800b694 <osPoolCreate>
 800b916:	4603      	mov	r3, r0
 800b918:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d107      	bne.n	800b936 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f002 fa07 	bl	800dd40 <vPortFree>
    return NULL;
 800b932:	2300      	movs	r3, #0
 800b934:	e002      	b.n	800b93c <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689b      	ldr	r3, [r3, #8]
 800b93a:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	371c      	adds	r7, #28
 800b940:	46bd      	mov	sp, r7
 800b942:	bd90      	pop	{r4, r7, pc}

0800b944 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d101      	bne.n	800b958 <osMailAlloc+0x14>
    return NULL;
 800b954:	2300      	movs	r3, #0
 800b956:	e006      	b.n	800b966 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7ff fef6 	bl	800b74e <osPoolAlloc>
 800b962:	60f8      	str	r0, [r7, #12]
  
  return p;
 800b964:	68fb      	ldr	r3, [r7, #12]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3710      	adds	r7, #16
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
	...

0800b970 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d101      	bne.n	800b984 <osMailPut+0x14>
    return osErrorParameter;
 800b980:	2380      	movs	r3, #128	; 0x80
 800b982:	e02c      	b.n	800b9de <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800b988:	f7ff fd92 	bl	800b4b0 <inHandlerMode>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d018      	beq.n	800b9c4 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6858      	ldr	r0, [r3, #4]
 800b996:	f107 020c 	add.w	r2, r7, #12
 800b99a:	4639      	mov	r1, r7
 800b99c:	2300      	movs	r3, #0
 800b99e:	f000 fb23 	bl	800bfe8 <xQueueGenericSendFromISR>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d001      	beq.n	800b9ac <osMailPut+0x3c>
      return osErrorOS;
 800b9a8:	23ff      	movs	r3, #255	; 0xff
 800b9aa:	e018      	b.n	800b9de <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d014      	beq.n	800b9dc <osMailPut+0x6c>
 800b9b2:	4b0d      	ldr	r3, [pc, #52]	; (800b9e8 <osMailPut+0x78>)
 800b9b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b8:	601a      	str	r2, [r3, #0]
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	e00b      	b.n	800b9dc <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6858      	ldr	r0, [r3, #4]
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	f000 fa0d 	bl	800bdec <xQueueGenericSend>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d001      	beq.n	800b9dc <osMailPut+0x6c>
      return osErrorOS;
 800b9d8:	23ff      	movs	r3, #255	; 0xff
 800b9da:	e000      	b.n	800b9de <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	e000ed04 	.word	0xe000ed04

0800b9ec <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800b9ec:	b590      	push	{r4, r7, lr}
 800b9ee:	b08b      	sub	sp, #44	; 0x2c
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d10a      	bne.n	800ba18 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800ba02:	2380      	movs	r3, #128	; 0x80
 800ba04:	617b      	str	r3, [r7, #20]
    return event;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	461c      	mov	r4, r3
 800ba0a:	f107 0314 	add.w	r3, r7, #20
 800ba0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ba16:	e056      	b.n	800bac6 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba26:	d103      	bne.n	800ba30 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800ba28:	f04f 33ff 	mov.w	r3, #4294967295
 800ba2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba2e:	e009      	b.n	800ba44 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d006      	beq.n	800ba44 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d101      	bne.n	800ba44 <osMailGet+0x58>
      ticks = 1;
 800ba40:	2301      	movs	r3, #1
 800ba42:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ba44:	f7ff fd34 	bl	800b4b0 <inHandlerMode>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d01d      	beq.n	800ba8a <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	6858      	ldr	r0, [r3, #4]
 800ba52:	f107 0220 	add.w	r2, r7, #32
 800ba56:	f107 0314 	add.w	r3, r7, #20
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	f000 fc3f 	bl	800c2e0 <xQueueReceiveFromISR>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d102      	bne.n	800ba6e <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800ba68:	2320      	movs	r3, #32
 800ba6a:	617b      	str	r3, [r7, #20]
 800ba6c:	e001      	b.n	800ba72 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d01e      	beq.n	800bab6 <osMailGet+0xca>
 800ba78:	4b15      	ldr	r3, [pc, #84]	; (800bad0 <osMailGet+0xe4>)
 800ba7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba7e:	601a      	str	r2, [r3, #0]
 800ba80:	f3bf 8f4f 	dsb	sy
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	e015      	b.n	800bab6 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	6858      	ldr	r0, [r3, #4]
 800ba8e:	f107 0314 	add.w	r3, r7, #20
 800ba92:	3304      	adds	r3, #4
 800ba94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba96:	4619      	mov	r1, r3
 800ba98:	f000 fb42 	bl	800c120 <xQueueReceive>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d102      	bne.n	800baa8 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800baa2:	2320      	movs	r3, #32
 800baa4:	617b      	str	r3, [r7, #20]
 800baa6:	e006      	b.n	800bab6 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800baa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <osMailGet+0xc6>
 800baae:	2300      	movs	r3, #0
 800bab0:	e000      	b.n	800bab4 <osMailGet+0xc8>
 800bab2:	2340      	movs	r3, #64	; 0x40
 800bab4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	461c      	mov	r4, r3
 800baba:	f107 0314 	add.w	r3, r7, #20
 800babe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bac2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bac6:	68f8      	ldr	r0, [r7, #12]
 800bac8:	372c      	adds	r7, #44	; 0x2c
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd90      	pop	{r4, r7, pc}
 800bace:	bf00      	nop
 800bad0:	e000ed04 	.word	0xe000ed04

0800bad4 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d101      	bne.n	800bae8 <osMailFree+0x14>
    return osErrorParameter;
 800bae4:	2380      	movs	r3, #128	; 0x80
 800bae6:	e006      	b.n	800baf6 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff fe8f 	bl	800b812 <osPoolFree>
 800baf4:	4603      	mov	r3, r0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bafe:	b480      	push	{r7}
 800bb00:	b083      	sub	sp, #12
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f103 0208 	add.w	r2, r3, #8
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f04f 32ff 	mov.w	r2, #4294967295
 800bb16:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f103 0208 	add.w	r2, r3, #8
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f103 0208 	add.w	r2, r3, #8
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb32:	bf00      	nop
 800bb34:	370c      	adds	r7, #12
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr

0800bb3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb3e:	b480      	push	{r7}
 800bb40:	b083      	sub	sp, #12
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	689a      	ldr	r2, [r3, #8]
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	683a      	ldr	r2, [r7, #0]
 800bb7c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	601a      	str	r2, [r3, #0]
}
 800bb94:	bf00      	nop
 800bb96:	3714      	adds	r7, #20
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb6:	d103      	bne.n	800bbc0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	691b      	ldr	r3, [r3, #16]
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	e00c      	b.n	800bbda <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	3308      	adds	r3, #8
 800bbc4:	60fb      	str	r3, [r7, #12]
 800bbc6:	e002      	b.n	800bbce <vListInsert+0x2e>
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	60fb      	str	r3, [r7, #12]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	68ba      	ldr	r2, [r7, #8]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d2f6      	bcs.n	800bbc8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	685a      	ldr	r2, [r3, #4]
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	1c5a      	adds	r2, r3, #1
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	601a      	str	r2, [r3, #0]
}
 800bc06:	bf00      	nop
 800bc08:	3714      	adds	r7, #20
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr

0800bc12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc12:	b480      	push	{r7}
 800bc14:	b085      	sub	sp, #20
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	6892      	ldr	r2, [r2, #8]
 800bc28:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	689b      	ldr	r3, [r3, #8]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	6852      	ldr	r2, [r2, #4]
 800bc32:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d103      	bne.n	800bc46 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	689a      	ldr	r2, [r3, #8]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	1e5a      	subs	r2, r3, #1
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
	...

0800bc68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10a      	bne.n	800bc92 <xQueueGenericReset+0x2a>
	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	60bb      	str	r3, [r7, #8]
}
 800bc8e:	bf00      	nop
 800bc90:	e7fe      	b.n	800bc90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc92:	f001 fe67 	bl	800d964 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc9e:	68f9      	ldr	r1, [r7, #12]
 800bca0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bca2:	fb01 f303 	mul.w	r3, r1, r3
 800bca6:	441a      	add	r2, r3
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681a      	ldr	r2, [r3, #0]
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc2:	3b01      	subs	r3, #1
 800bcc4:	68f9      	ldr	r1, [r7, #12]
 800bcc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bcc8:	fb01 f303 	mul.w	r3, r1, r3
 800bccc:	441a      	add	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	22ff      	movs	r2, #255	; 0xff
 800bcd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	22ff      	movs	r2, #255	; 0xff
 800bcde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d114      	bne.n	800bd12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d01a      	beq.n	800bd26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	3310      	adds	r3, #16
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f001 f859 	bl	800cdac <xTaskRemoveFromEventList>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d012      	beq.n	800bd26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bd00:	4b0c      	ldr	r3, [pc, #48]	; (800bd34 <xQueueGenericReset+0xcc>)
 800bd02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd06:	601a      	str	r2, [r3, #0]
 800bd08:	f3bf 8f4f 	dsb	sy
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	e009      	b.n	800bd26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3310      	adds	r3, #16
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7ff fef1 	bl	800bafe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	3324      	adds	r3, #36	; 0x24
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7ff feec 	bl	800bafe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd26:	f001 fe4d 	bl	800d9c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd2a:	2301      	movs	r3, #1
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	e000ed04 	.word	0xe000ed04

0800bd38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08a      	sub	sp, #40	; 0x28
 800bd3c:	af02      	add	r7, sp, #8
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	4613      	mov	r3, r2
 800bd44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10a      	bne.n	800bd62 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	613b      	str	r3, [r7, #16]
}
 800bd5e:	bf00      	nop
 800bd60:	e7fe      	b.n	800bd60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	fb02 f303 	mul.w	r3, r2, r3
 800bd6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	3348      	adds	r3, #72	; 0x48
 800bd70:	4618      	mov	r0, r3
 800bd72:	f001 ff19 	bl	800dba8 <pvPortMalloc>
 800bd76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d011      	beq.n	800bda2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	3348      	adds	r3, #72	; 0x48
 800bd86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd90:	79fa      	ldrb	r2, [r7, #7]
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	4613      	mov	r3, r2
 800bd98:	697a      	ldr	r2, [r7, #20]
 800bd9a:	68b9      	ldr	r1, [r7, #8]
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f000 f805 	bl	800bdac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bda2:	69bb      	ldr	r3, [r7, #24]
	}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3720      	adds	r7, #32
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
 800bdb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d103      	bne.n	800bdc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	69ba      	ldr	r2, [r7, #24]
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	e002      	b.n	800bdce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bdda:	2101      	movs	r1, #1
 800bddc:	69b8      	ldr	r0, [r7, #24]
 800bdde:	f7ff ff43 	bl	800bc68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bde2:	bf00      	nop
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
	...

0800bdec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b08e      	sub	sp, #56	; 0x38
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]
 800bdf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10a      	bne.n	800be1e <xQueueGenericSend+0x32>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be1a:	bf00      	nop
 800be1c:	e7fe      	b.n	800be1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d103      	bne.n	800be2c <xQueueGenericSend+0x40>
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d101      	bne.n	800be30 <xQueueGenericSend+0x44>
 800be2c:	2301      	movs	r3, #1
 800be2e:	e000      	b.n	800be32 <xQueueGenericSend+0x46>
 800be30:	2300      	movs	r3, #0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10a      	bne.n	800be4c <xQueueGenericSend+0x60>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	627b      	str	r3, [r7, #36]	; 0x24
}
 800be48:	bf00      	nop
 800be4a:	e7fe      	b.n	800be4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d103      	bne.n	800be5a <xQueueGenericSend+0x6e>
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be56:	2b01      	cmp	r3, #1
 800be58:	d101      	bne.n	800be5e <xQueueGenericSend+0x72>
 800be5a:	2301      	movs	r3, #1
 800be5c:	e000      	b.n	800be60 <xQueueGenericSend+0x74>
 800be5e:	2300      	movs	r3, #0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10a      	bne.n	800be7a <xQueueGenericSend+0x8e>
	__asm volatile
 800be64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	623b      	str	r3, [r7, #32]
}
 800be76:	bf00      	nop
 800be78:	e7fe      	b.n	800be78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be7a:	f001 f953 	bl	800d124 <xTaskGetSchedulerState>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d102      	bne.n	800be8a <xQueueGenericSend+0x9e>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <xQueueGenericSend+0xa2>
 800be8a:	2301      	movs	r3, #1
 800be8c:	e000      	b.n	800be90 <xQueueGenericSend+0xa4>
 800be8e:	2300      	movs	r3, #0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10a      	bne.n	800beaa <xQueueGenericSend+0xbe>
	__asm volatile
 800be94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	61fb      	str	r3, [r7, #28]
}
 800bea6:	bf00      	nop
 800bea8:	e7fe      	b.n	800bea8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800beaa:	f001 fd5b 	bl	800d964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800beae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800beb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d302      	bcc.n	800bec0 <xQueueGenericSend+0xd4>
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	d129      	bne.n	800bf14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bec0:	683a      	ldr	r2, [r7, #0]
 800bec2:	68b9      	ldr	r1, [r7, #8]
 800bec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bec6:	f000 fa8b 	bl	800c3e0 <prvCopyDataToQueue>
 800beca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800becc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d010      	beq.n	800bef6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed6:	3324      	adds	r3, #36	; 0x24
 800bed8:	4618      	mov	r0, r3
 800beda:	f000 ff67 	bl	800cdac <xTaskRemoveFromEventList>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d013      	beq.n	800bf0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bee4:	4b3f      	ldr	r3, [pc, #252]	; (800bfe4 <xQueueGenericSend+0x1f8>)
 800bee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beea:	601a      	str	r2, [r3, #0]
 800beec:	f3bf 8f4f 	dsb	sy
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	e00a      	b.n	800bf0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d007      	beq.n	800bf0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800befc:	4b39      	ldr	r3, [pc, #228]	; (800bfe4 <xQueueGenericSend+0x1f8>)
 800befe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf02:	601a      	str	r2, [r3, #0]
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf0c:	f001 fd5a 	bl	800d9c4 <vPortExitCritical>
				return pdPASS;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e063      	b.n	800bfdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d103      	bne.n	800bf22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf1a:	f001 fd53 	bl	800d9c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	e05c      	b.n	800bfdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d106      	bne.n	800bf36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf28:	f107 0314 	add.w	r3, r7, #20
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f000 ff9f 	bl	800ce70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf32:	2301      	movs	r3, #1
 800bf34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf36:	f001 fd45 	bl	800d9c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf3a:	f000 fd55 	bl	800c9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf3e:	f001 fd11 	bl	800d964 <vPortEnterCritical>
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf48:	b25b      	sxtb	r3, r3
 800bf4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4e:	d103      	bne.n	800bf58 <xQueueGenericSend+0x16c>
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	2200      	movs	r2, #0
 800bf54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf5e:	b25b      	sxtb	r3, r3
 800bf60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf64:	d103      	bne.n	800bf6e <xQueueGenericSend+0x182>
 800bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf6e:	f001 fd29 	bl	800d9c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf72:	1d3a      	adds	r2, r7, #4
 800bf74:	f107 0314 	add.w	r3, r7, #20
 800bf78:	4611      	mov	r1, r2
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 ff8e 	bl	800ce9c <xTaskCheckForTimeOut>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d124      	bne.n	800bfd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bf86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf88:	f000 fb22 	bl	800c5d0 <prvIsQueueFull>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d018      	beq.n	800bfc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf94:	3310      	adds	r3, #16
 800bf96:	687a      	ldr	r2, [r7, #4]
 800bf98:	4611      	mov	r1, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f000 fee2 	bl	800cd64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bfa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfa2:	f000 faad 	bl	800c500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bfa6:	f000 fd2d 	bl	800ca04 <xTaskResumeAll>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f47f af7c 	bne.w	800beaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bfb2:	4b0c      	ldr	r3, [pc, #48]	; (800bfe4 <xQueueGenericSend+0x1f8>)
 800bfb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfb8:	601a      	str	r2, [r3, #0]
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	e772      	b.n	800beaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bfc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfc6:	f000 fa9b 	bl	800c500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfca:	f000 fd1b 	bl	800ca04 <xTaskResumeAll>
 800bfce:	e76c      	b.n	800beaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bfd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfd2:	f000 fa95 	bl	800c500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfd6:	f000 fd15 	bl	800ca04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bfda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3738      	adds	r7, #56	; 0x38
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	e000ed04 	.word	0xe000ed04

0800bfe8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b090      	sub	sp, #64	; 0x40
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
 800bff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10a      	bne.n	800c016 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c012:	bf00      	nop
 800c014:	e7fe      	b.n	800c014 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d103      	bne.n	800c024 <xQueueGenericSendFromISR+0x3c>
 800c01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c020:	2b00      	cmp	r3, #0
 800c022:	d101      	bne.n	800c028 <xQueueGenericSendFromISR+0x40>
 800c024:	2301      	movs	r3, #1
 800c026:	e000      	b.n	800c02a <xQueueGenericSendFromISR+0x42>
 800c028:	2300      	movs	r3, #0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10a      	bne.n	800c044 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c040:	bf00      	nop
 800c042:	e7fe      	b.n	800c042 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2b02      	cmp	r3, #2
 800c048:	d103      	bne.n	800c052 <xQueueGenericSendFromISR+0x6a>
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d101      	bne.n	800c056 <xQueueGenericSendFromISR+0x6e>
 800c052:	2301      	movs	r3, #1
 800c054:	e000      	b.n	800c058 <xQueueGenericSendFromISR+0x70>
 800c056:	2300      	movs	r3, #0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d10a      	bne.n	800c072 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c060:	f383 8811 	msr	BASEPRI, r3
 800c064:	f3bf 8f6f 	isb	sy
 800c068:	f3bf 8f4f 	dsb	sy
 800c06c:	623b      	str	r3, [r7, #32]
}
 800c06e:	bf00      	nop
 800c070:	e7fe      	b.n	800c070 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c072:	f001 fd59 	bl	800db28 <vPortValidateInterruptPriority>
	__asm volatile
 800c076:	f3ef 8211 	mrs	r2, BASEPRI
 800c07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	61fa      	str	r2, [r7, #28]
 800c08c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c08e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c090:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d302      	bcc.n	800c0a4 <xQueueGenericSendFromISR+0xbc>
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d12f      	bne.n	800c104 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0b4:	683a      	ldr	r2, [r7, #0]
 800c0b6:	68b9      	ldr	r1, [r7, #8]
 800c0b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c0ba:	f000 f991 	bl	800c3e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c0be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c6:	d112      	bne.n	800c0ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d016      	beq.n	800c0fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d2:	3324      	adds	r3, #36	; 0x24
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f000 fe69 	bl	800cdac <xTaskRemoveFromEventList>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00e      	beq.n	800c0fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00b      	beq.n	800c0fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	601a      	str	r2, [r3, #0]
 800c0ec:	e007      	b.n	800c0fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c0ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	b25a      	sxtb	r2, r3
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c0fe:	2301      	movs	r3, #1
 800c100:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c102:	e001      	b.n	800c108 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c104:	2300      	movs	r3, #0
 800c106:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	f383 8811 	msr	BASEPRI, r3
}
 800c112:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c116:	4618      	mov	r0, r3
 800c118:	3740      	adds	r7, #64	; 0x40
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
	...

0800c120 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b08c      	sub	sp, #48	; 0x30
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c12c:	2300      	movs	r3, #0
 800c12e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10a      	bne.n	800c150 <xQueueReceive+0x30>
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	623b      	str	r3, [r7, #32]
}
 800c14c:	bf00      	nop
 800c14e:	e7fe      	b.n	800c14e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d103      	bne.n	800c15e <xQueueReceive+0x3e>
 800c156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <xQueueReceive+0x42>
 800c15e:	2301      	movs	r3, #1
 800c160:	e000      	b.n	800c164 <xQueueReceive+0x44>
 800c162:	2300      	movs	r3, #0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d10a      	bne.n	800c17e <xQueueReceive+0x5e>
	__asm volatile
 800c168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c16c:	f383 8811 	msr	BASEPRI, r3
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	f3bf 8f4f 	dsb	sy
 800c178:	61fb      	str	r3, [r7, #28]
}
 800c17a:	bf00      	nop
 800c17c:	e7fe      	b.n	800c17c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c17e:	f000 ffd1 	bl	800d124 <xTaskGetSchedulerState>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d102      	bne.n	800c18e <xQueueReceive+0x6e>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d101      	bne.n	800c192 <xQueueReceive+0x72>
 800c18e:	2301      	movs	r3, #1
 800c190:	e000      	b.n	800c194 <xQueueReceive+0x74>
 800c192:	2300      	movs	r3, #0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d10a      	bne.n	800c1ae <xQueueReceive+0x8e>
	__asm volatile
 800c198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	61bb      	str	r3, [r7, #24]
}
 800c1aa:	bf00      	nop
 800c1ac:	e7fe      	b.n	800c1ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1ae:	f001 fbd9 	bl	800d964 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d01f      	beq.n	800c1fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1be:	68b9      	ldr	r1, [r7, #8]
 800c1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1c2:	f000 f977 	bl	800c4b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c8:	1e5a      	subs	r2, r3, #1
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00f      	beq.n	800c1f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	3310      	adds	r3, #16
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f000 fde6 	bl	800cdac <xTaskRemoveFromEventList>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d007      	beq.n	800c1f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1e6:	4b3d      	ldr	r3, [pc, #244]	; (800c2dc <xQueueReceive+0x1bc>)
 800c1e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1ec:	601a      	str	r2, [r3, #0]
 800c1ee:	f3bf 8f4f 	dsb	sy
 800c1f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1f6:	f001 fbe5 	bl	800d9c4 <vPortExitCritical>
				return pdPASS;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e069      	b.n	800c2d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d103      	bne.n	800c20c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c204:	f001 fbde 	bl	800d9c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c208:	2300      	movs	r3, #0
 800c20a:	e062      	b.n	800c2d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d106      	bne.n	800c220 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c212:	f107 0310 	add.w	r3, r7, #16
 800c216:	4618      	mov	r0, r3
 800c218:	f000 fe2a 	bl	800ce70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c21c:	2301      	movs	r3, #1
 800c21e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c220:	f001 fbd0 	bl	800d9c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c224:	f000 fbe0 	bl	800c9e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c228:	f001 fb9c 	bl	800d964 <vPortEnterCritical>
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c232:	b25b      	sxtb	r3, r3
 800c234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c238:	d103      	bne.n	800c242 <xQueueReceive+0x122>
 800c23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23c:	2200      	movs	r2, #0
 800c23e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c248:	b25b      	sxtb	r3, r3
 800c24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c24e:	d103      	bne.n	800c258 <xQueueReceive+0x138>
 800c250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c252:	2200      	movs	r2, #0
 800c254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c258:	f001 fbb4 	bl	800d9c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c25c:	1d3a      	adds	r2, r7, #4
 800c25e:	f107 0310 	add.w	r3, r7, #16
 800c262:	4611      	mov	r1, r2
 800c264:	4618      	mov	r0, r3
 800c266:	f000 fe19 	bl	800ce9c <xTaskCheckForTimeOut>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d123      	bne.n	800c2b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c272:	f000 f997 	bl	800c5a4 <prvIsQueueEmpty>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d017      	beq.n	800c2ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27e:	3324      	adds	r3, #36	; 0x24
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	4611      	mov	r1, r2
 800c284:	4618      	mov	r0, r3
 800c286:	f000 fd6d 	bl	800cd64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c28a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c28c:	f000 f938 	bl	800c500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c290:	f000 fbb8 	bl	800ca04 <xTaskResumeAll>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d189      	bne.n	800c1ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c29a:	4b10      	ldr	r3, [pc, #64]	; (800c2dc <xQueueReceive+0x1bc>)
 800c29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a0:	601a      	str	r2, [r3, #0]
 800c2a2:	f3bf 8f4f 	dsb	sy
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	e780      	b.n	800c1ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c2ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ae:	f000 f927 	bl	800c500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2b2:	f000 fba7 	bl	800ca04 <xTaskResumeAll>
 800c2b6:	e77a      	b.n	800c1ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c2b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ba:	f000 f921 	bl	800c500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2be:	f000 fba1 	bl	800ca04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2c4:	f000 f96e 	bl	800c5a4 <prvIsQueueEmpty>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f43f af6f 	beq.w	800c1ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3730      	adds	r7, #48	; 0x30
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	e000ed04 	.word	0xe000ed04

0800c2e0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b08e      	sub	sp, #56	; 0x38
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d10a      	bne.n	800c30c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	623b      	str	r3, [r7, #32]
}
 800c308:	bf00      	nop
 800c30a:	e7fe      	b.n	800c30a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d103      	bne.n	800c31a <xQueueReceiveFromISR+0x3a>
 800c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c316:	2b00      	cmp	r3, #0
 800c318:	d101      	bne.n	800c31e <xQueueReceiveFromISR+0x3e>
 800c31a:	2301      	movs	r3, #1
 800c31c:	e000      	b.n	800c320 <xQueueReceiveFromISR+0x40>
 800c31e:	2300      	movs	r3, #0
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10a      	bne.n	800c33a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c328:	f383 8811 	msr	BASEPRI, r3
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	61fb      	str	r3, [r7, #28]
}
 800c336:	bf00      	nop
 800c338:	e7fe      	b.n	800c338 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c33a:	f001 fbf5 	bl	800db28 <vPortValidateInterruptPriority>
	__asm volatile
 800c33e:	f3ef 8211 	mrs	r2, BASEPRI
 800c342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c346:	f383 8811 	msr	BASEPRI, r3
 800c34a:	f3bf 8f6f 	isb	sy
 800c34e:	f3bf 8f4f 	dsb	sy
 800c352:	61ba      	str	r2, [r7, #24]
 800c354:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c356:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c358:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c35e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c362:	2b00      	cmp	r3, #0
 800c364:	d02f      	beq.n	800c3c6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c36c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c370:	68b9      	ldr	r1, [r7, #8]
 800c372:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c374:	f000 f89e 	bl	800c4b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37a:	1e5a      	subs	r2, r3, #1
 800c37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c380:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c388:	d112      	bne.n	800c3b0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d016      	beq.n	800c3c0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	3310      	adds	r3, #16
 800c396:	4618      	mov	r0, r3
 800c398:	f000 fd08 	bl	800cdac <xTaskRemoveFromEventList>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00e      	beq.n	800c3c0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00b      	beq.n	800c3c0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	601a      	str	r2, [r3, #0]
 800c3ae:	e007      	b.n	800c3c0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c3b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	b25a      	sxtb	r2, r3
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	637b      	str	r3, [r7, #52]	; 0x34
 800c3c4:	e001      	b.n	800c3ca <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	637b      	str	r3, [r7, #52]	; 0x34
 800c3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	f383 8811 	msr	BASEPRI, r3
}
 800c3d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3738      	adds	r7, #56	; 0x38
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10d      	bne.n	800c41a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d14d      	bne.n	800c4a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	689b      	ldr	r3, [r3, #8]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f000 fea8 	bl	800d160 <xTaskPriorityDisinherit>
 800c410:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2200      	movs	r2, #0
 800c416:	609a      	str	r2, [r3, #8]
 800c418:	e043      	b.n	800c4a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d119      	bne.n	800c454 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	6858      	ldr	r0, [r3, #4]
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c428:	461a      	mov	r2, r3
 800c42a:	68b9      	ldr	r1, [r7, #8]
 800c42c:	f003 f9da 	bl	800f7e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	685a      	ldr	r2, [r3, #4]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c438:	441a      	add	r2, r3
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	685a      	ldr	r2, [r3, #4]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	429a      	cmp	r2, r3
 800c448:	d32b      	bcc.n	800c4a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	605a      	str	r2, [r3, #4]
 800c452:	e026      	b.n	800c4a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	68d8      	ldr	r0, [r3, #12]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c45c:	461a      	mov	r2, r3
 800c45e:	68b9      	ldr	r1, [r7, #8]
 800c460:	f003 f9c0 	bl	800f7e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	68da      	ldr	r2, [r3, #12]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c46c:	425b      	negs	r3, r3
 800c46e:	441a      	add	r2, r3
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	68da      	ldr	r2, [r3, #12]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d207      	bcs.n	800c490 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	689a      	ldr	r2, [r3, #8]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c488:	425b      	negs	r3, r3
 800c48a:	441a      	add	r2, r3
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2b02      	cmp	r3, #2
 800c494:	d105      	bne.n	800c4a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d002      	beq.n	800c4a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	1c5a      	adds	r2, r3, #1
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c4aa:	697b      	ldr	r3, [r7, #20]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3718      	adds	r7, #24
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d018      	beq.n	800c4f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	68da      	ldr	r2, [r3, #12]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ce:	441a      	add	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	68da      	ldr	r2, [r3, #12]
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d303      	bcc.n	800c4e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	68d9      	ldr	r1, [r3, #12]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	6838      	ldr	r0, [r7, #0]
 800c4f4:	f003 f976 	bl	800f7e4 <memcpy>
	}
}
 800c4f8:	bf00      	nop
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b084      	sub	sp, #16
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c508:	f001 fa2c 	bl	800d964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c514:	e011      	b.n	800c53a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d012      	beq.n	800c544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3324      	adds	r3, #36	; 0x24
 800c522:	4618      	mov	r0, r3
 800c524:	f000 fc42 	bl	800cdac <xTaskRemoveFromEventList>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d001      	beq.n	800c532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c52e:	f000 fd17 	bl	800cf60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c532:	7bfb      	ldrb	r3, [r7, #15]
 800c534:	3b01      	subs	r3, #1
 800c536:	b2db      	uxtb	r3, r3
 800c538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c53a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	dce9      	bgt.n	800c516 <prvUnlockQueue+0x16>
 800c542:	e000      	b.n	800c546 <prvUnlockQueue+0x46>
					break;
 800c544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	22ff      	movs	r2, #255	; 0xff
 800c54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c54e:	f001 fa39 	bl	800d9c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c552:	f001 fa07 	bl	800d964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c55c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c55e:	e011      	b.n	800c584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d012      	beq.n	800c58e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	3310      	adds	r3, #16
 800c56c:	4618      	mov	r0, r3
 800c56e:	f000 fc1d 	bl	800cdac <xTaskRemoveFromEventList>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d001      	beq.n	800c57c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c578:	f000 fcf2 	bl	800cf60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c57c:	7bbb      	ldrb	r3, [r7, #14]
 800c57e:	3b01      	subs	r3, #1
 800c580:	b2db      	uxtb	r3, r3
 800c582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	dce9      	bgt.n	800c560 <prvUnlockQueue+0x60>
 800c58c:	e000      	b.n	800c590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c58e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	22ff      	movs	r2, #255	; 0xff
 800c594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c598:	f001 fa14 	bl	800d9c4 <vPortExitCritical>
}
 800c59c:	bf00      	nop
 800c59e:	3710      	adds	r7, #16
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c5ac:	f001 f9da 	bl	800d964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d102      	bne.n	800c5be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	60fb      	str	r3, [r7, #12]
 800c5bc:	e001      	b.n	800c5c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c5c2:	f001 f9ff 	bl	800d9c4 <vPortExitCritical>

	return xReturn;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3710      	adds	r7, #16
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c5d8:	f001 f9c4 	bl	800d964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d102      	bne.n	800c5ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	60fb      	str	r3, [r7, #12]
 800c5ec:	e001      	b.n	800c5f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c5f2:	f001 f9e7 	bl	800d9c4 <vPortExitCritical>

	return xReturn;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c600:	b580      	push	{r7, lr}
 800c602:	b08e      	sub	sp, #56	; 0x38
 800c604:	af04      	add	r7, sp, #16
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	607a      	str	r2, [r7, #4]
 800c60c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c610:	2b00      	cmp	r3, #0
 800c612:	d10a      	bne.n	800c62a <xTaskCreateStatic+0x2a>
	__asm volatile
 800c614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	623b      	str	r3, [r7, #32]
}
 800c626:	bf00      	nop
 800c628:	e7fe      	b.n	800c628 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10a      	bne.n	800c646 <xTaskCreateStatic+0x46>
	__asm volatile
 800c630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	61fb      	str	r3, [r7, #28]
}
 800c642:	bf00      	nop
 800c644:	e7fe      	b.n	800c644 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c646:	2354      	movs	r3, #84	; 0x54
 800c648:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	2b54      	cmp	r3, #84	; 0x54
 800c64e:	d00a      	beq.n	800c666 <xTaskCreateStatic+0x66>
	__asm volatile
 800c650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c654:	f383 8811 	msr	BASEPRI, r3
 800c658:	f3bf 8f6f 	isb	sy
 800c65c:	f3bf 8f4f 	dsb	sy
 800c660:	61bb      	str	r3, [r7, #24]
}
 800c662:	bf00      	nop
 800c664:	e7fe      	b.n	800c664 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c666:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d01e      	beq.n	800c6ac <xTaskCreateStatic+0xac>
 800c66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c670:	2b00      	cmp	r3, #0
 800c672:	d01b      	beq.n	800c6ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c676:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c67c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c680:	2202      	movs	r2, #2
 800c682:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c686:	2300      	movs	r3, #0
 800c688:	9303      	str	r3, [sp, #12]
 800c68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68c:	9302      	str	r3, [sp, #8]
 800c68e:	f107 0314 	add.w	r3, r7, #20
 800c692:	9301      	str	r3, [sp, #4]
 800c694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	68b9      	ldr	r1, [r7, #8]
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f000 f850 	bl	800c744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6a6:	f000 f8d5 	bl	800c854 <prvAddNewTaskToReadyList>
 800c6aa:	e001      	b.n	800c6b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c6b0:	697b      	ldr	r3, [r7, #20]
	}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3728      	adds	r7, #40	; 0x28
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b08c      	sub	sp, #48	; 0x30
 800c6be:	af04      	add	r7, sp, #16
 800c6c0:	60f8      	str	r0, [r7, #12]
 800c6c2:	60b9      	str	r1, [r7, #8]
 800c6c4:	603b      	str	r3, [r7, #0]
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c6ca:	88fb      	ldrh	r3, [r7, #6]
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f001 fa6a 	bl	800dba8 <pvPortMalloc>
 800c6d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00e      	beq.n	800c6fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6dc:	2054      	movs	r0, #84	; 0x54
 800c6de:	f001 fa63 	bl	800dba8 <pvPortMalloc>
 800c6e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d003      	beq.n	800c6f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	697a      	ldr	r2, [r7, #20]
 800c6ee:	631a      	str	r2, [r3, #48]	; 0x30
 800c6f0:	e005      	b.n	800c6fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c6f2:	6978      	ldr	r0, [r7, #20]
 800c6f4:	f001 fb24 	bl	800dd40 <vPortFree>
 800c6f8:	e001      	b.n	800c6fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d017      	beq.n	800c734 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c70c:	88fa      	ldrh	r2, [r7, #6]
 800c70e:	2300      	movs	r3, #0
 800c710:	9303      	str	r3, [sp, #12]
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	9302      	str	r3, [sp, #8]
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	9301      	str	r3, [sp, #4]
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	68b9      	ldr	r1, [r7, #8]
 800c722:	68f8      	ldr	r0, [r7, #12]
 800c724:	f000 f80e 	bl	800c744 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c728:	69f8      	ldr	r0, [r7, #28]
 800c72a:	f000 f893 	bl	800c854 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c72e:	2301      	movs	r3, #1
 800c730:	61bb      	str	r3, [r7, #24]
 800c732:	e002      	b.n	800c73a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c734:	f04f 33ff 	mov.w	r3, #4294967295
 800c738:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c73a:	69bb      	ldr	r3, [r7, #24]
	}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3720      	adds	r7, #32
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b088      	sub	sp, #32
 800c748:	af00      	add	r7, sp, #0
 800c74a:	60f8      	str	r0, [r7, #12]
 800c74c:	60b9      	str	r1, [r7, #8]
 800c74e:	607a      	str	r2, [r7, #4]
 800c750:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c75c:	3b01      	subs	r3, #1
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	f023 0307 	bic.w	r3, r3, #7
 800c76a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	f003 0307 	and.w	r3, r3, #7
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00a      	beq.n	800c78c <prvInitialiseNewTask+0x48>
	__asm volatile
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	617b      	str	r3, [r7, #20]
}
 800c788:	bf00      	nop
 800c78a:	e7fe      	b.n	800c78a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d01f      	beq.n	800c7d2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c792:	2300      	movs	r3, #0
 800c794:	61fb      	str	r3, [r7, #28]
 800c796:	e012      	b.n	800c7be <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	4413      	add	r3, r2
 800c79e:	7819      	ldrb	r1, [r3, #0]
 800c7a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	3334      	adds	r3, #52	; 0x34
 800c7a8:	460a      	mov	r2, r1
 800c7aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d006      	beq.n	800c7c6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	61fb      	str	r3, [r7, #28]
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	2b0f      	cmp	r3, #15
 800c7c2:	d9e9      	bls.n	800c798 <prvInitialiseNewTask+0x54>
 800c7c4:	e000      	b.n	800c7c8 <prvInitialiseNewTask+0x84>
			{
				break;
 800c7c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c7d0:	e003      	b.n	800c7da <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	2b06      	cmp	r3, #6
 800c7de:	d901      	bls.n	800c7e4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c7e0:	2306      	movs	r3, #6
 800c7e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7ee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	3304      	adds	r3, #4
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7ff f99f 	bl	800bb3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c802:	3318      	adds	r3, #24
 800c804:	4618      	mov	r0, r3
 800c806:	f7ff f99a 	bl	800bb3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c80e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	f1c3 0207 	rsb	r2, r3, #7
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c81e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c822:	2200      	movs	r2, #0
 800c824:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c82e:	683a      	ldr	r2, [r7, #0]
 800c830:	68f9      	ldr	r1, [r7, #12]
 800c832:	69b8      	ldr	r0, [r7, #24]
 800c834:	f000 ff6a 	bl	800d70c <pxPortInitialiseStack>
 800c838:	4602      	mov	r2, r0
 800c83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c840:	2b00      	cmp	r3, #0
 800c842:	d002      	beq.n	800c84a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c84a:	bf00      	nop
 800c84c:	3720      	adds	r7, #32
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
	...

0800c854 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c85c:	f001 f882 	bl	800d964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c860:	4b2a      	ldr	r3, [pc, #168]	; (800c90c <prvAddNewTaskToReadyList+0xb8>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	3301      	adds	r3, #1
 800c866:	4a29      	ldr	r2, [pc, #164]	; (800c90c <prvAddNewTaskToReadyList+0xb8>)
 800c868:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c86a:	4b29      	ldr	r3, [pc, #164]	; (800c910 <prvAddNewTaskToReadyList+0xbc>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d109      	bne.n	800c886 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c872:	4a27      	ldr	r2, [pc, #156]	; (800c910 <prvAddNewTaskToReadyList+0xbc>)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c878:	4b24      	ldr	r3, [pc, #144]	; (800c90c <prvAddNewTaskToReadyList+0xb8>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d110      	bne.n	800c8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c880:	f000 fb92 	bl	800cfa8 <prvInitialiseTaskLists>
 800c884:	e00d      	b.n	800c8a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c886:	4b23      	ldr	r3, [pc, #140]	; (800c914 <prvAddNewTaskToReadyList+0xc0>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d109      	bne.n	800c8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c88e:	4b20      	ldr	r3, [pc, #128]	; (800c910 <prvAddNewTaskToReadyList+0xbc>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c898:	429a      	cmp	r2, r3
 800c89a:	d802      	bhi.n	800c8a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c89c:	4a1c      	ldr	r2, [pc, #112]	; (800c910 <prvAddNewTaskToReadyList+0xbc>)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c8a2:	4b1d      	ldr	r3, [pc, #116]	; (800c918 <prvAddNewTaskToReadyList+0xc4>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	4a1b      	ldr	r2, [pc, #108]	; (800c918 <prvAddNewTaskToReadyList+0xc4>)
 800c8aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	409a      	lsls	r2, r3
 800c8b4:	4b19      	ldr	r3, [pc, #100]	; (800c91c <prvAddNewTaskToReadyList+0xc8>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	4a18      	ldr	r2, [pc, #96]	; (800c91c <prvAddNewTaskToReadyList+0xc8>)
 800c8bc:	6013      	str	r3, [r2, #0]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	009b      	lsls	r3, r3, #2
 800c8c6:	4413      	add	r3, r2
 800c8c8:	009b      	lsls	r3, r3, #2
 800c8ca:	4a15      	ldr	r2, [pc, #84]	; (800c920 <prvAddNewTaskToReadyList+0xcc>)
 800c8cc:	441a      	add	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	3304      	adds	r3, #4
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	4610      	mov	r0, r2
 800c8d6:	f7ff f93f 	bl	800bb58 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8da:	f001 f873 	bl	800d9c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8de:	4b0d      	ldr	r3, [pc, #52]	; (800c914 <prvAddNewTaskToReadyList+0xc0>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00e      	beq.n	800c904 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8e6:	4b0a      	ldr	r3, [pc, #40]	; (800c910 <prvAddNewTaskToReadyList+0xbc>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d207      	bcs.n	800c904 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8f4:	4b0b      	ldr	r3, [pc, #44]	; (800c924 <prvAddNewTaskToReadyList+0xd0>)
 800c8f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8fa:	601a      	str	r2, [r3, #0]
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c904:	bf00      	nop
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	20000970 	.word	0x20000970
 800c910:	20000870 	.word	0x20000870
 800c914:	2000097c 	.word	0x2000097c
 800c918:	2000098c 	.word	0x2000098c
 800c91c:	20000978 	.word	0x20000978
 800c920:	20000874 	.word	0x20000874
 800c924:	e000ed04 	.word	0xe000ed04

0800c928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b08a      	sub	sp, #40	; 0x28
 800c92c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c92e:	2300      	movs	r3, #0
 800c930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c932:	2300      	movs	r3, #0
 800c934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c936:	463a      	mov	r2, r7
 800c938:	1d39      	adds	r1, r7, #4
 800c93a:	f107 0308 	add.w	r3, r7, #8
 800c93e:	4618      	mov	r0, r3
 800c940:	f7f4 fac0 	bl	8000ec4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c944:	6839      	ldr	r1, [r7, #0]
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	68ba      	ldr	r2, [r7, #8]
 800c94a:	9202      	str	r2, [sp, #8]
 800c94c:	9301      	str	r3, [sp, #4]
 800c94e:	2300      	movs	r3, #0
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	2300      	movs	r3, #0
 800c954:	460a      	mov	r2, r1
 800c956:	491e      	ldr	r1, [pc, #120]	; (800c9d0 <vTaskStartScheduler+0xa8>)
 800c958:	481e      	ldr	r0, [pc, #120]	; (800c9d4 <vTaskStartScheduler+0xac>)
 800c95a:	f7ff fe51 	bl	800c600 <xTaskCreateStatic>
 800c95e:	4603      	mov	r3, r0
 800c960:	4a1d      	ldr	r2, [pc, #116]	; (800c9d8 <vTaskStartScheduler+0xb0>)
 800c962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c964:	4b1c      	ldr	r3, [pc, #112]	; (800c9d8 <vTaskStartScheduler+0xb0>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d002      	beq.n	800c972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c96c:	2301      	movs	r3, #1
 800c96e:	617b      	str	r3, [r7, #20]
 800c970:	e001      	b.n	800c976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c972:	2300      	movs	r3, #0
 800c974:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d116      	bne.n	800c9aa <vTaskStartScheduler+0x82>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	613b      	str	r3, [r7, #16]
}
 800c98e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c990:	4b12      	ldr	r3, [pc, #72]	; (800c9dc <vTaskStartScheduler+0xb4>)
 800c992:	f04f 32ff 	mov.w	r2, #4294967295
 800c996:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c998:	4b11      	ldr	r3, [pc, #68]	; (800c9e0 <vTaskStartScheduler+0xb8>)
 800c99a:	2201      	movs	r2, #1
 800c99c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c99e:	4b11      	ldr	r3, [pc, #68]	; (800c9e4 <vTaskStartScheduler+0xbc>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9a4:	f000 ff3c 	bl	800d820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9a8:	e00e      	b.n	800c9c8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9b0:	d10a      	bne.n	800c9c8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800c9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b6:	f383 8811 	msr	BASEPRI, r3
 800c9ba:	f3bf 8f6f 	isb	sy
 800c9be:	f3bf 8f4f 	dsb	sy
 800c9c2:	60fb      	str	r3, [r7, #12]
}
 800c9c4:	bf00      	nop
 800c9c6:	e7fe      	b.n	800c9c6 <vTaskStartScheduler+0x9e>
}
 800c9c8:	bf00      	nop
 800c9ca:	3718      	adds	r7, #24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	080117ec 	.word	0x080117ec
 800c9d4:	0800cf79 	.word	0x0800cf79
 800c9d8:	20000994 	.word	0x20000994
 800c9dc:	20000990 	.word	0x20000990
 800c9e0:	2000097c 	.word	0x2000097c
 800c9e4:	20000974 	.word	0x20000974

0800c9e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c9ec:	4b04      	ldr	r3, [pc, #16]	; (800ca00 <vTaskSuspendAll+0x18>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	4a03      	ldr	r2, [pc, #12]	; (800ca00 <vTaskSuspendAll+0x18>)
 800c9f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c9f6:	bf00      	nop
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	20000998 	.word	0x20000998

0800ca04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca12:	4b41      	ldr	r3, [pc, #260]	; (800cb18 <xTaskResumeAll+0x114>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d10a      	bne.n	800ca30 <xTaskResumeAll+0x2c>
	__asm volatile
 800ca1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1e:	f383 8811 	msr	BASEPRI, r3
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	f3bf 8f4f 	dsb	sy
 800ca2a:	603b      	str	r3, [r7, #0]
}
 800ca2c:	bf00      	nop
 800ca2e:	e7fe      	b.n	800ca2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca30:	f000 ff98 	bl	800d964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca34:	4b38      	ldr	r3, [pc, #224]	; (800cb18 <xTaskResumeAll+0x114>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	4a37      	ldr	r2, [pc, #220]	; (800cb18 <xTaskResumeAll+0x114>)
 800ca3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca3e:	4b36      	ldr	r3, [pc, #216]	; (800cb18 <xTaskResumeAll+0x114>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d161      	bne.n	800cb0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca46:	4b35      	ldr	r3, [pc, #212]	; (800cb1c <xTaskResumeAll+0x118>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d05d      	beq.n	800cb0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca4e:	e02e      	b.n	800caae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca50:	4b33      	ldr	r3, [pc, #204]	; (800cb20 <xTaskResumeAll+0x11c>)
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	68db      	ldr	r3, [r3, #12]
 800ca56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	3318      	adds	r3, #24
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7ff f8d8 	bl	800bc12 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	3304      	adds	r3, #4
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7ff f8d3 	bl	800bc12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca70:	2201      	movs	r2, #1
 800ca72:	409a      	lsls	r2, r3
 800ca74:	4b2b      	ldr	r3, [pc, #172]	; (800cb24 <xTaskResumeAll+0x120>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	4a2a      	ldr	r2, [pc, #168]	; (800cb24 <xTaskResumeAll+0x120>)
 800ca7c:	6013      	str	r3, [r2, #0]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca82:	4613      	mov	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	4413      	add	r3, r2
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4a27      	ldr	r2, [pc, #156]	; (800cb28 <xTaskResumeAll+0x124>)
 800ca8c:	441a      	add	r2, r3
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	3304      	adds	r3, #4
 800ca92:	4619      	mov	r1, r3
 800ca94:	4610      	mov	r0, r2
 800ca96:	f7ff f85f 	bl	800bb58 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca9e:	4b23      	ldr	r3, [pc, #140]	; (800cb2c <xTaskResumeAll+0x128>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d302      	bcc.n	800caae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800caa8:	4b21      	ldr	r3, [pc, #132]	; (800cb30 <xTaskResumeAll+0x12c>)
 800caaa:	2201      	movs	r2, #1
 800caac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800caae:	4b1c      	ldr	r3, [pc, #112]	; (800cb20 <xTaskResumeAll+0x11c>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1cc      	bne.n	800ca50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d001      	beq.n	800cac0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cabc:	f000 fb12 	bl	800d0e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cac0:	4b1c      	ldr	r3, [pc, #112]	; (800cb34 <xTaskResumeAll+0x130>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d010      	beq.n	800caee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cacc:	f000 f836 	bl	800cb3c <xTaskIncrementTick>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d002      	beq.n	800cadc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cad6:	4b16      	ldr	r3, [pc, #88]	; (800cb30 <xTaskResumeAll+0x12c>)
 800cad8:	2201      	movs	r2, #1
 800cada:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	3b01      	subs	r3, #1
 800cae0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1f1      	bne.n	800cacc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cae8:	4b12      	ldr	r3, [pc, #72]	; (800cb34 <xTaskResumeAll+0x130>)
 800caea:	2200      	movs	r2, #0
 800caec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800caee:	4b10      	ldr	r3, [pc, #64]	; (800cb30 <xTaskResumeAll+0x12c>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d009      	beq.n	800cb0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800caf6:	2301      	movs	r3, #1
 800caf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cafa:	4b0f      	ldr	r3, [pc, #60]	; (800cb38 <xTaskResumeAll+0x134>)
 800cafc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb00:	601a      	str	r2, [r3, #0]
 800cb02:	f3bf 8f4f 	dsb	sy
 800cb06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb0a:	f000 ff5b 	bl	800d9c4 <vPortExitCritical>

	return xAlreadyYielded;
 800cb0e:	68bb      	ldr	r3, [r7, #8]
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3710      	adds	r7, #16
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	20000998 	.word	0x20000998
 800cb1c:	20000970 	.word	0x20000970
 800cb20:	20000930 	.word	0x20000930
 800cb24:	20000978 	.word	0x20000978
 800cb28:	20000874 	.word	0x20000874
 800cb2c:	20000870 	.word	0x20000870
 800cb30:	20000984 	.word	0x20000984
 800cb34:	20000980 	.word	0x20000980
 800cb38:	e000ed04 	.word	0xe000ed04

0800cb3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb42:	2300      	movs	r3, #0
 800cb44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb46:	4b4e      	ldr	r3, [pc, #312]	; (800cc80 <xTaskIncrementTick+0x144>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f040 808e 	bne.w	800cc6c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb50:	4b4c      	ldr	r3, [pc, #304]	; (800cc84 <xTaskIncrementTick+0x148>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	3301      	adds	r3, #1
 800cb56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb58:	4a4a      	ldr	r2, [pc, #296]	; (800cc84 <xTaskIncrementTick+0x148>)
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d120      	bne.n	800cba6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb64:	4b48      	ldr	r3, [pc, #288]	; (800cc88 <xTaskIncrementTick+0x14c>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00a      	beq.n	800cb84 <xTaskIncrementTick+0x48>
	__asm volatile
 800cb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	603b      	str	r3, [r7, #0]
}
 800cb80:	bf00      	nop
 800cb82:	e7fe      	b.n	800cb82 <xTaskIncrementTick+0x46>
 800cb84:	4b40      	ldr	r3, [pc, #256]	; (800cc88 <xTaskIncrementTick+0x14c>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	60fb      	str	r3, [r7, #12]
 800cb8a:	4b40      	ldr	r3, [pc, #256]	; (800cc8c <xTaskIncrementTick+0x150>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4a3e      	ldr	r2, [pc, #248]	; (800cc88 <xTaskIncrementTick+0x14c>)
 800cb90:	6013      	str	r3, [r2, #0]
 800cb92:	4a3e      	ldr	r2, [pc, #248]	; (800cc8c <xTaskIncrementTick+0x150>)
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	6013      	str	r3, [r2, #0]
 800cb98:	4b3d      	ldr	r3, [pc, #244]	; (800cc90 <xTaskIncrementTick+0x154>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	4a3c      	ldr	r2, [pc, #240]	; (800cc90 <xTaskIncrementTick+0x154>)
 800cba0:	6013      	str	r3, [r2, #0]
 800cba2:	f000 fa9f 	bl	800d0e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cba6:	4b3b      	ldr	r3, [pc, #236]	; (800cc94 <xTaskIncrementTick+0x158>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	693a      	ldr	r2, [r7, #16]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d348      	bcc.n	800cc42 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbb0:	4b35      	ldr	r3, [pc, #212]	; (800cc88 <xTaskIncrementTick+0x14c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d104      	bne.n	800cbc4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbba:	4b36      	ldr	r3, [pc, #216]	; (800cc94 <xTaskIncrementTick+0x158>)
 800cbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc0:	601a      	str	r2, [r3, #0]
					break;
 800cbc2:	e03e      	b.n	800cc42 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbc4:	4b30      	ldr	r3, [pc, #192]	; (800cc88 <xTaskIncrementTick+0x14c>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cbd4:	693a      	ldr	r2, [r7, #16]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d203      	bcs.n	800cbe4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cbdc:	4a2d      	ldr	r2, [pc, #180]	; (800cc94 <xTaskIncrementTick+0x158>)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cbe2:	e02e      	b.n	800cc42 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	3304      	adds	r3, #4
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7ff f812 	bl	800bc12 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d004      	beq.n	800cc00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	3318      	adds	r3, #24
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7ff f809 	bl	800bc12 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc04:	2201      	movs	r2, #1
 800cc06:	409a      	lsls	r2, r3
 800cc08:	4b23      	ldr	r3, [pc, #140]	; (800cc98 <xTaskIncrementTick+0x15c>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	4a22      	ldr	r2, [pc, #136]	; (800cc98 <xTaskIncrementTick+0x15c>)
 800cc10:	6013      	str	r3, [r2, #0]
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc16:	4613      	mov	r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	4413      	add	r3, r2
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	4a1f      	ldr	r2, [pc, #124]	; (800cc9c <xTaskIncrementTick+0x160>)
 800cc20:	441a      	add	r2, r3
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	3304      	adds	r3, #4
 800cc26:	4619      	mov	r1, r3
 800cc28:	4610      	mov	r0, r2
 800cc2a:	f7fe ff95 	bl	800bb58 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc32:	4b1b      	ldr	r3, [pc, #108]	; (800cca0 <xTaskIncrementTick+0x164>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d3b9      	bcc.n	800cbb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc40:	e7b6      	b.n	800cbb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc42:	4b17      	ldr	r3, [pc, #92]	; (800cca0 <xTaskIncrementTick+0x164>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc48:	4914      	ldr	r1, [pc, #80]	; (800cc9c <xTaskIncrementTick+0x160>)
 800cc4a:	4613      	mov	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	4413      	add	r3, r2
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	440b      	add	r3, r1
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d901      	bls.n	800cc5e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cc5e:	4b11      	ldr	r3, [pc, #68]	; (800cca4 <xTaskIncrementTick+0x168>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d007      	beq.n	800cc76 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cc66:	2301      	movs	r3, #1
 800cc68:	617b      	str	r3, [r7, #20]
 800cc6a:	e004      	b.n	800cc76 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cc6c:	4b0e      	ldr	r3, [pc, #56]	; (800cca8 <xTaskIncrementTick+0x16c>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	3301      	adds	r3, #1
 800cc72:	4a0d      	ldr	r2, [pc, #52]	; (800cca8 <xTaskIncrementTick+0x16c>)
 800cc74:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cc76:	697b      	ldr	r3, [r7, #20]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3718      	adds	r7, #24
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	20000998 	.word	0x20000998
 800cc84:	20000974 	.word	0x20000974
 800cc88:	20000928 	.word	0x20000928
 800cc8c:	2000092c 	.word	0x2000092c
 800cc90:	20000988 	.word	0x20000988
 800cc94:	20000990 	.word	0x20000990
 800cc98:	20000978 	.word	0x20000978
 800cc9c:	20000874 	.word	0x20000874
 800cca0:	20000870 	.word	0x20000870
 800cca4:	20000984 	.word	0x20000984
 800cca8:	20000980 	.word	0x20000980

0800ccac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ccac:	b480      	push	{r7}
 800ccae:	b087      	sub	sp, #28
 800ccb0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccb2:	4b27      	ldr	r3, [pc, #156]	; (800cd50 <vTaskSwitchContext+0xa4>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d003      	beq.n	800ccc2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ccba:	4b26      	ldr	r3, [pc, #152]	; (800cd54 <vTaskSwitchContext+0xa8>)
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ccc0:	e03f      	b.n	800cd42 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800ccc2:	4b24      	ldr	r3, [pc, #144]	; (800cd54 <vTaskSwitchContext+0xa8>)
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccc8:	4b23      	ldr	r3, [pc, #140]	; (800cd58 <vTaskSwitchContext+0xac>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	fab3 f383 	clz	r3, r3
 800ccd4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ccd6:	7afb      	ldrb	r3, [r7, #11]
 800ccd8:	f1c3 031f 	rsb	r3, r3, #31
 800ccdc:	617b      	str	r3, [r7, #20]
 800ccde:	491f      	ldr	r1, [pc, #124]	; (800cd5c <vTaskSwitchContext+0xb0>)
 800cce0:	697a      	ldr	r2, [r7, #20]
 800cce2:	4613      	mov	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4413      	add	r3, r2
 800cce8:	009b      	lsls	r3, r3, #2
 800ccea:	440b      	add	r3, r1
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d10a      	bne.n	800cd08 <vTaskSwitchContext+0x5c>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	607b      	str	r3, [r7, #4]
}
 800cd04:	bf00      	nop
 800cd06:	e7fe      	b.n	800cd06 <vTaskSwitchContext+0x5a>
 800cd08:	697a      	ldr	r2, [r7, #20]
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	4413      	add	r3, r2
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	4a12      	ldr	r2, [pc, #72]	; (800cd5c <vTaskSwitchContext+0xb0>)
 800cd14:	4413      	add	r3, r2
 800cd16:	613b      	str	r3, [r7, #16]
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	605a      	str	r2, [r3, #4]
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	685a      	ldr	r2, [r3, #4]
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	3308      	adds	r3, #8
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d104      	bne.n	800cd38 <vTaskSwitchContext+0x8c>
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	685a      	ldr	r2, [r3, #4]
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	605a      	str	r2, [r3, #4]
 800cd38:	693b      	ldr	r3, [r7, #16]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	4a08      	ldr	r2, [pc, #32]	; (800cd60 <vTaskSwitchContext+0xb4>)
 800cd40:	6013      	str	r3, [r2, #0]
}
 800cd42:	bf00      	nop
 800cd44:	371c      	adds	r7, #28
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	20000998 	.word	0x20000998
 800cd54:	20000984 	.word	0x20000984
 800cd58:	20000978 	.word	0x20000978
 800cd5c:	20000874 	.word	0x20000874
 800cd60:	20000870 	.word	0x20000870

0800cd64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d10a      	bne.n	800cd8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	60fb      	str	r3, [r7, #12]
}
 800cd86:	bf00      	nop
 800cd88:	e7fe      	b.n	800cd88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd8a:	4b07      	ldr	r3, [pc, #28]	; (800cda8 <vTaskPlaceOnEventList+0x44>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	3318      	adds	r3, #24
 800cd90:	4619      	mov	r1, r3
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7fe ff04 	bl	800bba0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd98:	2101      	movs	r1, #1
 800cd9a:	6838      	ldr	r0, [r7, #0]
 800cd9c:	f000 fc50 	bl	800d640 <prvAddCurrentTaskToDelayedList>
}
 800cda0:	bf00      	nop
 800cda2:	3710      	adds	r7, #16
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	20000870 	.word	0x20000870

0800cdac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b086      	sub	sp, #24
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	68db      	ldr	r3, [r3, #12]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10a      	bne.n	800cdd8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc6:	f383 8811 	msr	BASEPRI, r3
 800cdca:	f3bf 8f6f 	isb	sy
 800cdce:	f3bf 8f4f 	dsb	sy
 800cdd2:	60fb      	str	r3, [r7, #12]
}
 800cdd4:	bf00      	nop
 800cdd6:	e7fe      	b.n	800cdd6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	3318      	adds	r3, #24
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fe ff18 	bl	800bc12 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cde2:	4b1d      	ldr	r3, [pc, #116]	; (800ce58 <xTaskRemoveFromEventList+0xac>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d11c      	bne.n	800ce24 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	3304      	adds	r3, #4
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7fe ff0f 	bl	800bc12 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	409a      	lsls	r2, r3
 800cdfc:	4b17      	ldr	r3, [pc, #92]	; (800ce5c <xTaskRemoveFromEventList+0xb0>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4313      	orrs	r3, r2
 800ce02:	4a16      	ldr	r2, [pc, #88]	; (800ce5c <xTaskRemoveFromEventList+0xb0>)
 800ce04:	6013      	str	r3, [r2, #0]
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	4413      	add	r3, r2
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	4a13      	ldr	r2, [pc, #76]	; (800ce60 <xTaskRemoveFromEventList+0xb4>)
 800ce14:	441a      	add	r2, r3
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	3304      	adds	r3, #4
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	f7fe fe9b 	bl	800bb58 <vListInsertEnd>
 800ce22:	e005      	b.n	800ce30 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	3318      	adds	r3, #24
 800ce28:	4619      	mov	r1, r3
 800ce2a:	480e      	ldr	r0, [pc, #56]	; (800ce64 <xTaskRemoveFromEventList+0xb8>)
 800ce2c:	f7fe fe94 	bl	800bb58 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce34:	4b0c      	ldr	r3, [pc, #48]	; (800ce68 <xTaskRemoveFromEventList+0xbc>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d905      	bls.n	800ce4a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce42:	4b0a      	ldr	r3, [pc, #40]	; (800ce6c <xTaskRemoveFromEventList+0xc0>)
 800ce44:	2201      	movs	r2, #1
 800ce46:	601a      	str	r2, [r3, #0]
 800ce48:	e001      	b.n	800ce4e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ce4e:	697b      	ldr	r3, [r7, #20]
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3718      	adds	r7, #24
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	20000998 	.word	0x20000998
 800ce5c:	20000978 	.word	0x20000978
 800ce60:	20000874 	.word	0x20000874
 800ce64:	20000930 	.word	0x20000930
 800ce68:	20000870 	.word	0x20000870
 800ce6c:	20000984 	.word	0x20000984

0800ce70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ce78:	4b06      	ldr	r3, [pc, #24]	; (800ce94 <vTaskInternalSetTimeOutState+0x24>)
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce80:	4b05      	ldr	r3, [pc, #20]	; (800ce98 <vTaskInternalSetTimeOutState+0x28>)
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	605a      	str	r2, [r3, #4]
}
 800ce88:	bf00      	nop
 800ce8a:	370c      	adds	r7, #12
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr
 800ce94:	20000988 	.word	0x20000988
 800ce98:	20000974 	.word	0x20000974

0800ce9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b088      	sub	sp, #32
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10a      	bne.n	800cec2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	613b      	str	r3, [r7, #16]
}
 800cebe:	bf00      	nop
 800cec0:	e7fe      	b.n	800cec0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10a      	bne.n	800cede <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cecc:	f383 8811 	msr	BASEPRI, r3
 800ced0:	f3bf 8f6f 	isb	sy
 800ced4:	f3bf 8f4f 	dsb	sy
 800ced8:	60fb      	str	r3, [r7, #12]
}
 800ceda:	bf00      	nop
 800cedc:	e7fe      	b.n	800cedc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cede:	f000 fd41 	bl	800d964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cee2:	4b1d      	ldr	r3, [pc, #116]	; (800cf58 <xTaskCheckForTimeOut+0xbc>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	69ba      	ldr	r2, [r7, #24]
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cefa:	d102      	bne.n	800cf02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cefc:	2300      	movs	r3, #0
 800cefe:	61fb      	str	r3, [r7, #28]
 800cf00:	e023      	b.n	800cf4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	4b15      	ldr	r3, [pc, #84]	; (800cf5c <xTaskCheckForTimeOut+0xc0>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d007      	beq.n	800cf1e <xTaskCheckForTimeOut+0x82>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	69ba      	ldr	r2, [r7, #24]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d302      	bcc.n	800cf1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	61fb      	str	r3, [r7, #28]
 800cf1c:	e015      	b.n	800cf4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	697a      	ldr	r2, [r7, #20]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d20b      	bcs.n	800cf40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	681a      	ldr	r2, [r3, #0]
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	1ad2      	subs	r2, r2, r3
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7ff ff9b 	bl	800ce70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	61fb      	str	r3, [r7, #28]
 800cf3e:	e004      	b.n	800cf4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	2200      	movs	r2, #0
 800cf44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf46:	2301      	movs	r3, #1
 800cf48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf4a:	f000 fd3b 	bl	800d9c4 <vPortExitCritical>

	return xReturn;
 800cf4e:	69fb      	ldr	r3, [r7, #28]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3720      	adds	r7, #32
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	20000974 	.word	0x20000974
 800cf5c:	20000988 	.word	0x20000988

0800cf60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf60:	b480      	push	{r7}
 800cf62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf64:	4b03      	ldr	r3, [pc, #12]	; (800cf74 <vTaskMissedYield+0x14>)
 800cf66:	2201      	movs	r2, #1
 800cf68:	601a      	str	r2, [r3, #0]
}
 800cf6a:	bf00      	nop
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr
 800cf74:	20000984 	.word	0x20000984

0800cf78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cf80:	f000 f852 	bl	800d028 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf84:	4b06      	ldr	r3, [pc, #24]	; (800cfa0 <prvIdleTask+0x28>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d9f9      	bls.n	800cf80 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cf8c:	4b05      	ldr	r3, [pc, #20]	; (800cfa4 <prvIdleTask+0x2c>)
 800cf8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf92:	601a      	str	r2, [r3, #0]
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cf9c:	e7f0      	b.n	800cf80 <prvIdleTask+0x8>
 800cf9e:	bf00      	nop
 800cfa0:	20000874 	.word	0x20000874
 800cfa4:	e000ed04 	.word	0xe000ed04

0800cfa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfae:	2300      	movs	r3, #0
 800cfb0:	607b      	str	r3, [r7, #4]
 800cfb2:	e00c      	b.n	800cfce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	4413      	add	r3, r2
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	4a12      	ldr	r2, [pc, #72]	; (800d008 <prvInitialiseTaskLists+0x60>)
 800cfc0:	4413      	add	r3, r2
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe fd9b 	bl	800bafe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	607b      	str	r3, [r7, #4]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2b06      	cmp	r3, #6
 800cfd2:	d9ef      	bls.n	800cfb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cfd4:	480d      	ldr	r0, [pc, #52]	; (800d00c <prvInitialiseTaskLists+0x64>)
 800cfd6:	f7fe fd92 	bl	800bafe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cfda:	480d      	ldr	r0, [pc, #52]	; (800d010 <prvInitialiseTaskLists+0x68>)
 800cfdc:	f7fe fd8f 	bl	800bafe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cfe0:	480c      	ldr	r0, [pc, #48]	; (800d014 <prvInitialiseTaskLists+0x6c>)
 800cfe2:	f7fe fd8c 	bl	800bafe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cfe6:	480c      	ldr	r0, [pc, #48]	; (800d018 <prvInitialiseTaskLists+0x70>)
 800cfe8:	f7fe fd89 	bl	800bafe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cfec:	480b      	ldr	r0, [pc, #44]	; (800d01c <prvInitialiseTaskLists+0x74>)
 800cfee:	f7fe fd86 	bl	800bafe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cff2:	4b0b      	ldr	r3, [pc, #44]	; (800d020 <prvInitialiseTaskLists+0x78>)
 800cff4:	4a05      	ldr	r2, [pc, #20]	; (800d00c <prvInitialiseTaskLists+0x64>)
 800cff6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cff8:	4b0a      	ldr	r3, [pc, #40]	; (800d024 <prvInitialiseTaskLists+0x7c>)
 800cffa:	4a05      	ldr	r2, [pc, #20]	; (800d010 <prvInitialiseTaskLists+0x68>)
 800cffc:	601a      	str	r2, [r3, #0]
}
 800cffe:	bf00      	nop
 800d000:	3708      	adds	r7, #8
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
 800d006:	bf00      	nop
 800d008:	20000874 	.word	0x20000874
 800d00c:	20000900 	.word	0x20000900
 800d010:	20000914 	.word	0x20000914
 800d014:	20000930 	.word	0x20000930
 800d018:	20000944 	.word	0x20000944
 800d01c:	2000095c 	.word	0x2000095c
 800d020:	20000928 	.word	0x20000928
 800d024:	2000092c 	.word	0x2000092c

0800d028 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d02e:	e019      	b.n	800d064 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d030:	f000 fc98 	bl	800d964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d034:	4b10      	ldr	r3, [pc, #64]	; (800d078 <prvCheckTasksWaitingTermination+0x50>)
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	3304      	adds	r3, #4
 800d040:	4618      	mov	r0, r3
 800d042:	f7fe fde6 	bl	800bc12 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d046:	4b0d      	ldr	r3, [pc, #52]	; (800d07c <prvCheckTasksWaitingTermination+0x54>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3b01      	subs	r3, #1
 800d04c:	4a0b      	ldr	r2, [pc, #44]	; (800d07c <prvCheckTasksWaitingTermination+0x54>)
 800d04e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d050:	4b0b      	ldr	r3, [pc, #44]	; (800d080 <prvCheckTasksWaitingTermination+0x58>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	3b01      	subs	r3, #1
 800d056:	4a0a      	ldr	r2, [pc, #40]	; (800d080 <prvCheckTasksWaitingTermination+0x58>)
 800d058:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d05a:	f000 fcb3 	bl	800d9c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 f810 	bl	800d084 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d064:	4b06      	ldr	r3, [pc, #24]	; (800d080 <prvCheckTasksWaitingTermination+0x58>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d1e1      	bne.n	800d030 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d06c:	bf00      	nop
 800d06e:	bf00      	nop
 800d070:	3708      	adds	r7, #8
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	20000944 	.word	0x20000944
 800d07c:	20000970 	.word	0x20000970
 800d080:	20000958 	.word	0x20000958

0800d084 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d084:	b580      	push	{r7, lr}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d092:	2b00      	cmp	r3, #0
 800d094:	d108      	bne.n	800d0a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d09a:	4618      	mov	r0, r3
 800d09c:	f000 fe50 	bl	800dd40 <vPortFree>
				vPortFree( pxTCB );
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 fe4d 	bl	800dd40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d0a6:	e018      	b.n	800d0da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	d103      	bne.n	800d0ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 fe44 	bl	800dd40 <vPortFree>
	}
 800d0b8:	e00f      	b.n	800d0da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0c0:	2b02      	cmp	r3, #2
 800d0c2:	d00a      	beq.n	800d0da <prvDeleteTCB+0x56>
	__asm volatile
 800d0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c8:	f383 8811 	msr	BASEPRI, r3
 800d0cc:	f3bf 8f6f 	isb	sy
 800d0d0:	f3bf 8f4f 	dsb	sy
 800d0d4:	60fb      	str	r3, [r7, #12]
}
 800d0d6:	bf00      	nop
 800d0d8:	e7fe      	b.n	800d0d8 <prvDeleteTCB+0x54>
	}
 800d0da:	bf00      	nop
 800d0dc:	3710      	adds	r7, #16
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
	...

0800d0e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0ea:	4b0c      	ldr	r3, [pc, #48]	; (800d11c <prvResetNextTaskUnblockTime+0x38>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d104      	bne.n	800d0fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d0f4:	4b0a      	ldr	r3, [pc, #40]	; (800d120 <prvResetNextTaskUnblockTime+0x3c>)
 800d0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d0fc:	e008      	b.n	800d110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0fe:	4b07      	ldr	r3, [pc, #28]	; (800d11c <prvResetNextTaskUnblockTime+0x38>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	68db      	ldr	r3, [r3, #12]
 800d106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	4a04      	ldr	r2, [pc, #16]	; (800d120 <prvResetNextTaskUnblockTime+0x3c>)
 800d10e:	6013      	str	r3, [r2, #0]
}
 800d110:	bf00      	nop
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr
 800d11c:	20000928 	.word	0x20000928
 800d120:	20000990 	.word	0x20000990

0800d124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d12a:	4b0b      	ldr	r3, [pc, #44]	; (800d158 <xTaskGetSchedulerState+0x34>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d102      	bne.n	800d138 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d132:	2301      	movs	r3, #1
 800d134:	607b      	str	r3, [r7, #4]
 800d136:	e008      	b.n	800d14a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d138:	4b08      	ldr	r3, [pc, #32]	; (800d15c <xTaskGetSchedulerState+0x38>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d102      	bne.n	800d146 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d140:	2302      	movs	r3, #2
 800d142:	607b      	str	r3, [r7, #4]
 800d144:	e001      	b.n	800d14a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d146:	2300      	movs	r3, #0
 800d148:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d14a:	687b      	ldr	r3, [r7, #4]
	}
 800d14c:	4618      	mov	r0, r3
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr
 800d158:	2000097c 	.word	0x2000097c
 800d15c:	20000998 	.word	0x20000998

0800d160 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d16c:	2300      	movs	r3, #0
 800d16e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d06e      	beq.n	800d254 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d176:	4b3a      	ldr	r3, [pc, #232]	; (800d260 <xTaskPriorityDisinherit+0x100>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	693a      	ldr	r2, [r7, #16]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d00a      	beq.n	800d196 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	60fb      	str	r3, [r7, #12]
}
 800d192:	bf00      	nop
 800d194:	e7fe      	b.n	800d194 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d10a      	bne.n	800d1b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a2:	f383 8811 	msr	BASEPRI, r3
 800d1a6:	f3bf 8f6f 	isb	sy
 800d1aa:	f3bf 8f4f 	dsb	sy
 800d1ae:	60bb      	str	r3, [r7, #8]
}
 800d1b0:	bf00      	nop
 800d1b2:	e7fe      	b.n	800d1b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1b8:	1e5a      	subs	r2, r3, #1
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d044      	beq.n	800d254 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d140      	bne.n	800d254 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	3304      	adds	r3, #4
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fe fd1b 	bl	800bc12 <uxListRemove>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d115      	bne.n	800d20e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e6:	491f      	ldr	r1, [pc, #124]	; (800d264 <xTaskPriorityDisinherit+0x104>)
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	4413      	add	r3, r2
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	440b      	add	r3, r1
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d10a      	bne.n	800d20e <xTaskPriorityDisinherit+0xae>
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d202:	43da      	mvns	r2, r3
 800d204:	4b18      	ldr	r3, [pc, #96]	; (800d268 <xTaskPriorityDisinherit+0x108>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4013      	ands	r3, r2
 800d20a:	4a17      	ldr	r2, [pc, #92]	; (800d268 <xTaskPriorityDisinherit+0x108>)
 800d20c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d21a:	f1c3 0207 	rsb	r2, r3, #7
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d226:	2201      	movs	r2, #1
 800d228:	409a      	lsls	r2, r3
 800d22a:	4b0f      	ldr	r3, [pc, #60]	; (800d268 <xTaskPriorityDisinherit+0x108>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4313      	orrs	r3, r2
 800d230:	4a0d      	ldr	r2, [pc, #52]	; (800d268 <xTaskPriorityDisinherit+0x108>)
 800d232:	6013      	str	r3, [r2, #0]
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d238:	4613      	mov	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	4413      	add	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4a08      	ldr	r2, [pc, #32]	; (800d264 <xTaskPriorityDisinherit+0x104>)
 800d242:	441a      	add	r2, r3
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	3304      	adds	r3, #4
 800d248:	4619      	mov	r1, r3
 800d24a:	4610      	mov	r0, r2
 800d24c:	f7fe fc84 	bl	800bb58 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d250:	2301      	movs	r3, #1
 800d252:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d254:	697b      	ldr	r3, [r7, #20]
	}
 800d256:	4618      	mov	r0, r3
 800d258:	3718      	adds	r7, #24
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	20000870 	.word	0x20000870
 800d264:	20000874 	.word	0x20000874
 800d268:	20000978 	.word	0x20000978

0800d26c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b086      	sub	sp, #24
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]
 800d278:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d27a:	f000 fb73 	bl	800d964 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d27e:	4b26      	ldr	r3, [pc, #152]	; (800d318 <xTaskNotifyWait+0xac>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d286:	b2db      	uxtb	r3, r3
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d01a      	beq.n	800d2c2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d28c:	4b22      	ldr	r3, [pc, #136]	; (800d318 <xTaskNotifyWait+0xac>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	43d2      	mvns	r2, r2
 800d296:	400a      	ands	r2, r1
 800d298:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d29a:	4b1f      	ldr	r3, [pc, #124]	; (800d318 <xTaskNotifyWait+0xac>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d00b      	beq.n	800d2c2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d2aa:	2101      	movs	r1, #1
 800d2ac:	6838      	ldr	r0, [r7, #0]
 800d2ae:	f000 f9c7 	bl	800d640 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d2b2:	4b1a      	ldr	r3, [pc, #104]	; (800d31c <xTaskNotifyWait+0xb0>)
 800d2b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d2c2:	f000 fb7f 	bl	800d9c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d2c6:	f000 fb4d 	bl	800d964 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d004      	beq.n	800d2da <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d2d0:	4b11      	ldr	r3, [pc, #68]	; (800d318 <xTaskNotifyWait+0xac>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d2da:	4b0f      	ldr	r3, [pc, #60]	; (800d318 <xTaskNotifyWait+0xac>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d002      	beq.n	800d2ee <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	617b      	str	r3, [r7, #20]
 800d2ec:	e008      	b.n	800d300 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d2ee:	4b0a      	ldr	r3, [pc, #40]	; (800d318 <xTaskNotifyWait+0xac>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d2f4:	68ba      	ldr	r2, [r7, #8]
 800d2f6:	43d2      	mvns	r2, r2
 800d2f8:	400a      	ands	r2, r1
 800d2fa:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d300:	4b05      	ldr	r3, [pc, #20]	; (800d318 <xTaskNotifyWait+0xac>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	2200      	movs	r2, #0
 800d306:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800d30a:	f000 fb5b 	bl	800d9c4 <vPortExitCritical>

		return xReturn;
 800d30e:	697b      	ldr	r3, [r7, #20]
	}
 800d310:	4618      	mov	r0, r3
 800d312:	3718      	adds	r7, #24
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	20000870 	.word	0x20000870
 800d31c:	e000ed04 	.word	0xe000ed04

0800d320 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d320:	b580      	push	{r7, lr}
 800d322:	b08a      	sub	sp, #40	; 0x28
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	603b      	str	r3, [r7, #0]
 800d32c:	4613      	mov	r3, r2
 800d32e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d330:	2301      	movs	r3, #1
 800d332:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10a      	bne.n	800d350 <xTaskGenericNotify+0x30>
	__asm volatile
 800d33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33e:	f383 8811 	msr	BASEPRI, r3
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	f3bf 8f4f 	dsb	sy
 800d34a:	61bb      	str	r3, [r7, #24]
}
 800d34c:	bf00      	nop
 800d34e:	e7fe      	b.n	800d34e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d354:	f000 fb06 	bl	800d964 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d003      	beq.n	800d366 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d35e:	6a3b      	ldr	r3, [r7, #32]
 800d360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d366:	6a3b      	ldr	r3, [r7, #32]
 800d368:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d36c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d36e:	6a3b      	ldr	r3, [r7, #32]
 800d370:	2202      	movs	r2, #2
 800d372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800d376:	79fb      	ldrb	r3, [r7, #7]
 800d378:	2b04      	cmp	r3, #4
 800d37a:	d828      	bhi.n	800d3ce <xTaskGenericNotify+0xae>
 800d37c:	a201      	add	r2, pc, #4	; (adr r2, 800d384 <xTaskGenericNotify+0x64>)
 800d37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d382:	bf00      	nop
 800d384:	0800d3ef 	.word	0x0800d3ef
 800d388:	0800d399 	.word	0x0800d399
 800d38c:	0800d3a7 	.word	0x0800d3a7
 800d390:	0800d3b3 	.word	0x0800d3b3
 800d394:	0800d3bb 	.word	0x0800d3bb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d398:	6a3b      	ldr	r3, [r7, #32]
 800d39a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	431a      	orrs	r2, r3
 800d3a0:	6a3b      	ldr	r3, [r7, #32]
 800d3a2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800d3a4:	e026      	b.n	800d3f4 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d3a6:	6a3b      	ldr	r3, [r7, #32]
 800d3a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	6a3b      	ldr	r3, [r7, #32]
 800d3ae:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800d3b0:	e020      	b.n	800d3f4 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d3b2:	6a3b      	ldr	r3, [r7, #32]
 800d3b4:	68ba      	ldr	r2, [r7, #8]
 800d3b6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800d3b8:	e01c      	b.n	800d3f4 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d3ba:	7ffb      	ldrb	r3, [r7, #31]
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d003      	beq.n	800d3c8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d3c0:	6a3b      	ldr	r3, [r7, #32]
 800d3c2:	68ba      	ldr	r2, [r7, #8]
 800d3c4:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d3c6:	e015      	b.n	800d3f4 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d3cc:	e012      	b.n	800d3f4 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d3ce:	6a3b      	ldr	r3, [r7, #32]
 800d3d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d6:	d00c      	beq.n	800d3f2 <xTaskGenericNotify+0xd2>
	__asm volatile
 800d3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3dc:	f383 8811 	msr	BASEPRI, r3
 800d3e0:	f3bf 8f6f 	isb	sy
 800d3e4:	f3bf 8f4f 	dsb	sy
 800d3e8:	617b      	str	r3, [r7, #20]
}
 800d3ea:	bf00      	nop
 800d3ec:	e7fe      	b.n	800d3ec <xTaskGenericNotify+0xcc>
					break;
 800d3ee:	bf00      	nop
 800d3f0:	e000      	b.n	800d3f4 <xTaskGenericNotify+0xd4>

					break;
 800d3f2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d3f4:	7ffb      	ldrb	r3, [r7, #31]
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d139      	bne.n	800d46e <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3fa:	6a3b      	ldr	r3, [r7, #32]
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fe fc07 	bl	800bc12 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d404:	6a3b      	ldr	r3, [r7, #32]
 800d406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d408:	2201      	movs	r2, #1
 800d40a:	409a      	lsls	r2, r3
 800d40c:	4b1b      	ldr	r3, [pc, #108]	; (800d47c <xTaskGenericNotify+0x15c>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4313      	orrs	r3, r2
 800d412:	4a1a      	ldr	r2, [pc, #104]	; (800d47c <xTaskGenericNotify+0x15c>)
 800d414:	6013      	str	r3, [r2, #0]
 800d416:	6a3b      	ldr	r3, [r7, #32]
 800d418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d41a:	4613      	mov	r3, r2
 800d41c:	009b      	lsls	r3, r3, #2
 800d41e:	4413      	add	r3, r2
 800d420:	009b      	lsls	r3, r3, #2
 800d422:	4a17      	ldr	r2, [pc, #92]	; (800d480 <xTaskGenericNotify+0x160>)
 800d424:	441a      	add	r2, r3
 800d426:	6a3b      	ldr	r3, [r7, #32]
 800d428:	3304      	adds	r3, #4
 800d42a:	4619      	mov	r1, r3
 800d42c:	4610      	mov	r0, r2
 800d42e:	f7fe fb93 	bl	800bb58 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d432:	6a3b      	ldr	r3, [r7, #32]
 800d434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00a      	beq.n	800d450 <xTaskGenericNotify+0x130>
	__asm volatile
 800d43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43e:	f383 8811 	msr	BASEPRI, r3
 800d442:	f3bf 8f6f 	isb	sy
 800d446:	f3bf 8f4f 	dsb	sy
 800d44a:	613b      	str	r3, [r7, #16]
}
 800d44c:	bf00      	nop
 800d44e:	e7fe      	b.n	800d44e <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d450:	6a3b      	ldr	r3, [r7, #32]
 800d452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d454:	4b0b      	ldr	r3, [pc, #44]	; (800d484 <xTaskGenericNotify+0x164>)
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d907      	bls.n	800d46e <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d45e:	4b0a      	ldr	r3, [pc, #40]	; (800d488 <xTaskGenericNotify+0x168>)
 800d460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d464:	601a      	str	r2, [r3, #0]
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d46e:	f000 faa9 	bl	800d9c4 <vPortExitCritical>

		return xReturn;
 800d472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d474:	4618      	mov	r0, r3
 800d476:	3728      	adds	r7, #40	; 0x28
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	20000978 	.word	0x20000978
 800d480:	20000874 	.word	0x20000874
 800d484:	20000870 	.word	0x20000870
 800d488:	e000ed04 	.word	0xe000ed04

0800d48c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b08e      	sub	sp, #56	; 0x38
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	603b      	str	r3, [r7, #0]
 800d498:	4613      	mov	r3, r2
 800d49a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d49c:	2301      	movs	r3, #1
 800d49e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10a      	bne.n	800d4bc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800d4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4b8:	bf00      	nop
 800d4ba:	e7fe      	b.n	800d4ba <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4bc:	f000 fb34 	bl	800db28 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800d4c4:	f3ef 8211 	mrs	r2, BASEPRI
 800d4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4cc:	f383 8811 	msr	BASEPRI, r3
 800d4d0:	f3bf 8f6f 	isb	sy
 800d4d4:	f3bf 8f4f 	dsb	sy
 800d4d8:	623a      	str	r2, [r7, #32]
 800d4da:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d4dc:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4de:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d003      	beq.n	800d4ee <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d4f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fa:	2202      	movs	r2, #2
 800d4fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800d500:	79fb      	ldrb	r3, [r7, #7]
 800d502:	2b04      	cmp	r3, #4
 800d504:	d828      	bhi.n	800d558 <xTaskGenericNotifyFromISR+0xcc>
 800d506:	a201      	add	r2, pc, #4	; (adr r2, 800d50c <xTaskGenericNotifyFromISR+0x80>)
 800d508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d50c:	0800d579 	.word	0x0800d579
 800d510:	0800d521 	.word	0x0800d521
 800d514:	0800d52f 	.word	0x0800d52f
 800d518:	0800d53b 	.word	0x0800d53b
 800d51c:	0800d543 	.word	0x0800d543
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	431a      	orrs	r2, r3
 800d528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800d52c:	e027      	b.n	800d57e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d536:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800d538:	e021      	b.n	800d57e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	68ba      	ldr	r2, [r7, #8]
 800d53e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800d540:	e01d      	b.n	800d57e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d546:	2b02      	cmp	r3, #2
 800d548:	d003      	beq.n	800d552 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54c:	68ba      	ldr	r2, [r7, #8]
 800d54e:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d550:	e015      	b.n	800d57e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800d552:	2300      	movs	r3, #0
 800d554:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d556:	e012      	b.n	800d57e <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d560:	d00c      	beq.n	800d57c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800d562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d566:	f383 8811 	msr	BASEPRI, r3
 800d56a:	f3bf 8f6f 	isb	sy
 800d56e:	f3bf 8f4f 	dsb	sy
 800d572:	61bb      	str	r3, [r7, #24]
}
 800d574:	bf00      	nop
 800d576:	e7fe      	b.n	800d576 <xTaskGenericNotifyFromISR+0xea>
					break;
 800d578:	bf00      	nop
 800d57a:	e000      	b.n	800d57e <xTaskGenericNotifyFromISR+0xf2>
					break;
 800d57c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d57e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d582:	2b01      	cmp	r3, #1
 800d584:	d145      	bne.n	800d612 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00a      	beq.n	800d5a4 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800d58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	617b      	str	r3, [r7, #20]
}
 800d5a0:	bf00      	nop
 800d5a2:	e7fe      	b.n	800d5a2 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5a4:	4b20      	ldr	r3, [pc, #128]	; (800d628 <xTaskGenericNotifyFromISR+0x19c>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d11c      	bne.n	800d5e6 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ae:	3304      	adds	r3, #4
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7fe fb2e 	bl	800bc12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	409a      	lsls	r2, r3
 800d5be:	4b1b      	ldr	r3, [pc, #108]	; (800d62c <xTaskGenericNotifyFromISR+0x1a0>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	4a19      	ldr	r2, [pc, #100]	; (800d62c <xTaskGenericNotifyFromISR+0x1a0>)
 800d5c6:	6013      	str	r3, [r2, #0]
 800d5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	4413      	add	r3, r2
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	4a16      	ldr	r2, [pc, #88]	; (800d630 <xTaskGenericNotifyFromISR+0x1a4>)
 800d5d6:	441a      	add	r2, r3
 800d5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5da:	3304      	adds	r3, #4
 800d5dc:	4619      	mov	r1, r3
 800d5de:	4610      	mov	r0, r2
 800d5e0:	f7fe faba 	bl	800bb58 <vListInsertEnd>
 800d5e4:	e005      	b.n	800d5f2 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e8:	3318      	adds	r3, #24
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	4811      	ldr	r0, [pc, #68]	; (800d634 <xTaskGenericNotifyFromISR+0x1a8>)
 800d5ee:	f7fe fab3 	bl	800bb58 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f6:	4b10      	ldr	r3, [pc, #64]	; (800d638 <xTaskGenericNotifyFromISR+0x1ac>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d908      	bls.n	800d612 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d602:	2b00      	cmp	r3, #0
 800d604:	d002      	beq.n	800d60c <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d608:	2201      	movs	r2, #1
 800d60a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d60c:	4b0b      	ldr	r3, [pc, #44]	; (800d63c <xTaskGenericNotifyFromISR+0x1b0>)
 800d60e:	2201      	movs	r2, #1
 800d610:	601a      	str	r2, [r3, #0]
 800d612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d614:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	f383 8811 	msr	BASEPRI, r3
}
 800d61c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d620:	4618      	mov	r0, r3
 800d622:	3738      	adds	r7, #56	; 0x38
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	20000998 	.word	0x20000998
 800d62c:	20000978 	.word	0x20000978
 800d630:	20000874 	.word	0x20000874
 800d634:	20000930 	.word	0x20000930
 800d638:	20000870 	.word	0x20000870
 800d63c:	20000984 	.word	0x20000984

0800d640 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d64a:	4b29      	ldr	r3, [pc, #164]	; (800d6f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d650:	4b28      	ldr	r3, [pc, #160]	; (800d6f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	3304      	adds	r3, #4
 800d656:	4618      	mov	r0, r3
 800d658:	f7fe fadb 	bl	800bc12 <uxListRemove>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d10b      	bne.n	800d67a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d662:	4b24      	ldr	r3, [pc, #144]	; (800d6f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d668:	2201      	movs	r2, #1
 800d66a:	fa02 f303 	lsl.w	r3, r2, r3
 800d66e:	43da      	mvns	r2, r3
 800d670:	4b21      	ldr	r3, [pc, #132]	; (800d6f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4013      	ands	r3, r2
 800d676:	4a20      	ldr	r2, [pc, #128]	; (800d6f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d678:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d680:	d10a      	bne.n	800d698 <prvAddCurrentTaskToDelayedList+0x58>
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d007      	beq.n	800d698 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d688:	4b1a      	ldr	r3, [pc, #104]	; (800d6f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	3304      	adds	r3, #4
 800d68e:	4619      	mov	r1, r3
 800d690:	481a      	ldr	r0, [pc, #104]	; (800d6fc <prvAddCurrentTaskToDelayedList+0xbc>)
 800d692:	f7fe fa61 	bl	800bb58 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d696:	e026      	b.n	800d6e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4413      	add	r3, r2
 800d69e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d6a0:	4b14      	ldr	r3, [pc, #80]	; (800d6f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d6a8:	68ba      	ldr	r2, [r7, #8]
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d209      	bcs.n	800d6c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6b0:	4b13      	ldr	r3, [pc, #76]	; (800d700 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	4b0f      	ldr	r3, [pc, #60]	; (800d6f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	3304      	adds	r3, #4
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	4610      	mov	r0, r2
 800d6be:	f7fe fa6f 	bl	800bba0 <vListInsert>
}
 800d6c2:	e010      	b.n	800d6e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6c4:	4b0f      	ldr	r3, [pc, #60]	; (800d704 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	4b0a      	ldr	r3, [pc, #40]	; (800d6f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	3304      	adds	r3, #4
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	4610      	mov	r0, r2
 800d6d2:	f7fe fa65 	bl	800bba0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d6d6:	4b0c      	ldr	r3, [pc, #48]	; (800d708 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68ba      	ldr	r2, [r7, #8]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d202      	bcs.n	800d6e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d6e0:	4a09      	ldr	r2, [pc, #36]	; (800d708 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	6013      	str	r3, [r2, #0]
}
 800d6e6:	bf00      	nop
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	20000974 	.word	0x20000974
 800d6f4:	20000870 	.word	0x20000870
 800d6f8:	20000978 	.word	0x20000978
 800d6fc:	2000095c 	.word	0x2000095c
 800d700:	2000092c 	.word	0x2000092c
 800d704:	20000928 	.word	0x20000928
 800d708:	20000990 	.word	0x20000990

0800d70c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d70c:	b480      	push	{r7}
 800d70e:	b085      	sub	sp, #20
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	3b04      	subs	r3, #4
 800d71c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d724:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	3b04      	subs	r3, #4
 800d72a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	f023 0201 	bic.w	r2, r3, #1
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	3b04      	subs	r3, #4
 800d73a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d73c:	4a0c      	ldr	r2, [pc, #48]	; (800d770 <pxPortInitialiseStack+0x64>)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	3b14      	subs	r3, #20
 800d746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	3b04      	subs	r3, #4
 800d752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f06f 0202 	mvn.w	r2, #2
 800d75a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	3b20      	subs	r3, #32
 800d760:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d762:	68fb      	ldr	r3, [r7, #12]
}
 800d764:	4618      	mov	r0, r3
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr
 800d770:	0800d775 	.word	0x0800d775

0800d774 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d774:	b480      	push	{r7}
 800d776:	b085      	sub	sp, #20
 800d778:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d77a:	2300      	movs	r3, #0
 800d77c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d77e:	4b12      	ldr	r3, [pc, #72]	; (800d7c8 <prvTaskExitError+0x54>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d786:	d00a      	beq.n	800d79e <prvTaskExitError+0x2a>
	__asm volatile
 800d788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d78c:	f383 8811 	msr	BASEPRI, r3
 800d790:	f3bf 8f6f 	isb	sy
 800d794:	f3bf 8f4f 	dsb	sy
 800d798:	60fb      	str	r3, [r7, #12]
}
 800d79a:	bf00      	nop
 800d79c:	e7fe      	b.n	800d79c <prvTaskExitError+0x28>
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	60bb      	str	r3, [r7, #8]
}
 800d7b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d7b2:	bf00      	nop
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d0fc      	beq.n	800d7b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d7ba:	bf00      	nop
 800d7bc:	bf00      	nop
 800d7be:	3714      	adds	r7, #20
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c6:	4770      	bx	lr
 800d7c8:	20000114 	.word	0x20000114
 800d7cc:	00000000 	.word	0x00000000

0800d7d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d7d0:	4b07      	ldr	r3, [pc, #28]	; (800d7f0 <pxCurrentTCBConst2>)
 800d7d2:	6819      	ldr	r1, [r3, #0]
 800d7d4:	6808      	ldr	r0, [r1, #0]
 800d7d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7da:	f380 8809 	msr	PSP, r0
 800d7de:	f3bf 8f6f 	isb	sy
 800d7e2:	f04f 0000 	mov.w	r0, #0
 800d7e6:	f380 8811 	msr	BASEPRI, r0
 800d7ea:	4770      	bx	lr
 800d7ec:	f3af 8000 	nop.w

0800d7f0 <pxCurrentTCBConst2>:
 800d7f0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d7f4:	bf00      	nop
 800d7f6:	bf00      	nop

0800d7f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d7f8:	4808      	ldr	r0, [pc, #32]	; (800d81c <prvPortStartFirstTask+0x24>)
 800d7fa:	6800      	ldr	r0, [r0, #0]
 800d7fc:	6800      	ldr	r0, [r0, #0]
 800d7fe:	f380 8808 	msr	MSP, r0
 800d802:	f04f 0000 	mov.w	r0, #0
 800d806:	f380 8814 	msr	CONTROL, r0
 800d80a:	b662      	cpsie	i
 800d80c:	b661      	cpsie	f
 800d80e:	f3bf 8f4f 	dsb	sy
 800d812:	f3bf 8f6f 	isb	sy
 800d816:	df00      	svc	0
 800d818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d81a:	bf00      	nop
 800d81c:	e000ed08 	.word	0xe000ed08

0800d820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b086      	sub	sp, #24
 800d824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d826:	4b46      	ldr	r3, [pc, #280]	; (800d940 <xPortStartScheduler+0x120>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	4a46      	ldr	r2, [pc, #280]	; (800d944 <xPortStartScheduler+0x124>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d10a      	bne.n	800d846 <xPortStartScheduler+0x26>
	__asm volatile
 800d830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	613b      	str	r3, [r7, #16]
}
 800d842:	bf00      	nop
 800d844:	e7fe      	b.n	800d844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d846:	4b3e      	ldr	r3, [pc, #248]	; (800d940 <xPortStartScheduler+0x120>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4a3f      	ldr	r2, [pc, #252]	; (800d948 <xPortStartScheduler+0x128>)
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d10a      	bne.n	800d866 <xPortStartScheduler+0x46>
	__asm volatile
 800d850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d854:	f383 8811 	msr	BASEPRI, r3
 800d858:	f3bf 8f6f 	isb	sy
 800d85c:	f3bf 8f4f 	dsb	sy
 800d860:	60fb      	str	r3, [r7, #12]
}
 800d862:	bf00      	nop
 800d864:	e7fe      	b.n	800d864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d866:	4b39      	ldr	r3, [pc, #228]	; (800d94c <xPortStartScheduler+0x12c>)
 800d868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	22ff      	movs	r2, #255	; 0xff
 800d876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d880:	78fb      	ldrb	r3, [r7, #3]
 800d882:	b2db      	uxtb	r3, r3
 800d884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	4b31      	ldr	r3, [pc, #196]	; (800d950 <xPortStartScheduler+0x130>)
 800d88c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d88e:	4b31      	ldr	r3, [pc, #196]	; (800d954 <xPortStartScheduler+0x134>)
 800d890:	2207      	movs	r2, #7
 800d892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d894:	e009      	b.n	800d8aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d896:	4b2f      	ldr	r3, [pc, #188]	; (800d954 <xPortStartScheduler+0x134>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3b01      	subs	r3, #1
 800d89c:	4a2d      	ldr	r2, [pc, #180]	; (800d954 <xPortStartScheduler+0x134>)
 800d89e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d8a0:	78fb      	ldrb	r3, [r7, #3]
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	005b      	lsls	r3, r3, #1
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8aa:	78fb      	ldrb	r3, [r7, #3]
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8b2:	2b80      	cmp	r3, #128	; 0x80
 800d8b4:	d0ef      	beq.n	800d896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d8b6:	4b27      	ldr	r3, [pc, #156]	; (800d954 <xPortStartScheduler+0x134>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f1c3 0307 	rsb	r3, r3, #7
 800d8be:	2b04      	cmp	r3, #4
 800d8c0:	d00a      	beq.n	800d8d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c6:	f383 8811 	msr	BASEPRI, r3
 800d8ca:	f3bf 8f6f 	isb	sy
 800d8ce:	f3bf 8f4f 	dsb	sy
 800d8d2:	60bb      	str	r3, [r7, #8]
}
 800d8d4:	bf00      	nop
 800d8d6:	e7fe      	b.n	800d8d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d8d8:	4b1e      	ldr	r3, [pc, #120]	; (800d954 <xPortStartScheduler+0x134>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	021b      	lsls	r3, r3, #8
 800d8de:	4a1d      	ldr	r2, [pc, #116]	; (800d954 <xPortStartScheduler+0x134>)
 800d8e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d8e2:	4b1c      	ldr	r3, [pc, #112]	; (800d954 <xPortStartScheduler+0x134>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d8ea:	4a1a      	ldr	r2, [pc, #104]	; (800d954 <xPortStartScheduler+0x134>)
 800d8ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d8f6:	4b18      	ldr	r3, [pc, #96]	; (800d958 <xPortStartScheduler+0x138>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a17      	ldr	r2, [pc, #92]	; (800d958 <xPortStartScheduler+0x138>)
 800d8fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d902:	4b15      	ldr	r3, [pc, #84]	; (800d958 <xPortStartScheduler+0x138>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	4a14      	ldr	r2, [pc, #80]	; (800d958 <xPortStartScheduler+0x138>)
 800d908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d90c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d90e:	f000 f8dd 	bl	800dacc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d912:	4b12      	ldr	r3, [pc, #72]	; (800d95c <xPortStartScheduler+0x13c>)
 800d914:	2200      	movs	r2, #0
 800d916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d918:	f000 f8fc 	bl	800db14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d91c:	4b10      	ldr	r3, [pc, #64]	; (800d960 <xPortStartScheduler+0x140>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4a0f      	ldr	r2, [pc, #60]	; (800d960 <xPortStartScheduler+0x140>)
 800d922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d928:	f7ff ff66 	bl	800d7f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d92c:	f7ff f9be 	bl	800ccac <vTaskSwitchContext>
	prvTaskExitError();
 800d930:	f7ff ff20 	bl	800d774 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d934:	2300      	movs	r3, #0
}
 800d936:	4618      	mov	r0, r3
 800d938:	3718      	adds	r7, #24
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	e000ed00 	.word	0xe000ed00
 800d944:	410fc271 	.word	0x410fc271
 800d948:	410fc270 	.word	0x410fc270
 800d94c:	e000e400 	.word	0xe000e400
 800d950:	2000099c 	.word	0x2000099c
 800d954:	200009a0 	.word	0x200009a0
 800d958:	e000ed20 	.word	0xe000ed20
 800d95c:	20000114 	.word	0x20000114
 800d960:	e000ef34 	.word	0xe000ef34

0800d964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
	__asm volatile
 800d96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	607b      	str	r3, [r7, #4]
}
 800d97c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d97e:	4b0f      	ldr	r3, [pc, #60]	; (800d9bc <vPortEnterCritical+0x58>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	3301      	adds	r3, #1
 800d984:	4a0d      	ldr	r2, [pc, #52]	; (800d9bc <vPortEnterCritical+0x58>)
 800d986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d988:	4b0c      	ldr	r3, [pc, #48]	; (800d9bc <vPortEnterCritical+0x58>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d10f      	bne.n	800d9b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d990:	4b0b      	ldr	r3, [pc, #44]	; (800d9c0 <vPortEnterCritical+0x5c>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	b2db      	uxtb	r3, r3
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00a      	beq.n	800d9b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d99e:	f383 8811 	msr	BASEPRI, r3
 800d9a2:	f3bf 8f6f 	isb	sy
 800d9a6:	f3bf 8f4f 	dsb	sy
 800d9aa:	603b      	str	r3, [r7, #0]
}
 800d9ac:	bf00      	nop
 800d9ae:	e7fe      	b.n	800d9ae <vPortEnterCritical+0x4a>
	}
}
 800d9b0:	bf00      	nop
 800d9b2:	370c      	adds	r7, #12
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr
 800d9bc:	20000114 	.word	0x20000114
 800d9c0:	e000ed04 	.word	0xe000ed04

0800d9c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d9ca:	4b12      	ldr	r3, [pc, #72]	; (800da14 <vPortExitCritical+0x50>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d10a      	bne.n	800d9e8 <vPortExitCritical+0x24>
	__asm volatile
 800d9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d6:	f383 8811 	msr	BASEPRI, r3
 800d9da:	f3bf 8f6f 	isb	sy
 800d9de:	f3bf 8f4f 	dsb	sy
 800d9e2:	607b      	str	r3, [r7, #4]
}
 800d9e4:	bf00      	nop
 800d9e6:	e7fe      	b.n	800d9e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d9e8:	4b0a      	ldr	r3, [pc, #40]	; (800da14 <vPortExitCritical+0x50>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	4a09      	ldr	r2, [pc, #36]	; (800da14 <vPortExitCritical+0x50>)
 800d9f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d9f2:	4b08      	ldr	r3, [pc, #32]	; (800da14 <vPortExitCritical+0x50>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d105      	bne.n	800da06 <vPortExitCritical+0x42>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	f383 8811 	msr	BASEPRI, r3
}
 800da04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da06:	bf00      	nop
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	20000114 	.word	0x20000114
	...

0800da20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da20:	f3ef 8009 	mrs	r0, PSP
 800da24:	f3bf 8f6f 	isb	sy
 800da28:	4b15      	ldr	r3, [pc, #84]	; (800da80 <pxCurrentTCBConst>)
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	f01e 0f10 	tst.w	lr, #16
 800da30:	bf08      	it	eq
 800da32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800da36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3a:	6010      	str	r0, [r2, #0]
 800da3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800da40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800da44:	f380 8811 	msr	BASEPRI, r0
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	f7ff f92c 	bl	800ccac <vTaskSwitchContext>
 800da54:	f04f 0000 	mov.w	r0, #0
 800da58:	f380 8811 	msr	BASEPRI, r0
 800da5c:	bc09      	pop	{r0, r3}
 800da5e:	6819      	ldr	r1, [r3, #0]
 800da60:	6808      	ldr	r0, [r1, #0]
 800da62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da66:	f01e 0f10 	tst.w	lr, #16
 800da6a:	bf08      	it	eq
 800da6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da70:	f380 8809 	msr	PSP, r0
 800da74:	f3bf 8f6f 	isb	sy
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	f3af 8000 	nop.w

0800da80 <pxCurrentTCBConst>:
 800da80:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da84:	bf00      	nop
 800da86:	bf00      	nop

0800da88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
	__asm volatile
 800da8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da92:	f383 8811 	msr	BASEPRI, r3
 800da96:	f3bf 8f6f 	isb	sy
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	607b      	str	r3, [r7, #4]
}
 800daa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800daa2:	f7ff f84b 	bl	800cb3c <xTaskIncrementTick>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d003      	beq.n	800dab4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800daac:	4b06      	ldr	r3, [pc, #24]	; (800dac8 <SysTick_Handler+0x40>)
 800daae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dab2:	601a      	str	r2, [r3, #0]
 800dab4:	2300      	movs	r3, #0
 800dab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	f383 8811 	msr	BASEPRI, r3
}
 800dabe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dac0:	bf00      	nop
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	e000ed04 	.word	0xe000ed04

0800dacc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dacc:	b480      	push	{r7}
 800dace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dad0:	4b0b      	ldr	r3, [pc, #44]	; (800db00 <vPortSetupTimerInterrupt+0x34>)
 800dad2:	2200      	movs	r2, #0
 800dad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dad6:	4b0b      	ldr	r3, [pc, #44]	; (800db04 <vPortSetupTimerInterrupt+0x38>)
 800dad8:	2200      	movs	r2, #0
 800dada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dadc:	4b0a      	ldr	r3, [pc, #40]	; (800db08 <vPortSetupTimerInterrupt+0x3c>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a0a      	ldr	r2, [pc, #40]	; (800db0c <vPortSetupTimerInterrupt+0x40>)
 800dae2:	fba2 2303 	umull	r2, r3, r2, r3
 800dae6:	099b      	lsrs	r3, r3, #6
 800dae8:	4a09      	ldr	r2, [pc, #36]	; (800db10 <vPortSetupTimerInterrupt+0x44>)
 800daea:	3b01      	subs	r3, #1
 800daec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800daee:	4b04      	ldr	r3, [pc, #16]	; (800db00 <vPortSetupTimerInterrupt+0x34>)
 800daf0:	2207      	movs	r2, #7
 800daf2:	601a      	str	r2, [r3, #0]
}
 800daf4:	bf00      	nop
 800daf6:	46bd      	mov	sp, r7
 800daf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop
 800db00:	e000e010 	.word	0xe000e010
 800db04:	e000e018 	.word	0xe000e018
 800db08:	20000000 	.word	0x20000000
 800db0c:	10624dd3 	.word	0x10624dd3
 800db10:	e000e014 	.word	0xe000e014

0800db14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800db24 <vPortEnableVFP+0x10>
 800db18:	6801      	ldr	r1, [r0, #0]
 800db1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800db1e:	6001      	str	r1, [r0, #0]
 800db20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db22:	bf00      	nop
 800db24:	e000ed88 	.word	0xe000ed88

0800db28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db28:	b480      	push	{r7}
 800db2a:	b085      	sub	sp, #20
 800db2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800db2e:	f3ef 8305 	mrs	r3, IPSR
 800db32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2b0f      	cmp	r3, #15
 800db38:	d914      	bls.n	800db64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800db3a:	4a17      	ldr	r2, [pc, #92]	; (800db98 <vPortValidateInterruptPriority+0x70>)
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	4413      	add	r3, r2
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800db44:	4b15      	ldr	r3, [pc, #84]	; (800db9c <vPortValidateInterruptPriority+0x74>)
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	7afa      	ldrb	r2, [r7, #11]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d20a      	bcs.n	800db64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800db4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	607b      	str	r3, [r7, #4]
}
 800db60:	bf00      	nop
 800db62:	e7fe      	b.n	800db62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db64:	4b0e      	ldr	r3, [pc, #56]	; (800dba0 <vPortValidateInterruptPriority+0x78>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800db6c:	4b0d      	ldr	r3, [pc, #52]	; (800dba4 <vPortValidateInterruptPriority+0x7c>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	429a      	cmp	r2, r3
 800db72:	d90a      	bls.n	800db8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800db74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db78:	f383 8811 	msr	BASEPRI, r3
 800db7c:	f3bf 8f6f 	isb	sy
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	603b      	str	r3, [r7, #0]
}
 800db86:	bf00      	nop
 800db88:	e7fe      	b.n	800db88 <vPortValidateInterruptPriority+0x60>
	}
 800db8a:	bf00      	nop
 800db8c:	3714      	adds	r7, #20
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr
 800db96:	bf00      	nop
 800db98:	e000e3f0 	.word	0xe000e3f0
 800db9c:	2000099c 	.word	0x2000099c
 800dba0:	e000ed0c 	.word	0xe000ed0c
 800dba4:	200009a0 	.word	0x200009a0

0800dba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b08a      	sub	sp, #40	; 0x28
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dbb4:	f7fe ff18 	bl	800c9e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dbb8:	4b5b      	ldr	r3, [pc, #364]	; (800dd28 <pvPortMalloc+0x180>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d101      	bne.n	800dbc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dbc0:	f000 f920 	bl	800de04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dbc4:	4b59      	ldr	r3, [pc, #356]	; (800dd2c <pvPortMalloc+0x184>)
 800dbc6:	681a      	ldr	r2, [r3, #0]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4013      	ands	r3, r2
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	f040 8093 	bne.w	800dcf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d01d      	beq.n	800dc14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dbd8:	2208      	movs	r2, #8
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	4413      	add	r3, r2
 800dbde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f003 0307 	and.w	r3, r3, #7
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d014      	beq.n	800dc14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f023 0307 	bic.w	r3, r3, #7
 800dbf0:	3308      	adds	r3, #8
 800dbf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f003 0307 	and.w	r3, r3, #7
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00a      	beq.n	800dc14 <pvPortMalloc+0x6c>
	__asm volatile
 800dbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	617b      	str	r3, [r7, #20]
}
 800dc10:	bf00      	nop
 800dc12:	e7fe      	b.n	800dc12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d06e      	beq.n	800dcf8 <pvPortMalloc+0x150>
 800dc1a:	4b45      	ldr	r3, [pc, #276]	; (800dd30 <pvPortMalloc+0x188>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d869      	bhi.n	800dcf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dc24:	4b43      	ldr	r3, [pc, #268]	; (800dd34 <pvPortMalloc+0x18c>)
 800dc26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dc28:	4b42      	ldr	r3, [pc, #264]	; (800dd34 <pvPortMalloc+0x18c>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc2e:	e004      	b.n	800dc3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d903      	bls.n	800dc4c <pvPortMalloc+0xa4>
 800dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d1f1      	bne.n	800dc30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dc4c:	4b36      	ldr	r3, [pc, #216]	; (800dd28 <pvPortMalloc+0x180>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d050      	beq.n	800dcf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc56:	6a3b      	ldr	r3, [r7, #32]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2208      	movs	r2, #8
 800dc5c:	4413      	add	r3, r2
 800dc5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc62:	681a      	ldr	r2, [r3, #0]
 800dc64:	6a3b      	ldr	r3, [r7, #32]
 800dc66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6a:	685a      	ldr	r2, [r3, #4]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	1ad2      	subs	r2, r2, r3
 800dc70:	2308      	movs	r3, #8
 800dc72:	005b      	lsls	r3, r3, #1
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d91f      	bls.n	800dcb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4413      	add	r3, r2
 800dc7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc80:	69bb      	ldr	r3, [r7, #24]
 800dc82:	f003 0307 	and.w	r3, r3, #7
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d00a      	beq.n	800dca0 <pvPortMalloc+0xf8>
	__asm volatile
 800dc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8e:	f383 8811 	msr	BASEPRI, r3
 800dc92:	f3bf 8f6f 	isb	sy
 800dc96:	f3bf 8f4f 	dsb	sy
 800dc9a:	613b      	str	r3, [r7, #16]
}
 800dc9c:	bf00      	nop
 800dc9e:	e7fe      	b.n	800dc9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	685a      	ldr	r2, [r3, #4]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	1ad2      	subs	r2, r2, r3
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dcb2:	69b8      	ldr	r0, [r7, #24]
 800dcb4:	f000 f908 	bl	800dec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dcb8:	4b1d      	ldr	r3, [pc, #116]	; (800dd30 <pvPortMalloc+0x188>)
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	1ad3      	subs	r3, r2, r3
 800dcc2:	4a1b      	ldr	r2, [pc, #108]	; (800dd30 <pvPortMalloc+0x188>)
 800dcc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dcc6:	4b1a      	ldr	r3, [pc, #104]	; (800dd30 <pvPortMalloc+0x188>)
 800dcc8:	681a      	ldr	r2, [r3, #0]
 800dcca:	4b1b      	ldr	r3, [pc, #108]	; (800dd38 <pvPortMalloc+0x190>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d203      	bcs.n	800dcda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dcd2:	4b17      	ldr	r3, [pc, #92]	; (800dd30 <pvPortMalloc+0x188>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a18      	ldr	r2, [pc, #96]	; (800dd38 <pvPortMalloc+0x190>)
 800dcd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcdc:	685a      	ldr	r2, [r3, #4]
 800dcde:	4b13      	ldr	r3, [pc, #76]	; (800dd2c <pvPortMalloc+0x184>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	431a      	orrs	r2, r3
 800dce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcea:	2200      	movs	r2, #0
 800dcec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dcee:	4b13      	ldr	r3, [pc, #76]	; (800dd3c <pvPortMalloc+0x194>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	4a11      	ldr	r2, [pc, #68]	; (800dd3c <pvPortMalloc+0x194>)
 800dcf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dcf8:	f7fe fe84 	bl	800ca04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	f003 0307 	and.w	r3, r3, #7
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d00a      	beq.n	800dd1c <pvPortMalloc+0x174>
	__asm volatile
 800dd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0a:	f383 8811 	msr	BASEPRI, r3
 800dd0e:	f3bf 8f6f 	isb	sy
 800dd12:	f3bf 8f4f 	dsb	sy
 800dd16:	60fb      	str	r3, [r7, #12]
}
 800dd18:	bf00      	nop
 800dd1a:	e7fe      	b.n	800dd1a <pvPortMalloc+0x172>
	return pvReturn;
 800dd1c:	69fb      	ldr	r3, [r7, #28]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3728      	adds	r7, #40	; 0x28
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	200045ac 	.word	0x200045ac
 800dd2c:	200045c0 	.word	0x200045c0
 800dd30:	200045b0 	.word	0x200045b0
 800dd34:	200045a4 	.word	0x200045a4
 800dd38:	200045b4 	.word	0x200045b4
 800dd3c:	200045b8 	.word	0x200045b8

0800dd40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b086      	sub	sp, #24
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d04d      	beq.n	800ddee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dd52:	2308      	movs	r3, #8
 800dd54:	425b      	negs	r3, r3
 800dd56:	697a      	ldr	r2, [r7, #20]
 800dd58:	4413      	add	r3, r2
 800dd5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	685a      	ldr	r2, [r3, #4]
 800dd64:	4b24      	ldr	r3, [pc, #144]	; (800ddf8 <vPortFree+0xb8>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4013      	ands	r3, r2
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10a      	bne.n	800dd84 <vPortFree+0x44>
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	60fb      	str	r3, [r7, #12]
}
 800dd80:	bf00      	nop
 800dd82:	e7fe      	b.n	800dd82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00a      	beq.n	800dda2 <vPortFree+0x62>
	__asm volatile
 800dd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd90:	f383 8811 	msr	BASEPRI, r3
 800dd94:	f3bf 8f6f 	isb	sy
 800dd98:	f3bf 8f4f 	dsb	sy
 800dd9c:	60bb      	str	r3, [r7, #8]
}
 800dd9e:	bf00      	nop
 800dda0:	e7fe      	b.n	800dda0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	685a      	ldr	r2, [r3, #4]
 800dda6:	4b14      	ldr	r3, [pc, #80]	; (800ddf8 <vPortFree+0xb8>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	4013      	ands	r3, r2
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d01e      	beq.n	800ddee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d11a      	bne.n	800ddee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	685a      	ldr	r2, [r3, #4]
 800ddbc:	4b0e      	ldr	r3, [pc, #56]	; (800ddf8 <vPortFree+0xb8>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	43db      	mvns	r3, r3
 800ddc2:	401a      	ands	r2, r3
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ddc8:	f7fe fe0e 	bl	800c9e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	685a      	ldr	r2, [r3, #4]
 800ddd0:	4b0a      	ldr	r3, [pc, #40]	; (800ddfc <vPortFree+0xbc>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	4a09      	ldr	r2, [pc, #36]	; (800ddfc <vPortFree+0xbc>)
 800ddd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ddda:	6938      	ldr	r0, [r7, #16]
 800dddc:	f000 f874 	bl	800dec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dde0:	4b07      	ldr	r3, [pc, #28]	; (800de00 <vPortFree+0xc0>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	3301      	adds	r3, #1
 800dde6:	4a06      	ldr	r2, [pc, #24]	; (800de00 <vPortFree+0xc0>)
 800dde8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ddea:	f7fe fe0b 	bl	800ca04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ddee:	bf00      	nop
 800ddf0:	3718      	adds	r7, #24
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	200045c0 	.word	0x200045c0
 800ddfc:	200045b0 	.word	0x200045b0
 800de00:	200045bc 	.word	0x200045bc

0800de04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de04:	b480      	push	{r7}
 800de06:	b085      	sub	sp, #20
 800de08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800de0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de10:	4b27      	ldr	r3, [pc, #156]	; (800deb0 <prvHeapInit+0xac>)
 800de12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f003 0307 	and.w	r3, r3, #7
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00c      	beq.n	800de38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	3307      	adds	r3, #7
 800de22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f023 0307 	bic.w	r3, r3, #7
 800de2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800de2c:	68ba      	ldr	r2, [r7, #8]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	1ad3      	subs	r3, r2, r3
 800de32:	4a1f      	ldr	r2, [pc, #124]	; (800deb0 <prvHeapInit+0xac>)
 800de34:	4413      	add	r3, r2
 800de36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800de3c:	4a1d      	ldr	r2, [pc, #116]	; (800deb4 <prvHeapInit+0xb0>)
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800de42:	4b1c      	ldr	r3, [pc, #112]	; (800deb4 <prvHeapInit+0xb0>)
 800de44:	2200      	movs	r2, #0
 800de46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	68ba      	ldr	r2, [r7, #8]
 800de4c:	4413      	add	r3, r2
 800de4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800de50:	2208      	movs	r2, #8
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	1a9b      	subs	r3, r3, r2
 800de56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f023 0307 	bic.w	r3, r3, #7
 800de5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	4a15      	ldr	r2, [pc, #84]	; (800deb8 <prvHeapInit+0xb4>)
 800de64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800de66:	4b14      	ldr	r3, [pc, #80]	; (800deb8 <prvHeapInit+0xb4>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	2200      	movs	r2, #0
 800de6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800de6e:	4b12      	ldr	r3, [pc, #72]	; (800deb8 <prvHeapInit+0xb4>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2200      	movs	r2, #0
 800de74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	68fa      	ldr	r2, [r7, #12]
 800de7e:	1ad2      	subs	r2, r2, r3
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800de84:	4b0c      	ldr	r3, [pc, #48]	; (800deb8 <prvHeapInit+0xb4>)
 800de86:	681a      	ldr	r2, [r3, #0]
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	4a0a      	ldr	r2, [pc, #40]	; (800debc <prvHeapInit+0xb8>)
 800de92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	4a09      	ldr	r2, [pc, #36]	; (800dec0 <prvHeapInit+0xbc>)
 800de9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800de9c:	4b09      	ldr	r3, [pc, #36]	; (800dec4 <prvHeapInit+0xc0>)
 800de9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dea2:	601a      	str	r2, [r3, #0]
}
 800dea4:	bf00      	nop
 800dea6:	3714      	adds	r7, #20
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr
 800deb0:	200009a4 	.word	0x200009a4
 800deb4:	200045a4 	.word	0x200045a4
 800deb8:	200045ac 	.word	0x200045ac
 800debc:	200045b4 	.word	0x200045b4
 800dec0:	200045b0 	.word	0x200045b0
 800dec4:	200045c0 	.word	0x200045c0

0800dec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ded0:	4b28      	ldr	r3, [pc, #160]	; (800df74 <prvInsertBlockIntoFreeList+0xac>)
 800ded2:	60fb      	str	r3, [r7, #12]
 800ded4:	e002      	b.n	800dedc <prvInsertBlockIntoFreeList+0x14>
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	60fb      	str	r3, [r7, #12]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	687a      	ldr	r2, [r7, #4]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d8f7      	bhi.n	800ded6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	68ba      	ldr	r2, [r7, #8]
 800def0:	4413      	add	r3, r2
 800def2:	687a      	ldr	r2, [r7, #4]
 800def4:	429a      	cmp	r2, r3
 800def6:	d108      	bne.n	800df0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	685a      	ldr	r2, [r3, #4]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	441a      	add	r2, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	441a      	add	r2, r3
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d118      	bne.n	800df50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	4b15      	ldr	r3, [pc, #84]	; (800df78 <prvInsertBlockIntoFreeList+0xb0>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	429a      	cmp	r2, r3
 800df28:	d00d      	beq.n	800df46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	685a      	ldr	r2, [r3, #4]
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	441a      	add	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	601a      	str	r2, [r3, #0]
 800df44:	e008      	b.n	800df58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df46:	4b0c      	ldr	r3, [pc, #48]	; (800df78 <prvInsertBlockIntoFreeList+0xb0>)
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	601a      	str	r2, [r3, #0]
 800df4e:	e003      	b.n	800df58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800df58:	68fa      	ldr	r2, [r7, #12]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d002      	beq.n	800df66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	687a      	ldr	r2, [r7, #4]
 800df64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df66:	bf00      	nop
 800df68:	3714      	adds	r7, #20
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr
 800df72:	bf00      	nop
 800df74:	200045a4 	.word	0x200045a4
 800df78:	200045ac 	.word	0x200045ac

0800df7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800df80:	2201      	movs	r2, #1
 800df82:	4912      	ldr	r1, [pc, #72]	; (800dfcc <MX_USB_DEVICE_Init+0x50>)
 800df84:	4812      	ldr	r0, [pc, #72]	; (800dfd0 <MX_USB_DEVICE_Init+0x54>)
 800df86:	f7fb ff89 	bl	8009e9c <USBD_Init>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d001      	beq.n	800df94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df90:	f7f3 fa00 	bl	8001394 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800df94:	490f      	ldr	r1, [pc, #60]	; (800dfd4 <MX_USB_DEVICE_Init+0x58>)
 800df96:	480e      	ldr	r0, [pc, #56]	; (800dfd0 <MX_USB_DEVICE_Init+0x54>)
 800df98:	f7fb ffb0 	bl	8009efc <USBD_RegisterClass>
 800df9c:	4603      	mov	r3, r0
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d001      	beq.n	800dfa6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dfa2:	f7f3 f9f7 	bl	8001394 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800dfa6:	490c      	ldr	r1, [pc, #48]	; (800dfd8 <MX_USB_DEVICE_Init+0x5c>)
 800dfa8:	4809      	ldr	r0, [pc, #36]	; (800dfd0 <MX_USB_DEVICE_Init+0x54>)
 800dfaa:	f7fb fea1 	bl	8009cf0 <USBD_CDC_RegisterInterface>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dfb4:	f7f3 f9ee 	bl	8001394 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800dfb8:	4805      	ldr	r0, [pc, #20]	; (800dfd0 <MX_USB_DEVICE_Init+0x54>)
 800dfba:	f7fb ffd5 	bl	8009f68 <USBD_Start>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d001      	beq.n	800dfc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dfc4:	f7f3 f9e6 	bl	8001394 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dfc8:	bf00      	nop
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	2000012c 	.word	0x2000012c
 800dfd0:	200045c4 	.word	0x200045c4
 800dfd4:	20000094 	.word	0x20000094
 800dfd8:	20000118 	.word	0x20000118

0800dfdc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	4905      	ldr	r1, [pc, #20]	; (800dff8 <CDC_Init_HS+0x1c>)
 800dfe4:	4805      	ldr	r0, [pc, #20]	; (800dffc <CDC_Init_HS+0x20>)
 800dfe6:	f7fb fe9d 	bl	8009d24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800dfea:	4905      	ldr	r1, [pc, #20]	; (800e000 <CDC_Init_HS+0x24>)
 800dfec:	4803      	ldr	r0, [pc, #12]	; (800dffc <CDC_Init_HS+0x20>)
 800dfee:	f7fb febb 	bl	8009d68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dff2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	200050a0 	.word	0x200050a0
 800dffc:	200045c4 	.word	0x200045c4
 800e000:	200048a0 	.word	0x200048a0

0800e004 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800e004:	b480      	push	{r7}
 800e006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800e008:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	4603      	mov	r3, r0
 800e01c:	6039      	str	r1, [r7, #0]
 800e01e:	71fb      	strb	r3, [r7, #7]
 800e020:	4613      	mov	r3, r2
 800e022:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800e024:	79fb      	ldrb	r3, [r7, #7]
 800e026:	2b23      	cmp	r3, #35	; 0x23
 800e028:	f200 809b 	bhi.w	800e162 <CDC_Control_HS+0x14e>
 800e02c:	a201      	add	r2, pc, #4	; (adr r2, 800e034 <CDC_Control_HS+0x20>)
 800e02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e032:	bf00      	nop
 800e034:	0800e163 	.word	0x0800e163
 800e038:	0800e163 	.word	0x0800e163
 800e03c:	0800e163 	.word	0x0800e163
 800e040:	0800e163 	.word	0x0800e163
 800e044:	0800e163 	.word	0x0800e163
 800e048:	0800e163 	.word	0x0800e163
 800e04c:	0800e163 	.word	0x0800e163
 800e050:	0800e163 	.word	0x0800e163
 800e054:	0800e163 	.word	0x0800e163
 800e058:	0800e163 	.word	0x0800e163
 800e05c:	0800e163 	.word	0x0800e163
 800e060:	0800e163 	.word	0x0800e163
 800e064:	0800e163 	.word	0x0800e163
 800e068:	0800e163 	.word	0x0800e163
 800e06c:	0800e163 	.word	0x0800e163
 800e070:	0800e163 	.word	0x0800e163
 800e074:	0800e163 	.word	0x0800e163
 800e078:	0800e163 	.word	0x0800e163
 800e07c:	0800e163 	.word	0x0800e163
 800e080:	0800e163 	.word	0x0800e163
 800e084:	0800e163 	.word	0x0800e163
 800e088:	0800e163 	.word	0x0800e163
 800e08c:	0800e163 	.word	0x0800e163
 800e090:	0800e163 	.word	0x0800e163
 800e094:	0800e163 	.word	0x0800e163
 800e098:	0800e163 	.word	0x0800e163
 800e09c:	0800e163 	.word	0x0800e163
 800e0a0:	0800e163 	.word	0x0800e163
 800e0a4:	0800e163 	.word	0x0800e163
 800e0a8:	0800e163 	.word	0x0800e163
 800e0ac:	0800e163 	.word	0x0800e163
 800e0b0:	0800e163 	.word	0x0800e163
 800e0b4:	0800e0c5 	.word	0x0800e0c5
 800e0b8:	0800e113 	.word	0x0800e113
 800e0bc:	0800e163 	.word	0x0800e163
 800e0c0:	0800e163 	.word	0x0800e163
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
  case CDC_SET_LINE_CODING:
	  TempBuf_USB[0]=pbuf[0];
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	781a      	ldrb	r2, [r3, #0]
 800e0c8:	4b29      	ldr	r3, [pc, #164]	; (800e170 <CDC_Control_HS+0x15c>)
 800e0ca:	701a      	strb	r2, [r3, #0]
	  TempBuf_USB[1]=pbuf[1];
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	785a      	ldrb	r2, [r3, #1]
 800e0d0:	4b27      	ldr	r3, [pc, #156]	; (800e170 <CDC_Control_HS+0x15c>)
 800e0d2:	705a      	strb	r2, [r3, #1]
	  TempBuf_USB[2]=pbuf[2];
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	789a      	ldrb	r2, [r3, #2]
 800e0d8:	4b25      	ldr	r3, [pc, #148]	; (800e170 <CDC_Control_HS+0x15c>)
 800e0da:	709a      	strb	r2, [r3, #2]
	  TempBuf_USB[3]=pbuf[3];
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	78da      	ldrb	r2, [r3, #3]
 800e0e0:	4b23      	ldr	r3, [pc, #140]	; (800e170 <CDC_Control_HS+0x15c>)
 800e0e2:	70da      	strb	r2, [r3, #3]
	  TempBuf_USB[4]=pbuf[4];
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	791a      	ldrb	r2, [r3, #4]
 800e0e8:	4b21      	ldr	r3, [pc, #132]	; (800e170 <CDC_Control_HS+0x15c>)
 800e0ea:	711a      	strb	r2, [r3, #4]
	  TempBuf_USB[5]=pbuf[5];
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	795a      	ldrb	r2, [r3, #5]
 800e0f0:	4b1f      	ldr	r3, [pc, #124]	; (800e170 <CDC_Control_HS+0x15c>)
 800e0f2:	715a      	strb	r2, [r3, #5]
	  TempBuf_USB[6]=pbuf[6];
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	799a      	ldrb	r2, [r3, #6]
 800e0f8:	4b1d      	ldr	r3, [pc, #116]	; (800e170 <CDC_Control_HS+0x15c>)
 800e0fa:	719a      	strb	r2, [r3, #6]
	  TempBuf_USB[7]=pbuf[7];
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	79da      	ldrb	r2, [r3, #7]
 800e100:	4b1b      	ldr	r3, [pc, #108]	; (800e170 <CDC_Control_HS+0x15c>)
 800e102:	71da      	strb	r2, [r3, #7]
	  /*Use CDC_SET_LINE_CODING to assume USB device has been configured*/
	  osSignalSet(Task01Handle, 0x1);//Signal Task 1 to start execution
 800e104:	4b1b      	ldr	r3, [pc, #108]	; (800e174 <CDC_Control_HS+0x160>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2101      	movs	r1, #1
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fd fa36 	bl	800b57c <osSignalSet>
    break;
 800e110:	e028      	b.n	800e164 <CDC_Control_HS+0x150>

  case CDC_GET_LINE_CODING:
	  pbuf[0]=TempBuf_USB[0];
 800e112:	4b17      	ldr	r3, [pc, #92]	; (800e170 <CDC_Control_HS+0x15c>)
 800e114:	781a      	ldrb	r2, [r3, #0]
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	701a      	strb	r2, [r3, #0]
	  pbuf[1]=TempBuf_USB[1];
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	3301      	adds	r3, #1
 800e11e:	4a14      	ldr	r2, [pc, #80]	; (800e170 <CDC_Control_HS+0x15c>)
 800e120:	7852      	ldrb	r2, [r2, #1]
 800e122:	701a      	strb	r2, [r3, #0]
	  pbuf[2]=TempBuf_USB[2];
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	3302      	adds	r3, #2
 800e128:	4a11      	ldr	r2, [pc, #68]	; (800e170 <CDC_Control_HS+0x15c>)
 800e12a:	7892      	ldrb	r2, [r2, #2]
 800e12c:	701a      	strb	r2, [r3, #0]
	  pbuf[3]=TempBuf_USB[3];
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	3303      	adds	r3, #3
 800e132:	4a0f      	ldr	r2, [pc, #60]	; (800e170 <CDC_Control_HS+0x15c>)
 800e134:	78d2      	ldrb	r2, [r2, #3]
 800e136:	701a      	strb	r2, [r3, #0]
	  pbuf[4]=TempBuf_USB[4];
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	3304      	adds	r3, #4
 800e13c:	4a0c      	ldr	r2, [pc, #48]	; (800e170 <CDC_Control_HS+0x15c>)
 800e13e:	7912      	ldrb	r2, [r2, #4]
 800e140:	701a      	strb	r2, [r3, #0]
	  pbuf[5]=TempBuf_USB[5];
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	3305      	adds	r3, #5
 800e146:	4a0a      	ldr	r2, [pc, #40]	; (800e170 <CDC_Control_HS+0x15c>)
 800e148:	7952      	ldrb	r2, [r2, #5]
 800e14a:	701a      	strb	r2, [r3, #0]
	  pbuf[6]=TempBuf_USB[6];
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	3306      	adds	r3, #6
 800e150:	4a07      	ldr	r2, [pc, #28]	; (800e170 <CDC_Control_HS+0x15c>)
 800e152:	7992      	ldrb	r2, [r2, #6]
 800e154:	701a      	strb	r2, [r3, #0]
	  pbuf[7]=TempBuf_USB[7];
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	3307      	adds	r3, #7
 800e15a:	4a05      	ldr	r2, [pc, #20]	; (800e170 <CDC_Control_HS+0x15c>)
 800e15c:	79d2      	ldrb	r2, [r2, #7]
 800e15e:	701a      	strb	r2, [r3, #0]
    break;
 800e160:	e000      	b.n	800e164 <CDC_Control_HS+0x150>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e162:	bf00      	nop
  }

  return (USBD_OK);
 800e164:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800e166:	4618      	mov	r0, r3
 800e168:	3708      	adds	r7, #8
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	200058a0 	.word	0x200058a0
 800e174:	200005b4 	.word	0x200005b4

0800e178 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800e182:	6879      	ldr	r1, [r7, #4]
 800e184:	4805      	ldr	r0, [pc, #20]	; (800e19c <CDC_Receive_HS+0x24>)
 800e186:	f7fb fdef 	bl	8009d68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800e18a:	4804      	ldr	r0, [pc, #16]	; (800e19c <CDC_Receive_HS+0x24>)
 800e18c:	f7fb fe50 	bl	8009e30 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e190:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800e192:	4618      	mov	r0, r3
 800e194:	3708      	adds	r7, #8
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	200045c4 	.word	0x200045c4

0800e1a0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800e1b0:	4b0d      	ldr	r3, [pc, #52]	; (800e1e8 <CDC_Transmit_HS+0x48>)
 800e1b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e00b      	b.n	800e1de <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800e1c6:	887b      	ldrh	r3, [r7, #2]
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	6879      	ldr	r1, [r7, #4]
 800e1cc:	4806      	ldr	r0, [pc, #24]	; (800e1e8 <CDC_Transmit_HS+0x48>)
 800e1ce:	f7fb fda9 	bl	8009d24 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800e1d2:	4805      	ldr	r0, [pc, #20]	; (800e1e8 <CDC_Transmit_HS+0x48>)
 800e1d4:	f7fb fde6 	bl	8009da4 <USBD_CDC_TransmitPacket>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800e1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
 800e1e6:	bf00      	nop
 800e1e8:	200045c4 	.word	0x200045c4

0800e1ec <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b087      	sub	sp, #28
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800e1fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e202:	4618      	mov	r0, r3
 800e204:	371c      	adds	r7, #28
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr
	...

0800e210 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e210:	b480      	push	{r7}
 800e212:	b083      	sub	sp, #12
 800e214:	af00      	add	r7, sp, #0
 800e216:	4603      	mov	r3, r0
 800e218:	6039      	str	r1, [r7, #0]
 800e21a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	2212      	movs	r2, #18
 800e220:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800e222:	4b03      	ldr	r3, [pc, #12]	; (800e230 <USBD_HS_DeviceDescriptor+0x20>)
}
 800e224:	4618      	mov	r0, r3
 800e226:	370c      	adds	r7, #12
 800e228:	46bd      	mov	sp, r7
 800e22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22e:	4770      	bx	lr
 800e230:	20000148 	.word	0x20000148

0800e234 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	4603      	mov	r3, r0
 800e23c:	6039      	str	r1, [r7, #0]
 800e23e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	2204      	movs	r2, #4
 800e244:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e246:	4b03      	ldr	r3, [pc, #12]	; (800e254 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800e248:	4618      	mov	r0, r3
 800e24a:	370c      	adds	r7, #12
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	2000015c 	.word	0x2000015c

0800e258 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	4603      	mov	r3, r0
 800e260:	6039      	str	r1, [r7, #0]
 800e262:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e264:	79fb      	ldrb	r3, [r7, #7]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d105      	bne.n	800e276 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e26a:	683a      	ldr	r2, [r7, #0]
 800e26c:	4907      	ldr	r1, [pc, #28]	; (800e28c <USBD_HS_ProductStrDescriptor+0x34>)
 800e26e:	4808      	ldr	r0, [pc, #32]	; (800e290 <USBD_HS_ProductStrDescriptor+0x38>)
 800e270:	f7fd f826 	bl	800b2c0 <USBD_GetString>
 800e274:	e004      	b.n	800e280 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e276:	683a      	ldr	r2, [r7, #0]
 800e278:	4904      	ldr	r1, [pc, #16]	; (800e28c <USBD_HS_ProductStrDescriptor+0x34>)
 800e27a:	4805      	ldr	r0, [pc, #20]	; (800e290 <USBD_HS_ProductStrDescriptor+0x38>)
 800e27c:	f7fd f820 	bl	800b2c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e280:	4b02      	ldr	r3, [pc, #8]	; (800e28c <USBD_HS_ProductStrDescriptor+0x34>)
}
 800e282:	4618      	mov	r0, r3
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	200058a8 	.word	0x200058a8
 800e290:	080117f4 	.word	0x080117f4

0800e294 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
 800e29a:	4603      	mov	r3, r0
 800e29c:	6039      	str	r1, [r7, #0]
 800e29e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e2a0:	683a      	ldr	r2, [r7, #0]
 800e2a2:	4904      	ldr	r1, [pc, #16]	; (800e2b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800e2a4:	4804      	ldr	r0, [pc, #16]	; (800e2b8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800e2a6:	f7fd f80b 	bl	800b2c0 <USBD_GetString>
  return USBD_StrDesc;
 800e2aa:	4b02      	ldr	r3, [pc, #8]	; (800e2b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	200058a8 	.word	0x200058a8
 800e2b8:	0801180c 	.word	0x0801180c

0800e2bc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	6039      	str	r1, [r7, #0]
 800e2c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	221a      	movs	r2, #26
 800e2cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e2ce:	f000 f843 	bl	800e358 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e2d2:	4b02      	ldr	r3, [pc, #8]	; (800e2dc <USBD_HS_SerialStrDescriptor+0x20>)
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	20000160 	.word	0x20000160

0800e2e0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	6039      	str	r1, [r7, #0]
 800e2ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e2ec:	79fb      	ldrb	r3, [r7, #7]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d105      	bne.n	800e2fe <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e2f2:	683a      	ldr	r2, [r7, #0]
 800e2f4:	4907      	ldr	r1, [pc, #28]	; (800e314 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e2f6:	4808      	ldr	r0, [pc, #32]	; (800e318 <USBD_HS_ConfigStrDescriptor+0x38>)
 800e2f8:	f7fc ffe2 	bl	800b2c0 <USBD_GetString>
 800e2fc:	e004      	b.n	800e308 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e2fe:	683a      	ldr	r2, [r7, #0]
 800e300:	4904      	ldr	r1, [pc, #16]	; (800e314 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e302:	4805      	ldr	r0, [pc, #20]	; (800e318 <USBD_HS_ConfigStrDescriptor+0x38>)
 800e304:	f7fc ffdc 	bl	800b2c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e308:	4b02      	ldr	r3, [pc, #8]	; (800e314 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3708      	adds	r7, #8
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	200058a8 	.word	0x200058a8
 800e318:	08011820 	.word	0x08011820

0800e31c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	4603      	mov	r3, r0
 800e324:	6039      	str	r1, [r7, #0]
 800e326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e328:	79fb      	ldrb	r3, [r7, #7]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d105      	bne.n	800e33a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e32e:	683a      	ldr	r2, [r7, #0]
 800e330:	4907      	ldr	r1, [pc, #28]	; (800e350 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e332:	4808      	ldr	r0, [pc, #32]	; (800e354 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e334:	f7fc ffc4 	bl	800b2c0 <USBD_GetString>
 800e338:	e004      	b.n	800e344 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e33a:	683a      	ldr	r2, [r7, #0]
 800e33c:	4904      	ldr	r1, [pc, #16]	; (800e350 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e33e:	4805      	ldr	r0, [pc, #20]	; (800e354 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e340:	f7fc ffbe 	bl	800b2c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e344:	4b02      	ldr	r3, [pc, #8]	; (800e350 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800e346:	4618      	mov	r0, r3
 800e348:	3708      	adds	r7, #8
 800e34a:	46bd      	mov	sp, r7
 800e34c:	bd80      	pop	{r7, pc}
 800e34e:	bf00      	nop
 800e350:	200058a8 	.word	0x200058a8
 800e354:	0801182c 	.word	0x0801182c

0800e358 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e35e:	4b0f      	ldr	r3, [pc, #60]	; (800e39c <Get_SerialNum+0x44>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e364:	4b0e      	ldr	r3, [pc, #56]	; (800e3a0 <Get_SerialNum+0x48>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e36a:	4b0e      	ldr	r3, [pc, #56]	; (800e3a4 <Get_SerialNum+0x4c>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	4413      	add	r3, r2
 800e376:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d009      	beq.n	800e392 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e37e:	2208      	movs	r2, #8
 800e380:	4909      	ldr	r1, [pc, #36]	; (800e3a8 <Get_SerialNum+0x50>)
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f000 f814 	bl	800e3b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e388:	2204      	movs	r2, #4
 800e38a:	4908      	ldr	r1, [pc, #32]	; (800e3ac <Get_SerialNum+0x54>)
 800e38c:	68b8      	ldr	r0, [r7, #8]
 800e38e:	f000 f80f 	bl	800e3b0 <IntToUnicode>
  }
}
 800e392:	bf00      	nop
 800e394:	3710      	adds	r7, #16
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	1fff7a10 	.word	0x1fff7a10
 800e3a0:	1fff7a14 	.word	0x1fff7a14
 800e3a4:	1fff7a18 	.word	0x1fff7a18
 800e3a8:	20000162 	.word	0x20000162
 800e3ac:	20000172 	.word	0x20000172

0800e3b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	75fb      	strb	r3, [r7, #23]
 800e3c6:	e027      	b.n	800e418 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	0f1b      	lsrs	r3, r3, #28
 800e3cc:	2b09      	cmp	r3, #9
 800e3ce:	d80b      	bhi.n	800e3e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	0f1b      	lsrs	r3, r3, #28
 800e3d4:	b2da      	uxtb	r2, r3
 800e3d6:	7dfb      	ldrb	r3, [r7, #23]
 800e3d8:	005b      	lsls	r3, r3, #1
 800e3da:	4619      	mov	r1, r3
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	440b      	add	r3, r1
 800e3e0:	3230      	adds	r2, #48	; 0x30
 800e3e2:	b2d2      	uxtb	r2, r2
 800e3e4:	701a      	strb	r2, [r3, #0]
 800e3e6:	e00a      	b.n	800e3fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	0f1b      	lsrs	r3, r3, #28
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	7dfb      	ldrb	r3, [r7, #23]
 800e3f0:	005b      	lsls	r3, r3, #1
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	440b      	add	r3, r1
 800e3f8:	3237      	adds	r2, #55	; 0x37
 800e3fa:	b2d2      	uxtb	r2, r2
 800e3fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	011b      	lsls	r3, r3, #4
 800e402:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e404:	7dfb      	ldrb	r3, [r7, #23]
 800e406:	005b      	lsls	r3, r3, #1
 800e408:	3301      	adds	r3, #1
 800e40a:	68ba      	ldr	r2, [r7, #8]
 800e40c:	4413      	add	r3, r2
 800e40e:	2200      	movs	r2, #0
 800e410:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e412:	7dfb      	ldrb	r3, [r7, #23]
 800e414:	3301      	adds	r3, #1
 800e416:	75fb      	strb	r3, [r7, #23]
 800e418:	7dfa      	ldrb	r2, [r7, #23]
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d3d3      	bcc.n	800e3c8 <IntToUnicode+0x18>
  }
}
 800e420:	bf00      	nop
 800e422:	bf00      	nop
 800e424:	371c      	adds	r7, #28
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr
	...

0800e430 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b08a      	sub	sp, #40	; 0x28
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e438:	f107 0314 	add.w	r3, r7, #20
 800e43c:	2200      	movs	r2, #0
 800e43e:	601a      	str	r2, [r3, #0]
 800e440:	605a      	str	r2, [r3, #4]
 800e442:	609a      	str	r2, [r3, #8]
 800e444:	60da      	str	r2, [r3, #12]
 800e446:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	4a1d      	ldr	r2, [pc, #116]	; (800e4c4 <HAL_PCD_MspInit+0x94>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d134      	bne.n	800e4bc <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e452:	2300      	movs	r3, #0
 800e454:	613b      	str	r3, [r7, #16]
 800e456:	4b1c      	ldr	r3, [pc, #112]	; (800e4c8 <HAL_PCD_MspInit+0x98>)
 800e458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e45a:	4a1b      	ldr	r2, [pc, #108]	; (800e4c8 <HAL_PCD_MspInit+0x98>)
 800e45c:	f043 0302 	orr.w	r3, r3, #2
 800e460:	6313      	str	r3, [r2, #48]	; 0x30
 800e462:	4b19      	ldr	r3, [pc, #100]	; (800e4c8 <HAL_PCD_MspInit+0x98>)
 800e464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e466:	f003 0302 	and.w	r3, r3, #2
 800e46a:	613b      	str	r3, [r7, #16]
 800e46c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800e46e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800e472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e474:	2302      	movs	r3, #2
 800e476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e478:	2300      	movs	r3, #0
 800e47a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e47c:	2303      	movs	r3, #3
 800e47e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e480:	230c      	movs	r3, #12
 800e482:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e484:	f107 0314 	add.w	r3, r7, #20
 800e488:	4619      	mov	r1, r3
 800e48a:	4810      	ldr	r0, [pc, #64]	; (800e4cc <HAL_PCD_MspInit+0x9c>)
 800e48c:	f7f5 f966 	bl	800375c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e490:	2300      	movs	r3, #0
 800e492:	60fb      	str	r3, [r7, #12]
 800e494:	4b0c      	ldr	r3, [pc, #48]	; (800e4c8 <HAL_PCD_MspInit+0x98>)
 800e496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e498:	4a0b      	ldr	r2, [pc, #44]	; (800e4c8 <HAL_PCD_MspInit+0x98>)
 800e49a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e49e:	6313      	str	r3, [r2, #48]	; 0x30
 800e4a0:	4b09      	ldr	r3, [pc, #36]	; (800e4c8 <HAL_PCD_MspInit+0x98>)
 800e4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e4a8:	60fb      	str	r3, [r7, #12]
 800e4aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	2105      	movs	r1, #5
 800e4b0:	204d      	movs	r0, #77	; 0x4d
 800e4b2:	f7f4 ff6b 	bl	800338c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e4b6:	204d      	movs	r0, #77	; 0x4d
 800e4b8:	f7f4 ff84 	bl	80033c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e4bc:	bf00      	nop
 800e4be:	3728      	adds	r7, #40	; 0x28
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	40040000 	.word	0x40040000
 800e4c8:	40023800 	.word	0x40023800
 800e4cc:	40020400 	.word	0x40020400

0800e4d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	4610      	mov	r0, r2
 800e4e8:	f7fb fd8b 	bl	800a002 <USBD_LL_SetupStage>
}
 800e4ec:	bf00      	nop
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e506:	78fa      	ldrb	r2, [r7, #3]
 800e508:	6879      	ldr	r1, [r7, #4]
 800e50a:	4613      	mov	r3, r2
 800e50c:	00db      	lsls	r3, r3, #3
 800e50e:	4413      	add	r3, r2
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	440b      	add	r3, r1
 800e514:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e518:	681a      	ldr	r2, [r3, #0]
 800e51a:	78fb      	ldrb	r3, [r7, #3]
 800e51c:	4619      	mov	r1, r3
 800e51e:	f7fb fdc5 	bl	800a0ac <USBD_LL_DataOutStage>
}
 800e522:	bf00      	nop
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b082      	sub	sp, #8
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
 800e532:	460b      	mov	r3, r1
 800e534:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e53c:	78fa      	ldrb	r2, [r7, #3]
 800e53e:	6879      	ldr	r1, [r7, #4]
 800e540:	4613      	mov	r3, r2
 800e542:	00db      	lsls	r3, r3, #3
 800e544:	4413      	add	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	440b      	add	r3, r1
 800e54a:	334c      	adds	r3, #76	; 0x4c
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	78fb      	ldrb	r3, [r7, #3]
 800e550:	4619      	mov	r1, r3
 800e552:	f7fb fe5e 	bl	800a212 <USBD_LL_DataInStage>
}
 800e556:	bf00      	nop
 800e558:	3708      	adds	r7, #8
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b082      	sub	sp, #8
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fb ff92 	bl	800a496 <USBD_LL_SOF>
}
 800e572:	bf00      	nop
 800e574:	3708      	adds	r7, #8
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b084      	sub	sp, #16
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e582:	2301      	movs	r3, #1
 800e584:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d102      	bne.n	800e594 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e58e:	2300      	movs	r3, #0
 800e590:	73fb      	strb	r3, [r7, #15]
 800e592:	e008      	b.n	800e5a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	2b02      	cmp	r3, #2
 800e59a:	d102      	bne.n	800e5a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e59c:	2301      	movs	r3, #1
 800e59e:	73fb      	strb	r3, [r7, #15]
 800e5a0:	e001      	b.n	800e5a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e5a2:	f7f2 fef7 	bl	8001394 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5ac:	7bfa      	ldrb	r2, [r7, #15]
 800e5ae:	4611      	mov	r1, r2
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7fb ff32 	bl	800a41a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fb feda 	bl	800a376 <USBD_LL_Reset>
}
 800e5c2:	bf00      	nop
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
	...

0800e5cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b082      	sub	sp, #8
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fb ff2d 	bl	800a43a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	6812      	ldr	r2, [r2, #0]
 800e5ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e5f2:	f043 0301 	orr.w	r3, r3, #1
 800e5f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6a1b      	ldr	r3, [r3, #32]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d005      	beq.n	800e60c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e600:	4b04      	ldr	r3, [pc, #16]	; (800e614 <HAL_PCD_SuspendCallback+0x48>)
 800e602:	691b      	ldr	r3, [r3, #16]
 800e604:	4a03      	ldr	r2, [pc, #12]	; (800e614 <HAL_PCD_SuspendCallback+0x48>)
 800e606:	f043 0306 	orr.w	r3, r3, #6
 800e60a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e60c:	bf00      	nop
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	e000ed00 	.word	0xe000ed00

0800e618 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e626:	4618      	mov	r0, r3
 800e628:	f7fb ff1d 	bl	800a466 <USBD_LL_Resume>
}
 800e62c:	bf00      	nop
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	460b      	mov	r3, r1
 800e63e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e646:	78fa      	ldrb	r2, [r7, #3]
 800e648:	4611      	mov	r1, r2
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7fb ff75 	bl	800a53a <USBD_LL_IsoOUTIncomplete>
}
 800e650:	bf00      	nop
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	460b      	mov	r3, r1
 800e662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e66a:	78fa      	ldrb	r2, [r7, #3]
 800e66c:	4611      	mov	r1, r2
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fb ff31 	bl	800a4d6 <USBD_LL_IsoINIncomplete>
}
 800e674:	bf00      	nop
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fb ff87 	bl	800a59e <USBD_LL_DevConnected>
}
 800e690:	bf00      	nop
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fb ff84 	bl	800a5b4 <USBD_LL_DevDisconnected>
}
 800e6ac:	bf00      	nop
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d140      	bne.n	800e746 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800e6c4:	4a22      	ldr	r2, [pc, #136]	; (800e750 <USBD_LL_Init+0x9c>)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	4a20      	ldr	r2, [pc, #128]	; (800e750 <USBD_LL_Init+0x9c>)
 800e6d0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e6d4:	4b1e      	ldr	r3, [pc, #120]	; (800e750 <USBD_LL_Init+0x9c>)
 800e6d6:	4a1f      	ldr	r2, [pc, #124]	; (800e754 <USBD_LL_Init+0xa0>)
 800e6d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800e6da:	4b1d      	ldr	r3, [pc, #116]	; (800e750 <USBD_LL_Init+0x9c>)
 800e6dc:	2206      	movs	r2, #6
 800e6de:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800e6e0:	4b1b      	ldr	r3, [pc, #108]	; (800e750 <USBD_LL_Init+0x9c>)
 800e6e2:	2202      	movs	r2, #2
 800e6e4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e6e6:	4b1a      	ldr	r3, [pc, #104]	; (800e750 <USBD_LL_Init+0x9c>)
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e6ec:	4b18      	ldr	r3, [pc, #96]	; (800e750 <USBD_LL_Init+0x9c>)
 800e6ee:	2202      	movs	r2, #2
 800e6f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e6f2:	4b17      	ldr	r3, [pc, #92]	; (800e750 <USBD_LL_Init+0x9c>)
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e6f8:	4b15      	ldr	r3, [pc, #84]	; (800e750 <USBD_LL_Init+0x9c>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800e6fe:	4b14      	ldr	r3, [pc, #80]	; (800e750 <USBD_LL_Init+0x9c>)
 800e700:	2200      	movs	r2, #0
 800e702:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e704:	4b12      	ldr	r3, [pc, #72]	; (800e750 <USBD_LL_Init+0x9c>)
 800e706:	2200      	movs	r2, #0
 800e708:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800e70a:	4b11      	ldr	r3, [pc, #68]	; (800e750 <USBD_LL_Init+0x9c>)
 800e70c:	2200      	movs	r2, #0
 800e70e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e710:	4b0f      	ldr	r3, [pc, #60]	; (800e750 <USBD_LL_Init+0x9c>)
 800e712:	2200      	movs	r2, #0
 800e714:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800e716:	480e      	ldr	r0, [pc, #56]	; (800e750 <USBD_LL_Init+0x9c>)
 800e718:	f7f5 f9e5 	bl	8003ae6 <HAL_PCD_Init>
 800e71c:	4603      	mov	r3, r0
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d001      	beq.n	800e726 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e722:	f7f2 fe37 	bl	8001394 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800e726:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e72a:	4809      	ldr	r0, [pc, #36]	; (800e750 <USBD_LL_Init+0x9c>)
 800e72c:	f7f6 fc3b 	bl	8004fa6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800e730:	2280      	movs	r2, #128	; 0x80
 800e732:	2100      	movs	r1, #0
 800e734:	4806      	ldr	r0, [pc, #24]	; (800e750 <USBD_LL_Init+0x9c>)
 800e736:	f7f6 fbef 	bl	8004f18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800e73a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800e73e:	2101      	movs	r1, #1
 800e740:	4803      	ldr	r0, [pc, #12]	; (800e750 <USBD_LL_Init+0x9c>)
 800e742:	f7f6 fbe9 	bl	8004f18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3708      	adds	r7, #8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	20005aa8 	.word	0x20005aa8
 800e754:	40040000 	.word	0x40040000

0800e758 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e760:	2300      	movs	r3, #0
 800e762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e764:	2300      	movs	r3, #0
 800e766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e76e:	4618      	mov	r0, r3
 800e770:	f7f5 fad6 	bl	8003d20 <HAL_PCD_Start>
 800e774:	4603      	mov	r3, r0
 800e776:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e778:	7bfb      	ldrb	r3, [r7, #15]
 800e77a:	4618      	mov	r0, r3
 800e77c:	f000 f942 	bl	800ea04 <USBD_Get_USB_Status>
 800e780:	4603      	mov	r3, r0
 800e782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e784:	7bbb      	ldrb	r3, [r7, #14]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b084      	sub	sp, #16
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
 800e796:	4608      	mov	r0, r1
 800e798:	4611      	mov	r1, r2
 800e79a:	461a      	mov	r2, r3
 800e79c:	4603      	mov	r3, r0
 800e79e:	70fb      	strb	r3, [r7, #3]
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	70bb      	strb	r3, [r7, #2]
 800e7a4:	4613      	mov	r3, r2
 800e7a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e7b6:	78bb      	ldrb	r3, [r7, #2]
 800e7b8:	883a      	ldrh	r2, [r7, #0]
 800e7ba:	78f9      	ldrb	r1, [r7, #3]
 800e7bc:	f7f5 ffa7 	bl	800470e <HAL_PCD_EP_Open>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7c4:	7bfb      	ldrb	r3, [r7, #15]
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f000 f91c 	bl	800ea04 <USBD_Get_USB_Status>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7da:	b580      	push	{r7, lr}
 800e7dc:	b084      	sub	sp, #16
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7f4:	78fa      	ldrb	r2, [r7, #3]
 800e7f6:	4611      	mov	r1, r2
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7f5 fff0 	bl	80047de <HAL_PCD_EP_Close>
 800e7fe:	4603      	mov	r3, r0
 800e800:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e802:	7bfb      	ldrb	r3, [r7, #15]
 800e804:	4618      	mov	r0, r3
 800e806:	f000 f8fd 	bl	800ea04 <USBD_Get_USB_Status>
 800e80a:	4603      	mov	r3, r0
 800e80c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e80e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e810:	4618      	mov	r0, r3
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	460b      	mov	r3, r1
 800e822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e824:	2300      	movs	r3, #0
 800e826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e828:	2300      	movs	r3, #0
 800e82a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e832:	78fa      	ldrb	r2, [r7, #3]
 800e834:	4611      	mov	r1, r2
 800e836:	4618      	mov	r0, r3
 800e838:	f7f6 f8c8 	bl	80049cc <HAL_PCD_EP_SetStall>
 800e83c:	4603      	mov	r3, r0
 800e83e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e840:	7bfb      	ldrb	r3, [r7, #15]
 800e842:	4618      	mov	r0, r3
 800e844:	f000 f8de 	bl	800ea04 <USBD_Get_USB_Status>
 800e848:	4603      	mov	r3, r0
 800e84a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e84c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b084      	sub	sp, #16
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
 800e85e:	460b      	mov	r3, r1
 800e860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e862:	2300      	movs	r3, #0
 800e864:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e866:	2300      	movs	r3, #0
 800e868:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e870:	78fa      	ldrb	r2, [r7, #3]
 800e872:	4611      	mov	r1, r2
 800e874:	4618      	mov	r0, r3
 800e876:	f7f6 f90d 	bl	8004a94 <HAL_PCD_EP_ClrStall>
 800e87a:	4603      	mov	r3, r0
 800e87c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e87e:	7bfb      	ldrb	r3, [r7, #15]
 800e880:	4618      	mov	r0, r3
 800e882:	f000 f8bf 	bl	800ea04 <USBD_Get_USB_Status>
 800e886:	4603      	mov	r3, r0
 800e888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e88a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3710      	adds	r7, #16
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e894:	b480      	push	{r7}
 800e896:	b085      	sub	sp, #20
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	460b      	mov	r3, r1
 800e89e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e8a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	da0b      	bge.n	800e8c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e8b0:	78fb      	ldrb	r3, [r7, #3]
 800e8b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8b6:	68f9      	ldr	r1, [r7, #12]
 800e8b8:	4613      	mov	r3, r2
 800e8ba:	00db      	lsls	r3, r3, #3
 800e8bc:	4413      	add	r3, r2
 800e8be:	009b      	lsls	r3, r3, #2
 800e8c0:	440b      	add	r3, r1
 800e8c2:	333e      	adds	r3, #62	; 0x3e
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	e00b      	b.n	800e8e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e8c8:	78fb      	ldrb	r3, [r7, #3]
 800e8ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e8ce:	68f9      	ldr	r1, [r7, #12]
 800e8d0:	4613      	mov	r3, r2
 800e8d2:	00db      	lsls	r3, r3, #3
 800e8d4:	4413      	add	r3, r2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	440b      	add	r3, r1
 800e8da:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e8de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3714      	adds	r7, #20
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e906:	78fa      	ldrb	r2, [r7, #3]
 800e908:	4611      	mov	r1, r2
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7f5 feda 	bl	80046c4 <HAL_PCD_SetAddress>
 800e910:	4603      	mov	r3, r0
 800e912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e914:	7bfb      	ldrb	r3, [r7, #15]
 800e916:	4618      	mov	r0, r3
 800e918:	f000 f874 	bl	800ea04 <USBD_Get_USB_Status>
 800e91c:	4603      	mov	r3, r0
 800e91e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e920:	7bbb      	ldrb	r3, [r7, #14]
}
 800e922:	4618      	mov	r0, r3
 800e924:	3710      	adds	r7, #16
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b086      	sub	sp, #24
 800e92e:	af00      	add	r7, sp, #0
 800e930:	60f8      	str	r0, [r7, #12]
 800e932:	607a      	str	r2, [r7, #4]
 800e934:	603b      	str	r3, [r7, #0]
 800e936:	460b      	mov	r3, r1
 800e938:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e93a:	2300      	movs	r3, #0
 800e93c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e93e:	2300      	movs	r3, #0
 800e940:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e948:	7af9      	ldrb	r1, [r7, #11]
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	f7f5 fff3 	bl	8004938 <HAL_PCD_EP_Transmit>
 800e952:	4603      	mov	r3, r0
 800e954:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e956:	7dfb      	ldrb	r3, [r7, #23]
 800e958:	4618      	mov	r0, r3
 800e95a:	f000 f853 	bl	800ea04 <USBD_Get_USB_Status>
 800e95e:	4603      	mov	r3, r0
 800e960:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e962:	7dbb      	ldrb	r3, [r7, #22]
}
 800e964:	4618      	mov	r0, r3
 800e966:	3718      	adds	r7, #24
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b086      	sub	sp, #24
 800e970:	af00      	add	r7, sp, #0
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	607a      	str	r2, [r7, #4]
 800e976:	603b      	str	r3, [r7, #0]
 800e978:	460b      	mov	r3, r1
 800e97a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e97c:	2300      	movs	r3, #0
 800e97e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e980:	2300      	movs	r3, #0
 800e982:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e98a:	7af9      	ldrb	r1, [r7, #11]
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	f7f5 ff6f 	bl	8004872 <HAL_PCD_EP_Receive>
 800e994:	4603      	mov	r3, r0
 800e996:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e998:	7dfb      	ldrb	r3, [r7, #23]
 800e99a:	4618      	mov	r0, r3
 800e99c:	f000 f832 	bl	800ea04 <USBD_Get_USB_Status>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e9a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3718      	adds	r7, #24
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b082      	sub	sp, #8
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e9c0:	78fa      	ldrb	r2, [r7, #3]
 800e9c2:	4611      	mov	r1, r2
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7f5 ff9f 	bl	8004908 <HAL_PCD_EP_GetRxCount>
 800e9ca:	4603      	mov	r3, r0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e9dc:	4b03      	ldr	r3, [pc, #12]	; (800e9ec <USBD_static_malloc+0x18>)
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	370c      	adds	r7, #12
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr
 800e9ea:	bf00      	nop
 800e9ec:	20005fb4 	.word	0x20005fb4

0800e9f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b083      	sub	sp, #12
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]

}
 800e9f8:	bf00      	nop
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b085      	sub	sp, #20
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ea12:	79fb      	ldrb	r3, [r7, #7]
 800ea14:	2b03      	cmp	r3, #3
 800ea16:	d817      	bhi.n	800ea48 <USBD_Get_USB_Status+0x44>
 800ea18:	a201      	add	r2, pc, #4	; (adr r2, 800ea20 <USBD_Get_USB_Status+0x1c>)
 800ea1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea1e:	bf00      	nop
 800ea20:	0800ea31 	.word	0x0800ea31
 800ea24:	0800ea37 	.word	0x0800ea37
 800ea28:	0800ea3d 	.word	0x0800ea3d
 800ea2c:	0800ea43 	.word	0x0800ea43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ea30:	2300      	movs	r3, #0
 800ea32:	73fb      	strb	r3, [r7, #15]
    break;
 800ea34:	e00b      	b.n	800ea4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea36:	2303      	movs	r3, #3
 800ea38:	73fb      	strb	r3, [r7, #15]
    break;
 800ea3a:	e008      	b.n	800ea4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea40:	e005      	b.n	800ea4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea42:	2303      	movs	r3, #3
 800ea44:	73fb      	strb	r3, [r7, #15]
    break;
 800ea46:	e002      	b.n	800ea4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ea48:	2303      	movs	r3, #3
 800ea4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea4c:	bf00      	nop
  }
  return usb_status;
 800ea4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3714      	adds	r7, #20
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <malloc>:
 800ea5c:	4b02      	ldr	r3, [pc, #8]	; (800ea68 <malloc+0xc>)
 800ea5e:	4601      	mov	r1, r0
 800ea60:	6818      	ldr	r0, [r3, #0]
 800ea62:	f000 b82b 	b.w	800eabc <_malloc_r>
 800ea66:	bf00      	nop
 800ea68:	200001d4 	.word	0x200001d4

0800ea6c <free>:
 800ea6c:	4b02      	ldr	r3, [pc, #8]	; (800ea78 <free+0xc>)
 800ea6e:	4601      	mov	r1, r0
 800ea70:	6818      	ldr	r0, [r3, #0]
 800ea72:	f001 bd3f 	b.w	80104f4 <_free_r>
 800ea76:	bf00      	nop
 800ea78:	200001d4 	.word	0x200001d4

0800ea7c <sbrk_aligned>:
 800ea7c:	b570      	push	{r4, r5, r6, lr}
 800ea7e:	4e0e      	ldr	r6, [pc, #56]	; (800eab8 <sbrk_aligned+0x3c>)
 800ea80:	460c      	mov	r4, r1
 800ea82:	6831      	ldr	r1, [r6, #0]
 800ea84:	4605      	mov	r5, r0
 800ea86:	b911      	cbnz	r1, 800ea8e <sbrk_aligned+0x12>
 800ea88:	f000 fe5e 	bl	800f748 <_sbrk_r>
 800ea8c:	6030      	str	r0, [r6, #0]
 800ea8e:	4621      	mov	r1, r4
 800ea90:	4628      	mov	r0, r5
 800ea92:	f000 fe59 	bl	800f748 <_sbrk_r>
 800ea96:	1c43      	adds	r3, r0, #1
 800ea98:	d00a      	beq.n	800eab0 <sbrk_aligned+0x34>
 800ea9a:	1cc4      	adds	r4, r0, #3
 800ea9c:	f024 0403 	bic.w	r4, r4, #3
 800eaa0:	42a0      	cmp	r0, r4
 800eaa2:	d007      	beq.n	800eab4 <sbrk_aligned+0x38>
 800eaa4:	1a21      	subs	r1, r4, r0
 800eaa6:	4628      	mov	r0, r5
 800eaa8:	f000 fe4e 	bl	800f748 <_sbrk_r>
 800eaac:	3001      	adds	r0, #1
 800eaae:	d101      	bne.n	800eab4 <sbrk_aligned+0x38>
 800eab0:	f04f 34ff 	mov.w	r4, #4294967295
 800eab4:	4620      	mov	r0, r4
 800eab6:	bd70      	pop	{r4, r5, r6, pc}
 800eab8:	200061d8 	.word	0x200061d8

0800eabc <_malloc_r>:
 800eabc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eac0:	1ccd      	adds	r5, r1, #3
 800eac2:	f025 0503 	bic.w	r5, r5, #3
 800eac6:	3508      	adds	r5, #8
 800eac8:	2d0c      	cmp	r5, #12
 800eaca:	bf38      	it	cc
 800eacc:	250c      	movcc	r5, #12
 800eace:	2d00      	cmp	r5, #0
 800ead0:	4607      	mov	r7, r0
 800ead2:	db01      	blt.n	800ead8 <_malloc_r+0x1c>
 800ead4:	42a9      	cmp	r1, r5
 800ead6:	d905      	bls.n	800eae4 <_malloc_r+0x28>
 800ead8:	230c      	movs	r3, #12
 800eada:	603b      	str	r3, [r7, #0]
 800eadc:	2600      	movs	r6, #0
 800eade:	4630      	mov	r0, r6
 800eae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eae4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ebb8 <_malloc_r+0xfc>
 800eae8:	f000 f868 	bl	800ebbc <__malloc_lock>
 800eaec:	f8d8 3000 	ldr.w	r3, [r8]
 800eaf0:	461c      	mov	r4, r3
 800eaf2:	bb5c      	cbnz	r4, 800eb4c <_malloc_r+0x90>
 800eaf4:	4629      	mov	r1, r5
 800eaf6:	4638      	mov	r0, r7
 800eaf8:	f7ff ffc0 	bl	800ea7c <sbrk_aligned>
 800eafc:	1c43      	adds	r3, r0, #1
 800eafe:	4604      	mov	r4, r0
 800eb00:	d155      	bne.n	800ebae <_malloc_r+0xf2>
 800eb02:	f8d8 4000 	ldr.w	r4, [r8]
 800eb06:	4626      	mov	r6, r4
 800eb08:	2e00      	cmp	r6, #0
 800eb0a:	d145      	bne.n	800eb98 <_malloc_r+0xdc>
 800eb0c:	2c00      	cmp	r4, #0
 800eb0e:	d048      	beq.n	800eba2 <_malloc_r+0xe6>
 800eb10:	6823      	ldr	r3, [r4, #0]
 800eb12:	4631      	mov	r1, r6
 800eb14:	4638      	mov	r0, r7
 800eb16:	eb04 0903 	add.w	r9, r4, r3
 800eb1a:	f000 fe15 	bl	800f748 <_sbrk_r>
 800eb1e:	4581      	cmp	r9, r0
 800eb20:	d13f      	bne.n	800eba2 <_malloc_r+0xe6>
 800eb22:	6821      	ldr	r1, [r4, #0]
 800eb24:	1a6d      	subs	r5, r5, r1
 800eb26:	4629      	mov	r1, r5
 800eb28:	4638      	mov	r0, r7
 800eb2a:	f7ff ffa7 	bl	800ea7c <sbrk_aligned>
 800eb2e:	3001      	adds	r0, #1
 800eb30:	d037      	beq.n	800eba2 <_malloc_r+0xe6>
 800eb32:	6823      	ldr	r3, [r4, #0]
 800eb34:	442b      	add	r3, r5
 800eb36:	6023      	str	r3, [r4, #0]
 800eb38:	f8d8 3000 	ldr.w	r3, [r8]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d038      	beq.n	800ebb2 <_malloc_r+0xf6>
 800eb40:	685a      	ldr	r2, [r3, #4]
 800eb42:	42a2      	cmp	r2, r4
 800eb44:	d12b      	bne.n	800eb9e <_malloc_r+0xe2>
 800eb46:	2200      	movs	r2, #0
 800eb48:	605a      	str	r2, [r3, #4]
 800eb4a:	e00f      	b.n	800eb6c <_malloc_r+0xb0>
 800eb4c:	6822      	ldr	r2, [r4, #0]
 800eb4e:	1b52      	subs	r2, r2, r5
 800eb50:	d41f      	bmi.n	800eb92 <_malloc_r+0xd6>
 800eb52:	2a0b      	cmp	r2, #11
 800eb54:	d917      	bls.n	800eb86 <_malloc_r+0xca>
 800eb56:	1961      	adds	r1, r4, r5
 800eb58:	42a3      	cmp	r3, r4
 800eb5a:	6025      	str	r5, [r4, #0]
 800eb5c:	bf18      	it	ne
 800eb5e:	6059      	strne	r1, [r3, #4]
 800eb60:	6863      	ldr	r3, [r4, #4]
 800eb62:	bf08      	it	eq
 800eb64:	f8c8 1000 	streq.w	r1, [r8]
 800eb68:	5162      	str	r2, [r4, r5]
 800eb6a:	604b      	str	r3, [r1, #4]
 800eb6c:	4638      	mov	r0, r7
 800eb6e:	f104 060b 	add.w	r6, r4, #11
 800eb72:	f000 f829 	bl	800ebc8 <__malloc_unlock>
 800eb76:	f026 0607 	bic.w	r6, r6, #7
 800eb7a:	1d23      	adds	r3, r4, #4
 800eb7c:	1af2      	subs	r2, r6, r3
 800eb7e:	d0ae      	beq.n	800eade <_malloc_r+0x22>
 800eb80:	1b9b      	subs	r3, r3, r6
 800eb82:	50a3      	str	r3, [r4, r2]
 800eb84:	e7ab      	b.n	800eade <_malloc_r+0x22>
 800eb86:	42a3      	cmp	r3, r4
 800eb88:	6862      	ldr	r2, [r4, #4]
 800eb8a:	d1dd      	bne.n	800eb48 <_malloc_r+0x8c>
 800eb8c:	f8c8 2000 	str.w	r2, [r8]
 800eb90:	e7ec      	b.n	800eb6c <_malloc_r+0xb0>
 800eb92:	4623      	mov	r3, r4
 800eb94:	6864      	ldr	r4, [r4, #4]
 800eb96:	e7ac      	b.n	800eaf2 <_malloc_r+0x36>
 800eb98:	4634      	mov	r4, r6
 800eb9a:	6876      	ldr	r6, [r6, #4]
 800eb9c:	e7b4      	b.n	800eb08 <_malloc_r+0x4c>
 800eb9e:	4613      	mov	r3, r2
 800eba0:	e7cc      	b.n	800eb3c <_malloc_r+0x80>
 800eba2:	230c      	movs	r3, #12
 800eba4:	603b      	str	r3, [r7, #0]
 800eba6:	4638      	mov	r0, r7
 800eba8:	f000 f80e 	bl	800ebc8 <__malloc_unlock>
 800ebac:	e797      	b.n	800eade <_malloc_r+0x22>
 800ebae:	6025      	str	r5, [r4, #0]
 800ebb0:	e7dc      	b.n	800eb6c <_malloc_r+0xb0>
 800ebb2:	605b      	str	r3, [r3, #4]
 800ebb4:	deff      	udf	#255	; 0xff
 800ebb6:	bf00      	nop
 800ebb8:	200061d4 	.word	0x200061d4

0800ebbc <__malloc_lock>:
 800ebbc:	4801      	ldr	r0, [pc, #4]	; (800ebc4 <__malloc_lock+0x8>)
 800ebbe:	f000 be0f 	b.w	800f7e0 <__retarget_lock_acquire_recursive>
 800ebc2:	bf00      	nop
 800ebc4:	2000631c 	.word	0x2000631c

0800ebc8 <__malloc_unlock>:
 800ebc8:	4801      	ldr	r0, [pc, #4]	; (800ebd0 <__malloc_unlock+0x8>)
 800ebca:	f000 be0a 	b.w	800f7e2 <__retarget_lock_release_recursive>
 800ebce:	bf00      	nop
 800ebd0:	2000631c 	.word	0x2000631c

0800ebd4 <__cvt>:
 800ebd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd8:	ec55 4b10 	vmov	r4, r5, d0
 800ebdc:	2d00      	cmp	r5, #0
 800ebde:	460e      	mov	r6, r1
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	462b      	mov	r3, r5
 800ebe4:	bfbb      	ittet	lt
 800ebe6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ebea:	461d      	movlt	r5, r3
 800ebec:	2300      	movge	r3, #0
 800ebee:	232d      	movlt	r3, #45	; 0x2d
 800ebf0:	700b      	strb	r3, [r1, #0]
 800ebf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ebf4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ebf8:	4691      	mov	r9, r2
 800ebfa:	f023 0820 	bic.w	r8, r3, #32
 800ebfe:	bfbc      	itt	lt
 800ec00:	4622      	movlt	r2, r4
 800ec02:	4614      	movlt	r4, r2
 800ec04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ec08:	d005      	beq.n	800ec16 <__cvt+0x42>
 800ec0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ec0e:	d100      	bne.n	800ec12 <__cvt+0x3e>
 800ec10:	3601      	adds	r6, #1
 800ec12:	2102      	movs	r1, #2
 800ec14:	e000      	b.n	800ec18 <__cvt+0x44>
 800ec16:	2103      	movs	r1, #3
 800ec18:	ab03      	add	r3, sp, #12
 800ec1a:	9301      	str	r3, [sp, #4]
 800ec1c:	ab02      	add	r3, sp, #8
 800ec1e:	9300      	str	r3, [sp, #0]
 800ec20:	ec45 4b10 	vmov	d0, r4, r5
 800ec24:	4653      	mov	r3, sl
 800ec26:	4632      	mov	r2, r6
 800ec28:	f000 fe72 	bl	800f910 <_dtoa_r>
 800ec2c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ec30:	4607      	mov	r7, r0
 800ec32:	d102      	bne.n	800ec3a <__cvt+0x66>
 800ec34:	f019 0f01 	tst.w	r9, #1
 800ec38:	d022      	beq.n	800ec80 <__cvt+0xac>
 800ec3a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ec3e:	eb07 0906 	add.w	r9, r7, r6
 800ec42:	d110      	bne.n	800ec66 <__cvt+0x92>
 800ec44:	783b      	ldrb	r3, [r7, #0]
 800ec46:	2b30      	cmp	r3, #48	; 0x30
 800ec48:	d10a      	bne.n	800ec60 <__cvt+0x8c>
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	4620      	mov	r0, r4
 800ec50:	4629      	mov	r1, r5
 800ec52:	f7f1 ff49 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec56:	b918      	cbnz	r0, 800ec60 <__cvt+0x8c>
 800ec58:	f1c6 0601 	rsb	r6, r6, #1
 800ec5c:	f8ca 6000 	str.w	r6, [sl]
 800ec60:	f8da 3000 	ldr.w	r3, [sl]
 800ec64:	4499      	add	r9, r3
 800ec66:	2200      	movs	r2, #0
 800ec68:	2300      	movs	r3, #0
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	4629      	mov	r1, r5
 800ec6e:	f7f1 ff3b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec72:	b108      	cbz	r0, 800ec78 <__cvt+0xa4>
 800ec74:	f8cd 900c 	str.w	r9, [sp, #12]
 800ec78:	2230      	movs	r2, #48	; 0x30
 800ec7a:	9b03      	ldr	r3, [sp, #12]
 800ec7c:	454b      	cmp	r3, r9
 800ec7e:	d307      	bcc.n	800ec90 <__cvt+0xbc>
 800ec80:	9b03      	ldr	r3, [sp, #12]
 800ec82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ec84:	1bdb      	subs	r3, r3, r7
 800ec86:	4638      	mov	r0, r7
 800ec88:	6013      	str	r3, [r2, #0]
 800ec8a:	b004      	add	sp, #16
 800ec8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec90:	1c59      	adds	r1, r3, #1
 800ec92:	9103      	str	r1, [sp, #12]
 800ec94:	701a      	strb	r2, [r3, #0]
 800ec96:	e7f0      	b.n	800ec7a <__cvt+0xa6>

0800ec98 <__exponent>:
 800ec98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2900      	cmp	r1, #0
 800ec9e:	bfb8      	it	lt
 800eca0:	4249      	neglt	r1, r1
 800eca2:	f803 2b02 	strb.w	r2, [r3], #2
 800eca6:	bfb4      	ite	lt
 800eca8:	222d      	movlt	r2, #45	; 0x2d
 800ecaa:	222b      	movge	r2, #43	; 0x2b
 800ecac:	2909      	cmp	r1, #9
 800ecae:	7042      	strb	r2, [r0, #1]
 800ecb0:	dd2a      	ble.n	800ed08 <__exponent+0x70>
 800ecb2:	f10d 0207 	add.w	r2, sp, #7
 800ecb6:	4617      	mov	r7, r2
 800ecb8:	260a      	movs	r6, #10
 800ecba:	4694      	mov	ip, r2
 800ecbc:	fb91 f5f6 	sdiv	r5, r1, r6
 800ecc0:	fb06 1415 	mls	r4, r6, r5, r1
 800ecc4:	3430      	adds	r4, #48	; 0x30
 800ecc6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ecca:	460c      	mov	r4, r1
 800eccc:	2c63      	cmp	r4, #99	; 0x63
 800ecce:	f102 32ff 	add.w	r2, r2, #4294967295
 800ecd2:	4629      	mov	r1, r5
 800ecd4:	dcf1      	bgt.n	800ecba <__exponent+0x22>
 800ecd6:	3130      	adds	r1, #48	; 0x30
 800ecd8:	f1ac 0402 	sub.w	r4, ip, #2
 800ecdc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ece0:	1c41      	adds	r1, r0, #1
 800ece2:	4622      	mov	r2, r4
 800ece4:	42ba      	cmp	r2, r7
 800ece6:	d30a      	bcc.n	800ecfe <__exponent+0x66>
 800ece8:	f10d 0209 	add.w	r2, sp, #9
 800ecec:	eba2 020c 	sub.w	r2, r2, ip
 800ecf0:	42bc      	cmp	r4, r7
 800ecf2:	bf88      	it	hi
 800ecf4:	2200      	movhi	r2, #0
 800ecf6:	4413      	add	r3, r2
 800ecf8:	1a18      	subs	r0, r3, r0
 800ecfa:	b003      	add	sp, #12
 800ecfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecfe:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ed02:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ed06:	e7ed      	b.n	800ece4 <__exponent+0x4c>
 800ed08:	2330      	movs	r3, #48	; 0x30
 800ed0a:	3130      	adds	r1, #48	; 0x30
 800ed0c:	7083      	strb	r3, [r0, #2]
 800ed0e:	70c1      	strb	r1, [r0, #3]
 800ed10:	1d03      	adds	r3, r0, #4
 800ed12:	e7f1      	b.n	800ecf8 <__exponent+0x60>

0800ed14 <_printf_float>:
 800ed14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed18:	ed2d 8b02 	vpush	{d8}
 800ed1c:	b08d      	sub	sp, #52	; 0x34
 800ed1e:	460c      	mov	r4, r1
 800ed20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ed24:	4616      	mov	r6, r2
 800ed26:	461f      	mov	r7, r3
 800ed28:	4605      	mov	r5, r0
 800ed2a:	f000 fcd5 	bl	800f6d8 <_localeconv_r>
 800ed2e:	f8d0 a000 	ldr.w	sl, [r0]
 800ed32:	4650      	mov	r0, sl
 800ed34:	f7f1 faac 	bl	8000290 <strlen>
 800ed38:	2300      	movs	r3, #0
 800ed3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ed3c:	6823      	ldr	r3, [r4, #0]
 800ed3e:	9305      	str	r3, [sp, #20]
 800ed40:	f8d8 3000 	ldr.w	r3, [r8]
 800ed44:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ed48:	3307      	adds	r3, #7
 800ed4a:	f023 0307 	bic.w	r3, r3, #7
 800ed4e:	f103 0208 	add.w	r2, r3, #8
 800ed52:	f8c8 2000 	str.w	r2, [r8]
 800ed56:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ed5e:	9307      	str	r3, [sp, #28]
 800ed60:	f8cd 8018 	str.w	r8, [sp, #24]
 800ed64:	ee08 0a10 	vmov	s16, r0
 800ed68:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ed6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed70:	4b9e      	ldr	r3, [pc, #632]	; (800efec <_printf_float+0x2d8>)
 800ed72:	f04f 32ff 	mov.w	r2, #4294967295
 800ed76:	f7f1 fee9 	bl	8000b4c <__aeabi_dcmpun>
 800ed7a:	bb88      	cbnz	r0, 800ede0 <_printf_float+0xcc>
 800ed7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed80:	4b9a      	ldr	r3, [pc, #616]	; (800efec <_printf_float+0x2d8>)
 800ed82:	f04f 32ff 	mov.w	r2, #4294967295
 800ed86:	f7f1 fec3 	bl	8000b10 <__aeabi_dcmple>
 800ed8a:	bb48      	cbnz	r0, 800ede0 <_printf_float+0xcc>
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	2300      	movs	r3, #0
 800ed90:	4640      	mov	r0, r8
 800ed92:	4649      	mov	r1, r9
 800ed94:	f7f1 feb2 	bl	8000afc <__aeabi_dcmplt>
 800ed98:	b110      	cbz	r0, 800eda0 <_printf_float+0x8c>
 800ed9a:	232d      	movs	r3, #45	; 0x2d
 800ed9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eda0:	4a93      	ldr	r2, [pc, #588]	; (800eff0 <_printf_float+0x2dc>)
 800eda2:	4b94      	ldr	r3, [pc, #592]	; (800eff4 <_printf_float+0x2e0>)
 800eda4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eda8:	bf94      	ite	ls
 800edaa:	4690      	movls	r8, r2
 800edac:	4698      	movhi	r8, r3
 800edae:	2303      	movs	r3, #3
 800edb0:	6123      	str	r3, [r4, #16]
 800edb2:	9b05      	ldr	r3, [sp, #20]
 800edb4:	f023 0304 	bic.w	r3, r3, #4
 800edb8:	6023      	str	r3, [r4, #0]
 800edba:	f04f 0900 	mov.w	r9, #0
 800edbe:	9700      	str	r7, [sp, #0]
 800edc0:	4633      	mov	r3, r6
 800edc2:	aa0b      	add	r2, sp, #44	; 0x2c
 800edc4:	4621      	mov	r1, r4
 800edc6:	4628      	mov	r0, r5
 800edc8:	f000 f9da 	bl	800f180 <_printf_common>
 800edcc:	3001      	adds	r0, #1
 800edce:	f040 8090 	bne.w	800eef2 <_printf_float+0x1de>
 800edd2:	f04f 30ff 	mov.w	r0, #4294967295
 800edd6:	b00d      	add	sp, #52	; 0x34
 800edd8:	ecbd 8b02 	vpop	{d8}
 800eddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ede0:	4642      	mov	r2, r8
 800ede2:	464b      	mov	r3, r9
 800ede4:	4640      	mov	r0, r8
 800ede6:	4649      	mov	r1, r9
 800ede8:	f7f1 feb0 	bl	8000b4c <__aeabi_dcmpun>
 800edec:	b140      	cbz	r0, 800ee00 <_printf_float+0xec>
 800edee:	464b      	mov	r3, r9
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	bfbc      	itt	lt
 800edf4:	232d      	movlt	r3, #45	; 0x2d
 800edf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800edfa:	4a7f      	ldr	r2, [pc, #508]	; (800eff8 <_printf_float+0x2e4>)
 800edfc:	4b7f      	ldr	r3, [pc, #508]	; (800effc <_printf_float+0x2e8>)
 800edfe:	e7d1      	b.n	800eda4 <_printf_float+0x90>
 800ee00:	6863      	ldr	r3, [r4, #4]
 800ee02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ee06:	9206      	str	r2, [sp, #24]
 800ee08:	1c5a      	adds	r2, r3, #1
 800ee0a:	d13f      	bne.n	800ee8c <_printf_float+0x178>
 800ee0c:	2306      	movs	r3, #6
 800ee0e:	6063      	str	r3, [r4, #4]
 800ee10:	9b05      	ldr	r3, [sp, #20]
 800ee12:	6861      	ldr	r1, [r4, #4]
 800ee14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ee18:	2300      	movs	r3, #0
 800ee1a:	9303      	str	r3, [sp, #12]
 800ee1c:	ab0a      	add	r3, sp, #40	; 0x28
 800ee1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ee22:	ab09      	add	r3, sp, #36	; 0x24
 800ee24:	ec49 8b10 	vmov	d0, r8, r9
 800ee28:	9300      	str	r3, [sp, #0]
 800ee2a:	6022      	str	r2, [r4, #0]
 800ee2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ee30:	4628      	mov	r0, r5
 800ee32:	f7ff fecf 	bl	800ebd4 <__cvt>
 800ee36:	9b06      	ldr	r3, [sp, #24]
 800ee38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee3a:	2b47      	cmp	r3, #71	; 0x47
 800ee3c:	4680      	mov	r8, r0
 800ee3e:	d108      	bne.n	800ee52 <_printf_float+0x13e>
 800ee40:	1cc8      	adds	r0, r1, #3
 800ee42:	db02      	blt.n	800ee4a <_printf_float+0x136>
 800ee44:	6863      	ldr	r3, [r4, #4]
 800ee46:	4299      	cmp	r1, r3
 800ee48:	dd41      	ble.n	800eece <_printf_float+0x1ba>
 800ee4a:	f1ab 0302 	sub.w	r3, fp, #2
 800ee4e:	fa5f fb83 	uxtb.w	fp, r3
 800ee52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ee56:	d820      	bhi.n	800ee9a <_printf_float+0x186>
 800ee58:	3901      	subs	r1, #1
 800ee5a:	465a      	mov	r2, fp
 800ee5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ee60:	9109      	str	r1, [sp, #36]	; 0x24
 800ee62:	f7ff ff19 	bl	800ec98 <__exponent>
 800ee66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee68:	1813      	adds	r3, r2, r0
 800ee6a:	2a01      	cmp	r2, #1
 800ee6c:	4681      	mov	r9, r0
 800ee6e:	6123      	str	r3, [r4, #16]
 800ee70:	dc02      	bgt.n	800ee78 <_printf_float+0x164>
 800ee72:	6822      	ldr	r2, [r4, #0]
 800ee74:	07d2      	lsls	r2, r2, #31
 800ee76:	d501      	bpl.n	800ee7c <_printf_float+0x168>
 800ee78:	3301      	adds	r3, #1
 800ee7a:	6123      	str	r3, [r4, #16]
 800ee7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d09c      	beq.n	800edbe <_printf_float+0xaa>
 800ee84:	232d      	movs	r3, #45	; 0x2d
 800ee86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee8a:	e798      	b.n	800edbe <_printf_float+0xaa>
 800ee8c:	9a06      	ldr	r2, [sp, #24]
 800ee8e:	2a47      	cmp	r2, #71	; 0x47
 800ee90:	d1be      	bne.n	800ee10 <_printf_float+0xfc>
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d1bc      	bne.n	800ee10 <_printf_float+0xfc>
 800ee96:	2301      	movs	r3, #1
 800ee98:	e7b9      	b.n	800ee0e <_printf_float+0xfa>
 800ee9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ee9e:	d118      	bne.n	800eed2 <_printf_float+0x1be>
 800eea0:	2900      	cmp	r1, #0
 800eea2:	6863      	ldr	r3, [r4, #4]
 800eea4:	dd0b      	ble.n	800eebe <_printf_float+0x1aa>
 800eea6:	6121      	str	r1, [r4, #16]
 800eea8:	b913      	cbnz	r3, 800eeb0 <_printf_float+0x19c>
 800eeaa:	6822      	ldr	r2, [r4, #0]
 800eeac:	07d0      	lsls	r0, r2, #31
 800eeae:	d502      	bpl.n	800eeb6 <_printf_float+0x1a2>
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	440b      	add	r3, r1
 800eeb4:	6123      	str	r3, [r4, #16]
 800eeb6:	65a1      	str	r1, [r4, #88]	; 0x58
 800eeb8:	f04f 0900 	mov.w	r9, #0
 800eebc:	e7de      	b.n	800ee7c <_printf_float+0x168>
 800eebe:	b913      	cbnz	r3, 800eec6 <_printf_float+0x1b2>
 800eec0:	6822      	ldr	r2, [r4, #0]
 800eec2:	07d2      	lsls	r2, r2, #31
 800eec4:	d501      	bpl.n	800eeca <_printf_float+0x1b6>
 800eec6:	3302      	adds	r3, #2
 800eec8:	e7f4      	b.n	800eeb4 <_printf_float+0x1a0>
 800eeca:	2301      	movs	r3, #1
 800eecc:	e7f2      	b.n	800eeb4 <_printf_float+0x1a0>
 800eece:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800eed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eed4:	4299      	cmp	r1, r3
 800eed6:	db05      	blt.n	800eee4 <_printf_float+0x1d0>
 800eed8:	6823      	ldr	r3, [r4, #0]
 800eeda:	6121      	str	r1, [r4, #16]
 800eedc:	07d8      	lsls	r0, r3, #31
 800eede:	d5ea      	bpl.n	800eeb6 <_printf_float+0x1a2>
 800eee0:	1c4b      	adds	r3, r1, #1
 800eee2:	e7e7      	b.n	800eeb4 <_printf_float+0x1a0>
 800eee4:	2900      	cmp	r1, #0
 800eee6:	bfd4      	ite	le
 800eee8:	f1c1 0202 	rsble	r2, r1, #2
 800eeec:	2201      	movgt	r2, #1
 800eeee:	4413      	add	r3, r2
 800eef0:	e7e0      	b.n	800eeb4 <_printf_float+0x1a0>
 800eef2:	6823      	ldr	r3, [r4, #0]
 800eef4:	055a      	lsls	r2, r3, #21
 800eef6:	d407      	bmi.n	800ef08 <_printf_float+0x1f4>
 800eef8:	6923      	ldr	r3, [r4, #16]
 800eefa:	4642      	mov	r2, r8
 800eefc:	4631      	mov	r1, r6
 800eefe:	4628      	mov	r0, r5
 800ef00:	47b8      	blx	r7
 800ef02:	3001      	adds	r0, #1
 800ef04:	d12c      	bne.n	800ef60 <_printf_float+0x24c>
 800ef06:	e764      	b.n	800edd2 <_printf_float+0xbe>
 800ef08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ef0c:	f240 80e0 	bls.w	800f0d0 <_printf_float+0x3bc>
 800ef10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ef14:	2200      	movs	r2, #0
 800ef16:	2300      	movs	r3, #0
 800ef18:	f7f1 fde6 	bl	8000ae8 <__aeabi_dcmpeq>
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d034      	beq.n	800ef8a <_printf_float+0x276>
 800ef20:	4a37      	ldr	r2, [pc, #220]	; (800f000 <_printf_float+0x2ec>)
 800ef22:	2301      	movs	r3, #1
 800ef24:	4631      	mov	r1, r6
 800ef26:	4628      	mov	r0, r5
 800ef28:	47b8      	blx	r7
 800ef2a:	3001      	adds	r0, #1
 800ef2c:	f43f af51 	beq.w	800edd2 <_printf_float+0xbe>
 800ef30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ef34:	429a      	cmp	r2, r3
 800ef36:	db02      	blt.n	800ef3e <_printf_float+0x22a>
 800ef38:	6823      	ldr	r3, [r4, #0]
 800ef3a:	07d8      	lsls	r0, r3, #31
 800ef3c:	d510      	bpl.n	800ef60 <_printf_float+0x24c>
 800ef3e:	ee18 3a10 	vmov	r3, s16
 800ef42:	4652      	mov	r2, sl
 800ef44:	4631      	mov	r1, r6
 800ef46:	4628      	mov	r0, r5
 800ef48:	47b8      	blx	r7
 800ef4a:	3001      	adds	r0, #1
 800ef4c:	f43f af41 	beq.w	800edd2 <_printf_float+0xbe>
 800ef50:	f04f 0800 	mov.w	r8, #0
 800ef54:	f104 091a 	add.w	r9, r4, #26
 800ef58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef5a:	3b01      	subs	r3, #1
 800ef5c:	4543      	cmp	r3, r8
 800ef5e:	dc09      	bgt.n	800ef74 <_printf_float+0x260>
 800ef60:	6823      	ldr	r3, [r4, #0]
 800ef62:	079b      	lsls	r3, r3, #30
 800ef64:	f100 8107 	bmi.w	800f176 <_printf_float+0x462>
 800ef68:	68e0      	ldr	r0, [r4, #12]
 800ef6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef6c:	4298      	cmp	r0, r3
 800ef6e:	bfb8      	it	lt
 800ef70:	4618      	movlt	r0, r3
 800ef72:	e730      	b.n	800edd6 <_printf_float+0xc2>
 800ef74:	2301      	movs	r3, #1
 800ef76:	464a      	mov	r2, r9
 800ef78:	4631      	mov	r1, r6
 800ef7a:	4628      	mov	r0, r5
 800ef7c:	47b8      	blx	r7
 800ef7e:	3001      	adds	r0, #1
 800ef80:	f43f af27 	beq.w	800edd2 <_printf_float+0xbe>
 800ef84:	f108 0801 	add.w	r8, r8, #1
 800ef88:	e7e6      	b.n	800ef58 <_printf_float+0x244>
 800ef8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	dc39      	bgt.n	800f004 <_printf_float+0x2f0>
 800ef90:	4a1b      	ldr	r2, [pc, #108]	; (800f000 <_printf_float+0x2ec>)
 800ef92:	2301      	movs	r3, #1
 800ef94:	4631      	mov	r1, r6
 800ef96:	4628      	mov	r0, r5
 800ef98:	47b8      	blx	r7
 800ef9a:	3001      	adds	r0, #1
 800ef9c:	f43f af19 	beq.w	800edd2 <_printf_float+0xbe>
 800efa0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800efa4:	4313      	orrs	r3, r2
 800efa6:	d102      	bne.n	800efae <_printf_float+0x29a>
 800efa8:	6823      	ldr	r3, [r4, #0]
 800efaa:	07d9      	lsls	r1, r3, #31
 800efac:	d5d8      	bpl.n	800ef60 <_printf_float+0x24c>
 800efae:	ee18 3a10 	vmov	r3, s16
 800efb2:	4652      	mov	r2, sl
 800efb4:	4631      	mov	r1, r6
 800efb6:	4628      	mov	r0, r5
 800efb8:	47b8      	blx	r7
 800efba:	3001      	adds	r0, #1
 800efbc:	f43f af09 	beq.w	800edd2 <_printf_float+0xbe>
 800efc0:	f04f 0900 	mov.w	r9, #0
 800efc4:	f104 0a1a 	add.w	sl, r4, #26
 800efc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efca:	425b      	negs	r3, r3
 800efcc:	454b      	cmp	r3, r9
 800efce:	dc01      	bgt.n	800efd4 <_printf_float+0x2c0>
 800efd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efd2:	e792      	b.n	800eefa <_printf_float+0x1e6>
 800efd4:	2301      	movs	r3, #1
 800efd6:	4652      	mov	r2, sl
 800efd8:	4631      	mov	r1, r6
 800efda:	4628      	mov	r0, r5
 800efdc:	47b8      	blx	r7
 800efde:	3001      	adds	r0, #1
 800efe0:	f43f aef7 	beq.w	800edd2 <_printf_float+0xbe>
 800efe4:	f109 0901 	add.w	r9, r9, #1
 800efe8:	e7ee      	b.n	800efc8 <_printf_float+0x2b4>
 800efea:	bf00      	nop
 800efec:	7fefffff 	.word	0x7fefffff
 800eff0:	08013314 	.word	0x08013314
 800eff4:	08013318 	.word	0x08013318
 800eff8:	0801331c 	.word	0x0801331c
 800effc:	08013320 	.word	0x08013320
 800f000:	08013324 	.word	0x08013324
 800f004:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f006:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f008:	429a      	cmp	r2, r3
 800f00a:	bfa8      	it	ge
 800f00c:	461a      	movge	r2, r3
 800f00e:	2a00      	cmp	r2, #0
 800f010:	4691      	mov	r9, r2
 800f012:	dc37      	bgt.n	800f084 <_printf_float+0x370>
 800f014:	f04f 0b00 	mov.w	fp, #0
 800f018:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f01c:	f104 021a 	add.w	r2, r4, #26
 800f020:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f022:	9305      	str	r3, [sp, #20]
 800f024:	eba3 0309 	sub.w	r3, r3, r9
 800f028:	455b      	cmp	r3, fp
 800f02a:	dc33      	bgt.n	800f094 <_printf_float+0x380>
 800f02c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f030:	429a      	cmp	r2, r3
 800f032:	db3b      	blt.n	800f0ac <_printf_float+0x398>
 800f034:	6823      	ldr	r3, [r4, #0]
 800f036:	07da      	lsls	r2, r3, #31
 800f038:	d438      	bmi.n	800f0ac <_printf_float+0x398>
 800f03a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f03e:	eba2 0903 	sub.w	r9, r2, r3
 800f042:	9b05      	ldr	r3, [sp, #20]
 800f044:	1ad2      	subs	r2, r2, r3
 800f046:	4591      	cmp	r9, r2
 800f048:	bfa8      	it	ge
 800f04a:	4691      	movge	r9, r2
 800f04c:	f1b9 0f00 	cmp.w	r9, #0
 800f050:	dc35      	bgt.n	800f0be <_printf_float+0x3aa>
 800f052:	f04f 0800 	mov.w	r8, #0
 800f056:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f05a:	f104 0a1a 	add.w	sl, r4, #26
 800f05e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f062:	1a9b      	subs	r3, r3, r2
 800f064:	eba3 0309 	sub.w	r3, r3, r9
 800f068:	4543      	cmp	r3, r8
 800f06a:	f77f af79 	ble.w	800ef60 <_printf_float+0x24c>
 800f06e:	2301      	movs	r3, #1
 800f070:	4652      	mov	r2, sl
 800f072:	4631      	mov	r1, r6
 800f074:	4628      	mov	r0, r5
 800f076:	47b8      	blx	r7
 800f078:	3001      	adds	r0, #1
 800f07a:	f43f aeaa 	beq.w	800edd2 <_printf_float+0xbe>
 800f07e:	f108 0801 	add.w	r8, r8, #1
 800f082:	e7ec      	b.n	800f05e <_printf_float+0x34a>
 800f084:	4613      	mov	r3, r2
 800f086:	4631      	mov	r1, r6
 800f088:	4642      	mov	r2, r8
 800f08a:	4628      	mov	r0, r5
 800f08c:	47b8      	blx	r7
 800f08e:	3001      	adds	r0, #1
 800f090:	d1c0      	bne.n	800f014 <_printf_float+0x300>
 800f092:	e69e      	b.n	800edd2 <_printf_float+0xbe>
 800f094:	2301      	movs	r3, #1
 800f096:	4631      	mov	r1, r6
 800f098:	4628      	mov	r0, r5
 800f09a:	9205      	str	r2, [sp, #20]
 800f09c:	47b8      	blx	r7
 800f09e:	3001      	adds	r0, #1
 800f0a0:	f43f ae97 	beq.w	800edd2 <_printf_float+0xbe>
 800f0a4:	9a05      	ldr	r2, [sp, #20]
 800f0a6:	f10b 0b01 	add.w	fp, fp, #1
 800f0aa:	e7b9      	b.n	800f020 <_printf_float+0x30c>
 800f0ac:	ee18 3a10 	vmov	r3, s16
 800f0b0:	4652      	mov	r2, sl
 800f0b2:	4631      	mov	r1, r6
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	47b8      	blx	r7
 800f0b8:	3001      	adds	r0, #1
 800f0ba:	d1be      	bne.n	800f03a <_printf_float+0x326>
 800f0bc:	e689      	b.n	800edd2 <_printf_float+0xbe>
 800f0be:	9a05      	ldr	r2, [sp, #20]
 800f0c0:	464b      	mov	r3, r9
 800f0c2:	4442      	add	r2, r8
 800f0c4:	4631      	mov	r1, r6
 800f0c6:	4628      	mov	r0, r5
 800f0c8:	47b8      	blx	r7
 800f0ca:	3001      	adds	r0, #1
 800f0cc:	d1c1      	bne.n	800f052 <_printf_float+0x33e>
 800f0ce:	e680      	b.n	800edd2 <_printf_float+0xbe>
 800f0d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f0d2:	2a01      	cmp	r2, #1
 800f0d4:	dc01      	bgt.n	800f0da <_printf_float+0x3c6>
 800f0d6:	07db      	lsls	r3, r3, #31
 800f0d8:	d53a      	bpl.n	800f150 <_printf_float+0x43c>
 800f0da:	2301      	movs	r3, #1
 800f0dc:	4642      	mov	r2, r8
 800f0de:	4631      	mov	r1, r6
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	47b8      	blx	r7
 800f0e4:	3001      	adds	r0, #1
 800f0e6:	f43f ae74 	beq.w	800edd2 <_printf_float+0xbe>
 800f0ea:	ee18 3a10 	vmov	r3, s16
 800f0ee:	4652      	mov	r2, sl
 800f0f0:	4631      	mov	r1, r6
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	47b8      	blx	r7
 800f0f6:	3001      	adds	r0, #1
 800f0f8:	f43f ae6b 	beq.w	800edd2 <_printf_float+0xbe>
 800f0fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f100:	2200      	movs	r2, #0
 800f102:	2300      	movs	r3, #0
 800f104:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f108:	f7f1 fcee 	bl	8000ae8 <__aeabi_dcmpeq>
 800f10c:	b9d8      	cbnz	r0, 800f146 <_printf_float+0x432>
 800f10e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f112:	f108 0201 	add.w	r2, r8, #1
 800f116:	4631      	mov	r1, r6
 800f118:	4628      	mov	r0, r5
 800f11a:	47b8      	blx	r7
 800f11c:	3001      	adds	r0, #1
 800f11e:	d10e      	bne.n	800f13e <_printf_float+0x42a>
 800f120:	e657      	b.n	800edd2 <_printf_float+0xbe>
 800f122:	2301      	movs	r3, #1
 800f124:	4652      	mov	r2, sl
 800f126:	4631      	mov	r1, r6
 800f128:	4628      	mov	r0, r5
 800f12a:	47b8      	blx	r7
 800f12c:	3001      	adds	r0, #1
 800f12e:	f43f ae50 	beq.w	800edd2 <_printf_float+0xbe>
 800f132:	f108 0801 	add.w	r8, r8, #1
 800f136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f138:	3b01      	subs	r3, #1
 800f13a:	4543      	cmp	r3, r8
 800f13c:	dcf1      	bgt.n	800f122 <_printf_float+0x40e>
 800f13e:	464b      	mov	r3, r9
 800f140:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f144:	e6da      	b.n	800eefc <_printf_float+0x1e8>
 800f146:	f04f 0800 	mov.w	r8, #0
 800f14a:	f104 0a1a 	add.w	sl, r4, #26
 800f14e:	e7f2      	b.n	800f136 <_printf_float+0x422>
 800f150:	2301      	movs	r3, #1
 800f152:	4642      	mov	r2, r8
 800f154:	e7df      	b.n	800f116 <_printf_float+0x402>
 800f156:	2301      	movs	r3, #1
 800f158:	464a      	mov	r2, r9
 800f15a:	4631      	mov	r1, r6
 800f15c:	4628      	mov	r0, r5
 800f15e:	47b8      	blx	r7
 800f160:	3001      	adds	r0, #1
 800f162:	f43f ae36 	beq.w	800edd2 <_printf_float+0xbe>
 800f166:	f108 0801 	add.w	r8, r8, #1
 800f16a:	68e3      	ldr	r3, [r4, #12]
 800f16c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f16e:	1a5b      	subs	r3, r3, r1
 800f170:	4543      	cmp	r3, r8
 800f172:	dcf0      	bgt.n	800f156 <_printf_float+0x442>
 800f174:	e6f8      	b.n	800ef68 <_printf_float+0x254>
 800f176:	f04f 0800 	mov.w	r8, #0
 800f17a:	f104 0919 	add.w	r9, r4, #25
 800f17e:	e7f4      	b.n	800f16a <_printf_float+0x456>

0800f180 <_printf_common>:
 800f180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f184:	4616      	mov	r6, r2
 800f186:	4699      	mov	r9, r3
 800f188:	688a      	ldr	r2, [r1, #8]
 800f18a:	690b      	ldr	r3, [r1, #16]
 800f18c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f190:	4293      	cmp	r3, r2
 800f192:	bfb8      	it	lt
 800f194:	4613      	movlt	r3, r2
 800f196:	6033      	str	r3, [r6, #0]
 800f198:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f19c:	4607      	mov	r7, r0
 800f19e:	460c      	mov	r4, r1
 800f1a0:	b10a      	cbz	r2, 800f1a6 <_printf_common+0x26>
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	6033      	str	r3, [r6, #0]
 800f1a6:	6823      	ldr	r3, [r4, #0]
 800f1a8:	0699      	lsls	r1, r3, #26
 800f1aa:	bf42      	ittt	mi
 800f1ac:	6833      	ldrmi	r3, [r6, #0]
 800f1ae:	3302      	addmi	r3, #2
 800f1b0:	6033      	strmi	r3, [r6, #0]
 800f1b2:	6825      	ldr	r5, [r4, #0]
 800f1b4:	f015 0506 	ands.w	r5, r5, #6
 800f1b8:	d106      	bne.n	800f1c8 <_printf_common+0x48>
 800f1ba:	f104 0a19 	add.w	sl, r4, #25
 800f1be:	68e3      	ldr	r3, [r4, #12]
 800f1c0:	6832      	ldr	r2, [r6, #0]
 800f1c2:	1a9b      	subs	r3, r3, r2
 800f1c4:	42ab      	cmp	r3, r5
 800f1c6:	dc26      	bgt.n	800f216 <_printf_common+0x96>
 800f1c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f1cc:	1e13      	subs	r3, r2, #0
 800f1ce:	6822      	ldr	r2, [r4, #0]
 800f1d0:	bf18      	it	ne
 800f1d2:	2301      	movne	r3, #1
 800f1d4:	0692      	lsls	r2, r2, #26
 800f1d6:	d42b      	bmi.n	800f230 <_printf_common+0xb0>
 800f1d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f1dc:	4649      	mov	r1, r9
 800f1de:	4638      	mov	r0, r7
 800f1e0:	47c0      	blx	r8
 800f1e2:	3001      	adds	r0, #1
 800f1e4:	d01e      	beq.n	800f224 <_printf_common+0xa4>
 800f1e6:	6823      	ldr	r3, [r4, #0]
 800f1e8:	6922      	ldr	r2, [r4, #16]
 800f1ea:	f003 0306 	and.w	r3, r3, #6
 800f1ee:	2b04      	cmp	r3, #4
 800f1f0:	bf02      	ittt	eq
 800f1f2:	68e5      	ldreq	r5, [r4, #12]
 800f1f4:	6833      	ldreq	r3, [r6, #0]
 800f1f6:	1aed      	subeq	r5, r5, r3
 800f1f8:	68a3      	ldr	r3, [r4, #8]
 800f1fa:	bf0c      	ite	eq
 800f1fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f200:	2500      	movne	r5, #0
 800f202:	4293      	cmp	r3, r2
 800f204:	bfc4      	itt	gt
 800f206:	1a9b      	subgt	r3, r3, r2
 800f208:	18ed      	addgt	r5, r5, r3
 800f20a:	2600      	movs	r6, #0
 800f20c:	341a      	adds	r4, #26
 800f20e:	42b5      	cmp	r5, r6
 800f210:	d11a      	bne.n	800f248 <_printf_common+0xc8>
 800f212:	2000      	movs	r0, #0
 800f214:	e008      	b.n	800f228 <_printf_common+0xa8>
 800f216:	2301      	movs	r3, #1
 800f218:	4652      	mov	r2, sl
 800f21a:	4649      	mov	r1, r9
 800f21c:	4638      	mov	r0, r7
 800f21e:	47c0      	blx	r8
 800f220:	3001      	adds	r0, #1
 800f222:	d103      	bne.n	800f22c <_printf_common+0xac>
 800f224:	f04f 30ff 	mov.w	r0, #4294967295
 800f228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f22c:	3501      	adds	r5, #1
 800f22e:	e7c6      	b.n	800f1be <_printf_common+0x3e>
 800f230:	18e1      	adds	r1, r4, r3
 800f232:	1c5a      	adds	r2, r3, #1
 800f234:	2030      	movs	r0, #48	; 0x30
 800f236:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f23a:	4422      	add	r2, r4
 800f23c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f240:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f244:	3302      	adds	r3, #2
 800f246:	e7c7      	b.n	800f1d8 <_printf_common+0x58>
 800f248:	2301      	movs	r3, #1
 800f24a:	4622      	mov	r2, r4
 800f24c:	4649      	mov	r1, r9
 800f24e:	4638      	mov	r0, r7
 800f250:	47c0      	blx	r8
 800f252:	3001      	adds	r0, #1
 800f254:	d0e6      	beq.n	800f224 <_printf_common+0xa4>
 800f256:	3601      	adds	r6, #1
 800f258:	e7d9      	b.n	800f20e <_printf_common+0x8e>
	...

0800f25c <_printf_i>:
 800f25c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f260:	7e0f      	ldrb	r7, [r1, #24]
 800f262:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f264:	2f78      	cmp	r7, #120	; 0x78
 800f266:	4691      	mov	r9, r2
 800f268:	4680      	mov	r8, r0
 800f26a:	460c      	mov	r4, r1
 800f26c:	469a      	mov	sl, r3
 800f26e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f272:	d807      	bhi.n	800f284 <_printf_i+0x28>
 800f274:	2f62      	cmp	r7, #98	; 0x62
 800f276:	d80a      	bhi.n	800f28e <_printf_i+0x32>
 800f278:	2f00      	cmp	r7, #0
 800f27a:	f000 80d4 	beq.w	800f426 <_printf_i+0x1ca>
 800f27e:	2f58      	cmp	r7, #88	; 0x58
 800f280:	f000 80c0 	beq.w	800f404 <_printf_i+0x1a8>
 800f284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f288:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f28c:	e03a      	b.n	800f304 <_printf_i+0xa8>
 800f28e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f292:	2b15      	cmp	r3, #21
 800f294:	d8f6      	bhi.n	800f284 <_printf_i+0x28>
 800f296:	a101      	add	r1, pc, #4	; (adr r1, 800f29c <_printf_i+0x40>)
 800f298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f29c:	0800f2f5 	.word	0x0800f2f5
 800f2a0:	0800f309 	.word	0x0800f309
 800f2a4:	0800f285 	.word	0x0800f285
 800f2a8:	0800f285 	.word	0x0800f285
 800f2ac:	0800f285 	.word	0x0800f285
 800f2b0:	0800f285 	.word	0x0800f285
 800f2b4:	0800f309 	.word	0x0800f309
 800f2b8:	0800f285 	.word	0x0800f285
 800f2bc:	0800f285 	.word	0x0800f285
 800f2c0:	0800f285 	.word	0x0800f285
 800f2c4:	0800f285 	.word	0x0800f285
 800f2c8:	0800f40d 	.word	0x0800f40d
 800f2cc:	0800f335 	.word	0x0800f335
 800f2d0:	0800f3c7 	.word	0x0800f3c7
 800f2d4:	0800f285 	.word	0x0800f285
 800f2d8:	0800f285 	.word	0x0800f285
 800f2dc:	0800f42f 	.word	0x0800f42f
 800f2e0:	0800f285 	.word	0x0800f285
 800f2e4:	0800f335 	.word	0x0800f335
 800f2e8:	0800f285 	.word	0x0800f285
 800f2ec:	0800f285 	.word	0x0800f285
 800f2f0:	0800f3cf 	.word	0x0800f3cf
 800f2f4:	682b      	ldr	r3, [r5, #0]
 800f2f6:	1d1a      	adds	r2, r3, #4
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	602a      	str	r2, [r5, #0]
 800f2fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f300:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f304:	2301      	movs	r3, #1
 800f306:	e09f      	b.n	800f448 <_printf_i+0x1ec>
 800f308:	6820      	ldr	r0, [r4, #0]
 800f30a:	682b      	ldr	r3, [r5, #0]
 800f30c:	0607      	lsls	r7, r0, #24
 800f30e:	f103 0104 	add.w	r1, r3, #4
 800f312:	6029      	str	r1, [r5, #0]
 800f314:	d501      	bpl.n	800f31a <_printf_i+0xbe>
 800f316:	681e      	ldr	r6, [r3, #0]
 800f318:	e003      	b.n	800f322 <_printf_i+0xc6>
 800f31a:	0646      	lsls	r6, r0, #25
 800f31c:	d5fb      	bpl.n	800f316 <_printf_i+0xba>
 800f31e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f322:	2e00      	cmp	r6, #0
 800f324:	da03      	bge.n	800f32e <_printf_i+0xd2>
 800f326:	232d      	movs	r3, #45	; 0x2d
 800f328:	4276      	negs	r6, r6
 800f32a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f32e:	485a      	ldr	r0, [pc, #360]	; (800f498 <_printf_i+0x23c>)
 800f330:	230a      	movs	r3, #10
 800f332:	e012      	b.n	800f35a <_printf_i+0xfe>
 800f334:	682b      	ldr	r3, [r5, #0]
 800f336:	6820      	ldr	r0, [r4, #0]
 800f338:	1d19      	adds	r1, r3, #4
 800f33a:	6029      	str	r1, [r5, #0]
 800f33c:	0605      	lsls	r5, r0, #24
 800f33e:	d501      	bpl.n	800f344 <_printf_i+0xe8>
 800f340:	681e      	ldr	r6, [r3, #0]
 800f342:	e002      	b.n	800f34a <_printf_i+0xee>
 800f344:	0641      	lsls	r1, r0, #25
 800f346:	d5fb      	bpl.n	800f340 <_printf_i+0xe4>
 800f348:	881e      	ldrh	r6, [r3, #0]
 800f34a:	4853      	ldr	r0, [pc, #332]	; (800f498 <_printf_i+0x23c>)
 800f34c:	2f6f      	cmp	r7, #111	; 0x6f
 800f34e:	bf0c      	ite	eq
 800f350:	2308      	moveq	r3, #8
 800f352:	230a      	movne	r3, #10
 800f354:	2100      	movs	r1, #0
 800f356:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f35a:	6865      	ldr	r5, [r4, #4]
 800f35c:	60a5      	str	r5, [r4, #8]
 800f35e:	2d00      	cmp	r5, #0
 800f360:	bfa2      	ittt	ge
 800f362:	6821      	ldrge	r1, [r4, #0]
 800f364:	f021 0104 	bicge.w	r1, r1, #4
 800f368:	6021      	strge	r1, [r4, #0]
 800f36a:	b90e      	cbnz	r6, 800f370 <_printf_i+0x114>
 800f36c:	2d00      	cmp	r5, #0
 800f36e:	d04b      	beq.n	800f408 <_printf_i+0x1ac>
 800f370:	4615      	mov	r5, r2
 800f372:	fbb6 f1f3 	udiv	r1, r6, r3
 800f376:	fb03 6711 	mls	r7, r3, r1, r6
 800f37a:	5dc7      	ldrb	r7, [r0, r7]
 800f37c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f380:	4637      	mov	r7, r6
 800f382:	42bb      	cmp	r3, r7
 800f384:	460e      	mov	r6, r1
 800f386:	d9f4      	bls.n	800f372 <_printf_i+0x116>
 800f388:	2b08      	cmp	r3, #8
 800f38a:	d10b      	bne.n	800f3a4 <_printf_i+0x148>
 800f38c:	6823      	ldr	r3, [r4, #0]
 800f38e:	07de      	lsls	r6, r3, #31
 800f390:	d508      	bpl.n	800f3a4 <_printf_i+0x148>
 800f392:	6923      	ldr	r3, [r4, #16]
 800f394:	6861      	ldr	r1, [r4, #4]
 800f396:	4299      	cmp	r1, r3
 800f398:	bfde      	ittt	le
 800f39a:	2330      	movle	r3, #48	; 0x30
 800f39c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f3a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f3a4:	1b52      	subs	r2, r2, r5
 800f3a6:	6122      	str	r2, [r4, #16]
 800f3a8:	f8cd a000 	str.w	sl, [sp]
 800f3ac:	464b      	mov	r3, r9
 800f3ae:	aa03      	add	r2, sp, #12
 800f3b0:	4621      	mov	r1, r4
 800f3b2:	4640      	mov	r0, r8
 800f3b4:	f7ff fee4 	bl	800f180 <_printf_common>
 800f3b8:	3001      	adds	r0, #1
 800f3ba:	d14a      	bne.n	800f452 <_printf_i+0x1f6>
 800f3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c0:	b004      	add	sp, #16
 800f3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3c6:	6823      	ldr	r3, [r4, #0]
 800f3c8:	f043 0320 	orr.w	r3, r3, #32
 800f3cc:	6023      	str	r3, [r4, #0]
 800f3ce:	4833      	ldr	r0, [pc, #204]	; (800f49c <_printf_i+0x240>)
 800f3d0:	2778      	movs	r7, #120	; 0x78
 800f3d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f3d6:	6823      	ldr	r3, [r4, #0]
 800f3d8:	6829      	ldr	r1, [r5, #0]
 800f3da:	061f      	lsls	r7, r3, #24
 800f3dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f3e0:	d402      	bmi.n	800f3e8 <_printf_i+0x18c>
 800f3e2:	065f      	lsls	r7, r3, #25
 800f3e4:	bf48      	it	mi
 800f3e6:	b2b6      	uxthmi	r6, r6
 800f3e8:	07df      	lsls	r7, r3, #31
 800f3ea:	bf48      	it	mi
 800f3ec:	f043 0320 	orrmi.w	r3, r3, #32
 800f3f0:	6029      	str	r1, [r5, #0]
 800f3f2:	bf48      	it	mi
 800f3f4:	6023      	strmi	r3, [r4, #0]
 800f3f6:	b91e      	cbnz	r6, 800f400 <_printf_i+0x1a4>
 800f3f8:	6823      	ldr	r3, [r4, #0]
 800f3fa:	f023 0320 	bic.w	r3, r3, #32
 800f3fe:	6023      	str	r3, [r4, #0]
 800f400:	2310      	movs	r3, #16
 800f402:	e7a7      	b.n	800f354 <_printf_i+0xf8>
 800f404:	4824      	ldr	r0, [pc, #144]	; (800f498 <_printf_i+0x23c>)
 800f406:	e7e4      	b.n	800f3d2 <_printf_i+0x176>
 800f408:	4615      	mov	r5, r2
 800f40a:	e7bd      	b.n	800f388 <_printf_i+0x12c>
 800f40c:	682b      	ldr	r3, [r5, #0]
 800f40e:	6826      	ldr	r6, [r4, #0]
 800f410:	6961      	ldr	r1, [r4, #20]
 800f412:	1d18      	adds	r0, r3, #4
 800f414:	6028      	str	r0, [r5, #0]
 800f416:	0635      	lsls	r5, r6, #24
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	d501      	bpl.n	800f420 <_printf_i+0x1c4>
 800f41c:	6019      	str	r1, [r3, #0]
 800f41e:	e002      	b.n	800f426 <_printf_i+0x1ca>
 800f420:	0670      	lsls	r0, r6, #25
 800f422:	d5fb      	bpl.n	800f41c <_printf_i+0x1c0>
 800f424:	8019      	strh	r1, [r3, #0]
 800f426:	2300      	movs	r3, #0
 800f428:	6123      	str	r3, [r4, #16]
 800f42a:	4615      	mov	r5, r2
 800f42c:	e7bc      	b.n	800f3a8 <_printf_i+0x14c>
 800f42e:	682b      	ldr	r3, [r5, #0]
 800f430:	1d1a      	adds	r2, r3, #4
 800f432:	602a      	str	r2, [r5, #0]
 800f434:	681d      	ldr	r5, [r3, #0]
 800f436:	6862      	ldr	r2, [r4, #4]
 800f438:	2100      	movs	r1, #0
 800f43a:	4628      	mov	r0, r5
 800f43c:	f7f0 fed8 	bl	80001f0 <memchr>
 800f440:	b108      	cbz	r0, 800f446 <_printf_i+0x1ea>
 800f442:	1b40      	subs	r0, r0, r5
 800f444:	6060      	str	r0, [r4, #4]
 800f446:	6863      	ldr	r3, [r4, #4]
 800f448:	6123      	str	r3, [r4, #16]
 800f44a:	2300      	movs	r3, #0
 800f44c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f450:	e7aa      	b.n	800f3a8 <_printf_i+0x14c>
 800f452:	6923      	ldr	r3, [r4, #16]
 800f454:	462a      	mov	r2, r5
 800f456:	4649      	mov	r1, r9
 800f458:	4640      	mov	r0, r8
 800f45a:	47d0      	blx	sl
 800f45c:	3001      	adds	r0, #1
 800f45e:	d0ad      	beq.n	800f3bc <_printf_i+0x160>
 800f460:	6823      	ldr	r3, [r4, #0]
 800f462:	079b      	lsls	r3, r3, #30
 800f464:	d413      	bmi.n	800f48e <_printf_i+0x232>
 800f466:	68e0      	ldr	r0, [r4, #12]
 800f468:	9b03      	ldr	r3, [sp, #12]
 800f46a:	4298      	cmp	r0, r3
 800f46c:	bfb8      	it	lt
 800f46e:	4618      	movlt	r0, r3
 800f470:	e7a6      	b.n	800f3c0 <_printf_i+0x164>
 800f472:	2301      	movs	r3, #1
 800f474:	4632      	mov	r2, r6
 800f476:	4649      	mov	r1, r9
 800f478:	4640      	mov	r0, r8
 800f47a:	47d0      	blx	sl
 800f47c:	3001      	adds	r0, #1
 800f47e:	d09d      	beq.n	800f3bc <_printf_i+0x160>
 800f480:	3501      	adds	r5, #1
 800f482:	68e3      	ldr	r3, [r4, #12]
 800f484:	9903      	ldr	r1, [sp, #12]
 800f486:	1a5b      	subs	r3, r3, r1
 800f488:	42ab      	cmp	r3, r5
 800f48a:	dcf2      	bgt.n	800f472 <_printf_i+0x216>
 800f48c:	e7eb      	b.n	800f466 <_printf_i+0x20a>
 800f48e:	2500      	movs	r5, #0
 800f490:	f104 0619 	add.w	r6, r4, #25
 800f494:	e7f5      	b.n	800f482 <_printf_i+0x226>
 800f496:	bf00      	nop
 800f498:	08013326 	.word	0x08013326
 800f49c:	08013337 	.word	0x08013337

0800f4a0 <std>:
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	b510      	push	{r4, lr}
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	e9c0 3300 	strd	r3, r3, [r0]
 800f4aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f4ae:	6083      	str	r3, [r0, #8]
 800f4b0:	8181      	strh	r1, [r0, #12]
 800f4b2:	6643      	str	r3, [r0, #100]	; 0x64
 800f4b4:	81c2      	strh	r2, [r0, #14]
 800f4b6:	6183      	str	r3, [r0, #24]
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	2208      	movs	r2, #8
 800f4bc:	305c      	adds	r0, #92	; 0x5c
 800f4be:	f000 f902 	bl	800f6c6 <memset>
 800f4c2:	4b05      	ldr	r3, [pc, #20]	; (800f4d8 <std+0x38>)
 800f4c4:	6263      	str	r3, [r4, #36]	; 0x24
 800f4c6:	4b05      	ldr	r3, [pc, #20]	; (800f4dc <std+0x3c>)
 800f4c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f4ca:	4b05      	ldr	r3, [pc, #20]	; (800f4e0 <std+0x40>)
 800f4cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f4ce:	4b05      	ldr	r3, [pc, #20]	; (800f4e4 <std+0x44>)
 800f4d0:	6224      	str	r4, [r4, #32]
 800f4d2:	6323      	str	r3, [r4, #48]	; 0x30
 800f4d4:	bd10      	pop	{r4, pc}
 800f4d6:	bf00      	nop
 800f4d8:	0800f641 	.word	0x0800f641
 800f4dc:	0800f663 	.word	0x0800f663
 800f4e0:	0800f69b 	.word	0x0800f69b
 800f4e4:	0800f6bf 	.word	0x0800f6bf

0800f4e8 <stdio_exit_handler>:
 800f4e8:	4a02      	ldr	r2, [pc, #8]	; (800f4f4 <stdio_exit_handler+0xc>)
 800f4ea:	4903      	ldr	r1, [pc, #12]	; (800f4f8 <stdio_exit_handler+0x10>)
 800f4ec:	4803      	ldr	r0, [pc, #12]	; (800f4fc <stdio_exit_handler+0x14>)
 800f4ee:	f000 b869 	b.w	800f5c4 <_fwalk_sglue>
 800f4f2:	bf00      	nop
 800f4f4:	2000017c 	.word	0x2000017c
 800f4f8:	08011041 	.word	0x08011041
 800f4fc:	20000188 	.word	0x20000188

0800f500 <cleanup_stdio>:
 800f500:	6841      	ldr	r1, [r0, #4]
 800f502:	4b0c      	ldr	r3, [pc, #48]	; (800f534 <cleanup_stdio+0x34>)
 800f504:	4299      	cmp	r1, r3
 800f506:	b510      	push	{r4, lr}
 800f508:	4604      	mov	r4, r0
 800f50a:	d001      	beq.n	800f510 <cleanup_stdio+0x10>
 800f50c:	f001 fd98 	bl	8011040 <_fflush_r>
 800f510:	68a1      	ldr	r1, [r4, #8]
 800f512:	4b09      	ldr	r3, [pc, #36]	; (800f538 <cleanup_stdio+0x38>)
 800f514:	4299      	cmp	r1, r3
 800f516:	d002      	beq.n	800f51e <cleanup_stdio+0x1e>
 800f518:	4620      	mov	r0, r4
 800f51a:	f001 fd91 	bl	8011040 <_fflush_r>
 800f51e:	68e1      	ldr	r1, [r4, #12]
 800f520:	4b06      	ldr	r3, [pc, #24]	; (800f53c <cleanup_stdio+0x3c>)
 800f522:	4299      	cmp	r1, r3
 800f524:	d004      	beq.n	800f530 <cleanup_stdio+0x30>
 800f526:	4620      	mov	r0, r4
 800f528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f52c:	f001 bd88 	b.w	8011040 <_fflush_r>
 800f530:	bd10      	pop	{r4, pc}
 800f532:	bf00      	nop
 800f534:	200061dc 	.word	0x200061dc
 800f538:	20006244 	.word	0x20006244
 800f53c:	200062ac 	.word	0x200062ac

0800f540 <global_stdio_init.part.0>:
 800f540:	b510      	push	{r4, lr}
 800f542:	4b0b      	ldr	r3, [pc, #44]	; (800f570 <global_stdio_init.part.0+0x30>)
 800f544:	4c0b      	ldr	r4, [pc, #44]	; (800f574 <global_stdio_init.part.0+0x34>)
 800f546:	4a0c      	ldr	r2, [pc, #48]	; (800f578 <global_stdio_init.part.0+0x38>)
 800f548:	601a      	str	r2, [r3, #0]
 800f54a:	4620      	mov	r0, r4
 800f54c:	2200      	movs	r2, #0
 800f54e:	2104      	movs	r1, #4
 800f550:	f7ff ffa6 	bl	800f4a0 <std>
 800f554:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f558:	2201      	movs	r2, #1
 800f55a:	2109      	movs	r1, #9
 800f55c:	f7ff ffa0 	bl	800f4a0 <std>
 800f560:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f564:	2202      	movs	r2, #2
 800f566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f56a:	2112      	movs	r1, #18
 800f56c:	f7ff bf98 	b.w	800f4a0 <std>
 800f570:	20006314 	.word	0x20006314
 800f574:	200061dc 	.word	0x200061dc
 800f578:	0800f4e9 	.word	0x0800f4e9

0800f57c <__sfp_lock_acquire>:
 800f57c:	4801      	ldr	r0, [pc, #4]	; (800f584 <__sfp_lock_acquire+0x8>)
 800f57e:	f000 b92f 	b.w	800f7e0 <__retarget_lock_acquire_recursive>
 800f582:	bf00      	nop
 800f584:	2000631d 	.word	0x2000631d

0800f588 <__sfp_lock_release>:
 800f588:	4801      	ldr	r0, [pc, #4]	; (800f590 <__sfp_lock_release+0x8>)
 800f58a:	f000 b92a 	b.w	800f7e2 <__retarget_lock_release_recursive>
 800f58e:	bf00      	nop
 800f590:	2000631d 	.word	0x2000631d

0800f594 <__sinit>:
 800f594:	b510      	push	{r4, lr}
 800f596:	4604      	mov	r4, r0
 800f598:	f7ff fff0 	bl	800f57c <__sfp_lock_acquire>
 800f59c:	6a23      	ldr	r3, [r4, #32]
 800f59e:	b11b      	cbz	r3, 800f5a8 <__sinit+0x14>
 800f5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5a4:	f7ff bff0 	b.w	800f588 <__sfp_lock_release>
 800f5a8:	4b04      	ldr	r3, [pc, #16]	; (800f5bc <__sinit+0x28>)
 800f5aa:	6223      	str	r3, [r4, #32]
 800f5ac:	4b04      	ldr	r3, [pc, #16]	; (800f5c0 <__sinit+0x2c>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d1f5      	bne.n	800f5a0 <__sinit+0xc>
 800f5b4:	f7ff ffc4 	bl	800f540 <global_stdio_init.part.0>
 800f5b8:	e7f2      	b.n	800f5a0 <__sinit+0xc>
 800f5ba:	bf00      	nop
 800f5bc:	0800f501 	.word	0x0800f501
 800f5c0:	20006314 	.word	0x20006314

0800f5c4 <_fwalk_sglue>:
 800f5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5c8:	4607      	mov	r7, r0
 800f5ca:	4688      	mov	r8, r1
 800f5cc:	4614      	mov	r4, r2
 800f5ce:	2600      	movs	r6, #0
 800f5d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5d4:	f1b9 0901 	subs.w	r9, r9, #1
 800f5d8:	d505      	bpl.n	800f5e6 <_fwalk_sglue+0x22>
 800f5da:	6824      	ldr	r4, [r4, #0]
 800f5dc:	2c00      	cmp	r4, #0
 800f5de:	d1f7      	bne.n	800f5d0 <_fwalk_sglue+0xc>
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5e6:	89ab      	ldrh	r3, [r5, #12]
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d907      	bls.n	800f5fc <_fwalk_sglue+0x38>
 800f5ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	d003      	beq.n	800f5fc <_fwalk_sglue+0x38>
 800f5f4:	4629      	mov	r1, r5
 800f5f6:	4638      	mov	r0, r7
 800f5f8:	47c0      	blx	r8
 800f5fa:	4306      	orrs	r6, r0
 800f5fc:	3568      	adds	r5, #104	; 0x68
 800f5fe:	e7e9      	b.n	800f5d4 <_fwalk_sglue+0x10>

0800f600 <siprintf>:
 800f600:	b40e      	push	{r1, r2, r3}
 800f602:	b500      	push	{lr}
 800f604:	b09c      	sub	sp, #112	; 0x70
 800f606:	ab1d      	add	r3, sp, #116	; 0x74
 800f608:	9002      	str	r0, [sp, #8]
 800f60a:	9006      	str	r0, [sp, #24]
 800f60c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f610:	4809      	ldr	r0, [pc, #36]	; (800f638 <siprintf+0x38>)
 800f612:	9107      	str	r1, [sp, #28]
 800f614:	9104      	str	r1, [sp, #16]
 800f616:	4909      	ldr	r1, [pc, #36]	; (800f63c <siprintf+0x3c>)
 800f618:	f853 2b04 	ldr.w	r2, [r3], #4
 800f61c:	9105      	str	r1, [sp, #20]
 800f61e:	6800      	ldr	r0, [r0, #0]
 800f620:	9301      	str	r3, [sp, #4]
 800f622:	a902      	add	r1, sp, #8
 800f624:	f001 fb88 	bl	8010d38 <_svfiprintf_r>
 800f628:	9b02      	ldr	r3, [sp, #8]
 800f62a:	2200      	movs	r2, #0
 800f62c:	701a      	strb	r2, [r3, #0]
 800f62e:	b01c      	add	sp, #112	; 0x70
 800f630:	f85d eb04 	ldr.w	lr, [sp], #4
 800f634:	b003      	add	sp, #12
 800f636:	4770      	bx	lr
 800f638:	200001d4 	.word	0x200001d4
 800f63c:	ffff0208 	.word	0xffff0208

0800f640 <__sread>:
 800f640:	b510      	push	{r4, lr}
 800f642:	460c      	mov	r4, r1
 800f644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f648:	f000 f86c 	bl	800f724 <_read_r>
 800f64c:	2800      	cmp	r0, #0
 800f64e:	bfab      	itete	ge
 800f650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f652:	89a3      	ldrhlt	r3, [r4, #12]
 800f654:	181b      	addge	r3, r3, r0
 800f656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f65a:	bfac      	ite	ge
 800f65c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f65e:	81a3      	strhlt	r3, [r4, #12]
 800f660:	bd10      	pop	{r4, pc}

0800f662 <__swrite>:
 800f662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f666:	461f      	mov	r7, r3
 800f668:	898b      	ldrh	r3, [r1, #12]
 800f66a:	05db      	lsls	r3, r3, #23
 800f66c:	4605      	mov	r5, r0
 800f66e:	460c      	mov	r4, r1
 800f670:	4616      	mov	r6, r2
 800f672:	d505      	bpl.n	800f680 <__swrite+0x1e>
 800f674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f678:	2302      	movs	r3, #2
 800f67a:	2200      	movs	r2, #0
 800f67c:	f000 f840 	bl	800f700 <_lseek_r>
 800f680:	89a3      	ldrh	r3, [r4, #12]
 800f682:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f68a:	81a3      	strh	r3, [r4, #12]
 800f68c:	4632      	mov	r2, r6
 800f68e:	463b      	mov	r3, r7
 800f690:	4628      	mov	r0, r5
 800f692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f696:	f000 b867 	b.w	800f768 <_write_r>

0800f69a <__sseek>:
 800f69a:	b510      	push	{r4, lr}
 800f69c:	460c      	mov	r4, r1
 800f69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6a2:	f000 f82d 	bl	800f700 <_lseek_r>
 800f6a6:	1c43      	adds	r3, r0, #1
 800f6a8:	89a3      	ldrh	r3, [r4, #12]
 800f6aa:	bf15      	itete	ne
 800f6ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f6b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f6b6:	81a3      	strheq	r3, [r4, #12]
 800f6b8:	bf18      	it	ne
 800f6ba:	81a3      	strhne	r3, [r4, #12]
 800f6bc:	bd10      	pop	{r4, pc}

0800f6be <__sclose>:
 800f6be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c2:	f000 b80d 	b.w	800f6e0 <_close_r>

0800f6c6 <memset>:
 800f6c6:	4402      	add	r2, r0
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d100      	bne.n	800f6d0 <memset+0xa>
 800f6ce:	4770      	bx	lr
 800f6d0:	f803 1b01 	strb.w	r1, [r3], #1
 800f6d4:	e7f9      	b.n	800f6ca <memset+0x4>
	...

0800f6d8 <_localeconv_r>:
 800f6d8:	4800      	ldr	r0, [pc, #0]	; (800f6dc <_localeconv_r+0x4>)
 800f6da:	4770      	bx	lr
 800f6dc:	200002c8 	.word	0x200002c8

0800f6e0 <_close_r>:
 800f6e0:	b538      	push	{r3, r4, r5, lr}
 800f6e2:	4d06      	ldr	r5, [pc, #24]	; (800f6fc <_close_r+0x1c>)
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	4604      	mov	r4, r0
 800f6e8:	4608      	mov	r0, r1
 800f6ea:	602b      	str	r3, [r5, #0]
 800f6ec:	f7f1 ff85 	bl	80015fa <_close>
 800f6f0:	1c43      	adds	r3, r0, #1
 800f6f2:	d102      	bne.n	800f6fa <_close_r+0x1a>
 800f6f4:	682b      	ldr	r3, [r5, #0]
 800f6f6:	b103      	cbz	r3, 800f6fa <_close_r+0x1a>
 800f6f8:	6023      	str	r3, [r4, #0]
 800f6fa:	bd38      	pop	{r3, r4, r5, pc}
 800f6fc:	20006318 	.word	0x20006318

0800f700 <_lseek_r>:
 800f700:	b538      	push	{r3, r4, r5, lr}
 800f702:	4d07      	ldr	r5, [pc, #28]	; (800f720 <_lseek_r+0x20>)
 800f704:	4604      	mov	r4, r0
 800f706:	4608      	mov	r0, r1
 800f708:	4611      	mov	r1, r2
 800f70a:	2200      	movs	r2, #0
 800f70c:	602a      	str	r2, [r5, #0]
 800f70e:	461a      	mov	r2, r3
 800f710:	f7f1 ff9a 	bl	8001648 <_lseek>
 800f714:	1c43      	adds	r3, r0, #1
 800f716:	d102      	bne.n	800f71e <_lseek_r+0x1e>
 800f718:	682b      	ldr	r3, [r5, #0]
 800f71a:	b103      	cbz	r3, 800f71e <_lseek_r+0x1e>
 800f71c:	6023      	str	r3, [r4, #0]
 800f71e:	bd38      	pop	{r3, r4, r5, pc}
 800f720:	20006318 	.word	0x20006318

0800f724 <_read_r>:
 800f724:	b538      	push	{r3, r4, r5, lr}
 800f726:	4d07      	ldr	r5, [pc, #28]	; (800f744 <_read_r+0x20>)
 800f728:	4604      	mov	r4, r0
 800f72a:	4608      	mov	r0, r1
 800f72c:	4611      	mov	r1, r2
 800f72e:	2200      	movs	r2, #0
 800f730:	602a      	str	r2, [r5, #0]
 800f732:	461a      	mov	r2, r3
 800f734:	f7f1 ff28 	bl	8001588 <_read>
 800f738:	1c43      	adds	r3, r0, #1
 800f73a:	d102      	bne.n	800f742 <_read_r+0x1e>
 800f73c:	682b      	ldr	r3, [r5, #0]
 800f73e:	b103      	cbz	r3, 800f742 <_read_r+0x1e>
 800f740:	6023      	str	r3, [r4, #0]
 800f742:	bd38      	pop	{r3, r4, r5, pc}
 800f744:	20006318 	.word	0x20006318

0800f748 <_sbrk_r>:
 800f748:	b538      	push	{r3, r4, r5, lr}
 800f74a:	4d06      	ldr	r5, [pc, #24]	; (800f764 <_sbrk_r+0x1c>)
 800f74c:	2300      	movs	r3, #0
 800f74e:	4604      	mov	r4, r0
 800f750:	4608      	mov	r0, r1
 800f752:	602b      	str	r3, [r5, #0]
 800f754:	f7f1 ff86 	bl	8001664 <_sbrk>
 800f758:	1c43      	adds	r3, r0, #1
 800f75a:	d102      	bne.n	800f762 <_sbrk_r+0x1a>
 800f75c:	682b      	ldr	r3, [r5, #0]
 800f75e:	b103      	cbz	r3, 800f762 <_sbrk_r+0x1a>
 800f760:	6023      	str	r3, [r4, #0]
 800f762:	bd38      	pop	{r3, r4, r5, pc}
 800f764:	20006318 	.word	0x20006318

0800f768 <_write_r>:
 800f768:	b538      	push	{r3, r4, r5, lr}
 800f76a:	4d07      	ldr	r5, [pc, #28]	; (800f788 <_write_r+0x20>)
 800f76c:	4604      	mov	r4, r0
 800f76e:	4608      	mov	r0, r1
 800f770:	4611      	mov	r1, r2
 800f772:	2200      	movs	r2, #0
 800f774:	602a      	str	r2, [r5, #0]
 800f776:	461a      	mov	r2, r3
 800f778:	f7f1 ff23 	bl	80015c2 <_write>
 800f77c:	1c43      	adds	r3, r0, #1
 800f77e:	d102      	bne.n	800f786 <_write_r+0x1e>
 800f780:	682b      	ldr	r3, [r5, #0]
 800f782:	b103      	cbz	r3, 800f786 <_write_r+0x1e>
 800f784:	6023      	str	r3, [r4, #0]
 800f786:	bd38      	pop	{r3, r4, r5, pc}
 800f788:	20006318 	.word	0x20006318

0800f78c <__errno>:
 800f78c:	4b01      	ldr	r3, [pc, #4]	; (800f794 <__errno+0x8>)
 800f78e:	6818      	ldr	r0, [r3, #0]
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop
 800f794:	200001d4 	.word	0x200001d4

0800f798 <__libc_init_array>:
 800f798:	b570      	push	{r4, r5, r6, lr}
 800f79a:	4d0d      	ldr	r5, [pc, #52]	; (800f7d0 <__libc_init_array+0x38>)
 800f79c:	4c0d      	ldr	r4, [pc, #52]	; (800f7d4 <__libc_init_array+0x3c>)
 800f79e:	1b64      	subs	r4, r4, r5
 800f7a0:	10a4      	asrs	r4, r4, #2
 800f7a2:	2600      	movs	r6, #0
 800f7a4:	42a6      	cmp	r6, r4
 800f7a6:	d109      	bne.n	800f7bc <__libc_init_array+0x24>
 800f7a8:	4d0b      	ldr	r5, [pc, #44]	; (800f7d8 <__libc_init_array+0x40>)
 800f7aa:	4c0c      	ldr	r4, [pc, #48]	; (800f7dc <__libc_init_array+0x44>)
 800f7ac:	f001 ffce 	bl	801174c <_init>
 800f7b0:	1b64      	subs	r4, r4, r5
 800f7b2:	10a4      	asrs	r4, r4, #2
 800f7b4:	2600      	movs	r6, #0
 800f7b6:	42a6      	cmp	r6, r4
 800f7b8:	d105      	bne.n	800f7c6 <__libc_init_array+0x2e>
 800f7ba:	bd70      	pop	{r4, r5, r6, pc}
 800f7bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7c0:	4798      	blx	r3
 800f7c2:	3601      	adds	r6, #1
 800f7c4:	e7ee      	b.n	800f7a4 <__libc_init_array+0xc>
 800f7c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7ca:	4798      	blx	r3
 800f7cc:	3601      	adds	r6, #1
 800f7ce:	e7f2      	b.n	800f7b6 <__libc_init_array+0x1e>
 800f7d0:	0801368c 	.word	0x0801368c
 800f7d4:	0801368c 	.word	0x0801368c
 800f7d8:	0801368c 	.word	0x0801368c
 800f7dc:	08013690 	.word	0x08013690

0800f7e0 <__retarget_lock_acquire_recursive>:
 800f7e0:	4770      	bx	lr

0800f7e2 <__retarget_lock_release_recursive>:
 800f7e2:	4770      	bx	lr

0800f7e4 <memcpy>:
 800f7e4:	440a      	add	r2, r1
 800f7e6:	4291      	cmp	r1, r2
 800f7e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f7ec:	d100      	bne.n	800f7f0 <memcpy+0xc>
 800f7ee:	4770      	bx	lr
 800f7f0:	b510      	push	{r4, lr}
 800f7f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f7f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f7fa:	4291      	cmp	r1, r2
 800f7fc:	d1f9      	bne.n	800f7f2 <memcpy+0xe>
 800f7fe:	bd10      	pop	{r4, pc}

0800f800 <quorem>:
 800f800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f804:	6903      	ldr	r3, [r0, #16]
 800f806:	690c      	ldr	r4, [r1, #16]
 800f808:	42a3      	cmp	r3, r4
 800f80a:	4607      	mov	r7, r0
 800f80c:	db7e      	blt.n	800f90c <quorem+0x10c>
 800f80e:	3c01      	subs	r4, #1
 800f810:	f101 0814 	add.w	r8, r1, #20
 800f814:	f100 0514 	add.w	r5, r0, #20
 800f818:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f81c:	9301      	str	r3, [sp, #4]
 800f81e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f822:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f826:	3301      	adds	r3, #1
 800f828:	429a      	cmp	r2, r3
 800f82a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f82e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f832:	fbb2 f6f3 	udiv	r6, r2, r3
 800f836:	d331      	bcc.n	800f89c <quorem+0x9c>
 800f838:	f04f 0e00 	mov.w	lr, #0
 800f83c:	4640      	mov	r0, r8
 800f83e:	46ac      	mov	ip, r5
 800f840:	46f2      	mov	sl, lr
 800f842:	f850 2b04 	ldr.w	r2, [r0], #4
 800f846:	b293      	uxth	r3, r2
 800f848:	fb06 e303 	mla	r3, r6, r3, lr
 800f84c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f850:	0c1a      	lsrs	r2, r3, #16
 800f852:	b29b      	uxth	r3, r3
 800f854:	ebaa 0303 	sub.w	r3, sl, r3
 800f858:	f8dc a000 	ldr.w	sl, [ip]
 800f85c:	fa13 f38a 	uxtah	r3, r3, sl
 800f860:	fb06 220e 	mla	r2, r6, lr, r2
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	9b00      	ldr	r3, [sp, #0]
 800f868:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f86c:	b292      	uxth	r2, r2
 800f86e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f872:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f876:	f8bd 3000 	ldrh.w	r3, [sp]
 800f87a:	4581      	cmp	r9, r0
 800f87c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f880:	f84c 3b04 	str.w	r3, [ip], #4
 800f884:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f888:	d2db      	bcs.n	800f842 <quorem+0x42>
 800f88a:	f855 300b 	ldr.w	r3, [r5, fp]
 800f88e:	b92b      	cbnz	r3, 800f89c <quorem+0x9c>
 800f890:	9b01      	ldr	r3, [sp, #4]
 800f892:	3b04      	subs	r3, #4
 800f894:	429d      	cmp	r5, r3
 800f896:	461a      	mov	r2, r3
 800f898:	d32c      	bcc.n	800f8f4 <quorem+0xf4>
 800f89a:	613c      	str	r4, [r7, #16]
 800f89c:	4638      	mov	r0, r7
 800f89e:	f001 f8f1 	bl	8010a84 <__mcmp>
 800f8a2:	2800      	cmp	r0, #0
 800f8a4:	db22      	blt.n	800f8ec <quorem+0xec>
 800f8a6:	3601      	adds	r6, #1
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800f8b0:	f8d1 c000 	ldr.w	ip, [r1]
 800f8b4:	b293      	uxth	r3, r2
 800f8b6:	1ac3      	subs	r3, r0, r3
 800f8b8:	0c12      	lsrs	r2, r2, #16
 800f8ba:	fa13 f38c 	uxtah	r3, r3, ip
 800f8be:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f8c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f8c6:	b29b      	uxth	r3, r3
 800f8c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f8cc:	45c1      	cmp	r9, r8
 800f8ce:	f841 3b04 	str.w	r3, [r1], #4
 800f8d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f8d6:	d2e9      	bcs.n	800f8ac <quorem+0xac>
 800f8d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8e0:	b922      	cbnz	r2, 800f8ec <quorem+0xec>
 800f8e2:	3b04      	subs	r3, #4
 800f8e4:	429d      	cmp	r5, r3
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	d30a      	bcc.n	800f900 <quorem+0x100>
 800f8ea:	613c      	str	r4, [r7, #16]
 800f8ec:	4630      	mov	r0, r6
 800f8ee:	b003      	add	sp, #12
 800f8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8f4:	6812      	ldr	r2, [r2, #0]
 800f8f6:	3b04      	subs	r3, #4
 800f8f8:	2a00      	cmp	r2, #0
 800f8fa:	d1ce      	bne.n	800f89a <quorem+0x9a>
 800f8fc:	3c01      	subs	r4, #1
 800f8fe:	e7c9      	b.n	800f894 <quorem+0x94>
 800f900:	6812      	ldr	r2, [r2, #0]
 800f902:	3b04      	subs	r3, #4
 800f904:	2a00      	cmp	r2, #0
 800f906:	d1f0      	bne.n	800f8ea <quorem+0xea>
 800f908:	3c01      	subs	r4, #1
 800f90a:	e7eb      	b.n	800f8e4 <quorem+0xe4>
 800f90c:	2000      	movs	r0, #0
 800f90e:	e7ee      	b.n	800f8ee <quorem+0xee>

0800f910 <_dtoa_r>:
 800f910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f914:	ed2d 8b04 	vpush	{d8-d9}
 800f918:	69c5      	ldr	r5, [r0, #28]
 800f91a:	b093      	sub	sp, #76	; 0x4c
 800f91c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f920:	ec57 6b10 	vmov	r6, r7, d0
 800f924:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f928:	9107      	str	r1, [sp, #28]
 800f92a:	4604      	mov	r4, r0
 800f92c:	920a      	str	r2, [sp, #40]	; 0x28
 800f92e:	930d      	str	r3, [sp, #52]	; 0x34
 800f930:	b975      	cbnz	r5, 800f950 <_dtoa_r+0x40>
 800f932:	2010      	movs	r0, #16
 800f934:	f7ff f892 	bl	800ea5c <malloc>
 800f938:	4602      	mov	r2, r0
 800f93a:	61e0      	str	r0, [r4, #28]
 800f93c:	b920      	cbnz	r0, 800f948 <_dtoa_r+0x38>
 800f93e:	4bae      	ldr	r3, [pc, #696]	; (800fbf8 <_dtoa_r+0x2e8>)
 800f940:	21ef      	movs	r1, #239	; 0xef
 800f942:	48ae      	ldr	r0, [pc, #696]	; (800fbfc <_dtoa_r+0x2ec>)
 800f944:	f001 fbbe 	bl	80110c4 <__assert_func>
 800f948:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f94c:	6005      	str	r5, [r0, #0]
 800f94e:	60c5      	str	r5, [r0, #12]
 800f950:	69e3      	ldr	r3, [r4, #28]
 800f952:	6819      	ldr	r1, [r3, #0]
 800f954:	b151      	cbz	r1, 800f96c <_dtoa_r+0x5c>
 800f956:	685a      	ldr	r2, [r3, #4]
 800f958:	604a      	str	r2, [r1, #4]
 800f95a:	2301      	movs	r3, #1
 800f95c:	4093      	lsls	r3, r2
 800f95e:	608b      	str	r3, [r1, #8]
 800f960:	4620      	mov	r0, r4
 800f962:	f000 fe53 	bl	801060c <_Bfree>
 800f966:	69e3      	ldr	r3, [r4, #28]
 800f968:	2200      	movs	r2, #0
 800f96a:	601a      	str	r2, [r3, #0]
 800f96c:	1e3b      	subs	r3, r7, #0
 800f96e:	bfbb      	ittet	lt
 800f970:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f974:	9303      	strlt	r3, [sp, #12]
 800f976:	2300      	movge	r3, #0
 800f978:	2201      	movlt	r2, #1
 800f97a:	bfac      	ite	ge
 800f97c:	f8c8 3000 	strge.w	r3, [r8]
 800f980:	f8c8 2000 	strlt.w	r2, [r8]
 800f984:	4b9e      	ldr	r3, [pc, #632]	; (800fc00 <_dtoa_r+0x2f0>)
 800f986:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f98a:	ea33 0308 	bics.w	r3, r3, r8
 800f98e:	d11b      	bne.n	800f9c8 <_dtoa_r+0xb8>
 800f990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f992:	f242 730f 	movw	r3, #9999	; 0x270f
 800f996:	6013      	str	r3, [r2, #0]
 800f998:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f99c:	4333      	orrs	r3, r6
 800f99e:	f000 8593 	beq.w	80104c8 <_dtoa_r+0xbb8>
 800f9a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f9a4:	b963      	cbnz	r3, 800f9c0 <_dtoa_r+0xb0>
 800f9a6:	4b97      	ldr	r3, [pc, #604]	; (800fc04 <_dtoa_r+0x2f4>)
 800f9a8:	e027      	b.n	800f9fa <_dtoa_r+0xea>
 800f9aa:	4b97      	ldr	r3, [pc, #604]	; (800fc08 <_dtoa_r+0x2f8>)
 800f9ac:	9300      	str	r3, [sp, #0]
 800f9ae:	3308      	adds	r3, #8
 800f9b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f9b2:	6013      	str	r3, [r2, #0]
 800f9b4:	9800      	ldr	r0, [sp, #0]
 800f9b6:	b013      	add	sp, #76	; 0x4c
 800f9b8:	ecbd 8b04 	vpop	{d8-d9}
 800f9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9c0:	4b90      	ldr	r3, [pc, #576]	; (800fc04 <_dtoa_r+0x2f4>)
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	3303      	adds	r3, #3
 800f9c6:	e7f3      	b.n	800f9b0 <_dtoa_r+0xa0>
 800f9c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	ec51 0b17 	vmov	r0, r1, d7
 800f9d2:	eeb0 8a47 	vmov.f32	s16, s14
 800f9d6:	eef0 8a67 	vmov.f32	s17, s15
 800f9da:	2300      	movs	r3, #0
 800f9dc:	f7f1 f884 	bl	8000ae8 <__aeabi_dcmpeq>
 800f9e0:	4681      	mov	r9, r0
 800f9e2:	b160      	cbz	r0, 800f9fe <_dtoa_r+0xee>
 800f9e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	6013      	str	r3, [r2, #0]
 800f9ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	f000 8568 	beq.w	80104c2 <_dtoa_r+0xbb2>
 800f9f2:	4b86      	ldr	r3, [pc, #536]	; (800fc0c <_dtoa_r+0x2fc>)
 800f9f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f9f6:	6013      	str	r3, [r2, #0]
 800f9f8:	3b01      	subs	r3, #1
 800f9fa:	9300      	str	r3, [sp, #0]
 800f9fc:	e7da      	b.n	800f9b4 <_dtoa_r+0xa4>
 800f9fe:	aa10      	add	r2, sp, #64	; 0x40
 800fa00:	a911      	add	r1, sp, #68	; 0x44
 800fa02:	4620      	mov	r0, r4
 800fa04:	eeb0 0a48 	vmov.f32	s0, s16
 800fa08:	eef0 0a68 	vmov.f32	s1, s17
 800fa0c:	f001 f8e0 	bl	8010bd0 <__d2b>
 800fa10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fa14:	4682      	mov	sl, r0
 800fa16:	2d00      	cmp	r5, #0
 800fa18:	d07f      	beq.n	800fb1a <_dtoa_r+0x20a>
 800fa1a:	ee18 3a90 	vmov	r3, s17
 800fa1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fa26:	ec51 0b18 	vmov	r0, r1, d8
 800fa2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fa2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fa32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fa36:	4619      	mov	r1, r3
 800fa38:	2200      	movs	r2, #0
 800fa3a:	4b75      	ldr	r3, [pc, #468]	; (800fc10 <_dtoa_r+0x300>)
 800fa3c:	f7f0 fc34 	bl	80002a8 <__aeabi_dsub>
 800fa40:	a367      	add	r3, pc, #412	; (adr r3, 800fbe0 <_dtoa_r+0x2d0>)
 800fa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa46:	f7f0 fde7 	bl	8000618 <__aeabi_dmul>
 800fa4a:	a367      	add	r3, pc, #412	; (adr r3, 800fbe8 <_dtoa_r+0x2d8>)
 800fa4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa50:	f7f0 fc2c 	bl	80002ac <__adddf3>
 800fa54:	4606      	mov	r6, r0
 800fa56:	4628      	mov	r0, r5
 800fa58:	460f      	mov	r7, r1
 800fa5a:	f7f0 fd73 	bl	8000544 <__aeabi_i2d>
 800fa5e:	a364      	add	r3, pc, #400	; (adr r3, 800fbf0 <_dtoa_r+0x2e0>)
 800fa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa64:	f7f0 fdd8 	bl	8000618 <__aeabi_dmul>
 800fa68:	4602      	mov	r2, r0
 800fa6a:	460b      	mov	r3, r1
 800fa6c:	4630      	mov	r0, r6
 800fa6e:	4639      	mov	r1, r7
 800fa70:	f7f0 fc1c 	bl	80002ac <__adddf3>
 800fa74:	4606      	mov	r6, r0
 800fa76:	460f      	mov	r7, r1
 800fa78:	f7f1 f87e 	bl	8000b78 <__aeabi_d2iz>
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	4683      	mov	fp, r0
 800fa80:	2300      	movs	r3, #0
 800fa82:	4630      	mov	r0, r6
 800fa84:	4639      	mov	r1, r7
 800fa86:	f7f1 f839 	bl	8000afc <__aeabi_dcmplt>
 800fa8a:	b148      	cbz	r0, 800faa0 <_dtoa_r+0x190>
 800fa8c:	4658      	mov	r0, fp
 800fa8e:	f7f0 fd59 	bl	8000544 <__aeabi_i2d>
 800fa92:	4632      	mov	r2, r6
 800fa94:	463b      	mov	r3, r7
 800fa96:	f7f1 f827 	bl	8000ae8 <__aeabi_dcmpeq>
 800fa9a:	b908      	cbnz	r0, 800faa0 <_dtoa_r+0x190>
 800fa9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800faa0:	f1bb 0f16 	cmp.w	fp, #22
 800faa4:	d857      	bhi.n	800fb56 <_dtoa_r+0x246>
 800faa6:	4b5b      	ldr	r3, [pc, #364]	; (800fc14 <_dtoa_r+0x304>)
 800faa8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800faac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab0:	ec51 0b18 	vmov	r0, r1, d8
 800fab4:	f7f1 f822 	bl	8000afc <__aeabi_dcmplt>
 800fab8:	2800      	cmp	r0, #0
 800faba:	d04e      	beq.n	800fb5a <_dtoa_r+0x24a>
 800fabc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fac0:	2300      	movs	r3, #0
 800fac2:	930c      	str	r3, [sp, #48]	; 0x30
 800fac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fac6:	1b5b      	subs	r3, r3, r5
 800fac8:	1e5a      	subs	r2, r3, #1
 800faca:	bf45      	ittet	mi
 800facc:	f1c3 0301 	rsbmi	r3, r3, #1
 800fad0:	9305      	strmi	r3, [sp, #20]
 800fad2:	2300      	movpl	r3, #0
 800fad4:	2300      	movmi	r3, #0
 800fad6:	9206      	str	r2, [sp, #24]
 800fad8:	bf54      	ite	pl
 800fada:	9305      	strpl	r3, [sp, #20]
 800fadc:	9306      	strmi	r3, [sp, #24]
 800fade:	f1bb 0f00 	cmp.w	fp, #0
 800fae2:	db3c      	blt.n	800fb5e <_dtoa_r+0x24e>
 800fae4:	9b06      	ldr	r3, [sp, #24]
 800fae6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800faea:	445b      	add	r3, fp
 800faec:	9306      	str	r3, [sp, #24]
 800faee:	2300      	movs	r3, #0
 800faf0:	9308      	str	r3, [sp, #32]
 800faf2:	9b07      	ldr	r3, [sp, #28]
 800faf4:	2b09      	cmp	r3, #9
 800faf6:	d868      	bhi.n	800fbca <_dtoa_r+0x2ba>
 800faf8:	2b05      	cmp	r3, #5
 800fafa:	bfc4      	itt	gt
 800fafc:	3b04      	subgt	r3, #4
 800fafe:	9307      	strgt	r3, [sp, #28]
 800fb00:	9b07      	ldr	r3, [sp, #28]
 800fb02:	f1a3 0302 	sub.w	r3, r3, #2
 800fb06:	bfcc      	ite	gt
 800fb08:	2500      	movgt	r5, #0
 800fb0a:	2501      	movle	r5, #1
 800fb0c:	2b03      	cmp	r3, #3
 800fb0e:	f200 8085 	bhi.w	800fc1c <_dtoa_r+0x30c>
 800fb12:	e8df f003 	tbb	[pc, r3]
 800fb16:	3b2e      	.short	0x3b2e
 800fb18:	5839      	.short	0x5839
 800fb1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fb1e:	441d      	add	r5, r3
 800fb20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fb24:	2b20      	cmp	r3, #32
 800fb26:	bfc1      	itttt	gt
 800fb28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fb2c:	fa08 f803 	lslgt.w	r8, r8, r3
 800fb30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800fb34:	fa26 f303 	lsrgt.w	r3, r6, r3
 800fb38:	bfd6      	itet	le
 800fb3a:	f1c3 0320 	rsble	r3, r3, #32
 800fb3e:	ea48 0003 	orrgt.w	r0, r8, r3
 800fb42:	fa06 f003 	lslle.w	r0, r6, r3
 800fb46:	f7f0 fced 	bl	8000524 <__aeabi_ui2d>
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800fb50:	3d01      	subs	r5, #1
 800fb52:	920e      	str	r2, [sp, #56]	; 0x38
 800fb54:	e76f      	b.n	800fa36 <_dtoa_r+0x126>
 800fb56:	2301      	movs	r3, #1
 800fb58:	e7b3      	b.n	800fac2 <_dtoa_r+0x1b2>
 800fb5a:	900c      	str	r0, [sp, #48]	; 0x30
 800fb5c:	e7b2      	b.n	800fac4 <_dtoa_r+0x1b4>
 800fb5e:	9b05      	ldr	r3, [sp, #20]
 800fb60:	eba3 030b 	sub.w	r3, r3, fp
 800fb64:	9305      	str	r3, [sp, #20]
 800fb66:	f1cb 0300 	rsb	r3, fp, #0
 800fb6a:	9308      	str	r3, [sp, #32]
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb70:	e7bf      	b.n	800faf2 <_dtoa_r+0x1e2>
 800fb72:	2300      	movs	r3, #0
 800fb74:	9309      	str	r3, [sp, #36]	; 0x24
 800fb76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	dc52      	bgt.n	800fc22 <_dtoa_r+0x312>
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	9301      	str	r3, [sp, #4]
 800fb80:	9304      	str	r3, [sp, #16]
 800fb82:	461a      	mov	r2, r3
 800fb84:	920a      	str	r2, [sp, #40]	; 0x28
 800fb86:	e00b      	b.n	800fba0 <_dtoa_r+0x290>
 800fb88:	2301      	movs	r3, #1
 800fb8a:	e7f3      	b.n	800fb74 <_dtoa_r+0x264>
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	9309      	str	r3, [sp, #36]	; 0x24
 800fb90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb92:	445b      	add	r3, fp
 800fb94:	9301      	str	r3, [sp, #4]
 800fb96:	3301      	adds	r3, #1
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	9304      	str	r3, [sp, #16]
 800fb9c:	bfb8      	it	lt
 800fb9e:	2301      	movlt	r3, #1
 800fba0:	69e0      	ldr	r0, [r4, #28]
 800fba2:	2100      	movs	r1, #0
 800fba4:	2204      	movs	r2, #4
 800fba6:	f102 0614 	add.w	r6, r2, #20
 800fbaa:	429e      	cmp	r6, r3
 800fbac:	d93d      	bls.n	800fc2a <_dtoa_r+0x31a>
 800fbae:	6041      	str	r1, [r0, #4]
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	f000 fceb 	bl	801058c <_Balloc>
 800fbb6:	9000      	str	r0, [sp, #0]
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	d139      	bne.n	800fc30 <_dtoa_r+0x320>
 800fbbc:	4b16      	ldr	r3, [pc, #88]	; (800fc18 <_dtoa_r+0x308>)
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	f240 11af 	movw	r1, #431	; 0x1af
 800fbc4:	e6bd      	b.n	800f942 <_dtoa_r+0x32>
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	e7e1      	b.n	800fb8e <_dtoa_r+0x27e>
 800fbca:	2501      	movs	r5, #1
 800fbcc:	2300      	movs	r3, #0
 800fbce:	9307      	str	r3, [sp, #28]
 800fbd0:	9509      	str	r5, [sp, #36]	; 0x24
 800fbd2:	f04f 33ff 	mov.w	r3, #4294967295
 800fbd6:	9301      	str	r3, [sp, #4]
 800fbd8:	9304      	str	r3, [sp, #16]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	2312      	movs	r3, #18
 800fbde:	e7d1      	b.n	800fb84 <_dtoa_r+0x274>
 800fbe0:	636f4361 	.word	0x636f4361
 800fbe4:	3fd287a7 	.word	0x3fd287a7
 800fbe8:	8b60c8b3 	.word	0x8b60c8b3
 800fbec:	3fc68a28 	.word	0x3fc68a28
 800fbf0:	509f79fb 	.word	0x509f79fb
 800fbf4:	3fd34413 	.word	0x3fd34413
 800fbf8:	08013355 	.word	0x08013355
 800fbfc:	0801336c 	.word	0x0801336c
 800fc00:	7ff00000 	.word	0x7ff00000
 800fc04:	08013351 	.word	0x08013351
 800fc08:	08013348 	.word	0x08013348
 800fc0c:	08013325 	.word	0x08013325
 800fc10:	3ff80000 	.word	0x3ff80000
 800fc14:	08013458 	.word	0x08013458
 800fc18:	080133c4 	.word	0x080133c4
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	9309      	str	r3, [sp, #36]	; 0x24
 800fc20:	e7d7      	b.n	800fbd2 <_dtoa_r+0x2c2>
 800fc22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc24:	9301      	str	r3, [sp, #4]
 800fc26:	9304      	str	r3, [sp, #16]
 800fc28:	e7ba      	b.n	800fba0 <_dtoa_r+0x290>
 800fc2a:	3101      	adds	r1, #1
 800fc2c:	0052      	lsls	r2, r2, #1
 800fc2e:	e7ba      	b.n	800fba6 <_dtoa_r+0x296>
 800fc30:	69e3      	ldr	r3, [r4, #28]
 800fc32:	9a00      	ldr	r2, [sp, #0]
 800fc34:	601a      	str	r2, [r3, #0]
 800fc36:	9b04      	ldr	r3, [sp, #16]
 800fc38:	2b0e      	cmp	r3, #14
 800fc3a:	f200 80a8 	bhi.w	800fd8e <_dtoa_r+0x47e>
 800fc3e:	2d00      	cmp	r5, #0
 800fc40:	f000 80a5 	beq.w	800fd8e <_dtoa_r+0x47e>
 800fc44:	f1bb 0f00 	cmp.w	fp, #0
 800fc48:	dd38      	ble.n	800fcbc <_dtoa_r+0x3ac>
 800fc4a:	4bc0      	ldr	r3, [pc, #768]	; (800ff4c <_dtoa_r+0x63c>)
 800fc4c:	f00b 020f 	and.w	r2, fp, #15
 800fc50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fc54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fc58:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fc5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fc60:	d019      	beq.n	800fc96 <_dtoa_r+0x386>
 800fc62:	4bbb      	ldr	r3, [pc, #748]	; (800ff50 <_dtoa_r+0x640>)
 800fc64:	ec51 0b18 	vmov	r0, r1, d8
 800fc68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fc6c:	f7f0 fdfe 	bl	800086c <__aeabi_ddiv>
 800fc70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc74:	f008 080f 	and.w	r8, r8, #15
 800fc78:	2503      	movs	r5, #3
 800fc7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ff50 <_dtoa_r+0x640>
 800fc7e:	f1b8 0f00 	cmp.w	r8, #0
 800fc82:	d10a      	bne.n	800fc9a <_dtoa_r+0x38a>
 800fc84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc88:	4632      	mov	r2, r6
 800fc8a:	463b      	mov	r3, r7
 800fc8c:	f7f0 fdee 	bl	800086c <__aeabi_ddiv>
 800fc90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc94:	e02b      	b.n	800fcee <_dtoa_r+0x3de>
 800fc96:	2502      	movs	r5, #2
 800fc98:	e7ef      	b.n	800fc7a <_dtoa_r+0x36a>
 800fc9a:	f018 0f01 	tst.w	r8, #1
 800fc9e:	d008      	beq.n	800fcb2 <_dtoa_r+0x3a2>
 800fca0:	4630      	mov	r0, r6
 800fca2:	4639      	mov	r1, r7
 800fca4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fca8:	f7f0 fcb6 	bl	8000618 <__aeabi_dmul>
 800fcac:	3501      	adds	r5, #1
 800fcae:	4606      	mov	r6, r0
 800fcb0:	460f      	mov	r7, r1
 800fcb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fcb6:	f109 0908 	add.w	r9, r9, #8
 800fcba:	e7e0      	b.n	800fc7e <_dtoa_r+0x36e>
 800fcbc:	f000 809f 	beq.w	800fdfe <_dtoa_r+0x4ee>
 800fcc0:	f1cb 0600 	rsb	r6, fp, #0
 800fcc4:	4ba1      	ldr	r3, [pc, #644]	; (800ff4c <_dtoa_r+0x63c>)
 800fcc6:	4fa2      	ldr	r7, [pc, #648]	; (800ff50 <_dtoa_r+0x640>)
 800fcc8:	f006 020f 	and.w	r2, r6, #15
 800fccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd4:	ec51 0b18 	vmov	r0, r1, d8
 800fcd8:	f7f0 fc9e 	bl	8000618 <__aeabi_dmul>
 800fcdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fce0:	1136      	asrs	r6, r6, #4
 800fce2:	2300      	movs	r3, #0
 800fce4:	2502      	movs	r5, #2
 800fce6:	2e00      	cmp	r6, #0
 800fce8:	d17e      	bne.n	800fde8 <_dtoa_r+0x4d8>
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d1d0      	bne.n	800fc90 <_dtoa_r+0x380>
 800fcee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcf0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	f000 8084 	beq.w	800fe02 <_dtoa_r+0x4f2>
 800fcfa:	4b96      	ldr	r3, [pc, #600]	; (800ff54 <_dtoa_r+0x644>)
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	4640      	mov	r0, r8
 800fd00:	4649      	mov	r1, r9
 800fd02:	f7f0 fefb 	bl	8000afc <__aeabi_dcmplt>
 800fd06:	2800      	cmp	r0, #0
 800fd08:	d07b      	beq.n	800fe02 <_dtoa_r+0x4f2>
 800fd0a:	9b04      	ldr	r3, [sp, #16]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d078      	beq.n	800fe02 <_dtoa_r+0x4f2>
 800fd10:	9b01      	ldr	r3, [sp, #4]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	dd39      	ble.n	800fd8a <_dtoa_r+0x47a>
 800fd16:	4b90      	ldr	r3, [pc, #576]	; (800ff58 <_dtoa_r+0x648>)
 800fd18:	2200      	movs	r2, #0
 800fd1a:	4640      	mov	r0, r8
 800fd1c:	4649      	mov	r1, r9
 800fd1e:	f7f0 fc7b 	bl	8000618 <__aeabi_dmul>
 800fd22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd26:	9e01      	ldr	r6, [sp, #4]
 800fd28:	f10b 37ff 	add.w	r7, fp, #4294967295
 800fd2c:	3501      	adds	r5, #1
 800fd2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fd32:	4628      	mov	r0, r5
 800fd34:	f7f0 fc06 	bl	8000544 <__aeabi_i2d>
 800fd38:	4642      	mov	r2, r8
 800fd3a:	464b      	mov	r3, r9
 800fd3c:	f7f0 fc6c 	bl	8000618 <__aeabi_dmul>
 800fd40:	4b86      	ldr	r3, [pc, #536]	; (800ff5c <_dtoa_r+0x64c>)
 800fd42:	2200      	movs	r2, #0
 800fd44:	f7f0 fab2 	bl	80002ac <__adddf3>
 800fd48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fd4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd50:	9303      	str	r3, [sp, #12]
 800fd52:	2e00      	cmp	r6, #0
 800fd54:	d158      	bne.n	800fe08 <_dtoa_r+0x4f8>
 800fd56:	4b82      	ldr	r3, [pc, #520]	; (800ff60 <_dtoa_r+0x650>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	4640      	mov	r0, r8
 800fd5c:	4649      	mov	r1, r9
 800fd5e:	f7f0 faa3 	bl	80002a8 <__aeabi_dsub>
 800fd62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd66:	4680      	mov	r8, r0
 800fd68:	4689      	mov	r9, r1
 800fd6a:	f7f0 fee5 	bl	8000b38 <__aeabi_dcmpgt>
 800fd6e:	2800      	cmp	r0, #0
 800fd70:	f040 8296 	bne.w	80102a0 <_dtoa_r+0x990>
 800fd74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fd78:	4640      	mov	r0, r8
 800fd7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd7e:	4649      	mov	r1, r9
 800fd80:	f7f0 febc 	bl	8000afc <__aeabi_dcmplt>
 800fd84:	2800      	cmp	r0, #0
 800fd86:	f040 8289 	bne.w	801029c <_dtoa_r+0x98c>
 800fd8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fd8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	f2c0 814e 	blt.w	8010032 <_dtoa_r+0x722>
 800fd96:	f1bb 0f0e 	cmp.w	fp, #14
 800fd9a:	f300 814a 	bgt.w	8010032 <_dtoa_r+0x722>
 800fd9e:	4b6b      	ldr	r3, [pc, #428]	; (800ff4c <_dtoa_r+0x63c>)
 800fda0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fda4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	f280 80dc 	bge.w	800ff68 <_dtoa_r+0x658>
 800fdb0:	9b04      	ldr	r3, [sp, #16]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	f300 80d8 	bgt.w	800ff68 <_dtoa_r+0x658>
 800fdb8:	f040 826f 	bne.w	801029a <_dtoa_r+0x98a>
 800fdbc:	4b68      	ldr	r3, [pc, #416]	; (800ff60 <_dtoa_r+0x650>)
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	4640      	mov	r0, r8
 800fdc2:	4649      	mov	r1, r9
 800fdc4:	f7f0 fc28 	bl	8000618 <__aeabi_dmul>
 800fdc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fdcc:	f7f0 feaa 	bl	8000b24 <__aeabi_dcmpge>
 800fdd0:	9e04      	ldr	r6, [sp, #16]
 800fdd2:	4637      	mov	r7, r6
 800fdd4:	2800      	cmp	r0, #0
 800fdd6:	f040 8245 	bne.w	8010264 <_dtoa_r+0x954>
 800fdda:	9d00      	ldr	r5, [sp, #0]
 800fddc:	2331      	movs	r3, #49	; 0x31
 800fdde:	f805 3b01 	strb.w	r3, [r5], #1
 800fde2:	f10b 0b01 	add.w	fp, fp, #1
 800fde6:	e241      	b.n	801026c <_dtoa_r+0x95c>
 800fde8:	07f2      	lsls	r2, r6, #31
 800fdea:	d505      	bpl.n	800fdf8 <_dtoa_r+0x4e8>
 800fdec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdf0:	f7f0 fc12 	bl	8000618 <__aeabi_dmul>
 800fdf4:	3501      	adds	r5, #1
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	1076      	asrs	r6, r6, #1
 800fdfa:	3708      	adds	r7, #8
 800fdfc:	e773      	b.n	800fce6 <_dtoa_r+0x3d6>
 800fdfe:	2502      	movs	r5, #2
 800fe00:	e775      	b.n	800fcee <_dtoa_r+0x3de>
 800fe02:	9e04      	ldr	r6, [sp, #16]
 800fe04:	465f      	mov	r7, fp
 800fe06:	e792      	b.n	800fd2e <_dtoa_r+0x41e>
 800fe08:	9900      	ldr	r1, [sp, #0]
 800fe0a:	4b50      	ldr	r3, [pc, #320]	; (800ff4c <_dtoa_r+0x63c>)
 800fe0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe10:	4431      	add	r1, r6
 800fe12:	9102      	str	r1, [sp, #8]
 800fe14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe16:	eeb0 9a47 	vmov.f32	s18, s14
 800fe1a:	eef0 9a67 	vmov.f32	s19, s15
 800fe1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fe22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fe26:	2900      	cmp	r1, #0
 800fe28:	d044      	beq.n	800feb4 <_dtoa_r+0x5a4>
 800fe2a:	494e      	ldr	r1, [pc, #312]	; (800ff64 <_dtoa_r+0x654>)
 800fe2c:	2000      	movs	r0, #0
 800fe2e:	f7f0 fd1d 	bl	800086c <__aeabi_ddiv>
 800fe32:	ec53 2b19 	vmov	r2, r3, d9
 800fe36:	f7f0 fa37 	bl	80002a8 <__aeabi_dsub>
 800fe3a:	9d00      	ldr	r5, [sp, #0]
 800fe3c:	ec41 0b19 	vmov	d9, r0, r1
 800fe40:	4649      	mov	r1, r9
 800fe42:	4640      	mov	r0, r8
 800fe44:	f7f0 fe98 	bl	8000b78 <__aeabi_d2iz>
 800fe48:	4606      	mov	r6, r0
 800fe4a:	f7f0 fb7b 	bl	8000544 <__aeabi_i2d>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	460b      	mov	r3, r1
 800fe52:	4640      	mov	r0, r8
 800fe54:	4649      	mov	r1, r9
 800fe56:	f7f0 fa27 	bl	80002a8 <__aeabi_dsub>
 800fe5a:	3630      	adds	r6, #48	; 0x30
 800fe5c:	f805 6b01 	strb.w	r6, [r5], #1
 800fe60:	ec53 2b19 	vmov	r2, r3, d9
 800fe64:	4680      	mov	r8, r0
 800fe66:	4689      	mov	r9, r1
 800fe68:	f7f0 fe48 	bl	8000afc <__aeabi_dcmplt>
 800fe6c:	2800      	cmp	r0, #0
 800fe6e:	d164      	bne.n	800ff3a <_dtoa_r+0x62a>
 800fe70:	4642      	mov	r2, r8
 800fe72:	464b      	mov	r3, r9
 800fe74:	4937      	ldr	r1, [pc, #220]	; (800ff54 <_dtoa_r+0x644>)
 800fe76:	2000      	movs	r0, #0
 800fe78:	f7f0 fa16 	bl	80002a8 <__aeabi_dsub>
 800fe7c:	ec53 2b19 	vmov	r2, r3, d9
 800fe80:	f7f0 fe3c 	bl	8000afc <__aeabi_dcmplt>
 800fe84:	2800      	cmp	r0, #0
 800fe86:	f040 80b6 	bne.w	800fff6 <_dtoa_r+0x6e6>
 800fe8a:	9b02      	ldr	r3, [sp, #8]
 800fe8c:	429d      	cmp	r5, r3
 800fe8e:	f43f af7c 	beq.w	800fd8a <_dtoa_r+0x47a>
 800fe92:	4b31      	ldr	r3, [pc, #196]	; (800ff58 <_dtoa_r+0x648>)
 800fe94:	ec51 0b19 	vmov	r0, r1, d9
 800fe98:	2200      	movs	r2, #0
 800fe9a:	f7f0 fbbd 	bl	8000618 <__aeabi_dmul>
 800fe9e:	4b2e      	ldr	r3, [pc, #184]	; (800ff58 <_dtoa_r+0x648>)
 800fea0:	ec41 0b19 	vmov	d9, r0, r1
 800fea4:	2200      	movs	r2, #0
 800fea6:	4640      	mov	r0, r8
 800fea8:	4649      	mov	r1, r9
 800feaa:	f7f0 fbb5 	bl	8000618 <__aeabi_dmul>
 800feae:	4680      	mov	r8, r0
 800feb0:	4689      	mov	r9, r1
 800feb2:	e7c5      	b.n	800fe40 <_dtoa_r+0x530>
 800feb4:	ec51 0b17 	vmov	r0, r1, d7
 800feb8:	f7f0 fbae 	bl	8000618 <__aeabi_dmul>
 800febc:	9b02      	ldr	r3, [sp, #8]
 800febe:	9d00      	ldr	r5, [sp, #0]
 800fec0:	930f      	str	r3, [sp, #60]	; 0x3c
 800fec2:	ec41 0b19 	vmov	d9, r0, r1
 800fec6:	4649      	mov	r1, r9
 800fec8:	4640      	mov	r0, r8
 800feca:	f7f0 fe55 	bl	8000b78 <__aeabi_d2iz>
 800fece:	4606      	mov	r6, r0
 800fed0:	f7f0 fb38 	bl	8000544 <__aeabi_i2d>
 800fed4:	3630      	adds	r6, #48	; 0x30
 800fed6:	4602      	mov	r2, r0
 800fed8:	460b      	mov	r3, r1
 800feda:	4640      	mov	r0, r8
 800fedc:	4649      	mov	r1, r9
 800fede:	f7f0 f9e3 	bl	80002a8 <__aeabi_dsub>
 800fee2:	f805 6b01 	strb.w	r6, [r5], #1
 800fee6:	9b02      	ldr	r3, [sp, #8]
 800fee8:	429d      	cmp	r5, r3
 800feea:	4680      	mov	r8, r0
 800feec:	4689      	mov	r9, r1
 800feee:	f04f 0200 	mov.w	r2, #0
 800fef2:	d124      	bne.n	800ff3e <_dtoa_r+0x62e>
 800fef4:	4b1b      	ldr	r3, [pc, #108]	; (800ff64 <_dtoa_r+0x654>)
 800fef6:	ec51 0b19 	vmov	r0, r1, d9
 800fefa:	f7f0 f9d7 	bl	80002ac <__adddf3>
 800fefe:	4602      	mov	r2, r0
 800ff00:	460b      	mov	r3, r1
 800ff02:	4640      	mov	r0, r8
 800ff04:	4649      	mov	r1, r9
 800ff06:	f7f0 fe17 	bl	8000b38 <__aeabi_dcmpgt>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d173      	bne.n	800fff6 <_dtoa_r+0x6e6>
 800ff0e:	ec53 2b19 	vmov	r2, r3, d9
 800ff12:	4914      	ldr	r1, [pc, #80]	; (800ff64 <_dtoa_r+0x654>)
 800ff14:	2000      	movs	r0, #0
 800ff16:	f7f0 f9c7 	bl	80002a8 <__aeabi_dsub>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	4640      	mov	r0, r8
 800ff20:	4649      	mov	r1, r9
 800ff22:	f7f0 fdeb 	bl	8000afc <__aeabi_dcmplt>
 800ff26:	2800      	cmp	r0, #0
 800ff28:	f43f af2f 	beq.w	800fd8a <_dtoa_r+0x47a>
 800ff2c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ff2e:	1e6b      	subs	r3, r5, #1
 800ff30:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ff36:	2b30      	cmp	r3, #48	; 0x30
 800ff38:	d0f8      	beq.n	800ff2c <_dtoa_r+0x61c>
 800ff3a:	46bb      	mov	fp, r7
 800ff3c:	e04a      	b.n	800ffd4 <_dtoa_r+0x6c4>
 800ff3e:	4b06      	ldr	r3, [pc, #24]	; (800ff58 <_dtoa_r+0x648>)
 800ff40:	f7f0 fb6a 	bl	8000618 <__aeabi_dmul>
 800ff44:	4680      	mov	r8, r0
 800ff46:	4689      	mov	r9, r1
 800ff48:	e7bd      	b.n	800fec6 <_dtoa_r+0x5b6>
 800ff4a:	bf00      	nop
 800ff4c:	08013458 	.word	0x08013458
 800ff50:	08013430 	.word	0x08013430
 800ff54:	3ff00000 	.word	0x3ff00000
 800ff58:	40240000 	.word	0x40240000
 800ff5c:	401c0000 	.word	0x401c0000
 800ff60:	40140000 	.word	0x40140000
 800ff64:	3fe00000 	.word	0x3fe00000
 800ff68:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ff6c:	9d00      	ldr	r5, [sp, #0]
 800ff6e:	4642      	mov	r2, r8
 800ff70:	464b      	mov	r3, r9
 800ff72:	4630      	mov	r0, r6
 800ff74:	4639      	mov	r1, r7
 800ff76:	f7f0 fc79 	bl	800086c <__aeabi_ddiv>
 800ff7a:	f7f0 fdfd 	bl	8000b78 <__aeabi_d2iz>
 800ff7e:	9001      	str	r0, [sp, #4]
 800ff80:	f7f0 fae0 	bl	8000544 <__aeabi_i2d>
 800ff84:	4642      	mov	r2, r8
 800ff86:	464b      	mov	r3, r9
 800ff88:	f7f0 fb46 	bl	8000618 <__aeabi_dmul>
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	460b      	mov	r3, r1
 800ff90:	4630      	mov	r0, r6
 800ff92:	4639      	mov	r1, r7
 800ff94:	f7f0 f988 	bl	80002a8 <__aeabi_dsub>
 800ff98:	9e01      	ldr	r6, [sp, #4]
 800ff9a:	9f04      	ldr	r7, [sp, #16]
 800ff9c:	3630      	adds	r6, #48	; 0x30
 800ff9e:	f805 6b01 	strb.w	r6, [r5], #1
 800ffa2:	9e00      	ldr	r6, [sp, #0]
 800ffa4:	1bae      	subs	r6, r5, r6
 800ffa6:	42b7      	cmp	r7, r6
 800ffa8:	4602      	mov	r2, r0
 800ffaa:	460b      	mov	r3, r1
 800ffac:	d134      	bne.n	8010018 <_dtoa_r+0x708>
 800ffae:	f7f0 f97d 	bl	80002ac <__adddf3>
 800ffb2:	4642      	mov	r2, r8
 800ffb4:	464b      	mov	r3, r9
 800ffb6:	4606      	mov	r6, r0
 800ffb8:	460f      	mov	r7, r1
 800ffba:	f7f0 fdbd 	bl	8000b38 <__aeabi_dcmpgt>
 800ffbe:	b9c8      	cbnz	r0, 800fff4 <_dtoa_r+0x6e4>
 800ffc0:	4642      	mov	r2, r8
 800ffc2:	464b      	mov	r3, r9
 800ffc4:	4630      	mov	r0, r6
 800ffc6:	4639      	mov	r1, r7
 800ffc8:	f7f0 fd8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800ffcc:	b110      	cbz	r0, 800ffd4 <_dtoa_r+0x6c4>
 800ffce:	9b01      	ldr	r3, [sp, #4]
 800ffd0:	07db      	lsls	r3, r3, #31
 800ffd2:	d40f      	bmi.n	800fff4 <_dtoa_r+0x6e4>
 800ffd4:	4651      	mov	r1, sl
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f000 fb18 	bl	801060c <_Bfree>
 800ffdc:	2300      	movs	r3, #0
 800ffde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ffe0:	702b      	strb	r3, [r5, #0]
 800ffe2:	f10b 0301 	add.w	r3, fp, #1
 800ffe6:	6013      	str	r3, [r2, #0]
 800ffe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f43f ace2 	beq.w	800f9b4 <_dtoa_r+0xa4>
 800fff0:	601d      	str	r5, [r3, #0]
 800fff2:	e4df      	b.n	800f9b4 <_dtoa_r+0xa4>
 800fff4:	465f      	mov	r7, fp
 800fff6:	462b      	mov	r3, r5
 800fff8:	461d      	mov	r5, r3
 800fffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fffe:	2a39      	cmp	r2, #57	; 0x39
 8010000:	d106      	bne.n	8010010 <_dtoa_r+0x700>
 8010002:	9a00      	ldr	r2, [sp, #0]
 8010004:	429a      	cmp	r2, r3
 8010006:	d1f7      	bne.n	800fff8 <_dtoa_r+0x6e8>
 8010008:	9900      	ldr	r1, [sp, #0]
 801000a:	2230      	movs	r2, #48	; 0x30
 801000c:	3701      	adds	r7, #1
 801000e:	700a      	strb	r2, [r1, #0]
 8010010:	781a      	ldrb	r2, [r3, #0]
 8010012:	3201      	adds	r2, #1
 8010014:	701a      	strb	r2, [r3, #0]
 8010016:	e790      	b.n	800ff3a <_dtoa_r+0x62a>
 8010018:	4ba3      	ldr	r3, [pc, #652]	; (80102a8 <_dtoa_r+0x998>)
 801001a:	2200      	movs	r2, #0
 801001c:	f7f0 fafc 	bl	8000618 <__aeabi_dmul>
 8010020:	2200      	movs	r2, #0
 8010022:	2300      	movs	r3, #0
 8010024:	4606      	mov	r6, r0
 8010026:	460f      	mov	r7, r1
 8010028:	f7f0 fd5e 	bl	8000ae8 <__aeabi_dcmpeq>
 801002c:	2800      	cmp	r0, #0
 801002e:	d09e      	beq.n	800ff6e <_dtoa_r+0x65e>
 8010030:	e7d0      	b.n	800ffd4 <_dtoa_r+0x6c4>
 8010032:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010034:	2a00      	cmp	r2, #0
 8010036:	f000 80ca 	beq.w	80101ce <_dtoa_r+0x8be>
 801003a:	9a07      	ldr	r2, [sp, #28]
 801003c:	2a01      	cmp	r2, #1
 801003e:	f300 80ad 	bgt.w	801019c <_dtoa_r+0x88c>
 8010042:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010044:	2a00      	cmp	r2, #0
 8010046:	f000 80a5 	beq.w	8010194 <_dtoa_r+0x884>
 801004a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801004e:	9e08      	ldr	r6, [sp, #32]
 8010050:	9d05      	ldr	r5, [sp, #20]
 8010052:	9a05      	ldr	r2, [sp, #20]
 8010054:	441a      	add	r2, r3
 8010056:	9205      	str	r2, [sp, #20]
 8010058:	9a06      	ldr	r2, [sp, #24]
 801005a:	2101      	movs	r1, #1
 801005c:	441a      	add	r2, r3
 801005e:	4620      	mov	r0, r4
 8010060:	9206      	str	r2, [sp, #24]
 8010062:	f000 fb89 	bl	8010778 <__i2b>
 8010066:	4607      	mov	r7, r0
 8010068:	b165      	cbz	r5, 8010084 <_dtoa_r+0x774>
 801006a:	9b06      	ldr	r3, [sp, #24]
 801006c:	2b00      	cmp	r3, #0
 801006e:	dd09      	ble.n	8010084 <_dtoa_r+0x774>
 8010070:	42ab      	cmp	r3, r5
 8010072:	9a05      	ldr	r2, [sp, #20]
 8010074:	bfa8      	it	ge
 8010076:	462b      	movge	r3, r5
 8010078:	1ad2      	subs	r2, r2, r3
 801007a:	9205      	str	r2, [sp, #20]
 801007c:	9a06      	ldr	r2, [sp, #24]
 801007e:	1aed      	subs	r5, r5, r3
 8010080:	1ad3      	subs	r3, r2, r3
 8010082:	9306      	str	r3, [sp, #24]
 8010084:	9b08      	ldr	r3, [sp, #32]
 8010086:	b1f3      	cbz	r3, 80100c6 <_dtoa_r+0x7b6>
 8010088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801008a:	2b00      	cmp	r3, #0
 801008c:	f000 80a3 	beq.w	80101d6 <_dtoa_r+0x8c6>
 8010090:	2e00      	cmp	r6, #0
 8010092:	dd10      	ble.n	80100b6 <_dtoa_r+0x7a6>
 8010094:	4639      	mov	r1, r7
 8010096:	4632      	mov	r2, r6
 8010098:	4620      	mov	r0, r4
 801009a:	f000 fc2d 	bl	80108f8 <__pow5mult>
 801009e:	4652      	mov	r2, sl
 80100a0:	4601      	mov	r1, r0
 80100a2:	4607      	mov	r7, r0
 80100a4:	4620      	mov	r0, r4
 80100a6:	f000 fb7d 	bl	80107a4 <__multiply>
 80100aa:	4651      	mov	r1, sl
 80100ac:	4680      	mov	r8, r0
 80100ae:	4620      	mov	r0, r4
 80100b0:	f000 faac 	bl	801060c <_Bfree>
 80100b4:	46c2      	mov	sl, r8
 80100b6:	9b08      	ldr	r3, [sp, #32]
 80100b8:	1b9a      	subs	r2, r3, r6
 80100ba:	d004      	beq.n	80100c6 <_dtoa_r+0x7b6>
 80100bc:	4651      	mov	r1, sl
 80100be:	4620      	mov	r0, r4
 80100c0:	f000 fc1a 	bl	80108f8 <__pow5mult>
 80100c4:	4682      	mov	sl, r0
 80100c6:	2101      	movs	r1, #1
 80100c8:	4620      	mov	r0, r4
 80100ca:	f000 fb55 	bl	8010778 <__i2b>
 80100ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	4606      	mov	r6, r0
 80100d4:	f340 8081 	ble.w	80101da <_dtoa_r+0x8ca>
 80100d8:	461a      	mov	r2, r3
 80100da:	4601      	mov	r1, r0
 80100dc:	4620      	mov	r0, r4
 80100de:	f000 fc0b 	bl	80108f8 <__pow5mult>
 80100e2:	9b07      	ldr	r3, [sp, #28]
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	4606      	mov	r6, r0
 80100e8:	dd7a      	ble.n	80101e0 <_dtoa_r+0x8d0>
 80100ea:	f04f 0800 	mov.w	r8, #0
 80100ee:	6933      	ldr	r3, [r6, #16]
 80100f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80100f4:	6918      	ldr	r0, [r3, #16]
 80100f6:	f000 faf1 	bl	80106dc <__hi0bits>
 80100fa:	f1c0 0020 	rsb	r0, r0, #32
 80100fe:	9b06      	ldr	r3, [sp, #24]
 8010100:	4418      	add	r0, r3
 8010102:	f010 001f 	ands.w	r0, r0, #31
 8010106:	f000 8094 	beq.w	8010232 <_dtoa_r+0x922>
 801010a:	f1c0 0320 	rsb	r3, r0, #32
 801010e:	2b04      	cmp	r3, #4
 8010110:	f340 8085 	ble.w	801021e <_dtoa_r+0x90e>
 8010114:	9b05      	ldr	r3, [sp, #20]
 8010116:	f1c0 001c 	rsb	r0, r0, #28
 801011a:	4403      	add	r3, r0
 801011c:	9305      	str	r3, [sp, #20]
 801011e:	9b06      	ldr	r3, [sp, #24]
 8010120:	4403      	add	r3, r0
 8010122:	4405      	add	r5, r0
 8010124:	9306      	str	r3, [sp, #24]
 8010126:	9b05      	ldr	r3, [sp, #20]
 8010128:	2b00      	cmp	r3, #0
 801012a:	dd05      	ble.n	8010138 <_dtoa_r+0x828>
 801012c:	4651      	mov	r1, sl
 801012e:	461a      	mov	r2, r3
 8010130:	4620      	mov	r0, r4
 8010132:	f000 fc3b 	bl	80109ac <__lshift>
 8010136:	4682      	mov	sl, r0
 8010138:	9b06      	ldr	r3, [sp, #24]
 801013a:	2b00      	cmp	r3, #0
 801013c:	dd05      	ble.n	801014a <_dtoa_r+0x83a>
 801013e:	4631      	mov	r1, r6
 8010140:	461a      	mov	r2, r3
 8010142:	4620      	mov	r0, r4
 8010144:	f000 fc32 	bl	80109ac <__lshift>
 8010148:	4606      	mov	r6, r0
 801014a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801014c:	2b00      	cmp	r3, #0
 801014e:	d072      	beq.n	8010236 <_dtoa_r+0x926>
 8010150:	4631      	mov	r1, r6
 8010152:	4650      	mov	r0, sl
 8010154:	f000 fc96 	bl	8010a84 <__mcmp>
 8010158:	2800      	cmp	r0, #0
 801015a:	da6c      	bge.n	8010236 <_dtoa_r+0x926>
 801015c:	2300      	movs	r3, #0
 801015e:	4651      	mov	r1, sl
 8010160:	220a      	movs	r2, #10
 8010162:	4620      	mov	r0, r4
 8010164:	f000 fa74 	bl	8010650 <__multadd>
 8010168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801016a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801016e:	4682      	mov	sl, r0
 8010170:	2b00      	cmp	r3, #0
 8010172:	f000 81b0 	beq.w	80104d6 <_dtoa_r+0xbc6>
 8010176:	2300      	movs	r3, #0
 8010178:	4639      	mov	r1, r7
 801017a:	220a      	movs	r2, #10
 801017c:	4620      	mov	r0, r4
 801017e:	f000 fa67 	bl	8010650 <__multadd>
 8010182:	9b01      	ldr	r3, [sp, #4]
 8010184:	2b00      	cmp	r3, #0
 8010186:	4607      	mov	r7, r0
 8010188:	f300 8096 	bgt.w	80102b8 <_dtoa_r+0x9a8>
 801018c:	9b07      	ldr	r3, [sp, #28]
 801018e:	2b02      	cmp	r3, #2
 8010190:	dc59      	bgt.n	8010246 <_dtoa_r+0x936>
 8010192:	e091      	b.n	80102b8 <_dtoa_r+0x9a8>
 8010194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801019a:	e758      	b.n	801004e <_dtoa_r+0x73e>
 801019c:	9b04      	ldr	r3, [sp, #16]
 801019e:	1e5e      	subs	r6, r3, #1
 80101a0:	9b08      	ldr	r3, [sp, #32]
 80101a2:	42b3      	cmp	r3, r6
 80101a4:	bfbf      	itttt	lt
 80101a6:	9b08      	ldrlt	r3, [sp, #32]
 80101a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80101aa:	9608      	strlt	r6, [sp, #32]
 80101ac:	1af3      	sublt	r3, r6, r3
 80101ae:	bfb4      	ite	lt
 80101b0:	18d2      	addlt	r2, r2, r3
 80101b2:	1b9e      	subge	r6, r3, r6
 80101b4:	9b04      	ldr	r3, [sp, #16]
 80101b6:	bfbc      	itt	lt
 80101b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80101ba:	2600      	movlt	r6, #0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	bfb7      	itett	lt
 80101c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80101c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80101c8:	1a9d      	sublt	r5, r3, r2
 80101ca:	2300      	movlt	r3, #0
 80101cc:	e741      	b.n	8010052 <_dtoa_r+0x742>
 80101ce:	9e08      	ldr	r6, [sp, #32]
 80101d0:	9d05      	ldr	r5, [sp, #20]
 80101d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80101d4:	e748      	b.n	8010068 <_dtoa_r+0x758>
 80101d6:	9a08      	ldr	r2, [sp, #32]
 80101d8:	e770      	b.n	80100bc <_dtoa_r+0x7ac>
 80101da:	9b07      	ldr	r3, [sp, #28]
 80101dc:	2b01      	cmp	r3, #1
 80101de:	dc19      	bgt.n	8010214 <_dtoa_r+0x904>
 80101e0:	9b02      	ldr	r3, [sp, #8]
 80101e2:	b9bb      	cbnz	r3, 8010214 <_dtoa_r+0x904>
 80101e4:	9b03      	ldr	r3, [sp, #12]
 80101e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80101ea:	b99b      	cbnz	r3, 8010214 <_dtoa_r+0x904>
 80101ec:	9b03      	ldr	r3, [sp, #12]
 80101ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80101f2:	0d1b      	lsrs	r3, r3, #20
 80101f4:	051b      	lsls	r3, r3, #20
 80101f6:	b183      	cbz	r3, 801021a <_dtoa_r+0x90a>
 80101f8:	9b05      	ldr	r3, [sp, #20]
 80101fa:	3301      	adds	r3, #1
 80101fc:	9305      	str	r3, [sp, #20]
 80101fe:	9b06      	ldr	r3, [sp, #24]
 8010200:	3301      	adds	r3, #1
 8010202:	9306      	str	r3, [sp, #24]
 8010204:	f04f 0801 	mov.w	r8, #1
 8010208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801020a:	2b00      	cmp	r3, #0
 801020c:	f47f af6f 	bne.w	80100ee <_dtoa_r+0x7de>
 8010210:	2001      	movs	r0, #1
 8010212:	e774      	b.n	80100fe <_dtoa_r+0x7ee>
 8010214:	f04f 0800 	mov.w	r8, #0
 8010218:	e7f6      	b.n	8010208 <_dtoa_r+0x8f8>
 801021a:	4698      	mov	r8, r3
 801021c:	e7f4      	b.n	8010208 <_dtoa_r+0x8f8>
 801021e:	d082      	beq.n	8010126 <_dtoa_r+0x816>
 8010220:	9a05      	ldr	r2, [sp, #20]
 8010222:	331c      	adds	r3, #28
 8010224:	441a      	add	r2, r3
 8010226:	9205      	str	r2, [sp, #20]
 8010228:	9a06      	ldr	r2, [sp, #24]
 801022a:	441a      	add	r2, r3
 801022c:	441d      	add	r5, r3
 801022e:	9206      	str	r2, [sp, #24]
 8010230:	e779      	b.n	8010126 <_dtoa_r+0x816>
 8010232:	4603      	mov	r3, r0
 8010234:	e7f4      	b.n	8010220 <_dtoa_r+0x910>
 8010236:	9b04      	ldr	r3, [sp, #16]
 8010238:	2b00      	cmp	r3, #0
 801023a:	dc37      	bgt.n	80102ac <_dtoa_r+0x99c>
 801023c:	9b07      	ldr	r3, [sp, #28]
 801023e:	2b02      	cmp	r3, #2
 8010240:	dd34      	ble.n	80102ac <_dtoa_r+0x99c>
 8010242:	9b04      	ldr	r3, [sp, #16]
 8010244:	9301      	str	r3, [sp, #4]
 8010246:	9b01      	ldr	r3, [sp, #4]
 8010248:	b963      	cbnz	r3, 8010264 <_dtoa_r+0x954>
 801024a:	4631      	mov	r1, r6
 801024c:	2205      	movs	r2, #5
 801024e:	4620      	mov	r0, r4
 8010250:	f000 f9fe 	bl	8010650 <__multadd>
 8010254:	4601      	mov	r1, r0
 8010256:	4606      	mov	r6, r0
 8010258:	4650      	mov	r0, sl
 801025a:	f000 fc13 	bl	8010a84 <__mcmp>
 801025e:	2800      	cmp	r0, #0
 8010260:	f73f adbb 	bgt.w	800fdda <_dtoa_r+0x4ca>
 8010264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010266:	9d00      	ldr	r5, [sp, #0]
 8010268:	ea6f 0b03 	mvn.w	fp, r3
 801026c:	f04f 0800 	mov.w	r8, #0
 8010270:	4631      	mov	r1, r6
 8010272:	4620      	mov	r0, r4
 8010274:	f000 f9ca 	bl	801060c <_Bfree>
 8010278:	2f00      	cmp	r7, #0
 801027a:	f43f aeab 	beq.w	800ffd4 <_dtoa_r+0x6c4>
 801027e:	f1b8 0f00 	cmp.w	r8, #0
 8010282:	d005      	beq.n	8010290 <_dtoa_r+0x980>
 8010284:	45b8      	cmp	r8, r7
 8010286:	d003      	beq.n	8010290 <_dtoa_r+0x980>
 8010288:	4641      	mov	r1, r8
 801028a:	4620      	mov	r0, r4
 801028c:	f000 f9be 	bl	801060c <_Bfree>
 8010290:	4639      	mov	r1, r7
 8010292:	4620      	mov	r0, r4
 8010294:	f000 f9ba 	bl	801060c <_Bfree>
 8010298:	e69c      	b.n	800ffd4 <_dtoa_r+0x6c4>
 801029a:	2600      	movs	r6, #0
 801029c:	4637      	mov	r7, r6
 801029e:	e7e1      	b.n	8010264 <_dtoa_r+0x954>
 80102a0:	46bb      	mov	fp, r7
 80102a2:	4637      	mov	r7, r6
 80102a4:	e599      	b.n	800fdda <_dtoa_r+0x4ca>
 80102a6:	bf00      	nop
 80102a8:	40240000 	.word	0x40240000
 80102ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	f000 80c8 	beq.w	8010444 <_dtoa_r+0xb34>
 80102b4:	9b04      	ldr	r3, [sp, #16]
 80102b6:	9301      	str	r3, [sp, #4]
 80102b8:	2d00      	cmp	r5, #0
 80102ba:	dd05      	ble.n	80102c8 <_dtoa_r+0x9b8>
 80102bc:	4639      	mov	r1, r7
 80102be:	462a      	mov	r2, r5
 80102c0:	4620      	mov	r0, r4
 80102c2:	f000 fb73 	bl	80109ac <__lshift>
 80102c6:	4607      	mov	r7, r0
 80102c8:	f1b8 0f00 	cmp.w	r8, #0
 80102cc:	d05b      	beq.n	8010386 <_dtoa_r+0xa76>
 80102ce:	6879      	ldr	r1, [r7, #4]
 80102d0:	4620      	mov	r0, r4
 80102d2:	f000 f95b 	bl	801058c <_Balloc>
 80102d6:	4605      	mov	r5, r0
 80102d8:	b928      	cbnz	r0, 80102e6 <_dtoa_r+0x9d6>
 80102da:	4b83      	ldr	r3, [pc, #524]	; (80104e8 <_dtoa_r+0xbd8>)
 80102dc:	4602      	mov	r2, r0
 80102de:	f240 21ef 	movw	r1, #751	; 0x2ef
 80102e2:	f7ff bb2e 	b.w	800f942 <_dtoa_r+0x32>
 80102e6:	693a      	ldr	r2, [r7, #16]
 80102e8:	3202      	adds	r2, #2
 80102ea:	0092      	lsls	r2, r2, #2
 80102ec:	f107 010c 	add.w	r1, r7, #12
 80102f0:	300c      	adds	r0, #12
 80102f2:	f7ff fa77 	bl	800f7e4 <memcpy>
 80102f6:	2201      	movs	r2, #1
 80102f8:	4629      	mov	r1, r5
 80102fa:	4620      	mov	r0, r4
 80102fc:	f000 fb56 	bl	80109ac <__lshift>
 8010300:	9b00      	ldr	r3, [sp, #0]
 8010302:	3301      	adds	r3, #1
 8010304:	9304      	str	r3, [sp, #16]
 8010306:	e9dd 2300 	ldrd	r2, r3, [sp]
 801030a:	4413      	add	r3, r2
 801030c:	9308      	str	r3, [sp, #32]
 801030e:	9b02      	ldr	r3, [sp, #8]
 8010310:	f003 0301 	and.w	r3, r3, #1
 8010314:	46b8      	mov	r8, r7
 8010316:	9306      	str	r3, [sp, #24]
 8010318:	4607      	mov	r7, r0
 801031a:	9b04      	ldr	r3, [sp, #16]
 801031c:	4631      	mov	r1, r6
 801031e:	3b01      	subs	r3, #1
 8010320:	4650      	mov	r0, sl
 8010322:	9301      	str	r3, [sp, #4]
 8010324:	f7ff fa6c 	bl	800f800 <quorem>
 8010328:	4641      	mov	r1, r8
 801032a:	9002      	str	r0, [sp, #8]
 801032c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010330:	4650      	mov	r0, sl
 8010332:	f000 fba7 	bl	8010a84 <__mcmp>
 8010336:	463a      	mov	r2, r7
 8010338:	9005      	str	r0, [sp, #20]
 801033a:	4631      	mov	r1, r6
 801033c:	4620      	mov	r0, r4
 801033e:	f000 fbbd 	bl	8010abc <__mdiff>
 8010342:	68c2      	ldr	r2, [r0, #12]
 8010344:	4605      	mov	r5, r0
 8010346:	bb02      	cbnz	r2, 801038a <_dtoa_r+0xa7a>
 8010348:	4601      	mov	r1, r0
 801034a:	4650      	mov	r0, sl
 801034c:	f000 fb9a 	bl	8010a84 <__mcmp>
 8010350:	4602      	mov	r2, r0
 8010352:	4629      	mov	r1, r5
 8010354:	4620      	mov	r0, r4
 8010356:	9209      	str	r2, [sp, #36]	; 0x24
 8010358:	f000 f958 	bl	801060c <_Bfree>
 801035c:	9b07      	ldr	r3, [sp, #28]
 801035e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010360:	9d04      	ldr	r5, [sp, #16]
 8010362:	ea43 0102 	orr.w	r1, r3, r2
 8010366:	9b06      	ldr	r3, [sp, #24]
 8010368:	4319      	orrs	r1, r3
 801036a:	d110      	bne.n	801038e <_dtoa_r+0xa7e>
 801036c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010370:	d029      	beq.n	80103c6 <_dtoa_r+0xab6>
 8010372:	9b05      	ldr	r3, [sp, #20]
 8010374:	2b00      	cmp	r3, #0
 8010376:	dd02      	ble.n	801037e <_dtoa_r+0xa6e>
 8010378:	9b02      	ldr	r3, [sp, #8]
 801037a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801037e:	9b01      	ldr	r3, [sp, #4]
 8010380:	f883 9000 	strb.w	r9, [r3]
 8010384:	e774      	b.n	8010270 <_dtoa_r+0x960>
 8010386:	4638      	mov	r0, r7
 8010388:	e7ba      	b.n	8010300 <_dtoa_r+0x9f0>
 801038a:	2201      	movs	r2, #1
 801038c:	e7e1      	b.n	8010352 <_dtoa_r+0xa42>
 801038e:	9b05      	ldr	r3, [sp, #20]
 8010390:	2b00      	cmp	r3, #0
 8010392:	db04      	blt.n	801039e <_dtoa_r+0xa8e>
 8010394:	9907      	ldr	r1, [sp, #28]
 8010396:	430b      	orrs	r3, r1
 8010398:	9906      	ldr	r1, [sp, #24]
 801039a:	430b      	orrs	r3, r1
 801039c:	d120      	bne.n	80103e0 <_dtoa_r+0xad0>
 801039e:	2a00      	cmp	r2, #0
 80103a0:	dded      	ble.n	801037e <_dtoa_r+0xa6e>
 80103a2:	4651      	mov	r1, sl
 80103a4:	2201      	movs	r2, #1
 80103a6:	4620      	mov	r0, r4
 80103a8:	f000 fb00 	bl	80109ac <__lshift>
 80103ac:	4631      	mov	r1, r6
 80103ae:	4682      	mov	sl, r0
 80103b0:	f000 fb68 	bl	8010a84 <__mcmp>
 80103b4:	2800      	cmp	r0, #0
 80103b6:	dc03      	bgt.n	80103c0 <_dtoa_r+0xab0>
 80103b8:	d1e1      	bne.n	801037e <_dtoa_r+0xa6e>
 80103ba:	f019 0f01 	tst.w	r9, #1
 80103be:	d0de      	beq.n	801037e <_dtoa_r+0xa6e>
 80103c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80103c4:	d1d8      	bne.n	8010378 <_dtoa_r+0xa68>
 80103c6:	9a01      	ldr	r2, [sp, #4]
 80103c8:	2339      	movs	r3, #57	; 0x39
 80103ca:	7013      	strb	r3, [r2, #0]
 80103cc:	462b      	mov	r3, r5
 80103ce:	461d      	mov	r5, r3
 80103d0:	3b01      	subs	r3, #1
 80103d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80103d6:	2a39      	cmp	r2, #57	; 0x39
 80103d8:	d06c      	beq.n	80104b4 <_dtoa_r+0xba4>
 80103da:	3201      	adds	r2, #1
 80103dc:	701a      	strb	r2, [r3, #0]
 80103de:	e747      	b.n	8010270 <_dtoa_r+0x960>
 80103e0:	2a00      	cmp	r2, #0
 80103e2:	dd07      	ble.n	80103f4 <_dtoa_r+0xae4>
 80103e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80103e8:	d0ed      	beq.n	80103c6 <_dtoa_r+0xab6>
 80103ea:	9a01      	ldr	r2, [sp, #4]
 80103ec:	f109 0301 	add.w	r3, r9, #1
 80103f0:	7013      	strb	r3, [r2, #0]
 80103f2:	e73d      	b.n	8010270 <_dtoa_r+0x960>
 80103f4:	9b04      	ldr	r3, [sp, #16]
 80103f6:	9a08      	ldr	r2, [sp, #32]
 80103f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d043      	beq.n	8010488 <_dtoa_r+0xb78>
 8010400:	4651      	mov	r1, sl
 8010402:	2300      	movs	r3, #0
 8010404:	220a      	movs	r2, #10
 8010406:	4620      	mov	r0, r4
 8010408:	f000 f922 	bl	8010650 <__multadd>
 801040c:	45b8      	cmp	r8, r7
 801040e:	4682      	mov	sl, r0
 8010410:	f04f 0300 	mov.w	r3, #0
 8010414:	f04f 020a 	mov.w	r2, #10
 8010418:	4641      	mov	r1, r8
 801041a:	4620      	mov	r0, r4
 801041c:	d107      	bne.n	801042e <_dtoa_r+0xb1e>
 801041e:	f000 f917 	bl	8010650 <__multadd>
 8010422:	4680      	mov	r8, r0
 8010424:	4607      	mov	r7, r0
 8010426:	9b04      	ldr	r3, [sp, #16]
 8010428:	3301      	adds	r3, #1
 801042a:	9304      	str	r3, [sp, #16]
 801042c:	e775      	b.n	801031a <_dtoa_r+0xa0a>
 801042e:	f000 f90f 	bl	8010650 <__multadd>
 8010432:	4639      	mov	r1, r7
 8010434:	4680      	mov	r8, r0
 8010436:	2300      	movs	r3, #0
 8010438:	220a      	movs	r2, #10
 801043a:	4620      	mov	r0, r4
 801043c:	f000 f908 	bl	8010650 <__multadd>
 8010440:	4607      	mov	r7, r0
 8010442:	e7f0      	b.n	8010426 <_dtoa_r+0xb16>
 8010444:	9b04      	ldr	r3, [sp, #16]
 8010446:	9301      	str	r3, [sp, #4]
 8010448:	9d00      	ldr	r5, [sp, #0]
 801044a:	4631      	mov	r1, r6
 801044c:	4650      	mov	r0, sl
 801044e:	f7ff f9d7 	bl	800f800 <quorem>
 8010452:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010456:	9b00      	ldr	r3, [sp, #0]
 8010458:	f805 9b01 	strb.w	r9, [r5], #1
 801045c:	1aea      	subs	r2, r5, r3
 801045e:	9b01      	ldr	r3, [sp, #4]
 8010460:	4293      	cmp	r3, r2
 8010462:	dd07      	ble.n	8010474 <_dtoa_r+0xb64>
 8010464:	4651      	mov	r1, sl
 8010466:	2300      	movs	r3, #0
 8010468:	220a      	movs	r2, #10
 801046a:	4620      	mov	r0, r4
 801046c:	f000 f8f0 	bl	8010650 <__multadd>
 8010470:	4682      	mov	sl, r0
 8010472:	e7ea      	b.n	801044a <_dtoa_r+0xb3a>
 8010474:	9b01      	ldr	r3, [sp, #4]
 8010476:	2b00      	cmp	r3, #0
 8010478:	bfc8      	it	gt
 801047a:	461d      	movgt	r5, r3
 801047c:	9b00      	ldr	r3, [sp, #0]
 801047e:	bfd8      	it	le
 8010480:	2501      	movle	r5, #1
 8010482:	441d      	add	r5, r3
 8010484:	f04f 0800 	mov.w	r8, #0
 8010488:	4651      	mov	r1, sl
 801048a:	2201      	movs	r2, #1
 801048c:	4620      	mov	r0, r4
 801048e:	f000 fa8d 	bl	80109ac <__lshift>
 8010492:	4631      	mov	r1, r6
 8010494:	4682      	mov	sl, r0
 8010496:	f000 faf5 	bl	8010a84 <__mcmp>
 801049a:	2800      	cmp	r0, #0
 801049c:	dc96      	bgt.n	80103cc <_dtoa_r+0xabc>
 801049e:	d102      	bne.n	80104a6 <_dtoa_r+0xb96>
 80104a0:	f019 0f01 	tst.w	r9, #1
 80104a4:	d192      	bne.n	80103cc <_dtoa_r+0xabc>
 80104a6:	462b      	mov	r3, r5
 80104a8:	461d      	mov	r5, r3
 80104aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80104ae:	2a30      	cmp	r2, #48	; 0x30
 80104b0:	d0fa      	beq.n	80104a8 <_dtoa_r+0xb98>
 80104b2:	e6dd      	b.n	8010270 <_dtoa_r+0x960>
 80104b4:	9a00      	ldr	r2, [sp, #0]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d189      	bne.n	80103ce <_dtoa_r+0xabe>
 80104ba:	f10b 0b01 	add.w	fp, fp, #1
 80104be:	2331      	movs	r3, #49	; 0x31
 80104c0:	e796      	b.n	80103f0 <_dtoa_r+0xae0>
 80104c2:	4b0a      	ldr	r3, [pc, #40]	; (80104ec <_dtoa_r+0xbdc>)
 80104c4:	f7ff ba99 	b.w	800f9fa <_dtoa_r+0xea>
 80104c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	f47f aa6d 	bne.w	800f9aa <_dtoa_r+0x9a>
 80104d0:	4b07      	ldr	r3, [pc, #28]	; (80104f0 <_dtoa_r+0xbe0>)
 80104d2:	f7ff ba92 	b.w	800f9fa <_dtoa_r+0xea>
 80104d6:	9b01      	ldr	r3, [sp, #4]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	dcb5      	bgt.n	8010448 <_dtoa_r+0xb38>
 80104dc:	9b07      	ldr	r3, [sp, #28]
 80104de:	2b02      	cmp	r3, #2
 80104e0:	f73f aeb1 	bgt.w	8010246 <_dtoa_r+0x936>
 80104e4:	e7b0      	b.n	8010448 <_dtoa_r+0xb38>
 80104e6:	bf00      	nop
 80104e8:	080133c4 	.word	0x080133c4
 80104ec:	08013324 	.word	0x08013324
 80104f0:	08013348 	.word	0x08013348

080104f4 <_free_r>:
 80104f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80104f6:	2900      	cmp	r1, #0
 80104f8:	d044      	beq.n	8010584 <_free_r+0x90>
 80104fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80104fe:	9001      	str	r0, [sp, #4]
 8010500:	2b00      	cmp	r3, #0
 8010502:	f1a1 0404 	sub.w	r4, r1, #4
 8010506:	bfb8      	it	lt
 8010508:	18e4      	addlt	r4, r4, r3
 801050a:	f7fe fb57 	bl	800ebbc <__malloc_lock>
 801050e:	4a1e      	ldr	r2, [pc, #120]	; (8010588 <_free_r+0x94>)
 8010510:	9801      	ldr	r0, [sp, #4]
 8010512:	6813      	ldr	r3, [r2, #0]
 8010514:	b933      	cbnz	r3, 8010524 <_free_r+0x30>
 8010516:	6063      	str	r3, [r4, #4]
 8010518:	6014      	str	r4, [r2, #0]
 801051a:	b003      	add	sp, #12
 801051c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010520:	f7fe bb52 	b.w	800ebc8 <__malloc_unlock>
 8010524:	42a3      	cmp	r3, r4
 8010526:	d908      	bls.n	801053a <_free_r+0x46>
 8010528:	6825      	ldr	r5, [r4, #0]
 801052a:	1961      	adds	r1, r4, r5
 801052c:	428b      	cmp	r3, r1
 801052e:	bf01      	itttt	eq
 8010530:	6819      	ldreq	r1, [r3, #0]
 8010532:	685b      	ldreq	r3, [r3, #4]
 8010534:	1949      	addeq	r1, r1, r5
 8010536:	6021      	streq	r1, [r4, #0]
 8010538:	e7ed      	b.n	8010516 <_free_r+0x22>
 801053a:	461a      	mov	r2, r3
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	b10b      	cbz	r3, 8010544 <_free_r+0x50>
 8010540:	42a3      	cmp	r3, r4
 8010542:	d9fa      	bls.n	801053a <_free_r+0x46>
 8010544:	6811      	ldr	r1, [r2, #0]
 8010546:	1855      	adds	r5, r2, r1
 8010548:	42a5      	cmp	r5, r4
 801054a:	d10b      	bne.n	8010564 <_free_r+0x70>
 801054c:	6824      	ldr	r4, [r4, #0]
 801054e:	4421      	add	r1, r4
 8010550:	1854      	adds	r4, r2, r1
 8010552:	42a3      	cmp	r3, r4
 8010554:	6011      	str	r1, [r2, #0]
 8010556:	d1e0      	bne.n	801051a <_free_r+0x26>
 8010558:	681c      	ldr	r4, [r3, #0]
 801055a:	685b      	ldr	r3, [r3, #4]
 801055c:	6053      	str	r3, [r2, #4]
 801055e:	440c      	add	r4, r1
 8010560:	6014      	str	r4, [r2, #0]
 8010562:	e7da      	b.n	801051a <_free_r+0x26>
 8010564:	d902      	bls.n	801056c <_free_r+0x78>
 8010566:	230c      	movs	r3, #12
 8010568:	6003      	str	r3, [r0, #0]
 801056a:	e7d6      	b.n	801051a <_free_r+0x26>
 801056c:	6825      	ldr	r5, [r4, #0]
 801056e:	1961      	adds	r1, r4, r5
 8010570:	428b      	cmp	r3, r1
 8010572:	bf04      	itt	eq
 8010574:	6819      	ldreq	r1, [r3, #0]
 8010576:	685b      	ldreq	r3, [r3, #4]
 8010578:	6063      	str	r3, [r4, #4]
 801057a:	bf04      	itt	eq
 801057c:	1949      	addeq	r1, r1, r5
 801057e:	6021      	streq	r1, [r4, #0]
 8010580:	6054      	str	r4, [r2, #4]
 8010582:	e7ca      	b.n	801051a <_free_r+0x26>
 8010584:	b003      	add	sp, #12
 8010586:	bd30      	pop	{r4, r5, pc}
 8010588:	200061d4 	.word	0x200061d4

0801058c <_Balloc>:
 801058c:	b570      	push	{r4, r5, r6, lr}
 801058e:	69c6      	ldr	r6, [r0, #28]
 8010590:	4604      	mov	r4, r0
 8010592:	460d      	mov	r5, r1
 8010594:	b976      	cbnz	r6, 80105b4 <_Balloc+0x28>
 8010596:	2010      	movs	r0, #16
 8010598:	f7fe fa60 	bl	800ea5c <malloc>
 801059c:	4602      	mov	r2, r0
 801059e:	61e0      	str	r0, [r4, #28]
 80105a0:	b920      	cbnz	r0, 80105ac <_Balloc+0x20>
 80105a2:	4b18      	ldr	r3, [pc, #96]	; (8010604 <_Balloc+0x78>)
 80105a4:	4818      	ldr	r0, [pc, #96]	; (8010608 <_Balloc+0x7c>)
 80105a6:	216b      	movs	r1, #107	; 0x6b
 80105a8:	f000 fd8c 	bl	80110c4 <__assert_func>
 80105ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80105b0:	6006      	str	r6, [r0, #0]
 80105b2:	60c6      	str	r6, [r0, #12]
 80105b4:	69e6      	ldr	r6, [r4, #28]
 80105b6:	68f3      	ldr	r3, [r6, #12]
 80105b8:	b183      	cbz	r3, 80105dc <_Balloc+0x50>
 80105ba:	69e3      	ldr	r3, [r4, #28]
 80105bc:	68db      	ldr	r3, [r3, #12]
 80105be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80105c2:	b9b8      	cbnz	r0, 80105f4 <_Balloc+0x68>
 80105c4:	2101      	movs	r1, #1
 80105c6:	fa01 f605 	lsl.w	r6, r1, r5
 80105ca:	1d72      	adds	r2, r6, #5
 80105cc:	0092      	lsls	r2, r2, #2
 80105ce:	4620      	mov	r0, r4
 80105d0:	f000 fd96 	bl	8011100 <_calloc_r>
 80105d4:	b160      	cbz	r0, 80105f0 <_Balloc+0x64>
 80105d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80105da:	e00e      	b.n	80105fa <_Balloc+0x6e>
 80105dc:	2221      	movs	r2, #33	; 0x21
 80105de:	2104      	movs	r1, #4
 80105e0:	4620      	mov	r0, r4
 80105e2:	f000 fd8d 	bl	8011100 <_calloc_r>
 80105e6:	69e3      	ldr	r3, [r4, #28]
 80105e8:	60f0      	str	r0, [r6, #12]
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d1e4      	bne.n	80105ba <_Balloc+0x2e>
 80105f0:	2000      	movs	r0, #0
 80105f2:	bd70      	pop	{r4, r5, r6, pc}
 80105f4:	6802      	ldr	r2, [r0, #0]
 80105f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80105fa:	2300      	movs	r3, #0
 80105fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010600:	e7f7      	b.n	80105f2 <_Balloc+0x66>
 8010602:	bf00      	nop
 8010604:	08013355 	.word	0x08013355
 8010608:	080133d5 	.word	0x080133d5

0801060c <_Bfree>:
 801060c:	b570      	push	{r4, r5, r6, lr}
 801060e:	69c6      	ldr	r6, [r0, #28]
 8010610:	4605      	mov	r5, r0
 8010612:	460c      	mov	r4, r1
 8010614:	b976      	cbnz	r6, 8010634 <_Bfree+0x28>
 8010616:	2010      	movs	r0, #16
 8010618:	f7fe fa20 	bl	800ea5c <malloc>
 801061c:	4602      	mov	r2, r0
 801061e:	61e8      	str	r0, [r5, #28]
 8010620:	b920      	cbnz	r0, 801062c <_Bfree+0x20>
 8010622:	4b09      	ldr	r3, [pc, #36]	; (8010648 <_Bfree+0x3c>)
 8010624:	4809      	ldr	r0, [pc, #36]	; (801064c <_Bfree+0x40>)
 8010626:	218f      	movs	r1, #143	; 0x8f
 8010628:	f000 fd4c 	bl	80110c4 <__assert_func>
 801062c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010630:	6006      	str	r6, [r0, #0]
 8010632:	60c6      	str	r6, [r0, #12]
 8010634:	b13c      	cbz	r4, 8010646 <_Bfree+0x3a>
 8010636:	69eb      	ldr	r3, [r5, #28]
 8010638:	6862      	ldr	r2, [r4, #4]
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010640:	6021      	str	r1, [r4, #0]
 8010642:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010646:	bd70      	pop	{r4, r5, r6, pc}
 8010648:	08013355 	.word	0x08013355
 801064c:	080133d5 	.word	0x080133d5

08010650 <__multadd>:
 8010650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010654:	690d      	ldr	r5, [r1, #16]
 8010656:	4607      	mov	r7, r0
 8010658:	460c      	mov	r4, r1
 801065a:	461e      	mov	r6, r3
 801065c:	f101 0c14 	add.w	ip, r1, #20
 8010660:	2000      	movs	r0, #0
 8010662:	f8dc 3000 	ldr.w	r3, [ip]
 8010666:	b299      	uxth	r1, r3
 8010668:	fb02 6101 	mla	r1, r2, r1, r6
 801066c:	0c1e      	lsrs	r6, r3, #16
 801066e:	0c0b      	lsrs	r3, r1, #16
 8010670:	fb02 3306 	mla	r3, r2, r6, r3
 8010674:	b289      	uxth	r1, r1
 8010676:	3001      	adds	r0, #1
 8010678:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801067c:	4285      	cmp	r5, r0
 801067e:	f84c 1b04 	str.w	r1, [ip], #4
 8010682:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010686:	dcec      	bgt.n	8010662 <__multadd+0x12>
 8010688:	b30e      	cbz	r6, 80106ce <__multadd+0x7e>
 801068a:	68a3      	ldr	r3, [r4, #8]
 801068c:	42ab      	cmp	r3, r5
 801068e:	dc19      	bgt.n	80106c4 <__multadd+0x74>
 8010690:	6861      	ldr	r1, [r4, #4]
 8010692:	4638      	mov	r0, r7
 8010694:	3101      	adds	r1, #1
 8010696:	f7ff ff79 	bl	801058c <_Balloc>
 801069a:	4680      	mov	r8, r0
 801069c:	b928      	cbnz	r0, 80106aa <__multadd+0x5a>
 801069e:	4602      	mov	r2, r0
 80106a0:	4b0c      	ldr	r3, [pc, #48]	; (80106d4 <__multadd+0x84>)
 80106a2:	480d      	ldr	r0, [pc, #52]	; (80106d8 <__multadd+0x88>)
 80106a4:	21ba      	movs	r1, #186	; 0xba
 80106a6:	f000 fd0d 	bl	80110c4 <__assert_func>
 80106aa:	6922      	ldr	r2, [r4, #16]
 80106ac:	3202      	adds	r2, #2
 80106ae:	f104 010c 	add.w	r1, r4, #12
 80106b2:	0092      	lsls	r2, r2, #2
 80106b4:	300c      	adds	r0, #12
 80106b6:	f7ff f895 	bl	800f7e4 <memcpy>
 80106ba:	4621      	mov	r1, r4
 80106bc:	4638      	mov	r0, r7
 80106be:	f7ff ffa5 	bl	801060c <_Bfree>
 80106c2:	4644      	mov	r4, r8
 80106c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80106c8:	3501      	adds	r5, #1
 80106ca:	615e      	str	r6, [r3, #20]
 80106cc:	6125      	str	r5, [r4, #16]
 80106ce:	4620      	mov	r0, r4
 80106d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106d4:	080133c4 	.word	0x080133c4
 80106d8:	080133d5 	.word	0x080133d5

080106dc <__hi0bits>:
 80106dc:	0c03      	lsrs	r3, r0, #16
 80106de:	041b      	lsls	r3, r3, #16
 80106e0:	b9d3      	cbnz	r3, 8010718 <__hi0bits+0x3c>
 80106e2:	0400      	lsls	r0, r0, #16
 80106e4:	2310      	movs	r3, #16
 80106e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80106ea:	bf04      	itt	eq
 80106ec:	0200      	lsleq	r0, r0, #8
 80106ee:	3308      	addeq	r3, #8
 80106f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80106f4:	bf04      	itt	eq
 80106f6:	0100      	lsleq	r0, r0, #4
 80106f8:	3304      	addeq	r3, #4
 80106fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80106fe:	bf04      	itt	eq
 8010700:	0080      	lsleq	r0, r0, #2
 8010702:	3302      	addeq	r3, #2
 8010704:	2800      	cmp	r0, #0
 8010706:	db05      	blt.n	8010714 <__hi0bits+0x38>
 8010708:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801070c:	f103 0301 	add.w	r3, r3, #1
 8010710:	bf08      	it	eq
 8010712:	2320      	moveq	r3, #32
 8010714:	4618      	mov	r0, r3
 8010716:	4770      	bx	lr
 8010718:	2300      	movs	r3, #0
 801071a:	e7e4      	b.n	80106e6 <__hi0bits+0xa>

0801071c <__lo0bits>:
 801071c:	6803      	ldr	r3, [r0, #0]
 801071e:	f013 0207 	ands.w	r2, r3, #7
 8010722:	d00c      	beq.n	801073e <__lo0bits+0x22>
 8010724:	07d9      	lsls	r1, r3, #31
 8010726:	d422      	bmi.n	801076e <__lo0bits+0x52>
 8010728:	079a      	lsls	r2, r3, #30
 801072a:	bf49      	itett	mi
 801072c:	085b      	lsrmi	r3, r3, #1
 801072e:	089b      	lsrpl	r3, r3, #2
 8010730:	6003      	strmi	r3, [r0, #0]
 8010732:	2201      	movmi	r2, #1
 8010734:	bf5c      	itt	pl
 8010736:	6003      	strpl	r3, [r0, #0]
 8010738:	2202      	movpl	r2, #2
 801073a:	4610      	mov	r0, r2
 801073c:	4770      	bx	lr
 801073e:	b299      	uxth	r1, r3
 8010740:	b909      	cbnz	r1, 8010746 <__lo0bits+0x2a>
 8010742:	0c1b      	lsrs	r3, r3, #16
 8010744:	2210      	movs	r2, #16
 8010746:	b2d9      	uxtb	r1, r3
 8010748:	b909      	cbnz	r1, 801074e <__lo0bits+0x32>
 801074a:	3208      	adds	r2, #8
 801074c:	0a1b      	lsrs	r3, r3, #8
 801074e:	0719      	lsls	r1, r3, #28
 8010750:	bf04      	itt	eq
 8010752:	091b      	lsreq	r3, r3, #4
 8010754:	3204      	addeq	r2, #4
 8010756:	0799      	lsls	r1, r3, #30
 8010758:	bf04      	itt	eq
 801075a:	089b      	lsreq	r3, r3, #2
 801075c:	3202      	addeq	r2, #2
 801075e:	07d9      	lsls	r1, r3, #31
 8010760:	d403      	bmi.n	801076a <__lo0bits+0x4e>
 8010762:	085b      	lsrs	r3, r3, #1
 8010764:	f102 0201 	add.w	r2, r2, #1
 8010768:	d003      	beq.n	8010772 <__lo0bits+0x56>
 801076a:	6003      	str	r3, [r0, #0]
 801076c:	e7e5      	b.n	801073a <__lo0bits+0x1e>
 801076e:	2200      	movs	r2, #0
 8010770:	e7e3      	b.n	801073a <__lo0bits+0x1e>
 8010772:	2220      	movs	r2, #32
 8010774:	e7e1      	b.n	801073a <__lo0bits+0x1e>
	...

08010778 <__i2b>:
 8010778:	b510      	push	{r4, lr}
 801077a:	460c      	mov	r4, r1
 801077c:	2101      	movs	r1, #1
 801077e:	f7ff ff05 	bl	801058c <_Balloc>
 8010782:	4602      	mov	r2, r0
 8010784:	b928      	cbnz	r0, 8010792 <__i2b+0x1a>
 8010786:	4b05      	ldr	r3, [pc, #20]	; (801079c <__i2b+0x24>)
 8010788:	4805      	ldr	r0, [pc, #20]	; (80107a0 <__i2b+0x28>)
 801078a:	f240 1145 	movw	r1, #325	; 0x145
 801078e:	f000 fc99 	bl	80110c4 <__assert_func>
 8010792:	2301      	movs	r3, #1
 8010794:	6144      	str	r4, [r0, #20]
 8010796:	6103      	str	r3, [r0, #16]
 8010798:	bd10      	pop	{r4, pc}
 801079a:	bf00      	nop
 801079c:	080133c4 	.word	0x080133c4
 80107a0:	080133d5 	.word	0x080133d5

080107a4 <__multiply>:
 80107a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a8:	4691      	mov	r9, r2
 80107aa:	690a      	ldr	r2, [r1, #16]
 80107ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	bfb8      	it	lt
 80107b4:	460b      	movlt	r3, r1
 80107b6:	460c      	mov	r4, r1
 80107b8:	bfbc      	itt	lt
 80107ba:	464c      	movlt	r4, r9
 80107bc:	4699      	movlt	r9, r3
 80107be:	6927      	ldr	r7, [r4, #16]
 80107c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80107c4:	68a3      	ldr	r3, [r4, #8]
 80107c6:	6861      	ldr	r1, [r4, #4]
 80107c8:	eb07 060a 	add.w	r6, r7, sl
 80107cc:	42b3      	cmp	r3, r6
 80107ce:	b085      	sub	sp, #20
 80107d0:	bfb8      	it	lt
 80107d2:	3101      	addlt	r1, #1
 80107d4:	f7ff feda 	bl	801058c <_Balloc>
 80107d8:	b930      	cbnz	r0, 80107e8 <__multiply+0x44>
 80107da:	4602      	mov	r2, r0
 80107dc:	4b44      	ldr	r3, [pc, #272]	; (80108f0 <__multiply+0x14c>)
 80107de:	4845      	ldr	r0, [pc, #276]	; (80108f4 <__multiply+0x150>)
 80107e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80107e4:	f000 fc6e 	bl	80110c4 <__assert_func>
 80107e8:	f100 0514 	add.w	r5, r0, #20
 80107ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80107f0:	462b      	mov	r3, r5
 80107f2:	2200      	movs	r2, #0
 80107f4:	4543      	cmp	r3, r8
 80107f6:	d321      	bcc.n	801083c <__multiply+0x98>
 80107f8:	f104 0314 	add.w	r3, r4, #20
 80107fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010800:	f109 0314 	add.w	r3, r9, #20
 8010804:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010808:	9202      	str	r2, [sp, #8]
 801080a:	1b3a      	subs	r2, r7, r4
 801080c:	3a15      	subs	r2, #21
 801080e:	f022 0203 	bic.w	r2, r2, #3
 8010812:	3204      	adds	r2, #4
 8010814:	f104 0115 	add.w	r1, r4, #21
 8010818:	428f      	cmp	r7, r1
 801081a:	bf38      	it	cc
 801081c:	2204      	movcc	r2, #4
 801081e:	9201      	str	r2, [sp, #4]
 8010820:	9a02      	ldr	r2, [sp, #8]
 8010822:	9303      	str	r3, [sp, #12]
 8010824:	429a      	cmp	r2, r3
 8010826:	d80c      	bhi.n	8010842 <__multiply+0x9e>
 8010828:	2e00      	cmp	r6, #0
 801082a:	dd03      	ble.n	8010834 <__multiply+0x90>
 801082c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010830:	2b00      	cmp	r3, #0
 8010832:	d05b      	beq.n	80108ec <__multiply+0x148>
 8010834:	6106      	str	r6, [r0, #16]
 8010836:	b005      	add	sp, #20
 8010838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801083c:	f843 2b04 	str.w	r2, [r3], #4
 8010840:	e7d8      	b.n	80107f4 <__multiply+0x50>
 8010842:	f8b3 a000 	ldrh.w	sl, [r3]
 8010846:	f1ba 0f00 	cmp.w	sl, #0
 801084a:	d024      	beq.n	8010896 <__multiply+0xf2>
 801084c:	f104 0e14 	add.w	lr, r4, #20
 8010850:	46a9      	mov	r9, r5
 8010852:	f04f 0c00 	mov.w	ip, #0
 8010856:	f85e 2b04 	ldr.w	r2, [lr], #4
 801085a:	f8d9 1000 	ldr.w	r1, [r9]
 801085e:	fa1f fb82 	uxth.w	fp, r2
 8010862:	b289      	uxth	r1, r1
 8010864:	fb0a 110b 	mla	r1, sl, fp, r1
 8010868:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801086c:	f8d9 2000 	ldr.w	r2, [r9]
 8010870:	4461      	add	r1, ip
 8010872:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010876:	fb0a c20b 	mla	r2, sl, fp, ip
 801087a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801087e:	b289      	uxth	r1, r1
 8010880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010884:	4577      	cmp	r7, lr
 8010886:	f849 1b04 	str.w	r1, [r9], #4
 801088a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801088e:	d8e2      	bhi.n	8010856 <__multiply+0xb2>
 8010890:	9a01      	ldr	r2, [sp, #4]
 8010892:	f845 c002 	str.w	ip, [r5, r2]
 8010896:	9a03      	ldr	r2, [sp, #12]
 8010898:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801089c:	3304      	adds	r3, #4
 801089e:	f1b9 0f00 	cmp.w	r9, #0
 80108a2:	d021      	beq.n	80108e8 <__multiply+0x144>
 80108a4:	6829      	ldr	r1, [r5, #0]
 80108a6:	f104 0c14 	add.w	ip, r4, #20
 80108aa:	46ae      	mov	lr, r5
 80108ac:	f04f 0a00 	mov.w	sl, #0
 80108b0:	f8bc b000 	ldrh.w	fp, [ip]
 80108b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80108b8:	fb09 220b 	mla	r2, r9, fp, r2
 80108bc:	4452      	add	r2, sl
 80108be:	b289      	uxth	r1, r1
 80108c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80108c4:	f84e 1b04 	str.w	r1, [lr], #4
 80108c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80108cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80108d0:	f8be 1000 	ldrh.w	r1, [lr]
 80108d4:	fb09 110a 	mla	r1, r9, sl, r1
 80108d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80108dc:	4567      	cmp	r7, ip
 80108de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80108e2:	d8e5      	bhi.n	80108b0 <__multiply+0x10c>
 80108e4:	9a01      	ldr	r2, [sp, #4]
 80108e6:	50a9      	str	r1, [r5, r2]
 80108e8:	3504      	adds	r5, #4
 80108ea:	e799      	b.n	8010820 <__multiply+0x7c>
 80108ec:	3e01      	subs	r6, #1
 80108ee:	e79b      	b.n	8010828 <__multiply+0x84>
 80108f0:	080133c4 	.word	0x080133c4
 80108f4:	080133d5 	.word	0x080133d5

080108f8 <__pow5mult>:
 80108f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108fc:	4615      	mov	r5, r2
 80108fe:	f012 0203 	ands.w	r2, r2, #3
 8010902:	4606      	mov	r6, r0
 8010904:	460f      	mov	r7, r1
 8010906:	d007      	beq.n	8010918 <__pow5mult+0x20>
 8010908:	4c25      	ldr	r4, [pc, #148]	; (80109a0 <__pow5mult+0xa8>)
 801090a:	3a01      	subs	r2, #1
 801090c:	2300      	movs	r3, #0
 801090e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010912:	f7ff fe9d 	bl	8010650 <__multadd>
 8010916:	4607      	mov	r7, r0
 8010918:	10ad      	asrs	r5, r5, #2
 801091a:	d03d      	beq.n	8010998 <__pow5mult+0xa0>
 801091c:	69f4      	ldr	r4, [r6, #28]
 801091e:	b97c      	cbnz	r4, 8010940 <__pow5mult+0x48>
 8010920:	2010      	movs	r0, #16
 8010922:	f7fe f89b 	bl	800ea5c <malloc>
 8010926:	4602      	mov	r2, r0
 8010928:	61f0      	str	r0, [r6, #28]
 801092a:	b928      	cbnz	r0, 8010938 <__pow5mult+0x40>
 801092c:	4b1d      	ldr	r3, [pc, #116]	; (80109a4 <__pow5mult+0xac>)
 801092e:	481e      	ldr	r0, [pc, #120]	; (80109a8 <__pow5mult+0xb0>)
 8010930:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010934:	f000 fbc6 	bl	80110c4 <__assert_func>
 8010938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801093c:	6004      	str	r4, [r0, #0]
 801093e:	60c4      	str	r4, [r0, #12]
 8010940:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010948:	b94c      	cbnz	r4, 801095e <__pow5mult+0x66>
 801094a:	f240 2171 	movw	r1, #625	; 0x271
 801094e:	4630      	mov	r0, r6
 8010950:	f7ff ff12 	bl	8010778 <__i2b>
 8010954:	2300      	movs	r3, #0
 8010956:	f8c8 0008 	str.w	r0, [r8, #8]
 801095a:	4604      	mov	r4, r0
 801095c:	6003      	str	r3, [r0, #0]
 801095e:	f04f 0900 	mov.w	r9, #0
 8010962:	07eb      	lsls	r3, r5, #31
 8010964:	d50a      	bpl.n	801097c <__pow5mult+0x84>
 8010966:	4639      	mov	r1, r7
 8010968:	4622      	mov	r2, r4
 801096a:	4630      	mov	r0, r6
 801096c:	f7ff ff1a 	bl	80107a4 <__multiply>
 8010970:	4639      	mov	r1, r7
 8010972:	4680      	mov	r8, r0
 8010974:	4630      	mov	r0, r6
 8010976:	f7ff fe49 	bl	801060c <_Bfree>
 801097a:	4647      	mov	r7, r8
 801097c:	106d      	asrs	r5, r5, #1
 801097e:	d00b      	beq.n	8010998 <__pow5mult+0xa0>
 8010980:	6820      	ldr	r0, [r4, #0]
 8010982:	b938      	cbnz	r0, 8010994 <__pow5mult+0x9c>
 8010984:	4622      	mov	r2, r4
 8010986:	4621      	mov	r1, r4
 8010988:	4630      	mov	r0, r6
 801098a:	f7ff ff0b 	bl	80107a4 <__multiply>
 801098e:	6020      	str	r0, [r4, #0]
 8010990:	f8c0 9000 	str.w	r9, [r0]
 8010994:	4604      	mov	r4, r0
 8010996:	e7e4      	b.n	8010962 <__pow5mult+0x6a>
 8010998:	4638      	mov	r0, r7
 801099a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801099e:	bf00      	nop
 80109a0:	08013520 	.word	0x08013520
 80109a4:	08013355 	.word	0x08013355
 80109a8:	080133d5 	.word	0x080133d5

080109ac <__lshift>:
 80109ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109b0:	460c      	mov	r4, r1
 80109b2:	6849      	ldr	r1, [r1, #4]
 80109b4:	6923      	ldr	r3, [r4, #16]
 80109b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80109ba:	68a3      	ldr	r3, [r4, #8]
 80109bc:	4607      	mov	r7, r0
 80109be:	4691      	mov	r9, r2
 80109c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80109c4:	f108 0601 	add.w	r6, r8, #1
 80109c8:	42b3      	cmp	r3, r6
 80109ca:	db0b      	blt.n	80109e4 <__lshift+0x38>
 80109cc:	4638      	mov	r0, r7
 80109ce:	f7ff fddd 	bl	801058c <_Balloc>
 80109d2:	4605      	mov	r5, r0
 80109d4:	b948      	cbnz	r0, 80109ea <__lshift+0x3e>
 80109d6:	4602      	mov	r2, r0
 80109d8:	4b28      	ldr	r3, [pc, #160]	; (8010a7c <__lshift+0xd0>)
 80109da:	4829      	ldr	r0, [pc, #164]	; (8010a80 <__lshift+0xd4>)
 80109dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80109e0:	f000 fb70 	bl	80110c4 <__assert_func>
 80109e4:	3101      	adds	r1, #1
 80109e6:	005b      	lsls	r3, r3, #1
 80109e8:	e7ee      	b.n	80109c8 <__lshift+0x1c>
 80109ea:	2300      	movs	r3, #0
 80109ec:	f100 0114 	add.w	r1, r0, #20
 80109f0:	f100 0210 	add.w	r2, r0, #16
 80109f4:	4618      	mov	r0, r3
 80109f6:	4553      	cmp	r3, sl
 80109f8:	db33      	blt.n	8010a62 <__lshift+0xb6>
 80109fa:	6920      	ldr	r0, [r4, #16]
 80109fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a00:	f104 0314 	add.w	r3, r4, #20
 8010a04:	f019 091f 	ands.w	r9, r9, #31
 8010a08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010a10:	d02b      	beq.n	8010a6a <__lshift+0xbe>
 8010a12:	f1c9 0e20 	rsb	lr, r9, #32
 8010a16:	468a      	mov	sl, r1
 8010a18:	2200      	movs	r2, #0
 8010a1a:	6818      	ldr	r0, [r3, #0]
 8010a1c:	fa00 f009 	lsl.w	r0, r0, r9
 8010a20:	4310      	orrs	r0, r2
 8010a22:	f84a 0b04 	str.w	r0, [sl], #4
 8010a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a2a:	459c      	cmp	ip, r3
 8010a2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010a30:	d8f3      	bhi.n	8010a1a <__lshift+0x6e>
 8010a32:	ebac 0304 	sub.w	r3, ip, r4
 8010a36:	3b15      	subs	r3, #21
 8010a38:	f023 0303 	bic.w	r3, r3, #3
 8010a3c:	3304      	adds	r3, #4
 8010a3e:	f104 0015 	add.w	r0, r4, #21
 8010a42:	4584      	cmp	ip, r0
 8010a44:	bf38      	it	cc
 8010a46:	2304      	movcc	r3, #4
 8010a48:	50ca      	str	r2, [r1, r3]
 8010a4a:	b10a      	cbz	r2, 8010a50 <__lshift+0xa4>
 8010a4c:	f108 0602 	add.w	r6, r8, #2
 8010a50:	3e01      	subs	r6, #1
 8010a52:	4638      	mov	r0, r7
 8010a54:	612e      	str	r6, [r5, #16]
 8010a56:	4621      	mov	r1, r4
 8010a58:	f7ff fdd8 	bl	801060c <_Bfree>
 8010a5c:	4628      	mov	r0, r5
 8010a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a62:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a66:	3301      	adds	r3, #1
 8010a68:	e7c5      	b.n	80109f6 <__lshift+0x4a>
 8010a6a:	3904      	subs	r1, #4
 8010a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a70:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a74:	459c      	cmp	ip, r3
 8010a76:	d8f9      	bhi.n	8010a6c <__lshift+0xc0>
 8010a78:	e7ea      	b.n	8010a50 <__lshift+0xa4>
 8010a7a:	bf00      	nop
 8010a7c:	080133c4 	.word	0x080133c4
 8010a80:	080133d5 	.word	0x080133d5

08010a84 <__mcmp>:
 8010a84:	b530      	push	{r4, r5, lr}
 8010a86:	6902      	ldr	r2, [r0, #16]
 8010a88:	690c      	ldr	r4, [r1, #16]
 8010a8a:	1b12      	subs	r2, r2, r4
 8010a8c:	d10e      	bne.n	8010aac <__mcmp+0x28>
 8010a8e:	f100 0314 	add.w	r3, r0, #20
 8010a92:	3114      	adds	r1, #20
 8010a94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010a98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010a9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010aa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010aa4:	42a5      	cmp	r5, r4
 8010aa6:	d003      	beq.n	8010ab0 <__mcmp+0x2c>
 8010aa8:	d305      	bcc.n	8010ab6 <__mcmp+0x32>
 8010aaa:	2201      	movs	r2, #1
 8010aac:	4610      	mov	r0, r2
 8010aae:	bd30      	pop	{r4, r5, pc}
 8010ab0:	4283      	cmp	r3, r0
 8010ab2:	d3f3      	bcc.n	8010a9c <__mcmp+0x18>
 8010ab4:	e7fa      	b.n	8010aac <__mcmp+0x28>
 8010ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8010aba:	e7f7      	b.n	8010aac <__mcmp+0x28>

08010abc <__mdiff>:
 8010abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac0:	460c      	mov	r4, r1
 8010ac2:	4606      	mov	r6, r0
 8010ac4:	4611      	mov	r1, r2
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	4690      	mov	r8, r2
 8010aca:	f7ff ffdb 	bl	8010a84 <__mcmp>
 8010ace:	1e05      	subs	r5, r0, #0
 8010ad0:	d110      	bne.n	8010af4 <__mdiff+0x38>
 8010ad2:	4629      	mov	r1, r5
 8010ad4:	4630      	mov	r0, r6
 8010ad6:	f7ff fd59 	bl	801058c <_Balloc>
 8010ada:	b930      	cbnz	r0, 8010aea <__mdiff+0x2e>
 8010adc:	4b3a      	ldr	r3, [pc, #232]	; (8010bc8 <__mdiff+0x10c>)
 8010ade:	4602      	mov	r2, r0
 8010ae0:	f240 2137 	movw	r1, #567	; 0x237
 8010ae4:	4839      	ldr	r0, [pc, #228]	; (8010bcc <__mdiff+0x110>)
 8010ae6:	f000 faed 	bl	80110c4 <__assert_func>
 8010aea:	2301      	movs	r3, #1
 8010aec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010af4:	bfa4      	itt	ge
 8010af6:	4643      	movge	r3, r8
 8010af8:	46a0      	movge	r8, r4
 8010afa:	4630      	mov	r0, r6
 8010afc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010b00:	bfa6      	itte	ge
 8010b02:	461c      	movge	r4, r3
 8010b04:	2500      	movge	r5, #0
 8010b06:	2501      	movlt	r5, #1
 8010b08:	f7ff fd40 	bl	801058c <_Balloc>
 8010b0c:	b920      	cbnz	r0, 8010b18 <__mdiff+0x5c>
 8010b0e:	4b2e      	ldr	r3, [pc, #184]	; (8010bc8 <__mdiff+0x10c>)
 8010b10:	4602      	mov	r2, r0
 8010b12:	f240 2145 	movw	r1, #581	; 0x245
 8010b16:	e7e5      	b.n	8010ae4 <__mdiff+0x28>
 8010b18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010b1c:	6926      	ldr	r6, [r4, #16]
 8010b1e:	60c5      	str	r5, [r0, #12]
 8010b20:	f104 0914 	add.w	r9, r4, #20
 8010b24:	f108 0514 	add.w	r5, r8, #20
 8010b28:	f100 0e14 	add.w	lr, r0, #20
 8010b2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010b30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010b34:	f108 0210 	add.w	r2, r8, #16
 8010b38:	46f2      	mov	sl, lr
 8010b3a:	2100      	movs	r1, #0
 8010b3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010b40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010b44:	fa11 f88b 	uxtah	r8, r1, fp
 8010b48:	b299      	uxth	r1, r3
 8010b4a:	0c1b      	lsrs	r3, r3, #16
 8010b4c:	eba8 0801 	sub.w	r8, r8, r1
 8010b50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010b54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010b58:	fa1f f888 	uxth.w	r8, r8
 8010b5c:	1419      	asrs	r1, r3, #16
 8010b5e:	454e      	cmp	r6, r9
 8010b60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010b64:	f84a 3b04 	str.w	r3, [sl], #4
 8010b68:	d8e8      	bhi.n	8010b3c <__mdiff+0x80>
 8010b6a:	1b33      	subs	r3, r6, r4
 8010b6c:	3b15      	subs	r3, #21
 8010b6e:	f023 0303 	bic.w	r3, r3, #3
 8010b72:	3304      	adds	r3, #4
 8010b74:	3415      	adds	r4, #21
 8010b76:	42a6      	cmp	r6, r4
 8010b78:	bf38      	it	cc
 8010b7a:	2304      	movcc	r3, #4
 8010b7c:	441d      	add	r5, r3
 8010b7e:	4473      	add	r3, lr
 8010b80:	469e      	mov	lr, r3
 8010b82:	462e      	mov	r6, r5
 8010b84:	4566      	cmp	r6, ip
 8010b86:	d30e      	bcc.n	8010ba6 <__mdiff+0xea>
 8010b88:	f10c 0203 	add.w	r2, ip, #3
 8010b8c:	1b52      	subs	r2, r2, r5
 8010b8e:	f022 0203 	bic.w	r2, r2, #3
 8010b92:	3d03      	subs	r5, #3
 8010b94:	45ac      	cmp	ip, r5
 8010b96:	bf38      	it	cc
 8010b98:	2200      	movcc	r2, #0
 8010b9a:	4413      	add	r3, r2
 8010b9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010ba0:	b17a      	cbz	r2, 8010bc2 <__mdiff+0x106>
 8010ba2:	6107      	str	r7, [r0, #16]
 8010ba4:	e7a4      	b.n	8010af0 <__mdiff+0x34>
 8010ba6:	f856 8b04 	ldr.w	r8, [r6], #4
 8010baa:	fa11 f288 	uxtah	r2, r1, r8
 8010bae:	1414      	asrs	r4, r2, #16
 8010bb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010bb4:	b292      	uxth	r2, r2
 8010bb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010bba:	f84e 2b04 	str.w	r2, [lr], #4
 8010bbe:	1421      	asrs	r1, r4, #16
 8010bc0:	e7e0      	b.n	8010b84 <__mdiff+0xc8>
 8010bc2:	3f01      	subs	r7, #1
 8010bc4:	e7ea      	b.n	8010b9c <__mdiff+0xe0>
 8010bc6:	bf00      	nop
 8010bc8:	080133c4 	.word	0x080133c4
 8010bcc:	080133d5 	.word	0x080133d5

08010bd0 <__d2b>:
 8010bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010bd4:	460f      	mov	r7, r1
 8010bd6:	2101      	movs	r1, #1
 8010bd8:	ec59 8b10 	vmov	r8, r9, d0
 8010bdc:	4616      	mov	r6, r2
 8010bde:	f7ff fcd5 	bl	801058c <_Balloc>
 8010be2:	4604      	mov	r4, r0
 8010be4:	b930      	cbnz	r0, 8010bf4 <__d2b+0x24>
 8010be6:	4602      	mov	r2, r0
 8010be8:	4b24      	ldr	r3, [pc, #144]	; (8010c7c <__d2b+0xac>)
 8010bea:	4825      	ldr	r0, [pc, #148]	; (8010c80 <__d2b+0xb0>)
 8010bec:	f240 310f 	movw	r1, #783	; 0x30f
 8010bf0:	f000 fa68 	bl	80110c4 <__assert_func>
 8010bf4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010bfc:	bb2d      	cbnz	r5, 8010c4a <__d2b+0x7a>
 8010bfe:	9301      	str	r3, [sp, #4]
 8010c00:	f1b8 0300 	subs.w	r3, r8, #0
 8010c04:	d026      	beq.n	8010c54 <__d2b+0x84>
 8010c06:	4668      	mov	r0, sp
 8010c08:	9300      	str	r3, [sp, #0]
 8010c0a:	f7ff fd87 	bl	801071c <__lo0bits>
 8010c0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010c12:	b1e8      	cbz	r0, 8010c50 <__d2b+0x80>
 8010c14:	f1c0 0320 	rsb	r3, r0, #32
 8010c18:	fa02 f303 	lsl.w	r3, r2, r3
 8010c1c:	430b      	orrs	r3, r1
 8010c1e:	40c2      	lsrs	r2, r0
 8010c20:	6163      	str	r3, [r4, #20]
 8010c22:	9201      	str	r2, [sp, #4]
 8010c24:	9b01      	ldr	r3, [sp, #4]
 8010c26:	61a3      	str	r3, [r4, #24]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	bf14      	ite	ne
 8010c2c:	2202      	movne	r2, #2
 8010c2e:	2201      	moveq	r2, #1
 8010c30:	6122      	str	r2, [r4, #16]
 8010c32:	b1bd      	cbz	r5, 8010c64 <__d2b+0x94>
 8010c34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010c38:	4405      	add	r5, r0
 8010c3a:	603d      	str	r5, [r7, #0]
 8010c3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c40:	6030      	str	r0, [r6, #0]
 8010c42:	4620      	mov	r0, r4
 8010c44:	b003      	add	sp, #12
 8010c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c4e:	e7d6      	b.n	8010bfe <__d2b+0x2e>
 8010c50:	6161      	str	r1, [r4, #20]
 8010c52:	e7e7      	b.n	8010c24 <__d2b+0x54>
 8010c54:	a801      	add	r0, sp, #4
 8010c56:	f7ff fd61 	bl	801071c <__lo0bits>
 8010c5a:	9b01      	ldr	r3, [sp, #4]
 8010c5c:	6163      	str	r3, [r4, #20]
 8010c5e:	3020      	adds	r0, #32
 8010c60:	2201      	movs	r2, #1
 8010c62:	e7e5      	b.n	8010c30 <__d2b+0x60>
 8010c64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010c6c:	6038      	str	r0, [r7, #0]
 8010c6e:	6918      	ldr	r0, [r3, #16]
 8010c70:	f7ff fd34 	bl	80106dc <__hi0bits>
 8010c74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c78:	e7e2      	b.n	8010c40 <__d2b+0x70>
 8010c7a:	bf00      	nop
 8010c7c:	080133c4 	.word	0x080133c4
 8010c80:	080133d5 	.word	0x080133d5

08010c84 <__ssputs_r>:
 8010c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c88:	688e      	ldr	r6, [r1, #8]
 8010c8a:	461f      	mov	r7, r3
 8010c8c:	42be      	cmp	r6, r7
 8010c8e:	680b      	ldr	r3, [r1, #0]
 8010c90:	4682      	mov	sl, r0
 8010c92:	460c      	mov	r4, r1
 8010c94:	4690      	mov	r8, r2
 8010c96:	d82c      	bhi.n	8010cf2 <__ssputs_r+0x6e>
 8010c98:	898a      	ldrh	r2, [r1, #12]
 8010c9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010c9e:	d026      	beq.n	8010cee <__ssputs_r+0x6a>
 8010ca0:	6965      	ldr	r5, [r4, #20]
 8010ca2:	6909      	ldr	r1, [r1, #16]
 8010ca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ca8:	eba3 0901 	sub.w	r9, r3, r1
 8010cac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010cb0:	1c7b      	adds	r3, r7, #1
 8010cb2:	444b      	add	r3, r9
 8010cb4:	106d      	asrs	r5, r5, #1
 8010cb6:	429d      	cmp	r5, r3
 8010cb8:	bf38      	it	cc
 8010cba:	461d      	movcc	r5, r3
 8010cbc:	0553      	lsls	r3, r2, #21
 8010cbe:	d527      	bpl.n	8010d10 <__ssputs_r+0x8c>
 8010cc0:	4629      	mov	r1, r5
 8010cc2:	f7fd fefb 	bl	800eabc <_malloc_r>
 8010cc6:	4606      	mov	r6, r0
 8010cc8:	b360      	cbz	r0, 8010d24 <__ssputs_r+0xa0>
 8010cca:	6921      	ldr	r1, [r4, #16]
 8010ccc:	464a      	mov	r2, r9
 8010cce:	f7fe fd89 	bl	800f7e4 <memcpy>
 8010cd2:	89a3      	ldrh	r3, [r4, #12]
 8010cd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cdc:	81a3      	strh	r3, [r4, #12]
 8010cde:	6126      	str	r6, [r4, #16]
 8010ce0:	6165      	str	r5, [r4, #20]
 8010ce2:	444e      	add	r6, r9
 8010ce4:	eba5 0509 	sub.w	r5, r5, r9
 8010ce8:	6026      	str	r6, [r4, #0]
 8010cea:	60a5      	str	r5, [r4, #8]
 8010cec:	463e      	mov	r6, r7
 8010cee:	42be      	cmp	r6, r7
 8010cf0:	d900      	bls.n	8010cf4 <__ssputs_r+0x70>
 8010cf2:	463e      	mov	r6, r7
 8010cf4:	6820      	ldr	r0, [r4, #0]
 8010cf6:	4632      	mov	r2, r6
 8010cf8:	4641      	mov	r1, r8
 8010cfa:	f000 f9c9 	bl	8011090 <memmove>
 8010cfe:	68a3      	ldr	r3, [r4, #8]
 8010d00:	1b9b      	subs	r3, r3, r6
 8010d02:	60a3      	str	r3, [r4, #8]
 8010d04:	6823      	ldr	r3, [r4, #0]
 8010d06:	4433      	add	r3, r6
 8010d08:	6023      	str	r3, [r4, #0]
 8010d0a:	2000      	movs	r0, #0
 8010d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d10:	462a      	mov	r2, r5
 8010d12:	f000 fa1d 	bl	8011150 <_realloc_r>
 8010d16:	4606      	mov	r6, r0
 8010d18:	2800      	cmp	r0, #0
 8010d1a:	d1e0      	bne.n	8010cde <__ssputs_r+0x5a>
 8010d1c:	6921      	ldr	r1, [r4, #16]
 8010d1e:	4650      	mov	r0, sl
 8010d20:	f7ff fbe8 	bl	80104f4 <_free_r>
 8010d24:	230c      	movs	r3, #12
 8010d26:	f8ca 3000 	str.w	r3, [sl]
 8010d2a:	89a3      	ldrh	r3, [r4, #12]
 8010d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d30:	81a3      	strh	r3, [r4, #12]
 8010d32:	f04f 30ff 	mov.w	r0, #4294967295
 8010d36:	e7e9      	b.n	8010d0c <__ssputs_r+0x88>

08010d38 <_svfiprintf_r>:
 8010d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d3c:	4698      	mov	r8, r3
 8010d3e:	898b      	ldrh	r3, [r1, #12]
 8010d40:	061b      	lsls	r3, r3, #24
 8010d42:	b09d      	sub	sp, #116	; 0x74
 8010d44:	4607      	mov	r7, r0
 8010d46:	460d      	mov	r5, r1
 8010d48:	4614      	mov	r4, r2
 8010d4a:	d50e      	bpl.n	8010d6a <_svfiprintf_r+0x32>
 8010d4c:	690b      	ldr	r3, [r1, #16]
 8010d4e:	b963      	cbnz	r3, 8010d6a <_svfiprintf_r+0x32>
 8010d50:	2140      	movs	r1, #64	; 0x40
 8010d52:	f7fd feb3 	bl	800eabc <_malloc_r>
 8010d56:	6028      	str	r0, [r5, #0]
 8010d58:	6128      	str	r0, [r5, #16]
 8010d5a:	b920      	cbnz	r0, 8010d66 <_svfiprintf_r+0x2e>
 8010d5c:	230c      	movs	r3, #12
 8010d5e:	603b      	str	r3, [r7, #0]
 8010d60:	f04f 30ff 	mov.w	r0, #4294967295
 8010d64:	e0d0      	b.n	8010f08 <_svfiprintf_r+0x1d0>
 8010d66:	2340      	movs	r3, #64	; 0x40
 8010d68:	616b      	str	r3, [r5, #20]
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8010d6e:	2320      	movs	r3, #32
 8010d70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d78:	2330      	movs	r3, #48	; 0x30
 8010d7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010f20 <_svfiprintf_r+0x1e8>
 8010d7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d82:	f04f 0901 	mov.w	r9, #1
 8010d86:	4623      	mov	r3, r4
 8010d88:	469a      	mov	sl, r3
 8010d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d8e:	b10a      	cbz	r2, 8010d94 <_svfiprintf_r+0x5c>
 8010d90:	2a25      	cmp	r2, #37	; 0x25
 8010d92:	d1f9      	bne.n	8010d88 <_svfiprintf_r+0x50>
 8010d94:	ebba 0b04 	subs.w	fp, sl, r4
 8010d98:	d00b      	beq.n	8010db2 <_svfiprintf_r+0x7a>
 8010d9a:	465b      	mov	r3, fp
 8010d9c:	4622      	mov	r2, r4
 8010d9e:	4629      	mov	r1, r5
 8010da0:	4638      	mov	r0, r7
 8010da2:	f7ff ff6f 	bl	8010c84 <__ssputs_r>
 8010da6:	3001      	adds	r0, #1
 8010da8:	f000 80a9 	beq.w	8010efe <_svfiprintf_r+0x1c6>
 8010dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dae:	445a      	add	r2, fp
 8010db0:	9209      	str	r2, [sp, #36]	; 0x24
 8010db2:	f89a 3000 	ldrb.w	r3, [sl]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f000 80a1 	beq.w	8010efe <_svfiprintf_r+0x1c6>
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8010dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dc6:	f10a 0a01 	add.w	sl, sl, #1
 8010dca:	9304      	str	r3, [sp, #16]
 8010dcc:	9307      	str	r3, [sp, #28]
 8010dce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8010dd4:	4654      	mov	r4, sl
 8010dd6:	2205      	movs	r2, #5
 8010dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ddc:	4850      	ldr	r0, [pc, #320]	; (8010f20 <_svfiprintf_r+0x1e8>)
 8010dde:	f7ef fa07 	bl	80001f0 <memchr>
 8010de2:	9a04      	ldr	r2, [sp, #16]
 8010de4:	b9d8      	cbnz	r0, 8010e1e <_svfiprintf_r+0xe6>
 8010de6:	06d0      	lsls	r0, r2, #27
 8010de8:	bf44      	itt	mi
 8010dea:	2320      	movmi	r3, #32
 8010dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010df0:	0711      	lsls	r1, r2, #28
 8010df2:	bf44      	itt	mi
 8010df4:	232b      	movmi	r3, #43	; 0x2b
 8010df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8010dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8010e00:	d015      	beq.n	8010e2e <_svfiprintf_r+0xf6>
 8010e02:	9a07      	ldr	r2, [sp, #28]
 8010e04:	4654      	mov	r4, sl
 8010e06:	2000      	movs	r0, #0
 8010e08:	f04f 0c0a 	mov.w	ip, #10
 8010e0c:	4621      	mov	r1, r4
 8010e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e12:	3b30      	subs	r3, #48	; 0x30
 8010e14:	2b09      	cmp	r3, #9
 8010e16:	d94d      	bls.n	8010eb4 <_svfiprintf_r+0x17c>
 8010e18:	b1b0      	cbz	r0, 8010e48 <_svfiprintf_r+0x110>
 8010e1a:	9207      	str	r2, [sp, #28]
 8010e1c:	e014      	b.n	8010e48 <_svfiprintf_r+0x110>
 8010e1e:	eba0 0308 	sub.w	r3, r0, r8
 8010e22:	fa09 f303 	lsl.w	r3, r9, r3
 8010e26:	4313      	orrs	r3, r2
 8010e28:	9304      	str	r3, [sp, #16]
 8010e2a:	46a2      	mov	sl, r4
 8010e2c:	e7d2      	b.n	8010dd4 <_svfiprintf_r+0x9c>
 8010e2e:	9b03      	ldr	r3, [sp, #12]
 8010e30:	1d19      	adds	r1, r3, #4
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	9103      	str	r1, [sp, #12]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	bfbb      	ittet	lt
 8010e3a:	425b      	neglt	r3, r3
 8010e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8010e40:	9307      	strge	r3, [sp, #28]
 8010e42:	9307      	strlt	r3, [sp, #28]
 8010e44:	bfb8      	it	lt
 8010e46:	9204      	strlt	r2, [sp, #16]
 8010e48:	7823      	ldrb	r3, [r4, #0]
 8010e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8010e4c:	d10c      	bne.n	8010e68 <_svfiprintf_r+0x130>
 8010e4e:	7863      	ldrb	r3, [r4, #1]
 8010e50:	2b2a      	cmp	r3, #42	; 0x2a
 8010e52:	d134      	bne.n	8010ebe <_svfiprintf_r+0x186>
 8010e54:	9b03      	ldr	r3, [sp, #12]
 8010e56:	1d1a      	adds	r2, r3, #4
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	9203      	str	r2, [sp, #12]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	bfb8      	it	lt
 8010e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e64:	3402      	adds	r4, #2
 8010e66:	9305      	str	r3, [sp, #20]
 8010e68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010f30 <_svfiprintf_r+0x1f8>
 8010e6c:	7821      	ldrb	r1, [r4, #0]
 8010e6e:	2203      	movs	r2, #3
 8010e70:	4650      	mov	r0, sl
 8010e72:	f7ef f9bd 	bl	80001f0 <memchr>
 8010e76:	b138      	cbz	r0, 8010e88 <_svfiprintf_r+0x150>
 8010e78:	9b04      	ldr	r3, [sp, #16]
 8010e7a:	eba0 000a 	sub.w	r0, r0, sl
 8010e7e:	2240      	movs	r2, #64	; 0x40
 8010e80:	4082      	lsls	r2, r0
 8010e82:	4313      	orrs	r3, r2
 8010e84:	3401      	adds	r4, #1
 8010e86:	9304      	str	r3, [sp, #16]
 8010e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e8c:	4825      	ldr	r0, [pc, #148]	; (8010f24 <_svfiprintf_r+0x1ec>)
 8010e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e92:	2206      	movs	r2, #6
 8010e94:	f7ef f9ac 	bl	80001f0 <memchr>
 8010e98:	2800      	cmp	r0, #0
 8010e9a:	d038      	beq.n	8010f0e <_svfiprintf_r+0x1d6>
 8010e9c:	4b22      	ldr	r3, [pc, #136]	; (8010f28 <_svfiprintf_r+0x1f0>)
 8010e9e:	bb1b      	cbnz	r3, 8010ee8 <_svfiprintf_r+0x1b0>
 8010ea0:	9b03      	ldr	r3, [sp, #12]
 8010ea2:	3307      	adds	r3, #7
 8010ea4:	f023 0307 	bic.w	r3, r3, #7
 8010ea8:	3308      	adds	r3, #8
 8010eaa:	9303      	str	r3, [sp, #12]
 8010eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010eae:	4433      	add	r3, r6
 8010eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8010eb2:	e768      	b.n	8010d86 <_svfiprintf_r+0x4e>
 8010eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010eb8:	460c      	mov	r4, r1
 8010eba:	2001      	movs	r0, #1
 8010ebc:	e7a6      	b.n	8010e0c <_svfiprintf_r+0xd4>
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	3401      	adds	r4, #1
 8010ec2:	9305      	str	r3, [sp, #20]
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	f04f 0c0a 	mov.w	ip, #10
 8010eca:	4620      	mov	r0, r4
 8010ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ed0:	3a30      	subs	r2, #48	; 0x30
 8010ed2:	2a09      	cmp	r2, #9
 8010ed4:	d903      	bls.n	8010ede <_svfiprintf_r+0x1a6>
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d0c6      	beq.n	8010e68 <_svfiprintf_r+0x130>
 8010eda:	9105      	str	r1, [sp, #20]
 8010edc:	e7c4      	b.n	8010e68 <_svfiprintf_r+0x130>
 8010ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	e7f0      	b.n	8010eca <_svfiprintf_r+0x192>
 8010ee8:	ab03      	add	r3, sp, #12
 8010eea:	9300      	str	r3, [sp, #0]
 8010eec:	462a      	mov	r2, r5
 8010eee:	4b0f      	ldr	r3, [pc, #60]	; (8010f2c <_svfiprintf_r+0x1f4>)
 8010ef0:	a904      	add	r1, sp, #16
 8010ef2:	4638      	mov	r0, r7
 8010ef4:	f7fd ff0e 	bl	800ed14 <_printf_float>
 8010ef8:	1c42      	adds	r2, r0, #1
 8010efa:	4606      	mov	r6, r0
 8010efc:	d1d6      	bne.n	8010eac <_svfiprintf_r+0x174>
 8010efe:	89ab      	ldrh	r3, [r5, #12]
 8010f00:	065b      	lsls	r3, r3, #25
 8010f02:	f53f af2d 	bmi.w	8010d60 <_svfiprintf_r+0x28>
 8010f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f08:	b01d      	add	sp, #116	; 0x74
 8010f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f0e:	ab03      	add	r3, sp, #12
 8010f10:	9300      	str	r3, [sp, #0]
 8010f12:	462a      	mov	r2, r5
 8010f14:	4b05      	ldr	r3, [pc, #20]	; (8010f2c <_svfiprintf_r+0x1f4>)
 8010f16:	a904      	add	r1, sp, #16
 8010f18:	4638      	mov	r0, r7
 8010f1a:	f7fe f99f 	bl	800f25c <_printf_i>
 8010f1e:	e7eb      	b.n	8010ef8 <_svfiprintf_r+0x1c0>
 8010f20:	0801352c 	.word	0x0801352c
 8010f24:	08013536 	.word	0x08013536
 8010f28:	0800ed15 	.word	0x0800ed15
 8010f2c:	08010c85 	.word	0x08010c85
 8010f30:	08013532 	.word	0x08013532

08010f34 <__sflush_r>:
 8010f34:	898a      	ldrh	r2, [r1, #12]
 8010f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f3a:	4605      	mov	r5, r0
 8010f3c:	0710      	lsls	r0, r2, #28
 8010f3e:	460c      	mov	r4, r1
 8010f40:	d458      	bmi.n	8010ff4 <__sflush_r+0xc0>
 8010f42:	684b      	ldr	r3, [r1, #4]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	dc05      	bgt.n	8010f54 <__sflush_r+0x20>
 8010f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	dc02      	bgt.n	8010f54 <__sflush_r+0x20>
 8010f4e:	2000      	movs	r0, #0
 8010f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f56:	2e00      	cmp	r6, #0
 8010f58:	d0f9      	beq.n	8010f4e <__sflush_r+0x1a>
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010f60:	682f      	ldr	r7, [r5, #0]
 8010f62:	6a21      	ldr	r1, [r4, #32]
 8010f64:	602b      	str	r3, [r5, #0]
 8010f66:	d032      	beq.n	8010fce <__sflush_r+0x9a>
 8010f68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010f6a:	89a3      	ldrh	r3, [r4, #12]
 8010f6c:	075a      	lsls	r2, r3, #29
 8010f6e:	d505      	bpl.n	8010f7c <__sflush_r+0x48>
 8010f70:	6863      	ldr	r3, [r4, #4]
 8010f72:	1ac0      	subs	r0, r0, r3
 8010f74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010f76:	b10b      	cbz	r3, 8010f7c <__sflush_r+0x48>
 8010f78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010f7a:	1ac0      	subs	r0, r0, r3
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	4602      	mov	r2, r0
 8010f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010f82:	6a21      	ldr	r1, [r4, #32]
 8010f84:	4628      	mov	r0, r5
 8010f86:	47b0      	blx	r6
 8010f88:	1c43      	adds	r3, r0, #1
 8010f8a:	89a3      	ldrh	r3, [r4, #12]
 8010f8c:	d106      	bne.n	8010f9c <__sflush_r+0x68>
 8010f8e:	6829      	ldr	r1, [r5, #0]
 8010f90:	291d      	cmp	r1, #29
 8010f92:	d82b      	bhi.n	8010fec <__sflush_r+0xb8>
 8010f94:	4a29      	ldr	r2, [pc, #164]	; (801103c <__sflush_r+0x108>)
 8010f96:	410a      	asrs	r2, r1
 8010f98:	07d6      	lsls	r6, r2, #31
 8010f9a:	d427      	bmi.n	8010fec <__sflush_r+0xb8>
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	6062      	str	r2, [r4, #4]
 8010fa0:	04d9      	lsls	r1, r3, #19
 8010fa2:	6922      	ldr	r2, [r4, #16]
 8010fa4:	6022      	str	r2, [r4, #0]
 8010fa6:	d504      	bpl.n	8010fb2 <__sflush_r+0x7e>
 8010fa8:	1c42      	adds	r2, r0, #1
 8010faa:	d101      	bne.n	8010fb0 <__sflush_r+0x7c>
 8010fac:	682b      	ldr	r3, [r5, #0]
 8010fae:	b903      	cbnz	r3, 8010fb2 <__sflush_r+0x7e>
 8010fb0:	6560      	str	r0, [r4, #84]	; 0x54
 8010fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010fb4:	602f      	str	r7, [r5, #0]
 8010fb6:	2900      	cmp	r1, #0
 8010fb8:	d0c9      	beq.n	8010f4e <__sflush_r+0x1a>
 8010fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010fbe:	4299      	cmp	r1, r3
 8010fc0:	d002      	beq.n	8010fc8 <__sflush_r+0x94>
 8010fc2:	4628      	mov	r0, r5
 8010fc4:	f7ff fa96 	bl	80104f4 <_free_r>
 8010fc8:	2000      	movs	r0, #0
 8010fca:	6360      	str	r0, [r4, #52]	; 0x34
 8010fcc:	e7c0      	b.n	8010f50 <__sflush_r+0x1c>
 8010fce:	2301      	movs	r3, #1
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	47b0      	blx	r6
 8010fd4:	1c41      	adds	r1, r0, #1
 8010fd6:	d1c8      	bne.n	8010f6a <__sflush_r+0x36>
 8010fd8:	682b      	ldr	r3, [r5, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d0c5      	beq.n	8010f6a <__sflush_r+0x36>
 8010fde:	2b1d      	cmp	r3, #29
 8010fe0:	d001      	beq.n	8010fe6 <__sflush_r+0xb2>
 8010fe2:	2b16      	cmp	r3, #22
 8010fe4:	d101      	bne.n	8010fea <__sflush_r+0xb6>
 8010fe6:	602f      	str	r7, [r5, #0]
 8010fe8:	e7b1      	b.n	8010f4e <__sflush_r+0x1a>
 8010fea:	89a3      	ldrh	r3, [r4, #12]
 8010fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ff0:	81a3      	strh	r3, [r4, #12]
 8010ff2:	e7ad      	b.n	8010f50 <__sflush_r+0x1c>
 8010ff4:	690f      	ldr	r7, [r1, #16]
 8010ff6:	2f00      	cmp	r7, #0
 8010ff8:	d0a9      	beq.n	8010f4e <__sflush_r+0x1a>
 8010ffa:	0793      	lsls	r3, r2, #30
 8010ffc:	680e      	ldr	r6, [r1, #0]
 8010ffe:	bf08      	it	eq
 8011000:	694b      	ldreq	r3, [r1, #20]
 8011002:	600f      	str	r7, [r1, #0]
 8011004:	bf18      	it	ne
 8011006:	2300      	movne	r3, #0
 8011008:	eba6 0807 	sub.w	r8, r6, r7
 801100c:	608b      	str	r3, [r1, #8]
 801100e:	f1b8 0f00 	cmp.w	r8, #0
 8011012:	dd9c      	ble.n	8010f4e <__sflush_r+0x1a>
 8011014:	6a21      	ldr	r1, [r4, #32]
 8011016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011018:	4643      	mov	r3, r8
 801101a:	463a      	mov	r2, r7
 801101c:	4628      	mov	r0, r5
 801101e:	47b0      	blx	r6
 8011020:	2800      	cmp	r0, #0
 8011022:	dc06      	bgt.n	8011032 <__sflush_r+0xfe>
 8011024:	89a3      	ldrh	r3, [r4, #12]
 8011026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801102a:	81a3      	strh	r3, [r4, #12]
 801102c:	f04f 30ff 	mov.w	r0, #4294967295
 8011030:	e78e      	b.n	8010f50 <__sflush_r+0x1c>
 8011032:	4407      	add	r7, r0
 8011034:	eba8 0800 	sub.w	r8, r8, r0
 8011038:	e7e9      	b.n	801100e <__sflush_r+0xda>
 801103a:	bf00      	nop
 801103c:	dfbffffe 	.word	0xdfbffffe

08011040 <_fflush_r>:
 8011040:	b538      	push	{r3, r4, r5, lr}
 8011042:	690b      	ldr	r3, [r1, #16]
 8011044:	4605      	mov	r5, r0
 8011046:	460c      	mov	r4, r1
 8011048:	b913      	cbnz	r3, 8011050 <_fflush_r+0x10>
 801104a:	2500      	movs	r5, #0
 801104c:	4628      	mov	r0, r5
 801104e:	bd38      	pop	{r3, r4, r5, pc}
 8011050:	b118      	cbz	r0, 801105a <_fflush_r+0x1a>
 8011052:	6a03      	ldr	r3, [r0, #32]
 8011054:	b90b      	cbnz	r3, 801105a <_fflush_r+0x1a>
 8011056:	f7fe fa9d 	bl	800f594 <__sinit>
 801105a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d0f3      	beq.n	801104a <_fflush_r+0xa>
 8011062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011064:	07d0      	lsls	r0, r2, #31
 8011066:	d404      	bmi.n	8011072 <_fflush_r+0x32>
 8011068:	0599      	lsls	r1, r3, #22
 801106a:	d402      	bmi.n	8011072 <_fflush_r+0x32>
 801106c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801106e:	f7fe fbb7 	bl	800f7e0 <__retarget_lock_acquire_recursive>
 8011072:	4628      	mov	r0, r5
 8011074:	4621      	mov	r1, r4
 8011076:	f7ff ff5d 	bl	8010f34 <__sflush_r>
 801107a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801107c:	07da      	lsls	r2, r3, #31
 801107e:	4605      	mov	r5, r0
 8011080:	d4e4      	bmi.n	801104c <_fflush_r+0xc>
 8011082:	89a3      	ldrh	r3, [r4, #12]
 8011084:	059b      	lsls	r3, r3, #22
 8011086:	d4e1      	bmi.n	801104c <_fflush_r+0xc>
 8011088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801108a:	f7fe fbaa 	bl	800f7e2 <__retarget_lock_release_recursive>
 801108e:	e7dd      	b.n	801104c <_fflush_r+0xc>

08011090 <memmove>:
 8011090:	4288      	cmp	r0, r1
 8011092:	b510      	push	{r4, lr}
 8011094:	eb01 0402 	add.w	r4, r1, r2
 8011098:	d902      	bls.n	80110a0 <memmove+0x10>
 801109a:	4284      	cmp	r4, r0
 801109c:	4623      	mov	r3, r4
 801109e:	d807      	bhi.n	80110b0 <memmove+0x20>
 80110a0:	1e43      	subs	r3, r0, #1
 80110a2:	42a1      	cmp	r1, r4
 80110a4:	d008      	beq.n	80110b8 <memmove+0x28>
 80110a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110ae:	e7f8      	b.n	80110a2 <memmove+0x12>
 80110b0:	4402      	add	r2, r0
 80110b2:	4601      	mov	r1, r0
 80110b4:	428a      	cmp	r2, r1
 80110b6:	d100      	bne.n	80110ba <memmove+0x2a>
 80110b8:	bd10      	pop	{r4, pc}
 80110ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80110c2:	e7f7      	b.n	80110b4 <memmove+0x24>

080110c4 <__assert_func>:
 80110c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110c6:	4614      	mov	r4, r2
 80110c8:	461a      	mov	r2, r3
 80110ca:	4b09      	ldr	r3, [pc, #36]	; (80110f0 <__assert_func+0x2c>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	4605      	mov	r5, r0
 80110d0:	68d8      	ldr	r0, [r3, #12]
 80110d2:	b14c      	cbz	r4, 80110e8 <__assert_func+0x24>
 80110d4:	4b07      	ldr	r3, [pc, #28]	; (80110f4 <__assert_func+0x30>)
 80110d6:	9100      	str	r1, [sp, #0]
 80110d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80110dc:	4906      	ldr	r1, [pc, #24]	; (80110f8 <__assert_func+0x34>)
 80110de:	462b      	mov	r3, r5
 80110e0:	f000 f872 	bl	80111c8 <fiprintf>
 80110e4:	f000 f882 	bl	80111ec <abort>
 80110e8:	4b04      	ldr	r3, [pc, #16]	; (80110fc <__assert_func+0x38>)
 80110ea:	461c      	mov	r4, r3
 80110ec:	e7f3      	b.n	80110d6 <__assert_func+0x12>
 80110ee:	bf00      	nop
 80110f0:	200001d4 	.word	0x200001d4
 80110f4:	08013547 	.word	0x08013547
 80110f8:	08013554 	.word	0x08013554
 80110fc:	08013582 	.word	0x08013582

08011100 <_calloc_r>:
 8011100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011102:	fba1 2402 	umull	r2, r4, r1, r2
 8011106:	b94c      	cbnz	r4, 801111c <_calloc_r+0x1c>
 8011108:	4611      	mov	r1, r2
 801110a:	9201      	str	r2, [sp, #4]
 801110c:	f7fd fcd6 	bl	800eabc <_malloc_r>
 8011110:	9a01      	ldr	r2, [sp, #4]
 8011112:	4605      	mov	r5, r0
 8011114:	b930      	cbnz	r0, 8011124 <_calloc_r+0x24>
 8011116:	4628      	mov	r0, r5
 8011118:	b003      	add	sp, #12
 801111a:	bd30      	pop	{r4, r5, pc}
 801111c:	220c      	movs	r2, #12
 801111e:	6002      	str	r2, [r0, #0]
 8011120:	2500      	movs	r5, #0
 8011122:	e7f8      	b.n	8011116 <_calloc_r+0x16>
 8011124:	4621      	mov	r1, r4
 8011126:	f7fe face 	bl	800f6c6 <memset>
 801112a:	e7f4      	b.n	8011116 <_calloc_r+0x16>

0801112c <__ascii_mbtowc>:
 801112c:	b082      	sub	sp, #8
 801112e:	b901      	cbnz	r1, 8011132 <__ascii_mbtowc+0x6>
 8011130:	a901      	add	r1, sp, #4
 8011132:	b142      	cbz	r2, 8011146 <__ascii_mbtowc+0x1a>
 8011134:	b14b      	cbz	r3, 801114a <__ascii_mbtowc+0x1e>
 8011136:	7813      	ldrb	r3, [r2, #0]
 8011138:	600b      	str	r3, [r1, #0]
 801113a:	7812      	ldrb	r2, [r2, #0]
 801113c:	1e10      	subs	r0, r2, #0
 801113e:	bf18      	it	ne
 8011140:	2001      	movne	r0, #1
 8011142:	b002      	add	sp, #8
 8011144:	4770      	bx	lr
 8011146:	4610      	mov	r0, r2
 8011148:	e7fb      	b.n	8011142 <__ascii_mbtowc+0x16>
 801114a:	f06f 0001 	mvn.w	r0, #1
 801114e:	e7f8      	b.n	8011142 <__ascii_mbtowc+0x16>

08011150 <_realloc_r>:
 8011150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011154:	4680      	mov	r8, r0
 8011156:	4614      	mov	r4, r2
 8011158:	460e      	mov	r6, r1
 801115a:	b921      	cbnz	r1, 8011166 <_realloc_r+0x16>
 801115c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011160:	4611      	mov	r1, r2
 8011162:	f7fd bcab 	b.w	800eabc <_malloc_r>
 8011166:	b92a      	cbnz	r2, 8011174 <_realloc_r+0x24>
 8011168:	f7ff f9c4 	bl	80104f4 <_free_r>
 801116c:	4625      	mov	r5, r4
 801116e:	4628      	mov	r0, r5
 8011170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011174:	f000 f841 	bl	80111fa <_malloc_usable_size_r>
 8011178:	4284      	cmp	r4, r0
 801117a:	4607      	mov	r7, r0
 801117c:	d802      	bhi.n	8011184 <_realloc_r+0x34>
 801117e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011182:	d812      	bhi.n	80111aa <_realloc_r+0x5a>
 8011184:	4621      	mov	r1, r4
 8011186:	4640      	mov	r0, r8
 8011188:	f7fd fc98 	bl	800eabc <_malloc_r>
 801118c:	4605      	mov	r5, r0
 801118e:	2800      	cmp	r0, #0
 8011190:	d0ed      	beq.n	801116e <_realloc_r+0x1e>
 8011192:	42bc      	cmp	r4, r7
 8011194:	4622      	mov	r2, r4
 8011196:	4631      	mov	r1, r6
 8011198:	bf28      	it	cs
 801119a:	463a      	movcs	r2, r7
 801119c:	f7fe fb22 	bl	800f7e4 <memcpy>
 80111a0:	4631      	mov	r1, r6
 80111a2:	4640      	mov	r0, r8
 80111a4:	f7ff f9a6 	bl	80104f4 <_free_r>
 80111a8:	e7e1      	b.n	801116e <_realloc_r+0x1e>
 80111aa:	4635      	mov	r5, r6
 80111ac:	e7df      	b.n	801116e <_realloc_r+0x1e>

080111ae <__ascii_wctomb>:
 80111ae:	b149      	cbz	r1, 80111c4 <__ascii_wctomb+0x16>
 80111b0:	2aff      	cmp	r2, #255	; 0xff
 80111b2:	bf85      	ittet	hi
 80111b4:	238a      	movhi	r3, #138	; 0x8a
 80111b6:	6003      	strhi	r3, [r0, #0]
 80111b8:	700a      	strbls	r2, [r1, #0]
 80111ba:	f04f 30ff 	movhi.w	r0, #4294967295
 80111be:	bf98      	it	ls
 80111c0:	2001      	movls	r0, #1
 80111c2:	4770      	bx	lr
 80111c4:	4608      	mov	r0, r1
 80111c6:	4770      	bx	lr

080111c8 <fiprintf>:
 80111c8:	b40e      	push	{r1, r2, r3}
 80111ca:	b503      	push	{r0, r1, lr}
 80111cc:	4601      	mov	r1, r0
 80111ce:	ab03      	add	r3, sp, #12
 80111d0:	4805      	ldr	r0, [pc, #20]	; (80111e8 <fiprintf+0x20>)
 80111d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80111d6:	6800      	ldr	r0, [r0, #0]
 80111d8:	9301      	str	r3, [sp, #4]
 80111da:	f000 f83f 	bl	801125c <_vfiprintf_r>
 80111de:	b002      	add	sp, #8
 80111e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80111e4:	b003      	add	sp, #12
 80111e6:	4770      	bx	lr
 80111e8:	200001d4 	.word	0x200001d4

080111ec <abort>:
 80111ec:	b508      	push	{r3, lr}
 80111ee:	2006      	movs	r0, #6
 80111f0:	f000 fa0c 	bl	801160c <raise>
 80111f4:	2001      	movs	r0, #1
 80111f6:	f7f0 f9bd 	bl	8001574 <_exit>

080111fa <_malloc_usable_size_r>:
 80111fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111fe:	1f18      	subs	r0, r3, #4
 8011200:	2b00      	cmp	r3, #0
 8011202:	bfbc      	itt	lt
 8011204:	580b      	ldrlt	r3, [r1, r0]
 8011206:	18c0      	addlt	r0, r0, r3
 8011208:	4770      	bx	lr

0801120a <__sfputc_r>:
 801120a:	6893      	ldr	r3, [r2, #8]
 801120c:	3b01      	subs	r3, #1
 801120e:	2b00      	cmp	r3, #0
 8011210:	b410      	push	{r4}
 8011212:	6093      	str	r3, [r2, #8]
 8011214:	da08      	bge.n	8011228 <__sfputc_r+0x1e>
 8011216:	6994      	ldr	r4, [r2, #24]
 8011218:	42a3      	cmp	r3, r4
 801121a:	db01      	blt.n	8011220 <__sfputc_r+0x16>
 801121c:	290a      	cmp	r1, #10
 801121e:	d103      	bne.n	8011228 <__sfputc_r+0x1e>
 8011220:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011224:	f000 b934 	b.w	8011490 <__swbuf_r>
 8011228:	6813      	ldr	r3, [r2, #0]
 801122a:	1c58      	adds	r0, r3, #1
 801122c:	6010      	str	r0, [r2, #0]
 801122e:	7019      	strb	r1, [r3, #0]
 8011230:	4608      	mov	r0, r1
 8011232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011236:	4770      	bx	lr

08011238 <__sfputs_r>:
 8011238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801123a:	4606      	mov	r6, r0
 801123c:	460f      	mov	r7, r1
 801123e:	4614      	mov	r4, r2
 8011240:	18d5      	adds	r5, r2, r3
 8011242:	42ac      	cmp	r4, r5
 8011244:	d101      	bne.n	801124a <__sfputs_r+0x12>
 8011246:	2000      	movs	r0, #0
 8011248:	e007      	b.n	801125a <__sfputs_r+0x22>
 801124a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801124e:	463a      	mov	r2, r7
 8011250:	4630      	mov	r0, r6
 8011252:	f7ff ffda 	bl	801120a <__sfputc_r>
 8011256:	1c43      	adds	r3, r0, #1
 8011258:	d1f3      	bne.n	8011242 <__sfputs_r+0xa>
 801125a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801125c <_vfiprintf_r>:
 801125c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011260:	460d      	mov	r5, r1
 8011262:	b09d      	sub	sp, #116	; 0x74
 8011264:	4614      	mov	r4, r2
 8011266:	4698      	mov	r8, r3
 8011268:	4606      	mov	r6, r0
 801126a:	b118      	cbz	r0, 8011274 <_vfiprintf_r+0x18>
 801126c:	6a03      	ldr	r3, [r0, #32]
 801126e:	b90b      	cbnz	r3, 8011274 <_vfiprintf_r+0x18>
 8011270:	f7fe f990 	bl	800f594 <__sinit>
 8011274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011276:	07d9      	lsls	r1, r3, #31
 8011278:	d405      	bmi.n	8011286 <_vfiprintf_r+0x2a>
 801127a:	89ab      	ldrh	r3, [r5, #12]
 801127c:	059a      	lsls	r2, r3, #22
 801127e:	d402      	bmi.n	8011286 <_vfiprintf_r+0x2a>
 8011280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011282:	f7fe faad 	bl	800f7e0 <__retarget_lock_acquire_recursive>
 8011286:	89ab      	ldrh	r3, [r5, #12]
 8011288:	071b      	lsls	r3, r3, #28
 801128a:	d501      	bpl.n	8011290 <_vfiprintf_r+0x34>
 801128c:	692b      	ldr	r3, [r5, #16]
 801128e:	b99b      	cbnz	r3, 80112b8 <_vfiprintf_r+0x5c>
 8011290:	4629      	mov	r1, r5
 8011292:	4630      	mov	r0, r6
 8011294:	f000 f93a 	bl	801150c <__swsetup_r>
 8011298:	b170      	cbz	r0, 80112b8 <_vfiprintf_r+0x5c>
 801129a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801129c:	07dc      	lsls	r4, r3, #31
 801129e:	d504      	bpl.n	80112aa <_vfiprintf_r+0x4e>
 80112a0:	f04f 30ff 	mov.w	r0, #4294967295
 80112a4:	b01d      	add	sp, #116	; 0x74
 80112a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112aa:	89ab      	ldrh	r3, [r5, #12]
 80112ac:	0598      	lsls	r0, r3, #22
 80112ae:	d4f7      	bmi.n	80112a0 <_vfiprintf_r+0x44>
 80112b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112b2:	f7fe fa96 	bl	800f7e2 <__retarget_lock_release_recursive>
 80112b6:	e7f3      	b.n	80112a0 <_vfiprintf_r+0x44>
 80112b8:	2300      	movs	r3, #0
 80112ba:	9309      	str	r3, [sp, #36]	; 0x24
 80112bc:	2320      	movs	r3, #32
 80112be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80112c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80112c6:	2330      	movs	r3, #48	; 0x30
 80112c8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801147c <_vfiprintf_r+0x220>
 80112cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80112d0:	f04f 0901 	mov.w	r9, #1
 80112d4:	4623      	mov	r3, r4
 80112d6:	469a      	mov	sl, r3
 80112d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112dc:	b10a      	cbz	r2, 80112e2 <_vfiprintf_r+0x86>
 80112de:	2a25      	cmp	r2, #37	; 0x25
 80112e0:	d1f9      	bne.n	80112d6 <_vfiprintf_r+0x7a>
 80112e2:	ebba 0b04 	subs.w	fp, sl, r4
 80112e6:	d00b      	beq.n	8011300 <_vfiprintf_r+0xa4>
 80112e8:	465b      	mov	r3, fp
 80112ea:	4622      	mov	r2, r4
 80112ec:	4629      	mov	r1, r5
 80112ee:	4630      	mov	r0, r6
 80112f0:	f7ff ffa2 	bl	8011238 <__sfputs_r>
 80112f4:	3001      	adds	r0, #1
 80112f6:	f000 80a9 	beq.w	801144c <_vfiprintf_r+0x1f0>
 80112fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80112fc:	445a      	add	r2, fp
 80112fe:	9209      	str	r2, [sp, #36]	; 0x24
 8011300:	f89a 3000 	ldrb.w	r3, [sl]
 8011304:	2b00      	cmp	r3, #0
 8011306:	f000 80a1 	beq.w	801144c <_vfiprintf_r+0x1f0>
 801130a:	2300      	movs	r3, #0
 801130c:	f04f 32ff 	mov.w	r2, #4294967295
 8011310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011314:	f10a 0a01 	add.w	sl, sl, #1
 8011318:	9304      	str	r3, [sp, #16]
 801131a:	9307      	str	r3, [sp, #28]
 801131c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011320:	931a      	str	r3, [sp, #104]	; 0x68
 8011322:	4654      	mov	r4, sl
 8011324:	2205      	movs	r2, #5
 8011326:	f814 1b01 	ldrb.w	r1, [r4], #1
 801132a:	4854      	ldr	r0, [pc, #336]	; (801147c <_vfiprintf_r+0x220>)
 801132c:	f7ee ff60 	bl	80001f0 <memchr>
 8011330:	9a04      	ldr	r2, [sp, #16]
 8011332:	b9d8      	cbnz	r0, 801136c <_vfiprintf_r+0x110>
 8011334:	06d1      	lsls	r1, r2, #27
 8011336:	bf44      	itt	mi
 8011338:	2320      	movmi	r3, #32
 801133a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801133e:	0713      	lsls	r3, r2, #28
 8011340:	bf44      	itt	mi
 8011342:	232b      	movmi	r3, #43	; 0x2b
 8011344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011348:	f89a 3000 	ldrb.w	r3, [sl]
 801134c:	2b2a      	cmp	r3, #42	; 0x2a
 801134e:	d015      	beq.n	801137c <_vfiprintf_r+0x120>
 8011350:	9a07      	ldr	r2, [sp, #28]
 8011352:	4654      	mov	r4, sl
 8011354:	2000      	movs	r0, #0
 8011356:	f04f 0c0a 	mov.w	ip, #10
 801135a:	4621      	mov	r1, r4
 801135c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011360:	3b30      	subs	r3, #48	; 0x30
 8011362:	2b09      	cmp	r3, #9
 8011364:	d94d      	bls.n	8011402 <_vfiprintf_r+0x1a6>
 8011366:	b1b0      	cbz	r0, 8011396 <_vfiprintf_r+0x13a>
 8011368:	9207      	str	r2, [sp, #28]
 801136a:	e014      	b.n	8011396 <_vfiprintf_r+0x13a>
 801136c:	eba0 0308 	sub.w	r3, r0, r8
 8011370:	fa09 f303 	lsl.w	r3, r9, r3
 8011374:	4313      	orrs	r3, r2
 8011376:	9304      	str	r3, [sp, #16]
 8011378:	46a2      	mov	sl, r4
 801137a:	e7d2      	b.n	8011322 <_vfiprintf_r+0xc6>
 801137c:	9b03      	ldr	r3, [sp, #12]
 801137e:	1d19      	adds	r1, r3, #4
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	9103      	str	r1, [sp, #12]
 8011384:	2b00      	cmp	r3, #0
 8011386:	bfbb      	ittet	lt
 8011388:	425b      	neglt	r3, r3
 801138a:	f042 0202 	orrlt.w	r2, r2, #2
 801138e:	9307      	strge	r3, [sp, #28]
 8011390:	9307      	strlt	r3, [sp, #28]
 8011392:	bfb8      	it	lt
 8011394:	9204      	strlt	r2, [sp, #16]
 8011396:	7823      	ldrb	r3, [r4, #0]
 8011398:	2b2e      	cmp	r3, #46	; 0x2e
 801139a:	d10c      	bne.n	80113b6 <_vfiprintf_r+0x15a>
 801139c:	7863      	ldrb	r3, [r4, #1]
 801139e:	2b2a      	cmp	r3, #42	; 0x2a
 80113a0:	d134      	bne.n	801140c <_vfiprintf_r+0x1b0>
 80113a2:	9b03      	ldr	r3, [sp, #12]
 80113a4:	1d1a      	adds	r2, r3, #4
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	9203      	str	r2, [sp, #12]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	bfb8      	it	lt
 80113ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80113b2:	3402      	adds	r4, #2
 80113b4:	9305      	str	r3, [sp, #20]
 80113b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801148c <_vfiprintf_r+0x230>
 80113ba:	7821      	ldrb	r1, [r4, #0]
 80113bc:	2203      	movs	r2, #3
 80113be:	4650      	mov	r0, sl
 80113c0:	f7ee ff16 	bl	80001f0 <memchr>
 80113c4:	b138      	cbz	r0, 80113d6 <_vfiprintf_r+0x17a>
 80113c6:	9b04      	ldr	r3, [sp, #16]
 80113c8:	eba0 000a 	sub.w	r0, r0, sl
 80113cc:	2240      	movs	r2, #64	; 0x40
 80113ce:	4082      	lsls	r2, r0
 80113d0:	4313      	orrs	r3, r2
 80113d2:	3401      	adds	r4, #1
 80113d4:	9304      	str	r3, [sp, #16]
 80113d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113da:	4829      	ldr	r0, [pc, #164]	; (8011480 <_vfiprintf_r+0x224>)
 80113dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80113e0:	2206      	movs	r2, #6
 80113e2:	f7ee ff05 	bl	80001f0 <memchr>
 80113e6:	2800      	cmp	r0, #0
 80113e8:	d03f      	beq.n	801146a <_vfiprintf_r+0x20e>
 80113ea:	4b26      	ldr	r3, [pc, #152]	; (8011484 <_vfiprintf_r+0x228>)
 80113ec:	bb1b      	cbnz	r3, 8011436 <_vfiprintf_r+0x1da>
 80113ee:	9b03      	ldr	r3, [sp, #12]
 80113f0:	3307      	adds	r3, #7
 80113f2:	f023 0307 	bic.w	r3, r3, #7
 80113f6:	3308      	adds	r3, #8
 80113f8:	9303      	str	r3, [sp, #12]
 80113fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113fc:	443b      	add	r3, r7
 80113fe:	9309      	str	r3, [sp, #36]	; 0x24
 8011400:	e768      	b.n	80112d4 <_vfiprintf_r+0x78>
 8011402:	fb0c 3202 	mla	r2, ip, r2, r3
 8011406:	460c      	mov	r4, r1
 8011408:	2001      	movs	r0, #1
 801140a:	e7a6      	b.n	801135a <_vfiprintf_r+0xfe>
 801140c:	2300      	movs	r3, #0
 801140e:	3401      	adds	r4, #1
 8011410:	9305      	str	r3, [sp, #20]
 8011412:	4619      	mov	r1, r3
 8011414:	f04f 0c0a 	mov.w	ip, #10
 8011418:	4620      	mov	r0, r4
 801141a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801141e:	3a30      	subs	r2, #48	; 0x30
 8011420:	2a09      	cmp	r2, #9
 8011422:	d903      	bls.n	801142c <_vfiprintf_r+0x1d0>
 8011424:	2b00      	cmp	r3, #0
 8011426:	d0c6      	beq.n	80113b6 <_vfiprintf_r+0x15a>
 8011428:	9105      	str	r1, [sp, #20]
 801142a:	e7c4      	b.n	80113b6 <_vfiprintf_r+0x15a>
 801142c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011430:	4604      	mov	r4, r0
 8011432:	2301      	movs	r3, #1
 8011434:	e7f0      	b.n	8011418 <_vfiprintf_r+0x1bc>
 8011436:	ab03      	add	r3, sp, #12
 8011438:	9300      	str	r3, [sp, #0]
 801143a:	462a      	mov	r2, r5
 801143c:	4b12      	ldr	r3, [pc, #72]	; (8011488 <_vfiprintf_r+0x22c>)
 801143e:	a904      	add	r1, sp, #16
 8011440:	4630      	mov	r0, r6
 8011442:	f7fd fc67 	bl	800ed14 <_printf_float>
 8011446:	4607      	mov	r7, r0
 8011448:	1c78      	adds	r0, r7, #1
 801144a:	d1d6      	bne.n	80113fa <_vfiprintf_r+0x19e>
 801144c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801144e:	07d9      	lsls	r1, r3, #31
 8011450:	d405      	bmi.n	801145e <_vfiprintf_r+0x202>
 8011452:	89ab      	ldrh	r3, [r5, #12]
 8011454:	059a      	lsls	r2, r3, #22
 8011456:	d402      	bmi.n	801145e <_vfiprintf_r+0x202>
 8011458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801145a:	f7fe f9c2 	bl	800f7e2 <__retarget_lock_release_recursive>
 801145e:	89ab      	ldrh	r3, [r5, #12]
 8011460:	065b      	lsls	r3, r3, #25
 8011462:	f53f af1d 	bmi.w	80112a0 <_vfiprintf_r+0x44>
 8011466:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011468:	e71c      	b.n	80112a4 <_vfiprintf_r+0x48>
 801146a:	ab03      	add	r3, sp, #12
 801146c:	9300      	str	r3, [sp, #0]
 801146e:	462a      	mov	r2, r5
 8011470:	4b05      	ldr	r3, [pc, #20]	; (8011488 <_vfiprintf_r+0x22c>)
 8011472:	a904      	add	r1, sp, #16
 8011474:	4630      	mov	r0, r6
 8011476:	f7fd fef1 	bl	800f25c <_printf_i>
 801147a:	e7e4      	b.n	8011446 <_vfiprintf_r+0x1ea>
 801147c:	0801352c 	.word	0x0801352c
 8011480:	08013536 	.word	0x08013536
 8011484:	0800ed15 	.word	0x0800ed15
 8011488:	08011239 	.word	0x08011239
 801148c:	08013532 	.word	0x08013532

08011490 <__swbuf_r>:
 8011490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011492:	460e      	mov	r6, r1
 8011494:	4614      	mov	r4, r2
 8011496:	4605      	mov	r5, r0
 8011498:	b118      	cbz	r0, 80114a2 <__swbuf_r+0x12>
 801149a:	6a03      	ldr	r3, [r0, #32]
 801149c:	b90b      	cbnz	r3, 80114a2 <__swbuf_r+0x12>
 801149e:	f7fe f879 	bl	800f594 <__sinit>
 80114a2:	69a3      	ldr	r3, [r4, #24]
 80114a4:	60a3      	str	r3, [r4, #8]
 80114a6:	89a3      	ldrh	r3, [r4, #12]
 80114a8:	071a      	lsls	r2, r3, #28
 80114aa:	d525      	bpl.n	80114f8 <__swbuf_r+0x68>
 80114ac:	6923      	ldr	r3, [r4, #16]
 80114ae:	b31b      	cbz	r3, 80114f8 <__swbuf_r+0x68>
 80114b0:	6823      	ldr	r3, [r4, #0]
 80114b2:	6922      	ldr	r2, [r4, #16]
 80114b4:	1a98      	subs	r0, r3, r2
 80114b6:	6963      	ldr	r3, [r4, #20]
 80114b8:	b2f6      	uxtb	r6, r6
 80114ba:	4283      	cmp	r3, r0
 80114bc:	4637      	mov	r7, r6
 80114be:	dc04      	bgt.n	80114ca <__swbuf_r+0x3a>
 80114c0:	4621      	mov	r1, r4
 80114c2:	4628      	mov	r0, r5
 80114c4:	f7ff fdbc 	bl	8011040 <_fflush_r>
 80114c8:	b9e0      	cbnz	r0, 8011504 <__swbuf_r+0x74>
 80114ca:	68a3      	ldr	r3, [r4, #8]
 80114cc:	3b01      	subs	r3, #1
 80114ce:	60a3      	str	r3, [r4, #8]
 80114d0:	6823      	ldr	r3, [r4, #0]
 80114d2:	1c5a      	adds	r2, r3, #1
 80114d4:	6022      	str	r2, [r4, #0]
 80114d6:	701e      	strb	r6, [r3, #0]
 80114d8:	6962      	ldr	r2, [r4, #20]
 80114da:	1c43      	adds	r3, r0, #1
 80114dc:	429a      	cmp	r2, r3
 80114de:	d004      	beq.n	80114ea <__swbuf_r+0x5a>
 80114e0:	89a3      	ldrh	r3, [r4, #12]
 80114e2:	07db      	lsls	r3, r3, #31
 80114e4:	d506      	bpl.n	80114f4 <__swbuf_r+0x64>
 80114e6:	2e0a      	cmp	r6, #10
 80114e8:	d104      	bne.n	80114f4 <__swbuf_r+0x64>
 80114ea:	4621      	mov	r1, r4
 80114ec:	4628      	mov	r0, r5
 80114ee:	f7ff fda7 	bl	8011040 <_fflush_r>
 80114f2:	b938      	cbnz	r0, 8011504 <__swbuf_r+0x74>
 80114f4:	4638      	mov	r0, r7
 80114f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114f8:	4621      	mov	r1, r4
 80114fa:	4628      	mov	r0, r5
 80114fc:	f000 f806 	bl	801150c <__swsetup_r>
 8011500:	2800      	cmp	r0, #0
 8011502:	d0d5      	beq.n	80114b0 <__swbuf_r+0x20>
 8011504:	f04f 37ff 	mov.w	r7, #4294967295
 8011508:	e7f4      	b.n	80114f4 <__swbuf_r+0x64>
	...

0801150c <__swsetup_r>:
 801150c:	b538      	push	{r3, r4, r5, lr}
 801150e:	4b2a      	ldr	r3, [pc, #168]	; (80115b8 <__swsetup_r+0xac>)
 8011510:	4605      	mov	r5, r0
 8011512:	6818      	ldr	r0, [r3, #0]
 8011514:	460c      	mov	r4, r1
 8011516:	b118      	cbz	r0, 8011520 <__swsetup_r+0x14>
 8011518:	6a03      	ldr	r3, [r0, #32]
 801151a:	b90b      	cbnz	r3, 8011520 <__swsetup_r+0x14>
 801151c:	f7fe f83a 	bl	800f594 <__sinit>
 8011520:	89a3      	ldrh	r3, [r4, #12]
 8011522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011526:	0718      	lsls	r0, r3, #28
 8011528:	d422      	bmi.n	8011570 <__swsetup_r+0x64>
 801152a:	06d9      	lsls	r1, r3, #27
 801152c:	d407      	bmi.n	801153e <__swsetup_r+0x32>
 801152e:	2309      	movs	r3, #9
 8011530:	602b      	str	r3, [r5, #0]
 8011532:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011536:	81a3      	strh	r3, [r4, #12]
 8011538:	f04f 30ff 	mov.w	r0, #4294967295
 801153c:	e034      	b.n	80115a8 <__swsetup_r+0x9c>
 801153e:	0758      	lsls	r0, r3, #29
 8011540:	d512      	bpl.n	8011568 <__swsetup_r+0x5c>
 8011542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011544:	b141      	cbz	r1, 8011558 <__swsetup_r+0x4c>
 8011546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801154a:	4299      	cmp	r1, r3
 801154c:	d002      	beq.n	8011554 <__swsetup_r+0x48>
 801154e:	4628      	mov	r0, r5
 8011550:	f7fe ffd0 	bl	80104f4 <_free_r>
 8011554:	2300      	movs	r3, #0
 8011556:	6363      	str	r3, [r4, #52]	; 0x34
 8011558:	89a3      	ldrh	r3, [r4, #12]
 801155a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801155e:	81a3      	strh	r3, [r4, #12]
 8011560:	2300      	movs	r3, #0
 8011562:	6063      	str	r3, [r4, #4]
 8011564:	6923      	ldr	r3, [r4, #16]
 8011566:	6023      	str	r3, [r4, #0]
 8011568:	89a3      	ldrh	r3, [r4, #12]
 801156a:	f043 0308 	orr.w	r3, r3, #8
 801156e:	81a3      	strh	r3, [r4, #12]
 8011570:	6923      	ldr	r3, [r4, #16]
 8011572:	b94b      	cbnz	r3, 8011588 <__swsetup_r+0x7c>
 8011574:	89a3      	ldrh	r3, [r4, #12]
 8011576:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801157a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801157e:	d003      	beq.n	8011588 <__swsetup_r+0x7c>
 8011580:	4621      	mov	r1, r4
 8011582:	4628      	mov	r0, r5
 8011584:	f000 f884 	bl	8011690 <__smakebuf_r>
 8011588:	89a0      	ldrh	r0, [r4, #12]
 801158a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801158e:	f010 0301 	ands.w	r3, r0, #1
 8011592:	d00a      	beq.n	80115aa <__swsetup_r+0x9e>
 8011594:	2300      	movs	r3, #0
 8011596:	60a3      	str	r3, [r4, #8]
 8011598:	6963      	ldr	r3, [r4, #20]
 801159a:	425b      	negs	r3, r3
 801159c:	61a3      	str	r3, [r4, #24]
 801159e:	6923      	ldr	r3, [r4, #16]
 80115a0:	b943      	cbnz	r3, 80115b4 <__swsetup_r+0xa8>
 80115a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80115a6:	d1c4      	bne.n	8011532 <__swsetup_r+0x26>
 80115a8:	bd38      	pop	{r3, r4, r5, pc}
 80115aa:	0781      	lsls	r1, r0, #30
 80115ac:	bf58      	it	pl
 80115ae:	6963      	ldrpl	r3, [r4, #20]
 80115b0:	60a3      	str	r3, [r4, #8]
 80115b2:	e7f4      	b.n	801159e <__swsetup_r+0x92>
 80115b4:	2000      	movs	r0, #0
 80115b6:	e7f7      	b.n	80115a8 <__swsetup_r+0x9c>
 80115b8:	200001d4 	.word	0x200001d4

080115bc <_raise_r>:
 80115bc:	291f      	cmp	r1, #31
 80115be:	b538      	push	{r3, r4, r5, lr}
 80115c0:	4604      	mov	r4, r0
 80115c2:	460d      	mov	r5, r1
 80115c4:	d904      	bls.n	80115d0 <_raise_r+0x14>
 80115c6:	2316      	movs	r3, #22
 80115c8:	6003      	str	r3, [r0, #0]
 80115ca:	f04f 30ff 	mov.w	r0, #4294967295
 80115ce:	bd38      	pop	{r3, r4, r5, pc}
 80115d0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80115d2:	b112      	cbz	r2, 80115da <_raise_r+0x1e>
 80115d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80115d8:	b94b      	cbnz	r3, 80115ee <_raise_r+0x32>
 80115da:	4620      	mov	r0, r4
 80115dc:	f000 f830 	bl	8011640 <_getpid_r>
 80115e0:	462a      	mov	r2, r5
 80115e2:	4601      	mov	r1, r0
 80115e4:	4620      	mov	r0, r4
 80115e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115ea:	f000 b817 	b.w	801161c <_kill_r>
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	d00a      	beq.n	8011608 <_raise_r+0x4c>
 80115f2:	1c59      	adds	r1, r3, #1
 80115f4:	d103      	bne.n	80115fe <_raise_r+0x42>
 80115f6:	2316      	movs	r3, #22
 80115f8:	6003      	str	r3, [r0, #0]
 80115fa:	2001      	movs	r0, #1
 80115fc:	e7e7      	b.n	80115ce <_raise_r+0x12>
 80115fe:	2400      	movs	r4, #0
 8011600:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011604:	4628      	mov	r0, r5
 8011606:	4798      	blx	r3
 8011608:	2000      	movs	r0, #0
 801160a:	e7e0      	b.n	80115ce <_raise_r+0x12>

0801160c <raise>:
 801160c:	4b02      	ldr	r3, [pc, #8]	; (8011618 <raise+0xc>)
 801160e:	4601      	mov	r1, r0
 8011610:	6818      	ldr	r0, [r3, #0]
 8011612:	f7ff bfd3 	b.w	80115bc <_raise_r>
 8011616:	bf00      	nop
 8011618:	200001d4 	.word	0x200001d4

0801161c <_kill_r>:
 801161c:	b538      	push	{r3, r4, r5, lr}
 801161e:	4d07      	ldr	r5, [pc, #28]	; (801163c <_kill_r+0x20>)
 8011620:	2300      	movs	r3, #0
 8011622:	4604      	mov	r4, r0
 8011624:	4608      	mov	r0, r1
 8011626:	4611      	mov	r1, r2
 8011628:	602b      	str	r3, [r5, #0]
 801162a:	f7ef ff93 	bl	8001554 <_kill>
 801162e:	1c43      	adds	r3, r0, #1
 8011630:	d102      	bne.n	8011638 <_kill_r+0x1c>
 8011632:	682b      	ldr	r3, [r5, #0]
 8011634:	b103      	cbz	r3, 8011638 <_kill_r+0x1c>
 8011636:	6023      	str	r3, [r4, #0]
 8011638:	bd38      	pop	{r3, r4, r5, pc}
 801163a:	bf00      	nop
 801163c:	20006318 	.word	0x20006318

08011640 <_getpid_r>:
 8011640:	f7ef bf80 	b.w	8001544 <_getpid>

08011644 <__swhatbuf_r>:
 8011644:	b570      	push	{r4, r5, r6, lr}
 8011646:	460c      	mov	r4, r1
 8011648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801164c:	2900      	cmp	r1, #0
 801164e:	b096      	sub	sp, #88	; 0x58
 8011650:	4615      	mov	r5, r2
 8011652:	461e      	mov	r6, r3
 8011654:	da0d      	bge.n	8011672 <__swhatbuf_r+0x2e>
 8011656:	89a3      	ldrh	r3, [r4, #12]
 8011658:	f013 0f80 	tst.w	r3, #128	; 0x80
 801165c:	f04f 0100 	mov.w	r1, #0
 8011660:	bf0c      	ite	eq
 8011662:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011666:	2340      	movne	r3, #64	; 0x40
 8011668:	2000      	movs	r0, #0
 801166a:	6031      	str	r1, [r6, #0]
 801166c:	602b      	str	r3, [r5, #0]
 801166e:	b016      	add	sp, #88	; 0x58
 8011670:	bd70      	pop	{r4, r5, r6, pc}
 8011672:	466a      	mov	r2, sp
 8011674:	f000 f848 	bl	8011708 <_fstat_r>
 8011678:	2800      	cmp	r0, #0
 801167a:	dbec      	blt.n	8011656 <__swhatbuf_r+0x12>
 801167c:	9901      	ldr	r1, [sp, #4]
 801167e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011682:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011686:	4259      	negs	r1, r3
 8011688:	4159      	adcs	r1, r3
 801168a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801168e:	e7eb      	b.n	8011668 <__swhatbuf_r+0x24>

08011690 <__smakebuf_r>:
 8011690:	898b      	ldrh	r3, [r1, #12]
 8011692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011694:	079d      	lsls	r5, r3, #30
 8011696:	4606      	mov	r6, r0
 8011698:	460c      	mov	r4, r1
 801169a:	d507      	bpl.n	80116ac <__smakebuf_r+0x1c>
 801169c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80116a0:	6023      	str	r3, [r4, #0]
 80116a2:	6123      	str	r3, [r4, #16]
 80116a4:	2301      	movs	r3, #1
 80116a6:	6163      	str	r3, [r4, #20]
 80116a8:	b002      	add	sp, #8
 80116aa:	bd70      	pop	{r4, r5, r6, pc}
 80116ac:	ab01      	add	r3, sp, #4
 80116ae:	466a      	mov	r2, sp
 80116b0:	f7ff ffc8 	bl	8011644 <__swhatbuf_r>
 80116b4:	9900      	ldr	r1, [sp, #0]
 80116b6:	4605      	mov	r5, r0
 80116b8:	4630      	mov	r0, r6
 80116ba:	f7fd f9ff 	bl	800eabc <_malloc_r>
 80116be:	b948      	cbnz	r0, 80116d4 <__smakebuf_r+0x44>
 80116c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116c4:	059a      	lsls	r2, r3, #22
 80116c6:	d4ef      	bmi.n	80116a8 <__smakebuf_r+0x18>
 80116c8:	f023 0303 	bic.w	r3, r3, #3
 80116cc:	f043 0302 	orr.w	r3, r3, #2
 80116d0:	81a3      	strh	r3, [r4, #12]
 80116d2:	e7e3      	b.n	801169c <__smakebuf_r+0xc>
 80116d4:	89a3      	ldrh	r3, [r4, #12]
 80116d6:	6020      	str	r0, [r4, #0]
 80116d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116dc:	81a3      	strh	r3, [r4, #12]
 80116de:	9b00      	ldr	r3, [sp, #0]
 80116e0:	6163      	str	r3, [r4, #20]
 80116e2:	9b01      	ldr	r3, [sp, #4]
 80116e4:	6120      	str	r0, [r4, #16]
 80116e6:	b15b      	cbz	r3, 8011700 <__smakebuf_r+0x70>
 80116e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116ec:	4630      	mov	r0, r6
 80116ee:	f000 f81d 	bl	801172c <_isatty_r>
 80116f2:	b128      	cbz	r0, 8011700 <__smakebuf_r+0x70>
 80116f4:	89a3      	ldrh	r3, [r4, #12]
 80116f6:	f023 0303 	bic.w	r3, r3, #3
 80116fa:	f043 0301 	orr.w	r3, r3, #1
 80116fe:	81a3      	strh	r3, [r4, #12]
 8011700:	89a3      	ldrh	r3, [r4, #12]
 8011702:	431d      	orrs	r5, r3
 8011704:	81a5      	strh	r5, [r4, #12]
 8011706:	e7cf      	b.n	80116a8 <__smakebuf_r+0x18>

08011708 <_fstat_r>:
 8011708:	b538      	push	{r3, r4, r5, lr}
 801170a:	4d07      	ldr	r5, [pc, #28]	; (8011728 <_fstat_r+0x20>)
 801170c:	2300      	movs	r3, #0
 801170e:	4604      	mov	r4, r0
 8011710:	4608      	mov	r0, r1
 8011712:	4611      	mov	r1, r2
 8011714:	602b      	str	r3, [r5, #0]
 8011716:	f7ef ff7c 	bl	8001612 <_fstat>
 801171a:	1c43      	adds	r3, r0, #1
 801171c:	d102      	bne.n	8011724 <_fstat_r+0x1c>
 801171e:	682b      	ldr	r3, [r5, #0]
 8011720:	b103      	cbz	r3, 8011724 <_fstat_r+0x1c>
 8011722:	6023      	str	r3, [r4, #0]
 8011724:	bd38      	pop	{r3, r4, r5, pc}
 8011726:	bf00      	nop
 8011728:	20006318 	.word	0x20006318

0801172c <_isatty_r>:
 801172c:	b538      	push	{r3, r4, r5, lr}
 801172e:	4d06      	ldr	r5, [pc, #24]	; (8011748 <_isatty_r+0x1c>)
 8011730:	2300      	movs	r3, #0
 8011732:	4604      	mov	r4, r0
 8011734:	4608      	mov	r0, r1
 8011736:	602b      	str	r3, [r5, #0]
 8011738:	f7ef ff7b 	bl	8001632 <_isatty>
 801173c:	1c43      	adds	r3, r0, #1
 801173e:	d102      	bne.n	8011746 <_isatty_r+0x1a>
 8011740:	682b      	ldr	r3, [r5, #0]
 8011742:	b103      	cbz	r3, 8011746 <_isatty_r+0x1a>
 8011744:	6023      	str	r3, [r4, #0]
 8011746:	bd38      	pop	{r3, r4, r5, pc}
 8011748:	20006318 	.word	0x20006318

0801174c <_init>:
 801174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801174e:	bf00      	nop
 8011750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011752:	bc08      	pop	{r3}
 8011754:	469e      	mov	lr, r3
 8011756:	4770      	bx	lr

08011758 <_fini>:
 8011758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801175a:	bf00      	nop
 801175c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801175e:	bc08      	pop	{r3}
 8011760:	469e      	mov	lr, r3
 8011762:	4770      	bx	lr
