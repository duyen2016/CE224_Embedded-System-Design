
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013998  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002038  08013b48  08013b48  00023b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b80  08015b80  00030344  2**0
                  CONTENTS
  4 .ARM          00000008  08015b80  08015b80  00025b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b88  08015b88  00030344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b88  08015b88  00025b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b8c  08015b8c  00025b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  08015b90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030344  2**0
                  CONTENTS
 10 .bss          000069a4  20000344  20000344  00030344  2**2
                  ALLOC
 11 ._user_heap_stack 00002400  20006ce8  20006ce8  00030344  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030344  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030374  2**0
                  CONTENTS, READONLY
 14 .debug_info   00028d7f  00000000  00000000  000303b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006685  00000000  00000000  00059136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002520  00000000  00000000  0005f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001c58  00000000  00000000  00061ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a169  00000000  00000000  00063938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ed5f  00000000  00000000  0006daa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f7269  00000000  00000000  0009c800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000b0bc  00000000  00000000  00193a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0019eb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000344 	.word	0x20000344
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013b30 	.word	0x08013b30

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000348 	.word	0x20000348
 80001ec:	08013b30 	.word	0x08013b30

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <distance>:
	float X_up;
	int flag_up = 0, flag_down = 0, flag_start = 0, d = 0, score = 0, i = 0, sp;
	char X[10], Y[10], Z[10];

	int t0 = 0, t1 = 0, t2 = 0;
int distance (float x){
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	ed87 0a01 	vstr	s0, [r7, #4]
	int s;

	switch(i){
 800101a:	4b7b      	ldr	r3, [pc, #492]	; (8001208 <distance+0x1f8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b05      	cmp	r3, #5
 8001020:	dc02      	bgt.n	8001028 <distance+0x18>
 8001022:	2b00      	cmp	r3, #0
 8001024:	da04      	bge.n	8001030 <distance+0x20>
 8001026:	e009      	b.n	800103c <distance+0x2c>
 8001028:	3b06      	subs	r3, #6
 800102a:	2b04      	cmp	r3, #4
 800102c:	d806      	bhi.n	800103c <distance+0x2c>
 800102e:	e002      	b.n	8001036 <distance+0x26>
		case 0:
		case 1:
		case 2:
		case 3:
		case 4:
		case 5: s = 1; break;
 8001030:	2301      	movs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	e005      	b.n	8001042 <distance+0x32>
		case 6:
		case 7:
		case 8:
		case 9:
		case 10: s = 2; break;
 8001036:	2302      	movs	r3, #2
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	e002      	b.n	8001042 <distance+0x32>
		case 11:
		case 12:
		case 13:
		case 14:
		default:s = 3; break;
 800103c:	2303      	movs	r3, #3
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	bf00      	nop
	}

	x = x / s;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001054:	edc7 7a01 	vstr	s15, [r7, #4]

	if (x <= 30) {return 20;}	//10
 8001058:	edd7 7a01 	vldr	s15, [r7, #4]
 800105c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	d801      	bhi.n	800106e <distance+0x5e>
 800106a:	2314      	movs	r3, #20
 800106c:	e0c6      	b.n	80011fc <distance+0x1ec>
	else if (x <= 60) {return 22;}	//11
 800106e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001072:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800120c <distance+0x1fc>
 8001076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800107a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107e:	d801      	bhi.n	8001084 <distance+0x74>
 8001080:	2316      	movs	r3, #22
 8001082:	e0bb      	b.n	80011fc <distance+0x1ec>
	else if (x <= 90) {return 24;}	//12
 8001084:	edd7 7a01 	vldr	s15, [r7, #4]
 8001088:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001210 <distance+0x200>
 800108c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001094:	d801      	bhi.n	800109a <distance+0x8a>
 8001096:	2318      	movs	r3, #24
 8001098:	e0b0      	b.n	80011fc <distance+0x1ec>
	else if (x <= 120) {return 26;}	//13
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001214 <distance+0x204>
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	d801      	bhi.n	80010b0 <distance+0xa0>
 80010ac:	231a      	movs	r3, #26
 80010ae:	e0a5      	b.n	80011fc <distance+0x1ec>
	else if (x <= 150) {return 28;}	//14
 80010b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001218 <distance+0x208>
 80010b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c0:	d801      	bhi.n	80010c6 <distance+0xb6>
 80010c2:	231c      	movs	r3, #28
 80010c4:	e09a      	b.n	80011fc <distance+0x1ec>
	else if (x <= 180) {return 30;}	//15
 80010c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ca:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800121c <distance+0x20c>
 80010ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	d801      	bhi.n	80010dc <distance+0xcc>
 80010d8:	231e      	movs	r3, #30
 80010da:	e08f      	b.n	80011fc <distance+0x1ec>
	else if (x <= 210) {return 32;}	//16
 80010dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e0:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001220 <distance+0x210>
 80010e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ec:	d801      	bhi.n	80010f2 <distance+0xe2>
 80010ee:	2320      	movs	r3, #32
 80010f0:	e084      	b.n	80011fc <distance+0x1ec>
	else if (x <= 240) {return 34;}	//17
 80010f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010f6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001224 <distance+0x214>
 80010fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	d801      	bhi.n	8001108 <distance+0xf8>
 8001104:	2322      	movs	r3, #34	; 0x22
 8001106:	e079      	b.n	80011fc <distance+0x1ec>
	else if (x <= 270) {return 36;}	//18
 8001108:	edd7 7a01 	vldr	s15, [r7, #4]
 800110c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001228 <distance+0x218>
 8001110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001118:	d801      	bhi.n	800111e <distance+0x10e>
 800111a:	2324      	movs	r3, #36	; 0x24
 800111c:	e06e      	b.n	80011fc <distance+0x1ec>
	else if (x <= 300) {return 40;}	//20
 800111e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001122:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800122c <distance+0x21c>
 8001126:	eef4 7ac7 	vcmpe.f32	s15, s14
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	d801      	bhi.n	8001134 <distance+0x124>
 8001130:	2328      	movs	r3, #40	; 0x28
 8001132:	e063      	b.n	80011fc <distance+0x1ec>
	else if (x <= 330) {return 44;}	//22
 8001134:	edd7 7a01 	vldr	s15, [r7, #4]
 8001138:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001230 <distance+0x220>
 800113c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001144:	d801      	bhi.n	800114a <distance+0x13a>
 8001146:	232c      	movs	r3, #44	; 0x2c
 8001148:	e058      	b.n	80011fc <distance+0x1ec>
	else if (x <= 360) {return 48;}	//24
 800114a:	edd7 7a01 	vldr	s15, [r7, #4]
 800114e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001234 <distance+0x224>
 8001152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115a:	d801      	bhi.n	8001160 <distance+0x150>
 800115c:	2330      	movs	r3, #48	; 0x30
 800115e:	e04d      	b.n	80011fc <distance+0x1ec>
    else if (x <= 390) {return 52;}	//26
 8001160:	edd7 7a01 	vldr	s15, [r7, #4]
 8001164:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001238 <distance+0x228>
 8001168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001170:	d801      	bhi.n	8001176 <distance+0x166>
 8001172:	2334      	movs	r3, #52	; 0x34
 8001174:	e042      	b.n	80011fc <distance+0x1ec>
    else if (x <= 420) {return 56;}	//28
 8001176:	edd7 7a01 	vldr	s15, [r7, #4]
 800117a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800123c <distance+0x22c>
 800117e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	d801      	bhi.n	800118c <distance+0x17c>
 8001188:	2338      	movs	r3, #56	; 0x38
 800118a:	e037      	b.n	80011fc <distance+0x1ec>
    else if (x <= 450) {return 60;}	//30
 800118c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001190:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001240 <distance+0x230>
 8001194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119c:	d801      	bhi.n	80011a2 <distance+0x192>
 800119e:	233c      	movs	r3, #60	; 0x3c
 80011a0:	e02c      	b.n	80011fc <distance+0x1ec>
    else if (x <= 480) {return 64;}	//32
 80011a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001244 <distance+0x234>
 80011aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	d801      	bhi.n	80011b8 <distance+0x1a8>
 80011b4:	2340      	movs	r3, #64	; 0x40
 80011b6:	e021      	b.n	80011fc <distance+0x1ec>
    else if (x <= 510) {return 68;}	//34
 80011b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011bc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001248 <distance+0x238>
 80011c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	d801      	bhi.n	80011ce <distance+0x1be>
 80011ca:	2344      	movs	r3, #68	; 0x44
 80011cc:	e016      	b.n	80011fc <distance+0x1ec>
    else if (x <= 540) {return 72;}	//36
 80011ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800124c <distance+0x23c>
 80011d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	d801      	bhi.n	80011e4 <distance+0x1d4>
 80011e0:	2348      	movs	r3, #72	; 0x48
 80011e2:	e00b      	b.n	80011fc <distance+0x1ec>
    else if (x <= 570) {return 76;}	//38
 80011e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001250 <distance+0x240>
 80011ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f4:	d801      	bhi.n	80011fa <distance+0x1ea>
 80011f6:	234c      	movs	r3, #76	; 0x4c
 80011f8:	e000      	b.n	80011fc <distance+0x1ec>
    else {return 80;}	//40
 80011fa:	2350      	movs	r3, #80	; 0x50
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	20000384 	.word	0x20000384
 800120c:	42700000 	.word	0x42700000
 8001210:	42b40000 	.word	0x42b40000
 8001214:	42f00000 	.word	0x42f00000
 8001218:	43160000 	.word	0x43160000
 800121c:	43340000 	.word	0x43340000
 8001220:	43520000 	.word	0x43520000
 8001224:	43700000 	.word	0x43700000
 8001228:	43870000 	.word	0x43870000
 800122c:	43960000 	.word	0x43960000
 8001230:	43a50000 	.word	0x43a50000
 8001234:	43b40000 	.word	0x43b40000
 8001238:	43c30000 	.word	0x43c30000
 800123c:	43d20000 	.word	0x43d20000
 8001240:	43e10000 	.word	0x43e10000
 8001244:	43f00000 	.word	0x43f00000
 8001248:	43ff0000 	.word	0x43ff0000
 800124c:	44070000 	.word	0x44070000
 8001250:	440e8000 	.word	0x440e8000

08001254 <speed>:

int speed(float x){
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	ed87 0a01 	vstr	s0, [r7, #4]

	if (x <= 30) {return 100;}	//10
 800125e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001262:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	d801      	bhi.n	8001274 <speed+0x20>
 8001270:	2364      	movs	r3, #100	; 0x64
 8001272:	e037      	b.n	80012e4 <speed+0x90>
	else if (x <= 120) {return 90;}	//13
 8001274:	edd7 7a01 	vldr	s15, [r7, #4]
 8001278:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80012f0 <speed+0x9c>
 800127c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	d801      	bhi.n	800128a <speed+0x36>
 8001286:	235a      	movs	r3, #90	; 0x5a
 8001288:	e02c      	b.n	80012e4 <speed+0x90>
	else if (x <= 210) {return 80;}	//16
 800128a:	edd7 7a01 	vldr	s15, [r7, #4]
 800128e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80012f4 <speed+0xa0>
 8001292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	d801      	bhi.n	80012a0 <speed+0x4c>
 800129c:	2350      	movs	r3, #80	; 0x50
 800129e:	e021      	b.n	80012e4 <speed+0x90>
	else if (x <= 300) {return 70;}	//20
 80012a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80012f8 <speed+0xa4>
 80012a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b0:	d801      	bhi.n	80012b6 <speed+0x62>
 80012b2:	2346      	movs	r3, #70	; 0x46
 80012b4:	e016      	b.n	80012e4 <speed+0x90>
    else if (x <= 390) {return 60;}	//26
 80012b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012fc <speed+0xa8>
 80012be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c6:	d801      	bhi.n	80012cc <speed+0x78>
 80012c8:	233c      	movs	r3, #60	; 0x3c
 80012ca:	e00b      	b.n	80012e4 <speed+0x90>
    else if (x <= 480) {return 50;}	//32
 80012cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001300 <speed+0xac>
 80012d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012dc:	d801      	bhi.n	80012e2 <speed+0x8e>
 80012de:	2332      	movs	r3, #50	; 0x32
 80012e0:	e000      	b.n	80012e4 <speed+0x90>
    else {return 40;}	//40
 80012e2:	2328      	movs	r3, #40	; 0x28
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	42f00000 	.word	0x42f00000
 80012f4:	43520000 	.word	0x43520000
 80012f8:	43960000 	.word	0x43960000
 80012fc:	43c30000 	.word	0x43c30000
 8001300:	43f00000 	.word	0x43f00000

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001308:	f002 fbe0 	bl	8003acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130c:	f000 f856 	bl	80013bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001310:	f000 f8c0 	bl	8001494 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init();
 8001314:	f002 fa10 	bl	8003738 <BSP_SDRAM_Init>

  BSP_GYRO_Init();
 8001318:	f001 fb48 	bl	80029ac <BSP_GYRO_Init>
  MX_USB_DEVICE_Init();
 800131c:	f00d fb2c 	bl	800e978 <MX_USB_DEVICE_Init>
  BSP_LCD_Init();//init LCD
 8001320:	f001 fbaa 	bl	8002a78 <BSP_LCD_Init>
          //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8001324:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001328:	2001      	movs	r0, #1
 800132a:	f001 fc27 	bl	8002b7c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 800132e:	2001      	movs	r0, #1
 8001330:	f001 fc88 	bl	8002c44 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8001334:	f002 f802 	bl	800333c <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8001338:	4815      	ldr	r0, [pc, #84]	; (8001390 <main+0x8c>)
 800133a:	f001 fcf5 	bl	8002d28 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 800133e:	4814      	ldr	r0, [pc, #80]	; (8001390 <main+0x8c>)
 8001340:	f001 fca8 	bl	8002c94 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f001 fc8c 	bl	8002c64 <BSP_LCD_SetTextColor>

  /* USER CODE BEGIN 2 */
  CDC_Transmit_HS((uint8_t*)"Chieu cao bong:\n", 17);
 800134c:	2111      	movs	r1, #17
 800134e:	4811      	ldr	r0, [pc, #68]	; (8001394 <main+0x90>)
 8001350:	f00d fbd0 	bl	800eaf4 <CDC_Transmit_HS>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001354:	f008 fdf8 	bl	8009f48 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task0 */
  Task0Handle = osThreadNew(StartTask0, NULL, &Task0_attributes);
 8001358:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <main+0x94>)
 800135a:	2100      	movs	r1, #0
 800135c:	480f      	ldr	r0, [pc, #60]	; (800139c <main+0x98>)
 800135e:	f008 fe3d 	bl	8009fdc <osThreadNew>
 8001362:	4603      	mov	r3, r0
 8001364:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <main+0x9c>)
 8001366:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <main+0xa0>)
 800136a:	2100      	movs	r1, #0
 800136c:	480e      	ldr	r0, [pc, #56]	; (80013a8 <main+0xa4>)
 800136e:	f008 fe35 	bl	8009fdc <osThreadNew>
 8001372:	4603      	mov	r3, r0
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <main+0xa8>)
 8001376:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <main+0xac>)
 800137a:	2100      	movs	r1, #0
 800137c:	480d      	ldr	r0, [pc, #52]	; (80013b4 <main+0xb0>)
 800137e:	f008 fe2d 	bl	8009fdc <osThreadNew>
 8001382:	4603      	mov	r3, r0
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <main+0xb4>)
 8001386:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001388:	f008 fe02 	bl	8009f90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800138c:	e7fe      	b.n	800138c <main+0x88>
 800138e:	bf00      	nop
 8001390:	ff0000ff 	.word	0xff0000ff
 8001394:	08013b60 	.word	0x08013b60
 8001398:	08013c14 	.word	0x08013c14
 800139c:	08001501 	.word	0x08001501
 80013a0:	20000360 	.word	0x20000360
 80013a4:	08013c38 	.word	0x08013c38
 80013a8:	08001751 	.word	0x08001751
 80013ac:	20000364 	.word	0x20000364
 80013b0:	08013c5c 	.word	0x08013c5c
 80013b4:	080017a1 	.word	0x080017a1
 80013b8:	20000368 	.word	0x20000368

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	; 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	2230      	movs	r2, #48	; 0x30
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f00e ff79 	bl	80102c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	4b29      	ldr	r3, [pc, #164]	; (800148c <SystemClock_Config+0xd0>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	4a28      	ldr	r2, [pc, #160]	; (800148c <SystemClock_Config+0xd0>)
 80013ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ee:	6413      	str	r3, [r2, #64]	; 0x40
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <SystemClock_Config+0xd0>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4b23      	ldr	r3, [pc, #140]	; (8001490 <SystemClock_Config+0xd4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a22      	ldr	r2, [pc, #136]	; (8001490 <SystemClock_Config+0xd4>)
 8001406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <SystemClock_Config+0xd4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001418:	2301      	movs	r3, #1
 800141a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800141c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001422:	2302      	movs	r3, #2
 8001424:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001426:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800142c:	2308      	movs	r3, #8
 800142e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001430:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001434:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001436:	2302      	movs	r3, #2
 8001438:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800143a:	2307      	movs	r3, #7
 800143c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143e:	f107 0320 	add.w	r3, r7, #32
 8001442:	4618      	mov	r0, r3
 8001444:	f004 fffa 	bl	800643c <HAL_RCC_OscConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800144e:	f000 fa97 	bl	8001980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001452:	230f      	movs	r3, #15
 8001454:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001456:	2302      	movs	r3, #2
 8001458:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800145e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001462:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001468:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800146a:	f107 030c 	add.w	r3, r7, #12
 800146e:	2105      	movs	r1, #5
 8001470:	4618      	mov	r0, r3
 8001472:	f005 fa5b 	bl	800692c <HAL_RCC_ClockConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800147c:	f000 fa80 	bl	8001980 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001480:	f005 fb3a 	bl	8006af8 <HAL_RCC_EnableCSS>
}
 8001484:	bf00      	nop
 8001486:	3750      	adds	r7, #80	; 0x50
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000

08001494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_GPIO_Init+0x68>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a16      	ldr	r2, [pc, #88]	; (80014fc <MX_GPIO_Init+0x68>)
 80014a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_GPIO_Init+0x68>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <MX_GPIO_Init+0x68>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <MX_GPIO_Init+0x68>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <MX_GPIO_Init+0x68>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_GPIO_Init+0x68>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <MX_GPIO_Init+0x68>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_GPIO_Init+0x68>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800

08001500 <StartTask0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask0 */
void StartTask0(void *argument)
{
 8001500:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800150a:	f00d fa35 	bl	800e978 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(d >= 20 && flag_down == 0){
 800150e:	4b85      	ldr	r3, [pc, #532]	; (8001724 <StartTask0+0x224>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b13      	cmp	r3, #19
 8001514:	dd11      	ble.n	800153a <StartTask0+0x3a>
 8001516:	4b84      	ldr	r3, [pc, #528]	; (8001728 <StartTask0+0x228>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10d      	bne.n	800153a <StartTask0+0x3a>
		  i++; //i la ban kinh bong
 800151e:	4b83      	ldr	r3, [pc, #524]	; (800172c <StartTask0+0x22c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a81      	ldr	r2, [pc, #516]	; (800172c <StartTask0+0x22c>)
 8001526:	6013      	str	r3, [r2, #0]
		  if(i == d){flag_down = 1;}
 8001528:	4b80      	ldr	r3, [pc, #512]	; (800172c <StartTask0+0x22c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b7d      	ldr	r3, [pc, #500]	; (8001724 <StartTask0+0x224>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d102      	bne.n	800153a <StartTask0+0x3a>
 8001534:	4b7c      	ldr	r3, [pc, #496]	; (8001728 <StartTask0+0x228>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]
	  }

	  if(flag_down == 1){
 800153a:	4b7b      	ldr	r3, [pc, #492]	; (8001728 <StartTask0+0x228>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d117      	bne.n	8001572 <StartTask0+0x72>
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001542:	487b      	ldr	r0, [pc, #492]	; (8001730 <StartTask0+0x230>)
 8001544:	f001 fbf0 	bl	8002d28 <BSP_LCD_Clear>
		  BSP_LCD_FillCircle(120, 150, i + 20);
 8001548:	4b78      	ldr	r3, [pc, #480]	; (800172c <StartTask0+0x22c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	3314      	adds	r3, #20
 8001550:	b29b      	uxth	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	2196      	movs	r1, #150	; 0x96
 8001556:	2078      	movs	r0, #120	; 0x78
 8001558:	f001 fe50 	bl	80031fc <BSP_LCD_FillCircle>
		  d--;
 800155c:	4b71      	ldr	r3, [pc, #452]	; (8001724 <StartTask0+0x224>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3b01      	subs	r3, #1
 8001562:	4a70      	ldr	r2, [pc, #448]	; (8001724 <StartTask0+0x224>)
 8001564:	6013      	str	r3, [r2, #0]
		  i--;
 8001566:	4b71      	ldr	r3, [pc, #452]	; (800172c <StartTask0+0x22c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	3b01      	subs	r3, #1
 800156c:	4a6f      	ldr	r2, [pc, #444]	; (800172c <StartTask0+0x22c>)
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e009      	b.n	8001586 <StartTask0+0x86>
	  }
	  else{
		  BSP_LCD_FillCircle(120, 150, i + 20);
 8001572:	4b6e      	ldr	r3, [pc, #440]	; (800172c <StartTask0+0x22c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	3314      	adds	r3, #20
 800157a:	b29b      	uxth	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	2196      	movs	r1, #150	; 0x96
 8001580:	2078      	movs	r0, #120	; 0x78
 8001582:	f001 fe3b 	bl	80031fc <BSP_LCD_FillCircle>
	  }

	  sprintf(X,"Score: %d", score);
 8001586:	4b6b      	ldr	r3, [pc, #428]	; (8001734 <StartTask0+0x234>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	496a      	ldr	r1, [pc, #424]	; (8001738 <StartTask0+0x238>)
 800158e:	486b      	ldr	r0, [pc, #428]	; (800173c <StartTask0+0x23c>)
 8001590:	f00e fe34 	bl	80101fc <siprintf>
	  BSP_LCD_DisplayStringAtLine(0, (uint8_t *)X);
 8001594:	4969      	ldr	r1, [pc, #420]	; (800173c <StartTask0+0x23c>)
 8001596:	2000      	movs	r0, #0
 8001598:	f001 fcf0 	bl	8002f7c <BSP_LCD_DisplayStringAtLine>

	  if (flag_down == 0){
 800159c:	4b62      	ldr	r3, [pc, #392]	; (8001728 <StartTask0+0x228>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f040 80ba 	bne.w	800171a <StartTask0+0x21a>
		  if (i <= (d - d*0.375)) {osDelay(sp * 0.375);}
 80015a6:	4b61      	ldr	r3, [pc, #388]	; (800172c <StartTask0+0x22c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ffca 	bl	8000544 <__aeabi_i2d>
 80015b0:	4604      	mov	r4, r0
 80015b2:	460d      	mov	r5, r1
 80015b4:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <StartTask0+0x224>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffc3 	bl	8000544 <__aeabi_i2d>
 80015be:	4680      	mov	r8, r0
 80015c0:	4689      	mov	r9, r1
 80015c2:	4b58      	ldr	r3, [pc, #352]	; (8001724 <StartTask0+0x224>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe ffbc 	bl	8000544 <__aeabi_i2d>
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	4b5b      	ldr	r3, [pc, #364]	; (8001740 <StartTask0+0x240>)
 80015d2:	f7ff f821 	bl	8000618 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4640      	mov	r0, r8
 80015dc:	4649      	mov	r1, r9
 80015de:	f7fe fe63 	bl	80002a8 <__aeabi_dsub>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7ff fa91 	bl	8000b10 <__aeabi_dcmple>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d014      	beq.n	800161e <StartTask0+0x11e>
 80015f4:	4b53      	ldr	r3, [pc, #332]	; (8001744 <StartTask0+0x244>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ffa3 	bl	8000544 <__aeabi_i2d>
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	4b4f      	ldr	r3, [pc, #316]	; (8001740 <StartTask0+0x240>)
 8001604:	f7ff f808 	bl	8000618 <__aeabi_dmul>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fada 	bl	8000bc8 <__aeabi_d2uiz>
 8001614:	4603      	mov	r3, r0
 8001616:	4618      	mov	r0, r3
 8001618:	f008 fd72 	bl	800a100 <osDelay>
 800161c:	e777      	b.n	800150e <StartTask0+0xe>
		  else if (i <= (d - d*0.75)) {osDelay(sp * 0.75);}
 800161e:	4b43      	ldr	r3, [pc, #268]	; (800172c <StartTask0+0x22c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff8e 	bl	8000544 <__aeabi_i2d>
 8001628:	4604      	mov	r4, r0
 800162a:	460d      	mov	r5, r1
 800162c:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <StartTask0+0x224>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff87 	bl	8000544 <__aeabi_i2d>
 8001636:	4680      	mov	r8, r0
 8001638:	4689      	mov	r9, r1
 800163a:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <StartTask0+0x224>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff80 	bl	8000544 <__aeabi_i2d>
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <StartTask0+0x248>)
 800164a:	f7fe ffe5 	bl	8000618 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4640      	mov	r0, r8
 8001654:	4649      	mov	r1, r9
 8001656:	f7fe fe27 	bl	80002a8 <__aeabi_dsub>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4620      	mov	r0, r4
 8001660:	4629      	mov	r1, r5
 8001662:	f7ff fa55 	bl	8000b10 <__aeabi_dcmple>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d014      	beq.n	8001696 <StartTask0+0x196>
 800166c:	4b35      	ldr	r3, [pc, #212]	; (8001744 <StartTask0+0x244>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff67 	bl	8000544 <__aeabi_i2d>
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	4b33      	ldr	r3, [pc, #204]	; (8001748 <StartTask0+0x248>)
 800167c:	f7fe ffcc 	bl	8000618 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4610      	mov	r0, r2
 8001686:	4619      	mov	r1, r3
 8001688:	f7ff fa9e 	bl	8000bc8 <__aeabi_d2uiz>
 800168c:	4603      	mov	r3, r0
 800168e:	4618      	mov	r0, r3
 8001690:	f008 fd36 	bl	800a100 <osDelay>
 8001694:	e73b      	b.n	800150e <StartTask0+0xe>
		  else if (i <= (d - d*0.875)) {osDelay(sp * 0.875);}
 8001696:	4b25      	ldr	r3, [pc, #148]	; (800172c <StartTask0+0x22c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe ff52 	bl	8000544 <__aeabi_i2d>
 80016a0:	4604      	mov	r4, r0
 80016a2:	460d      	mov	r5, r1
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <StartTask0+0x224>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff4b 	bl	8000544 <__aeabi_i2d>
 80016ae:	4680      	mov	r8, r0
 80016b0:	4689      	mov	r9, r1
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <StartTask0+0x224>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe ff44 	bl	8000544 <__aeabi_i2d>
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <StartTask0+0x24c>)
 80016c2:	f7fe ffa9 	bl	8000618 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4640      	mov	r0, r8
 80016cc:	4649      	mov	r1, r9
 80016ce:	f7fe fdeb 	bl	80002a8 <__aeabi_dsub>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4620      	mov	r0, r4
 80016d8:	4629      	mov	r1, r5
 80016da:	f7ff fa19 	bl	8000b10 <__aeabi_dcmple>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d014      	beq.n	800170e <StartTask0+0x20e>
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <StartTask0+0x244>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff2b 	bl	8000544 <__aeabi_i2d>
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	4b16      	ldr	r3, [pc, #88]	; (800174c <StartTask0+0x24c>)
 80016f4:	f7fe ff90 	bl	8000618 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa62 	bl	8000bc8 <__aeabi_d2uiz>
 8001704:	4603      	mov	r3, r0
 8001706:	4618      	mov	r0, r3
 8001708:	f008 fcfa 	bl	800a100 <osDelay>
 800170c:	e6ff      	b.n	800150e <StartTask0+0xe>
		  else {osDelay(sp);}
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <StartTask0+0x244>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f008 fcf4 	bl	800a100 <osDelay>
 8001718:	e6f9      	b.n	800150e <StartTask0+0xe>
	  }
	  else{
		  osDelay(100);
 800171a:	2064      	movs	r0, #100	; 0x64
 800171c:	f008 fcf0 	bl	800a100 <osDelay>
	  if(d >= 20 && flag_down == 0){
 8001720:	e6f5      	b.n	800150e <StartTask0+0xe>
 8001722:	bf00      	nop
 8001724:	2000037c 	.word	0x2000037c
 8001728:	20000374 	.word	0x20000374
 800172c:	20000384 	.word	0x20000384
 8001730:	ff0000ff 	.word	0xff0000ff
 8001734:	20000380 	.word	0x20000380
 8001738:	08013b74 	.word	0x08013b74
 800173c:	2000038c 	.word	0x2000038c
 8001740:	3fd80000 	.word	0x3fd80000
 8001744:	20000388 	.word	0x20000388
 8001748:	3fe80000 	.word	0x3fe80000
 800174c:	3fec0000 	.word	0x3fec0000

08001750 <StartTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	char U[2];
	int u;
  /* Infinite loop */
  for(;;)
  {
	  u = i / 2;
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <StartTask1+0x44>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0fda      	lsrs	r2, r3, #31
 800175e:	4413      	add	r3, r2
 8001760:	105b      	asrs	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
	  sprintf(U, "%d", u);
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	490b      	ldr	r1, [pc, #44]	; (8001798 <StartTask1+0x48>)
 800176c:	4618      	mov	r0, r3
 800176e:	f00e fd45 	bl	80101fc <siprintf>

	  CDC_Transmit_HS((uint8_t*)U, 2);
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	2102      	movs	r1, #2
 8001778:	4618      	mov	r0, r3
 800177a:	f00d f9bb 	bl	800eaf4 <CDC_Transmit_HS>
	  HAL_Delay(20);
 800177e:	2014      	movs	r0, #20
 8001780:	f002 f9e6 	bl	8003b50 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)" cm\n", 5);
 8001784:	2105      	movs	r1, #5
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <StartTask1+0x4c>)
 8001788:	f00d f9b4 	bl	800eaf4 <CDC_Transmit_HS>
	  osDelay(200);
 800178c:	20c8      	movs	r0, #200	; 0xc8
 800178e:	f008 fcb7 	bl	800a100 <osDelay>
	  u = i / 2;
 8001792:	e7e1      	b.n	8001758 <StartTask1+0x8>
 8001794:	20000384 	.word	0x20000384
 8001798:	08013b80 	.word	0x08013b80
 800179c:	08013b84 	.word	0x08013b84

080017a0 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
	float DATA[3] = {0};
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {
	  L3GD20_ReadXYZAngRate(DATA);
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fda9 	bl	8002310 <L3GD20_ReadXYZAngRate>

	  DATA[0] = DATA[0] - X_drift;
 80017be:	edd7 7a03 	vldr	s15, [r7, #12]
 80017c2:	eeb1 7a03 	vmov.f32	s14, #19	; 0x40980000  4.750
 80017c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017ca:	edc7 7a03 	vstr	s15, [r7, #12]
	  DATA[1] = DATA[1] - Y_drift;
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fec9 	bl	8000568 <__aeabi_f2d>
 80017d6:	a35d      	add	r3, pc, #372	; (adr r3, 800194c <StartTask2+0x1ac>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7fe fd64 	bl	80002a8 <__aeabi_dsub>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff fa0e 	bl	8000c08 <__aeabi_d2f>
 80017ec:	4603      	mov	r3, r0
 80017ee:	613b      	str	r3, [r7, #16]
	  DATA[2] = DATA[2] - Z_drift;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe feb8 	bl	8000568 <__aeabi_f2d>
 80017f8:	a356      	add	r3, pc, #344	; (adr r3, 8001954 <StartTask2+0x1b4>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe fd53 	bl	80002a8 <__aeabi_dsub>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f9fd 	bl	8000c08 <__aeabi_d2f>
 800180e:	4603      	mov	r3, r0
 8001810:	617b      	str	r3, [r7, #20]

	  if (d < 15){
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <StartTask2+0x178>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b0e      	cmp	r3, #14
 8001818:	dc79      	bgt.n	800190e <StartTask2+0x16e>
		  if (DATA[0] > 20){
 800181a:	edd7 7a03 	vldr	s15, [r7, #12]
 800181e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	dd0f      	ble.n	800184c <StartTask2+0xac>
			  if (DATA[0] > X_up) X_up = DATA[0];
 800182c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001830:	4b3a      	ldr	r3, [pc, #232]	; (800191c <StartTask2+0x17c>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	dd02      	ble.n	8001846 <StartTask2+0xa6>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4a36      	ldr	r2, [pc, #216]	; (800191c <StartTask2+0x17c>)
 8001844:	6013      	str	r3, [r2, #0]
			  flag_up = 1;
 8001846:	4b36      	ldr	r3, [pc, #216]	; (8001920 <StartTask2+0x180>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]
		  }

		  if (-20 <= DATA[0] && DATA[0] <= 20 && flag_up == 1){
 800184c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001850:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8001854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	db32      	blt.n	80018c4 <StartTask2+0x124>
 800185e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001862:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001866:	eef4 7ac7 	vcmpe.f32	s15, s14
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	d829      	bhi.n	80018c4 <StartTask2+0x124>
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <StartTask2+0x180>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d125      	bne.n	80018c4 <StartTask2+0x124>
			  d = distance(X_up);
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <StartTask2+0x17c>)
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	eeb0 0a67 	vmov.f32	s0, s15
 8001882:	f7ff fbc5 	bl	8001010 <distance>
 8001886:	4603      	mov	r3, r0
 8001888:	4a23      	ldr	r2, [pc, #140]	; (8001918 <StartTask2+0x178>)
 800188a:	6013      	str	r3, [r2, #0]
			  sp = speed(X_up);
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <StartTask2+0x17c>)
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	f7ff fcdd 	bl	8001254 <speed>
 800189a:	4603      	mov	r3, r0
 800189c:	4a21      	ldr	r2, [pc, #132]	; (8001924 <StartTask2+0x184>)
 800189e:	6013      	str	r3, [r2, #0]
			  if(flag_start == 1){score++;}
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <StartTask2+0x188>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d104      	bne.n	80018b2 <StartTask2+0x112>
 80018a8:	4b20      	ldr	r3, [pc, #128]	; (800192c <StartTask2+0x18c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3301      	adds	r3, #1
 80018ae:	4a1f      	ldr	r2, [pc, #124]	; (800192c <StartTask2+0x18c>)
 80018b0:	6013      	str	r3, [r2, #0]

			  flag_up = 0;
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <StartTask2+0x180>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
			  flag_down = 0;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <StartTask2+0x190>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
			  flag_start = 1;
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <StartTask2+0x188>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
		  }

		  if(d < 0){
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <StartTask2+0x178>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da20      	bge.n	800190e <StartTask2+0x16e>
			  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80018cc:	4819      	ldr	r0, [pc, #100]	; (8001934 <StartTask2+0x194>)
 80018ce:	f001 fa2b 	bl	8002d28 <BSP_LCD_Clear>
			  sprintf(X,"Score: %d", score);
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <StartTask2+0x18c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	4917      	ldr	r1, [pc, #92]	; (8001938 <StartTask2+0x198>)
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <StartTask2+0x19c>)
 80018dc:	f00e fc8e 	bl	80101fc <siprintf>
			  BSP_LCD_DisplayStringAtLine(0, (uint8_t *)X);
 80018e0:	4916      	ldr	r1, [pc, #88]	; (800193c <StartTask2+0x19c>)
 80018e2:	2000      	movs	r0, #0
 80018e4:	f001 fb4a 	bl	8002f7c <BSP_LCD_DisplayStringAtLine>
			  BSP_LCD_DisplayStringAt(0, 120, (uint8_t *)"GAME OVER!", CENTER_MODE);
 80018e8:	2301      	movs	r3, #1
 80018ea:	4a15      	ldr	r2, [pc, #84]	; (8001940 <StartTask2+0x1a0>)
 80018ec:	2178      	movs	r1, #120	; 0x78
 80018ee:	2000      	movs	r0, #0
 80018f0:	f001 fa86 	bl	8002e00 <BSP_LCD_DisplayStringAt>
			  BSP_LCD_DisplayStringAt(0, 160, (uint8_t *)"Press reset", CENTER_MODE);
 80018f4:	2301      	movs	r3, #1
 80018f6:	4a13      	ldr	r2, [pc, #76]	; (8001944 <StartTask2+0x1a4>)
 80018f8:	21a0      	movs	r1, #160	; 0xa0
 80018fa:	2000      	movs	r0, #0
 80018fc:	f001 fa80 	bl	8002e00 <BSP_LCD_DisplayStringAt>
			  BSP_LCD_DisplayStringAt(0, 180, (uint8_t *)"button to play", RIGHT_MODE);
 8001900:	2302      	movs	r3, #2
 8001902:	4a11      	ldr	r2, [pc, #68]	; (8001948 <StartTask2+0x1a8>)
 8001904:	21b4      	movs	r1, #180	; 0xb4
 8001906:	2000      	movs	r0, #0
 8001908:	f001 fa7a 	bl	8002e00 <BSP_LCD_DisplayStringAt>
			  while(1);
 800190c:	e7fe      	b.n	800190c <StartTask2+0x16c>
		  }
	  }
	  	osDelay(100);
 800190e:	2064      	movs	r0, #100	; 0x64
 8001910:	f008 fbf6 	bl	800a100 <osDelay>
	  L3GD20_ReadXYZAngRate(DATA);
 8001914:	e74e      	b.n	80017b4 <StartTask2+0x14>
 8001916:	bf00      	nop
 8001918:	2000037c 	.word	0x2000037c
 800191c:	2000036c 	.word	0x2000036c
 8001920:	20000370 	.word	0x20000370
 8001924:	20000388 	.word	0x20000388
 8001928:	20000378 	.word	0x20000378
 800192c:	20000380 	.word	0x20000380
 8001930:	20000374 	.word	0x20000374
 8001934:	ff0000ff 	.word	0xff0000ff
 8001938:	08013b74 	.word	0x08013b74
 800193c:	2000038c 	.word	0x2000038c
 8001940:	08013b8c 	.word	0x08013b8c
 8001944:	08013b98 	.word	0x08013b98
 8001948:	08013ba4 	.word	0x08013ba4
 800194c:	cccccccd 	.word	0xcccccccd
 8001950:	4006cccc 	.word	0x4006cccc
 8001954:	66666666 	.word	0x66666666
 8001958:	3ff26666 	.word	0x3ff26666

0800195c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d101      	bne.n	8001972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800196e:	f002 f8cf 	bl	8003b10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40001000 	.word	0x40001000

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	e7fe      	b.n	8001988 <Error_Handler+0x8>
	...

0800198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_MspInit+0x54>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <HAL_MspInit+0x54>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_MspInit+0x54>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_MspInit+0x54>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_MspInit+0x54>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <HAL_MspInit+0x54>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	210f      	movs	r1, #15
 80019ce:	f06f 0001 	mvn.w	r0, #1
 80019d2:	f002 f999 	bl	8003d08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08e      	sub	sp, #56	; 0x38
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	4b33      	ldr	r3, [pc, #204]	; (8001ac8 <HAL_InitTick+0xe4>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	4a32      	ldr	r2, [pc, #200]	; (8001ac8 <HAL_InitTick+0xe4>)
 80019fe:	f043 0310 	orr.w	r3, r3, #16
 8001a02:	6413      	str	r3, [r2, #64]	; 0x40
 8001a04:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <HAL_InitTick+0xe4>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a10:	f107 0210 	add.w	r2, r7, #16
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f005 f99e 	bl	8006d5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d103      	bne.n	8001a32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a2a:	f005 f983 	bl	8006d34 <HAL_RCC_GetPCLK1Freq>
 8001a2e:	6378      	str	r0, [r7, #52]	; 0x34
 8001a30:	e004      	b.n	8001a3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a32:	f005 f97f 	bl	8006d34 <HAL_RCC_GetPCLK1Freq>
 8001a36:	4603      	mov	r3, r0
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3e:	4a23      	ldr	r2, [pc, #140]	; (8001acc <HAL_InitTick+0xe8>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	0c9b      	lsrs	r3, r3, #18
 8001a46:	3b01      	subs	r3, #1
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a4a:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <HAL_InitTick+0xec>)
 8001a4c:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <HAL_InitTick+0xf0>)
 8001a4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <HAL_InitTick+0xec>)
 8001a52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a58:	4a1d      	ldr	r2, [pc, #116]	; (8001ad0 <HAL_InitTick+0xec>)
 8001a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <HAL_InitTick+0xec>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <HAL_InitTick+0xec>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <HAL_InitTick+0xec>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a70:	4817      	ldr	r0, [pc, #92]	; (8001ad0 <HAL_InitTick+0xec>)
 8001a72:	f006 fa0f 	bl	8007e94 <HAL_TIM_Base_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d11b      	bne.n	8001abc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a84:	4812      	ldr	r0, [pc, #72]	; (8001ad0 <HAL_InitTick+0xec>)
 8001a86:	f006 fa5f 	bl	8007f48 <HAL_TIM_Base_Start_IT>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d111      	bne.n	8001abc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a98:	2036      	movs	r0, #54	; 0x36
 8001a9a:	f002 f951 	bl	8003d40 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b0f      	cmp	r3, #15
 8001aa2:	d808      	bhi.n	8001ab6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	2036      	movs	r0, #54	; 0x36
 8001aaa:	f002 f92d 	bl	8003d08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_InitTick+0xf4>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e002      	b.n	8001abc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001abc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3738      	adds	r7, #56	; 0x38
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	431bde83 	.word	0x431bde83
 8001ad0:	20000398 	.word	0x20000398
 8001ad4:	40001000 	.word	0x40001000
 8001ad8:	20000080 	.word	0x20000080

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001ae0:	f005 f96e 	bl	8006dc0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <NMI_Handler+0x8>

08001ae6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <HardFault_Handler+0x4>

08001aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <MemManage_Handler+0x4>

08001af2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001af6:	e7fe      	b.n	8001af6 <BusFault_Handler+0x4>

08001af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <UsageFault_Handler+0x4>

08001afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <TIM6_DAC_IRQHandler+0x10>)
 8001b12:	f006 fa89 	bl	8008028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000398 	.word	0x20000398

08001b20 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <OTG_HS_IRQHandler+0x10>)
 8001b26:	f003 fb5c 	bl	80051e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20006470 	.word	0x20006470

08001b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	return 1;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_kill>:

int _kill(int pid, int sig)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b4e:	f00e fc0b 	bl	8010368 <__errno>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2216      	movs	r2, #22
 8001b56:	601a      	str	r2, [r3, #0]
	return -1;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_exit>:

void _exit (int status)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ffe7 	bl	8001b44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b76:	e7fe      	b.n	8001b76 <_exit+0x12>

08001b78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e00a      	b.n	8001ba0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b8a:	f3af 8000 	nop.w
 8001b8e:	4601      	mov	r1, r0
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	60ba      	str	r2, [r7, #8]
 8001b96:	b2ca      	uxtb	r2, r1
 8001b98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	dbf0      	blt.n	8001b8a <_read+0x12>
	}

return len;
 8001ba8:	687b      	ldr	r3, [r7, #4]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b086      	sub	sp, #24
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e009      	b.n	8001bd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	60ba      	str	r2, [r7, #8]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf1      	blt.n	8001bc4 <_write+0x12>
	}
	return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_close>:

int _close(int file)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
	return -1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c12:	605a      	str	r2, [r3, #4]
	return 0;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_isatty>:

int _isatty(int file)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	return 1;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
	return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <_sbrk+0x5c>)
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <_sbrk+0x60>)
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d102      	bne.n	8001c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <_sbrk+0x64>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <_sbrk+0x68>)
 8001c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d207      	bcs.n	8001c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c84:	f00e fb70 	bl	8010368 <__errno>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	e009      	b.n	8001ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <_sbrk+0x64>)
 8001ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20030000 	.word	0x20030000
 8001cb4:	00000400 	.word	0x00000400
 8001cb8:	200003e0 	.word	0x200003e0
 8001cbc:	20006ce8 	.word	0x20006ce8

08001cc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <SystemInit+0x20>)
 8001cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cca:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <SystemInit+0x20>)
 8001ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d1c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cea:	490e      	ldr	r1, [pc, #56]	; (8001d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cec:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf0:	e002      	b.n	8001cf8 <LoopCopyDataInit>

08001cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf6:	3304      	adds	r3, #4

08001cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cfc:	d3f9      	bcc.n	8001cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d00:	4c0b      	ldr	r4, [pc, #44]	; (8001d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d04:	e001      	b.n	8001d0a <LoopFillZerobss>

08001d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d08:	3204      	adds	r2, #4

08001d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d0c:	d3fb      	bcc.n	8001d06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d0e:	f7ff ffd7 	bl	8001cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d12:	f00e fb2f 	bl	8010374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d16:	f7ff faf5 	bl	8001304 <main>
  bx  lr    
 8001d1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d1c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d24:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8001d28:	08015b90 	.word	0x08015b90
  ldr r2, =_sbss
 8001d2c:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8001d30:	20006ce8 	.word	0x20006ce8

08001d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d34:	e7fe      	b.n	8001d34 <ADC_IRQHandler>

08001d36 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001d3a:	f000 fc85 	bl	8002648 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001d3e:	20ca      	movs	r0, #202	; 0xca
 8001d40:	f000 f95d 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001d44:	20c3      	movs	r0, #195	; 0xc3
 8001d46:	f000 f967 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001d4a:	2008      	movs	r0, #8
 8001d4c:	f000 f964 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001d50:	2050      	movs	r0, #80	; 0x50
 8001d52:	f000 f961 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001d56:	20cf      	movs	r0, #207	; 0xcf
 8001d58:	f000 f951 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f000 f95b 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001d62:	20c1      	movs	r0, #193	; 0xc1
 8001d64:	f000 f958 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001d68:	2030      	movs	r0, #48	; 0x30
 8001d6a:	f000 f955 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001d6e:	20ed      	movs	r0, #237	; 0xed
 8001d70:	f000 f945 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001d74:	2064      	movs	r0, #100	; 0x64
 8001d76:	f000 f94f 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001d7a:	2003      	movs	r0, #3
 8001d7c:	f000 f94c 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001d80:	2012      	movs	r0, #18
 8001d82:	f000 f949 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001d86:	2081      	movs	r0, #129	; 0x81
 8001d88:	f000 f946 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001d8c:	20e8      	movs	r0, #232	; 0xe8
 8001d8e:	f000 f936 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001d92:	2085      	movs	r0, #133	; 0x85
 8001d94:	f000 f940 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f000 f93d 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001d9e:	2078      	movs	r0, #120	; 0x78
 8001da0:	f000 f93a 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001da4:	20cb      	movs	r0, #203	; 0xcb
 8001da6:	f000 f92a 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001daa:	2039      	movs	r0, #57	; 0x39
 8001dac:	f000 f934 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001db0:	202c      	movs	r0, #44	; 0x2c
 8001db2:	f000 f931 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f000 f92e 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001dbc:	2034      	movs	r0, #52	; 0x34
 8001dbe:	f000 f92b 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001dc2:	2002      	movs	r0, #2
 8001dc4:	f000 f928 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001dc8:	20f7      	movs	r0, #247	; 0xf7
 8001dca:	f000 f918 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001dce:	2020      	movs	r0, #32
 8001dd0:	f000 f922 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001dd4:	20ea      	movs	r0, #234	; 0xea
 8001dd6:	f000 f912 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f000 f91c 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f000 f919 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001de6:	20b1      	movs	r0, #177	; 0xb1
 8001de8:	f000 f909 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f000 f913 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001df2:	201b      	movs	r0, #27
 8001df4:	f000 f910 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001df8:	20b6      	movs	r0, #182	; 0xb6
 8001dfa:	f000 f900 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001dfe:	200a      	movs	r0, #10
 8001e00:	f000 f90a 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001e04:	20a2      	movs	r0, #162	; 0xa2
 8001e06:	f000 f907 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001e0a:	20c0      	movs	r0, #192	; 0xc0
 8001e0c:	f000 f8f7 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001e10:	2010      	movs	r0, #16
 8001e12:	f000 f901 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001e16:	20c1      	movs	r0, #193	; 0xc1
 8001e18:	f000 f8f1 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001e1c:	2010      	movs	r0, #16
 8001e1e:	f000 f8fb 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001e22:	20c5      	movs	r0, #197	; 0xc5
 8001e24:	f000 f8eb 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001e28:	2045      	movs	r0, #69	; 0x45
 8001e2a:	f000 f8f5 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001e2e:	2015      	movs	r0, #21
 8001e30:	f000 f8f2 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001e34:	20c7      	movs	r0, #199	; 0xc7
 8001e36:	f000 f8e2 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001e3a:	2090      	movs	r0, #144	; 0x90
 8001e3c:	f000 f8ec 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001e40:	2036      	movs	r0, #54	; 0x36
 8001e42:	f000 f8dc 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001e46:	20c8      	movs	r0, #200	; 0xc8
 8001e48:	f000 f8e6 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001e4c:	20f2      	movs	r0, #242	; 0xf2
 8001e4e:	f000 f8d6 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f000 f8e0 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001e58:	20b0      	movs	r0, #176	; 0xb0
 8001e5a:	f000 f8d0 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001e5e:	20c2      	movs	r0, #194	; 0xc2
 8001e60:	f000 f8da 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001e64:	20b6      	movs	r0, #182	; 0xb6
 8001e66:	f000 f8ca 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001e6a:	200a      	movs	r0, #10
 8001e6c:	f000 f8d4 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001e70:	20a7      	movs	r0, #167	; 0xa7
 8001e72:	f000 f8d1 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001e76:	2027      	movs	r0, #39	; 0x27
 8001e78:	f000 f8ce 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001e7c:	2004      	movs	r0, #4
 8001e7e:	f000 f8cb 	bl	8002018 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001e82:	202a      	movs	r0, #42	; 0x2a
 8001e84:	f000 f8bb 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f000 f8c5 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f000 f8c2 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f000 f8bf 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001e9a:	20ef      	movs	r0, #239	; 0xef
 8001e9c:	f000 f8bc 	bl	8002018 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001ea0:	202b      	movs	r0, #43	; 0x2b
 8001ea2:	f000 f8ac 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f000 f8b6 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f000 f8b3 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f000 f8b0 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001eb8:	203f      	movs	r0, #63	; 0x3f
 8001eba:	f000 f8ad 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001ebe:	20f6      	movs	r0, #246	; 0xf6
 8001ec0:	f000 f89d 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f000 f8a7 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f000 f8a4 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001ed0:	2006      	movs	r0, #6
 8001ed2:	f000 f8a1 	bl	8002018 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001ed6:	202c      	movs	r0, #44	; 0x2c
 8001ed8:	f000 f891 	bl	8001ffe <ili9341_WriteReg>
  LCD_Delay(200);
 8001edc:	20c8      	movs	r0, #200	; 0xc8
 8001ede:	f000 fca1 	bl	8002824 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001ee2:	2026      	movs	r0, #38	; 0x26
 8001ee4:	f000 f88b 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f000 f895 	bl	8002018 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001eee:	20e0      	movs	r0, #224	; 0xe0
 8001ef0:	f000 f885 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001ef4:	200f      	movs	r0, #15
 8001ef6:	f000 f88f 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001efa:	2029      	movs	r0, #41	; 0x29
 8001efc:	f000 f88c 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001f00:	2024      	movs	r0, #36	; 0x24
 8001f02:	f000 f889 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001f06:	200c      	movs	r0, #12
 8001f08:	f000 f886 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001f0c:	200e      	movs	r0, #14
 8001f0e:	f000 f883 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001f12:	2009      	movs	r0, #9
 8001f14:	f000 f880 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001f18:	204e      	movs	r0, #78	; 0x4e
 8001f1a:	f000 f87d 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001f1e:	2078      	movs	r0, #120	; 0x78
 8001f20:	f000 f87a 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001f24:	203c      	movs	r0, #60	; 0x3c
 8001f26:	f000 f877 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001f2a:	2009      	movs	r0, #9
 8001f2c:	f000 f874 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001f30:	2013      	movs	r0, #19
 8001f32:	f000 f871 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001f36:	2005      	movs	r0, #5
 8001f38:	f000 f86e 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001f3c:	2017      	movs	r0, #23
 8001f3e:	f000 f86b 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001f42:	2011      	movs	r0, #17
 8001f44:	f000 f868 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f000 f865 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001f4e:	20e1      	movs	r0, #225	; 0xe1
 8001f50:	f000 f855 	bl	8001ffe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f000 f85f 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001f5a:	2016      	movs	r0, #22
 8001f5c:	f000 f85c 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001f60:	201b      	movs	r0, #27
 8001f62:	f000 f859 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001f66:	2004      	movs	r0, #4
 8001f68:	f000 f856 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001f6c:	2011      	movs	r0, #17
 8001f6e:	f000 f853 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001f72:	2007      	movs	r0, #7
 8001f74:	f000 f850 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001f78:	2031      	movs	r0, #49	; 0x31
 8001f7a:	f000 f84d 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001f7e:	2033      	movs	r0, #51	; 0x33
 8001f80:	f000 f84a 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001f84:	2042      	movs	r0, #66	; 0x42
 8001f86:	f000 f847 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001f8a:	2005      	movs	r0, #5
 8001f8c:	f000 f844 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001f90:	200c      	movs	r0, #12
 8001f92:	f000 f841 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001f96:	200a      	movs	r0, #10
 8001f98:	f000 f83e 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001f9c:	2028      	movs	r0, #40	; 0x28
 8001f9e:	f000 f83b 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001fa2:	202f      	movs	r0, #47	; 0x2f
 8001fa4:	f000 f838 	bl	8002018 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001fa8:	200f      	movs	r0, #15
 8001faa:	f000 f835 	bl	8002018 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001fae:	2011      	movs	r0, #17
 8001fb0:	f000 f825 	bl	8001ffe <ili9341_WriteReg>
  LCD_Delay(200);
 8001fb4:	20c8      	movs	r0, #200	; 0xc8
 8001fb6:	f000 fc35 	bl	8002824 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001fba:	2029      	movs	r0, #41	; 0x29
 8001fbc:	f000 f81f 	bl	8001ffe <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001fc0:	202c      	movs	r0, #44	; 0x2c
 8001fc2:	f000 f81c 	bl	8001ffe <ili9341_WriteReg>
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001fce:	f000 fb3b 	bl	8002648 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001fd2:	2103      	movs	r1, #3
 8001fd4:	20d3      	movs	r0, #211	; 0xd3
 8001fd6:	f000 f82c 	bl	8002032 <ili9341_ReadData>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	b29b      	uxth	r3, r3
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001fe6:	2029      	movs	r0, #41	; 0x29
 8001fe8:	f000 f809 	bl	8001ffe <ili9341_WriteReg>
}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001ff4:	2028      	movs	r0, #40	; 0x28
 8001ff6:	f000 f802 	bl	8001ffe <ili9341_WriteReg>
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	4603      	mov	r3, r0
 8002006:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	4618      	mov	r0, r3
 800200c:	f000 fbb6 	bl	800277c <LCD_IO_WriteReg>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fb87 	bl	8002738 <LCD_IO_WriteData>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	460a      	mov	r2, r1
 800203c:	80fb      	strh	r3, [r7, #6]
 800203e:	4613      	mov	r3, r2
 8002040:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002042:	797a      	ldrb	r2, [r7, #5]
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fbb9 	bl	80027c0 <LCD_IO_ReadData>
 800204e:	4603      	mov	r3, r0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800205c:	23f0      	movs	r3, #240	; 0xf0
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800206c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8002088:	f000 fbd8 	bl	800283c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8002092:	f107 030f 	add.w	r3, r7, #15
 8002096:	2201      	movs	r2, #1
 8002098:	2120      	movs	r1, #32
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fc1a 	bl	80028d4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80020aa:	f107 030f 	add.w	r3, r7, #15
 80020ae:	2201      	movs	r2, #1
 80020b0:	2123      	movs	r1, #35	; 0x23
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fc0e 	bl	80028d4 <GYRO_IO_Write>
}
 80020b8:	bf00      	nop
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80020d4:	f000 fbb2 	bl	800283c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80020d8:	1dfb      	adds	r3, r7, #7
 80020da:	2201      	movs	r2, #1
 80020dc:	210f      	movs	r1, #15
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fc2a 	bl	8002938 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80020e4:	79fb      	ldrb	r3, [r7, #7]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	2201      	movs	r2, #1
 80020f8:	2124      	movs	r1, #36	; 0x24
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 fc1c 	bl	8002938 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002106:	b2db      	uxtb	r3, r3
 8002108:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800210a:	1dfb      	adds	r3, r7, #7
 800210c:	2201      	movs	r2, #1
 800210e:	2124      	movs	r1, #36	; 0x24
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fbdf 	bl	80028d4 <GYRO_IO_Write>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002128:	2300      	movs	r3, #0
 800212a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8002132:	f107 030f 	add.w	r3, r7, #15
 8002136:	2201      	movs	r2, #1
 8002138:	2120      	movs	r1, #32
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fbca 	bl	80028d4 <GYRO_IO_Write>
}
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8002152:	2300      	movs	r3, #0
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	2300      	movs	r3, #0
 8002158:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800215a:	f107 030f 	add.w	r3, r7, #15
 800215e:	2201      	movs	r2, #1
 8002160:	2130      	movs	r1, #48	; 0x30
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fbe8 	bl	8002938 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002168:	f107 030e 	add.w	r3, r7, #14
 800216c:	2201      	movs	r2, #1
 800216e:	2122      	movs	r1, #34	; 0x22
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fbe1 	bl	8002938 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800217c:	b2db      	uxtb	r3, r3
 800217e:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	121b      	asrs	r3, r3, #8
 8002186:	b25a      	sxtb	r2, r3
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	b25b      	sxtb	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b25b      	sxtb	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	f023 0320 	bic.w	r3, r3, #32
 800219a:	b2db      	uxtb	r3, r3
 800219c:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	7bbb      	ldrb	r3, [r7, #14]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80021aa:	f107 030f 	add.w	r3, r7, #15
 80021ae:	2201      	movs	r2, #1
 80021b0:	2130      	movs	r1, #48	; 0x30
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fb8e 	bl	80028d4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80021b8:	f107 030e 	add.w	r3, r7, #14
 80021bc:	2201      	movs	r2, #1
 80021be:	2122      	movs	r1, #34	; 0x22
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 fb87 	bl	80028d4 <GYRO_IO_Write>
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b084      	sub	sp, #16
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80021d8:	f107 030f 	add.w	r3, r7, #15
 80021dc:	2201      	movs	r2, #1
 80021de:	2122      	movs	r1, #34	; 0x22
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fba9 	bl	8002938 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	73fb      	strb	r3, [r7, #15]
 8002200:	e00c      	b.n	800221c <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d109      	bne.n	800221c <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	f023 0308 	bic.w	r3, r3, #8
 800220e:	b2db      	uxtb	r3, r3
 8002210:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	b2db      	uxtb	r3, r3
 800221a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800221c:	f107 030f 	add.w	r3, r7, #15
 8002220:	2201      	movs	r2, #1
 8002222:	2122      	movs	r1, #34	; 0x22
 8002224:	4618      	mov	r0, r3
 8002226:	f000 fb55 	bl	80028d4 <GYRO_IO_Write>
}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800223c:	f107 030f 	add.w	r3, r7, #15
 8002240:	2201      	movs	r2, #1
 8002242:	2122      	movs	r1, #34	; 0x22
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fb77 	bl	8002938 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002256:	b2db      	uxtb	r3, r3
 8002258:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	73fb      	strb	r3, [r7, #15]
 800225e:	e009      	b.n	8002274 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d106      	bne.n	8002274 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	f023 0308 	bic.w	r3, r3, #8
 800226c:	b2db      	uxtb	r3, r3
 800226e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002274:	f107 030f 	add.w	r3, r7, #15
 8002278:	2201      	movs	r2, #1
 800227a:	2122      	movs	r1, #34	; 0x22
 800227c:	4618      	mov	r0, r3
 800227e:	f000 fb29 	bl	80028d4 <GYRO_IO_Write>
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002294:	f107 030f 	add.w	r3, r7, #15
 8002298:	2201      	movs	r2, #1
 800229a:	2121      	movs	r1, #33	; 0x21
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fb4b 	bl	8002938 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80022b6:	f107 030f 	add.w	r3, r7, #15
 80022ba:	2201      	movs	r2, #1
 80022bc:	2121      	movs	r1, #33	; 0x21
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fb08 	bl	80028d4 <GYRO_IO_Write>
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80022d6:	f107 030f 	add.w	r3, r7, #15
 80022da:	2201      	movs	r2, #1
 80022dc:	2124      	movs	r1, #36	; 0x24
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fb2a 	bl	8002938 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	f023 0310 	bic.w	r3, r3, #16
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80022f8:	f107 030f 	add.w	r3, r7, #15
 80022fc:	2201      	movs	r2, #1
 80022fe:	2124      	movs	r1, #36	; 0x24
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fae7 	bl	80028d4 <GYRO_IO_Write>
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b08b      	sub	sp, #44	; 0x2c
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	2300      	movs	r3, #0
 800231e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8002320:	f107 0310 	add.w	r3, r7, #16
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800232e:	f04f 0300 	mov.w	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8002334:	2300      	movs	r3, #0
 8002336:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8002338:	f107 030f 	add.w	r3, r7, #15
 800233c:	2201      	movs	r2, #1
 800233e:	2123      	movs	r1, #35	; 0x23
 8002340:	4618      	mov	r0, r3
 8002342:	f000 faf9 	bl	8002938 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8002346:	f107 0318 	add.w	r3, r7, #24
 800234a:	2206      	movs	r2, #6
 800234c:	2128      	movs	r1, #40	; 0x28
 800234e:	4618      	mov	r0, r3
 8002350:	f000 faf2 	bl	8002938 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235a:	2b00      	cmp	r3, #0
 800235c:	d123      	bne.n	80023a6 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
 8002362:	e01c      	b.n	800239e <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	3301      	adds	r3, #1
 800236a:	3328      	adds	r3, #40	; 0x28
 800236c:	443b      	add	r3, r7
 800236e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002372:	b29b      	uxth	r3, r3
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	b29a      	uxth	r2, r3
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	3328      	adds	r3, #40	; 0x28
 800237e:	443b      	add	r3, r7
 8002380:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002384:	b29b      	uxth	r3, r3
 8002386:	4413      	add	r3, r2
 8002388:	b29b      	uxth	r3, r3
 800238a:	b21a      	sxth	r2, r3
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	3328      	adds	r3, #40	; 0x28
 8002392:	443b      	add	r3, r7
 8002394:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	3301      	adds	r3, #1
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	dddf      	ble.n	8002364 <L3GD20_ReadXYZAngRate+0x54>
 80023a4:	e022      	b.n	80023ec <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
 80023aa:	e01c      	b.n	80023e6 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	3328      	adds	r3, #40	; 0x28
 80023b2:	443b      	add	r3, r7
 80023b4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	b29a      	uxth	r2, r3
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	3301      	adds	r3, #1
 80023c4:	3328      	adds	r3, #40	; 0x28
 80023c6:	443b      	add	r3, r7
 80023c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	4413      	add	r3, r2
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	b21a      	sxth	r2, r3
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	3328      	adds	r3, #40	; 0x28
 80023da:	443b      	add	r3, r7
 80023dc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	3301      	adds	r3, #1
 80023e4:	623b      	str	r3, [r7, #32]
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	dddf      	ble.n	80023ac <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d00c      	beq.n	8002410 <L3GD20_ReadXYZAngRate+0x100>
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	dc0d      	bgt.n	8002416 <L3GD20_ReadXYZAngRate+0x106>
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <L3GD20_ReadXYZAngRate+0xf4>
 80023fe:	2b10      	cmp	r3, #16
 8002400:	d003      	beq.n	800240a <L3GD20_ReadXYZAngRate+0xfa>
 8002402:	e008      	b.n	8002416 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8002404:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <L3GD20_ReadXYZAngRate+0x170>)
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002408:	e005      	b.n	8002416 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800240a:	4b1e      	ldr	r3, [pc, #120]	; (8002484 <L3GD20_ReadXYZAngRate+0x174>)
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800240e:	e002      	b.n	8002416 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <L3GD20_ReadXYZAngRate+0x178>)
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002414:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
 800241a:	e025      	b.n	8002468 <L3GD20_ReadXYZAngRate+0x158>
  {
    pfData[i]=(float)(RawData[i] * sensitivity * 0.001);
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	3328      	adds	r3, #40	; 0x28
 8002422:	443b      	add	r3, r7
 8002424:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002430:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002438:	ee17 0a90 	vmov	r0, s15
 800243c:	f7fe f894 	bl	8000568 <__aeabi_f2d>
 8002440:	a30d      	add	r3, pc, #52	; (adr r3, 8002478 <L3GD20_ReadXYZAngRate+0x168>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	f7fe f8e7 	bl	8000618 <__aeabi_dmul>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	18d4      	adds	r4, r2, r3
 800245a:	f7fe fbd5 	bl	8000c08 <__aeabi_d2f>
 800245e:	4603      	mov	r3, r0
 8002460:	6023      	str	r3, [r4, #0]
  for(i=0; i<3; i++)
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	3301      	adds	r3, #1
 8002466:	623b      	str	r3, [r7, #32]
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	2b02      	cmp	r3, #2
 800246c:	ddd6      	ble.n	800241c <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 800246e:	bf00      	nop
 8002470:	bf00      	nop
 8002472:	372c      	adds	r7, #44	; 0x2c
 8002474:	46bd      	mov	sp, r7
 8002476:	bd90      	pop	{r4, r7, pc}
 8002478:	d2f1a9fc 	.word	0xd2f1a9fc
 800247c:	3f50624d 	.word	0x3f50624d
 8002480:	410c0000 	.word	0x410c0000
 8002484:	418c0000 	.word	0x418c0000
 8002488:	428c0000 	.word	0x428c0000

0800248c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002490:	4819      	ldr	r0, [pc, #100]	; (80024f8 <SPIx_Init+0x6c>)
 8002492:	f005 fbc0 	bl	8007c16 <HAL_SPI_GetState>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d12b      	bne.n	80024f4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800249c:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <SPIx_Init+0x6c>)
 800249e:	4a17      	ldr	r2, [pc, #92]	; (80024fc <SPIx_Init+0x70>)
 80024a0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <SPIx_Init+0x6c>)
 80024a4:	2218      	movs	r2, #24
 80024a6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80024a8:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <SPIx_Init+0x6c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <SPIx_Init+0x6c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80024b4:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <SPIx_Init+0x6c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <SPIx_Init+0x6c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80024c0:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <SPIx_Init+0x6c>)
 80024c2:	2207      	movs	r2, #7
 80024c4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80024c6:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <SPIx_Init+0x6c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <SPIx_Init+0x6c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <SPIx_Init+0x6c>)
 80024d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80024da:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <SPIx_Init+0x6c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <SPIx_Init+0x6c>)
 80024e2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024e6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80024e8:	4803      	ldr	r0, [pc, #12]	; (80024f8 <SPIx_Init+0x6c>)
 80024ea:	f000 f873 	bl	80025d4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80024ee:	4802      	ldr	r0, [pc, #8]	; (80024f8 <SPIx_Init+0x6c>)
 80024f0:	f004 fedd 	bl	80072ae <HAL_SPI_Init>
  } 
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200003e4 	.word	0x200003e4
 80024fc:	40015000 	.word	0x40015000

08002500 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	b29a      	uxth	r2, r3
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <SPIx_Read+0x38>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f107 0108 	add.w	r1, r7, #8
 800251a:	4808      	ldr	r0, [pc, #32]	; (800253c <SPIx_Read+0x3c>)
 800251c:	f005 f8c8 	bl	80076b0 <HAL_SPI_Receive>
 8002520:	4603      	mov	r3, r0
 8002522:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800252a:	f000 f847 	bl	80025bc <SPIx_Error>
  }
  
  return readvalue;
 800252e:	68bb      	ldr	r3, [r7, #8]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000070 	.word	0x20000070
 800253c:	200003e4 	.word	0x200003e4

08002540 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <SPIx_Write+0x34>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	1db9      	adds	r1, r7, #6
 8002554:	2201      	movs	r2, #1
 8002556:	4808      	ldr	r0, [pc, #32]	; (8002578 <SPIx_Write+0x38>)
 8002558:	f004 ff6e 	bl	8007438 <HAL_SPI_Transmit>
 800255c:	4603      	mov	r3, r0
 800255e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002566:	f000 f829 	bl	80025bc <SPIx_Error>
  }
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000070 	.word	0x20000070
 8002578:	200003e4 	.word	0x200003e4

0800257c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af02      	add	r7, sp, #8
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <SPIx_WriteRead+0x38>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f107 020f 	add.w	r2, r7, #15
 8002592:	1df9      	adds	r1, r7, #7
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	2301      	movs	r3, #1
 8002598:	4807      	ldr	r0, [pc, #28]	; (80025b8 <SPIx_WriteRead+0x3c>)
 800259a:	f005 f99a 	bl	80078d2 <HAL_SPI_TransmitReceive>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 80025a4:	f000 f80a 	bl	80025bc <SPIx_Error>
  }
  
  return receivedbyte;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000070 	.word	0x20000070
 80025b8:	200003e4 	.word	0x200003e4

080025bc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80025c0:	4803      	ldr	r0, [pc, #12]	; (80025d0 <SPIx_Error+0x14>)
 80025c2:	f004 fefd 	bl	80073c0 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80025c6:	f7ff ff61 	bl	800248c <SPIx_Init>
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200003e4 	.word	0x200003e4

080025d4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	; 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	4b17      	ldr	r3, [pc, #92]	; (8002640 <SPIx_MspInit+0x6c>)
 80025e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e4:	4a16      	ldr	r2, [pc, #88]	; (8002640 <SPIx_MspInit+0x6c>)
 80025e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ea:	6453      	str	r3, [r2, #68]	; 0x44
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <SPIx_MspInit+0x6c>)
 80025ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	4b10      	ldr	r3, [pc, #64]	; (8002640 <SPIx_MspInit+0x6c>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	4a0f      	ldr	r2, [pc, #60]	; (8002640 <SPIx_MspInit+0x6c>)
 8002602:	f043 0320 	orr.w	r3, r3, #32
 8002606:	6313      	str	r3, [r2, #48]	; 0x30
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <SPIx_MspInit+0x6c>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002614:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002618:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800261e:	2302      	movs	r3, #2
 8002620:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002622:	2301      	movs	r3, #1
 8002624:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002626:	2305      	movs	r3, #5
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	4619      	mov	r1, r3
 8002630:	4804      	ldr	r0, [pc, #16]	; (8002644 <SPIx_MspInit+0x70>)
 8002632:	f001 ffe7 	bl	8004604 <HAL_GPIO_Init>
}
 8002636:	bf00      	nop
 8002638:	3728      	adds	r7, #40	; 0x28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	40021400 	.word	0x40021400

08002648 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800264e:	4b36      	ldr	r3, [pc, #216]	; (8002728 <LCD_IO_Init+0xe0>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d164      	bne.n	8002720 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002656:	4b34      	ldr	r3, [pc, #208]	; (8002728 <LCD_IO_Init+0xe0>)
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	4b32      	ldr	r3, [pc, #200]	; (800272c <LCD_IO_Init+0xe4>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	4a31      	ldr	r2, [pc, #196]	; (800272c <LCD_IO_Init+0xe4>)
 8002666:	f043 0308 	orr.w	r3, r3, #8
 800266a:	6313      	str	r3, [r2, #48]	; 0x30
 800266c:	4b2f      	ldr	r3, [pc, #188]	; (800272c <LCD_IO_Init+0xe4>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800267c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800267e:	2301      	movs	r3, #1
 8002680:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002686:	2302      	movs	r3, #2
 8002688:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800268a:	f107 030c 	add.w	r3, r7, #12
 800268e:	4619      	mov	r1, r3
 8002690:	4827      	ldr	r0, [pc, #156]	; (8002730 <LCD_IO_Init+0xe8>)
 8002692:	f001 ffb7 	bl	8004604 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	607b      	str	r3, [r7, #4]
 800269a:	4b24      	ldr	r3, [pc, #144]	; (800272c <LCD_IO_Init+0xe4>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a23      	ldr	r2, [pc, #140]	; (800272c <LCD_IO_Init+0xe4>)
 80026a0:	f043 0308 	orr.w	r3, r3, #8
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <LCD_IO_Init+0xe4>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80026b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026b8:	2301      	movs	r3, #1
 80026ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026c0:	2302      	movs	r3, #2
 80026c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80026c4:	f107 030c 	add.w	r3, r7, #12
 80026c8:	4619      	mov	r1, r3
 80026ca:	4819      	ldr	r0, [pc, #100]	; (8002730 <LCD_IO_Init+0xe8>)
 80026cc:	f001 ff9a 	bl	8004604 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80026d0:	2300      	movs	r3, #0
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	4b15      	ldr	r3, [pc, #84]	; (800272c <LCD_IO_Init+0xe4>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	4a14      	ldr	r2, [pc, #80]	; (800272c <LCD_IO_Init+0xe4>)
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	6313      	str	r3, [r2, #48]	; 0x30
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <LCD_IO_Init+0xe4>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80026ec:	2304      	movs	r3, #4
 80026ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026f0:	2301      	movs	r3, #1
 80026f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026f8:	2302      	movs	r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80026fc:	f107 030c 	add.w	r3, r7, #12
 8002700:	4619      	mov	r1, r3
 8002702:	480c      	ldr	r0, [pc, #48]	; (8002734 <LCD_IO_Init+0xec>)
 8002704:	f001 ff7e 	bl	8004604 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002708:	2200      	movs	r2, #0
 800270a:	2104      	movs	r1, #4
 800270c:	4809      	ldr	r0, [pc, #36]	; (8002734 <LCD_IO_Init+0xec>)
 800270e:	f002 f925 	bl	800495c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002712:	2201      	movs	r2, #1
 8002714:	2104      	movs	r1, #4
 8002716:	4807      	ldr	r0, [pc, #28]	; (8002734 <LCD_IO_Init+0xec>)
 8002718:	f002 f920 	bl	800495c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800271c:	f7ff feb6 	bl	800248c <SPIx_Init>
  }
}
 8002720:	bf00      	nop
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	2000043c 	.word	0x2000043c
 800272c:	40023800 	.word	0x40023800
 8002730:	40020c00 	.word	0x40020c00
 8002734:	40020800 	.word	0x40020800

08002738 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002742:	2201      	movs	r2, #1
 8002744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002748:	480a      	ldr	r0, [pc, #40]	; (8002774 <LCD_IO_WriteData+0x3c>)
 800274a:	f002 f907 	bl	800495c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800274e:	2200      	movs	r2, #0
 8002750:	2104      	movs	r1, #4
 8002752:	4809      	ldr	r0, [pc, #36]	; (8002778 <LCD_IO_WriteData+0x40>)
 8002754:	f002 f902 	bl	800495c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fef0 	bl	8002540 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002760:	2201      	movs	r2, #1
 8002762:	2104      	movs	r1, #4
 8002764:	4804      	ldr	r0, [pc, #16]	; (8002778 <LCD_IO_WriteData+0x40>)
 8002766:	f002 f8f9 	bl	800495c <HAL_GPIO_WritePin>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40020c00 	.word	0x40020c00
 8002778:	40020800 	.word	0x40020800

0800277c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002786:	2200      	movs	r2, #0
 8002788:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800278c:	480a      	ldr	r0, [pc, #40]	; (80027b8 <LCD_IO_WriteReg+0x3c>)
 800278e:	f002 f8e5 	bl	800495c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002792:	2200      	movs	r2, #0
 8002794:	2104      	movs	r1, #4
 8002796:	4809      	ldr	r0, [pc, #36]	; (80027bc <LCD_IO_WriteReg+0x40>)
 8002798:	f002 f8e0 	bl	800495c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fecd 	bl	8002540 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80027a6:	2201      	movs	r2, #1
 80027a8:	2104      	movs	r1, #4
 80027aa:	4804      	ldr	r0, [pc, #16]	; (80027bc <LCD_IO_WriteReg+0x40>)
 80027ac:	f002 f8d6 	bl	800495c <HAL_GPIO_WritePin>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40020c00 	.word	0x40020c00
 80027bc:	40020800 	.word	0x40020800

080027c0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	460a      	mov	r2, r1
 80027ca:	80fb      	strh	r3, [r7, #6]
 80027cc:	4613      	mov	r3, r2
 80027ce:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80027d4:	2200      	movs	r2, #0
 80027d6:	2104      	movs	r1, #4
 80027d8:	4810      	ldr	r0, [pc, #64]	; (800281c <LCD_IO_ReadData+0x5c>)
 80027da:	f002 f8bf 	bl	800495c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80027de:	2200      	movs	r2, #0
 80027e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027e4:	480e      	ldr	r0, [pc, #56]	; (8002820 <LCD_IO_ReadData+0x60>)
 80027e6:	f002 f8b9 	bl	800495c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fea7 	bl	8002540 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80027f2:	797b      	ldrb	r3, [r7, #5]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fe83 	bl	8002500 <SPIx_Read>
 80027fa:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80027fc:	2201      	movs	r2, #1
 80027fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002802:	4807      	ldr	r0, [pc, #28]	; (8002820 <LCD_IO_ReadData+0x60>)
 8002804:	f002 f8aa 	bl	800495c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002808:	2201      	movs	r2, #1
 800280a:	2104      	movs	r1, #4
 800280c:	4803      	ldr	r0, [pc, #12]	; (800281c <LCD_IO_ReadData+0x5c>)
 800280e:	f002 f8a5 	bl	800495c <HAL_GPIO_WritePin>
  
  return readvalue;
 8002812:	68fb      	ldr	r3, [r7, #12]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40020800 	.word	0x40020800
 8002820:	40020c00 	.word	0x40020c00

08002824 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f001 f98f 	bl	8003b50 <HAL_Delay>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <GYRO_IO_Init+0x8c>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <GYRO_IO_Init+0x8c>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b1d      	ldr	r3, [pc, #116]	; (80028c8 <GYRO_IO_Init+0x8c>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800285e:	2302      	movs	r3, #2
 8002860:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002862:	2301      	movs	r3, #1
 8002864:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800286a:	2301      	movs	r3, #1
 800286c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	4619      	mov	r1, r3
 8002874:	4815      	ldr	r0, [pc, #84]	; (80028cc <GYRO_IO_Init+0x90>)
 8002876:	f001 fec5 	bl	8004604 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 800287a:	2201      	movs	r2, #1
 800287c:	2102      	movs	r1, #2
 800287e:	4813      	ldr	r0, [pc, #76]	; (80028cc <GYRO_IO_Init+0x90>)
 8002880:	f002 f86c 	bl	800495c <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002884:	2300      	movs	r3, #0
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <GYRO_IO_Init+0x8c>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288c:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <GYRO_IO_Init+0x8c>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6313      	str	r3, [r2, #48]	; 0x30
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <GYRO_IO_Init+0x8c>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80028a0:	2306      	movs	r3, #6
 80028a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80028a4:	2300      	movs	r3, #0
 80028a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80028a8:	2302      	movs	r3, #2
 80028aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80028b0:	f107 030c 	add.w	r3, r7, #12
 80028b4:	4619      	mov	r1, r3
 80028b6:	4806      	ldr	r0, [pc, #24]	; (80028d0 <GYRO_IO_Init+0x94>)
 80028b8:	f001 fea4 	bl	8004604 <HAL_GPIO_Init>

  SPIx_Init();
 80028bc:	f7ff fde6 	bl	800248c <SPIx_Init>
}
 80028c0:	bf00      	nop
 80028c2:	3720      	adds	r7, #32
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020800 	.word	0x40020800
 80028d0:	40020000 	.word	0x40020000

080028d4 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	70fb      	strb	r3, [r7, #3]
 80028e0:	4613      	mov	r3, r2
 80028e2:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80028e4:	883b      	ldrh	r3, [r7, #0]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d903      	bls.n	80028f2 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f0:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80028f2:	2200      	movs	r2, #0
 80028f4:	2102      	movs	r1, #2
 80028f6:	480f      	ldr	r0, [pc, #60]	; (8002934 <GYRO_IO_Write+0x60>)
 80028f8:	f002 f830 	bl	800495c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fe3c 	bl	800257c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002904:	e00a      	b.n	800291c <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fe36 	bl	800257c <SPIx_WriteRead>
    NumByteToWrite--;
 8002910:	883b      	ldrh	r3, [r7, #0]
 8002912:	3b01      	subs	r3, #1
 8002914:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3301      	adds	r3, #1
 800291a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800291c:	883b      	ldrh	r3, [r7, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f1      	bne.n	8002906 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002922:	2201      	movs	r2, #1
 8002924:	2102      	movs	r1, #2
 8002926:	4803      	ldr	r0, [pc, #12]	; (8002934 <GYRO_IO_Write+0x60>)
 8002928:	f002 f818 	bl	800495c <HAL_GPIO_WritePin>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40020800 	.word	0x40020800

08002938 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	70fb      	strb	r3, [r7, #3]
 8002944:	4613      	mov	r3, r2
 8002946:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002948:	883b      	ldrh	r3, [r7, #0]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d904      	bls.n	8002958 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002954:	70fb      	strb	r3, [r7, #3]
 8002956:	e003      	b.n	8002960 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800295e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002960:	2200      	movs	r2, #0
 8002962:	2102      	movs	r1, #2
 8002964:	4810      	ldr	r0, [pc, #64]	; (80029a8 <GYRO_IO_Read+0x70>)
 8002966:	f001 fff9 	bl	800495c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fe05 	bl	800257c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002972:	e00c      	b.n	800298e <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002974:	2000      	movs	r0, #0
 8002976:	f7ff fe01 	bl	800257c <SPIx_WriteRead>
 800297a:	4603      	mov	r3, r0
 800297c:	461a      	mov	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002982:	883b      	ldrh	r3, [r7, #0]
 8002984:	3b01      	subs	r3, #1
 8002986:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3301      	adds	r3, #1
 800298c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800298e:	883b      	ldrh	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ef      	bne.n	8002974 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002994:	2201      	movs	r2, #1
 8002996:	2102      	movs	r1, #2
 8002998:	4803      	ldr	r0, [pc, #12]	; (80029a8 <GYRO_IO_Read+0x70>)
 800299a:	f001 ffdf 	bl	800495c <HAL_GPIO_WritePin>
}  
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40020800 	.word	0x40020800

080029ac <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80029b6:	2300      	movs	r3, #0
 80029b8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 80029ba:	2300      	movs	r3, #0
 80029bc:	703b      	strb	r3, [r7, #0]
 80029be:	2300      	movs	r3, #0
 80029c0:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80029c2:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <BSP_GYRO_Init+0xc4>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	4798      	blx	r3
 80029c8:	4603      	mov	r3, r0
 80029ca:	2bd4      	cmp	r3, #212	; 0xd4
 80029cc:	d005      	beq.n	80029da <BSP_GYRO_Init+0x2e>
 80029ce:	4b28      	ldr	r3, [pc, #160]	; (8002a70 <BSP_GYRO_Init+0xc4>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4798      	blx	r3
 80029d4:	4603      	mov	r3, r0
 80029d6:	2bd5      	cmp	r3, #213	; 0xd5
 80029d8:	d145      	bne.n	8002a66 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80029da:	4b26      	ldr	r3, [pc, #152]	; (8002a74 <BSP_GYRO_Init+0xc8>)
 80029dc:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <BSP_GYRO_Init+0xc4>)
 80029de:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80029e0:	2308      	movs	r3, #8
 80029e2:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80029e4:	2300      	movs	r3, #0
 80029e6:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80029e8:	2307      	movs	r3, #7
 80029ea:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80029ec:	2330      	movs	r3, #48	; 0x30
 80029ee:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80029f0:	2300      	movs	r3, #0
 80029f2:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80029f4:	2300      	movs	r3, #0
 80029f6:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80029f8:	2310      	movs	r3, #16
 80029fa:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80029fc:	793a      	ldrb	r2, [r7, #4]
 80029fe:	797b      	ldrb	r3, [r7, #5]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002a04:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002a06:	4313      	orrs	r3, r2
 8002a08:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002a12:	7a3a      	ldrb	r2, [r7, #8]
 8002a14:	7a7b      	ldrb	r3, [r7, #9]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8002a1a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	89bb      	ldrh	r3, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <BSP_GYRO_Init+0xc8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	89ba      	ldrh	r2, [r7, #12]
 8002a34:	4610      	mov	r0, r2
 8002a36:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002a40:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002a42:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002a44:	4313      	orrs	r3, r2
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <BSP_GYRO_Init+0xc8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	89ba      	ldrh	r2, [r7, #12]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	4610      	mov	r0, r2
 8002a56:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <BSP_GYRO_Init+0xc8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	2010      	movs	r0, #16
 8002a60:	4798      	blx	r3

    ret = GYRO_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	2000003c 	.word	0x2000003c
 8002a74:	20000440 	.word	0x20000440

08002a78 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002a7c:	4b2d      	ldr	r3, [pc, #180]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002a7e:	4a2e      	ldr	r2, [pc, #184]	; (8002b38 <BSP_LCD_Init+0xc0>)
 8002a80:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002a82:	4b2c      	ldr	r3, [pc, #176]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002a84:	2209      	movs	r2, #9
 8002a86:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002a88:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002a8e:	4b29      	ldr	r3, [pc, #164]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002a90:	221d      	movs	r2, #29
 8002a92:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002a94:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002a96:	2203      	movs	r2, #3
 8002a98:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002a9a:	4b26      	ldr	r3, [pc, #152]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002a9c:	f240 120d 	movw	r2, #269	; 0x10d
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002aa4:	f240 1243 	movw	r2, #323	; 0x143
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002aac:	f240 1217 	movw	r2, #279	; 0x117
 8002ab0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002ab2:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002ab4:	f240 1247 	movw	r2, #327	; 0x147
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002aba:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002aca:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <BSP_LCD_Init+0xc4>)
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002ad8:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <BSP_LCD_Init+0xc4>)
 8002ada:	22c0      	movs	r2, #192	; 0xc0
 8002adc:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002ade:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <BSP_LCD_Init+0xc4>)
 8002ae0:	2204      	movs	r2, #4
 8002ae2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002ae4:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <BSP_LCD_Init+0xc4>)
 8002ae6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002aec:	4813      	ldr	r0, [pc, #76]	; (8002b3c <BSP_LCD_Init+0xc4>)
 8002aee:	f004 f983 	bl	8006df8 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002b0a:	f000 fc27 	bl	800335c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002b0e:	4809      	ldr	r0, [pc, #36]	; (8002b34 <BSP_LCD_Init+0xbc>)
 8002b10:	f001 ff3e 	bl	8004990 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002b14:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <BSP_LCD_Init+0xc8>)
 8002b16:	4a0b      	ldr	r2, [pc, #44]	; (8002b44 <BSP_LCD_Init+0xcc>)
 8002b18:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <BSP_LCD_Init+0xc8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002b22:	f000 fe09 	bl	8003738 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002b26:	4808      	ldr	r0, [pc, #32]	; (8002b48 <BSP_LCD_Init+0xd0>)
 8002b28:	f000 f8ce 	bl	8002cc8 <BSP_LCD_SetFont>

  return LCD_OK;
 8002b2c:	2300      	movs	r3, #0
}  
 8002b2e:	4618      	mov	r0, r3
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000444 	.word	0x20000444
 8002b38:	40016800 	.word	0x40016800
 8002b3c:	2000052c 	.word	0x2000052c
 8002b40:	20000578 	.word	0x20000578
 8002b44:	20000004 	.word	0x20000004
 8002b48:	20000074 	.word	0x20000074

08002b4c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <BSP_LCD_GetXSize+0x14>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	4798      	blx	r3
 8002b58:	4603      	mov	r3, r0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000578 	.word	0x20000578

08002b64 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <BSP_LCD_GetYSize+0x14>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	4798      	blx	r3
 8002b70:	4603      	mov	r3, r0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000578 	.word	0x20000578

08002b7c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b090      	sub	sp, #64	; 0x40
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002b8c:	f7ff ffde 	bl	8002b4c <BSP_LCD_GetXSize>
 8002b90:	4603      	mov	r3, r0
 8002b92:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002b98:	f7ff ffe4 	bl	8002b64 <BSP_LCD_GetYSize>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002ba8:	23ff      	movs	r3, #255	; 0xff
 8002baa:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002bc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002bc8:	2307      	movs	r3, #7
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002bcc:	f7ff ffbe 	bl	8002b4c <BSP_LCD_GetXSize>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002bd4:	f7ff ffc6 	bl	8002b64 <BSP_LCD_GetYSize>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002bdc:	88fa      	ldrh	r2, [r7, #6]
 8002bde:	f107 030c 	add.w	r3, r7, #12
 8002be2:	4619      	mov	r1, r3
 8002be4:	4814      	ldr	r0, [pc, #80]	; (8002c38 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002be6:	f001 ffad 	bl	8004b44 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002bea:	88fa      	ldrh	r2, [r7, #6]
 8002bec:	4913      	ldr	r1, [pc, #76]	; (8002c3c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002bee:	4613      	mov	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfe:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002c00:	88fa      	ldrh	r2, [r7, #6]
 8002c02:	490e      	ldr	r1, [pc, #56]	; (8002c3c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c04:	4613      	mov	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3308      	adds	r3, #8
 8002c10:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002c12:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002c14:	88fa      	ldrh	r2, [r7, #6]
 8002c16:	4909      	ldr	r1, [pc, #36]	; (8002c3c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002c26:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002c28:	4803      	ldr	r0, [pc, #12]	; (8002c38 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002c2a:	f001 ffc9 	bl	8004bc0 <HAL_LTDC_EnableDither>
}
 8002c2e:	bf00      	nop
 8002c30:	3740      	adds	r7, #64	; 0x40
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000444 	.word	0x20000444
 8002c3c:	20000560 	.word	0x20000560
 8002c40:	20000074 	.word	0x20000074

08002c44 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002c4c:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <BSP_LCD_SelectLayer+0x1c>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6013      	str	r3, [r2, #0]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	2000055c 	.word	0x2000055c

08002c64 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002c6c:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <BSP_LCD_SetTextColor+0x28>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4907      	ldr	r1, [pc, #28]	; (8002c90 <BSP_LCD_SetTextColor+0x2c>)
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	601a      	str	r2, [r3, #0]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	2000055c 	.word	0x2000055c
 8002c90:	20000560 	.word	0x20000560

08002c94 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <BSP_LCD_SetBackColor+0x2c>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	4908      	ldr	r1, [pc, #32]	; (8002cc4 <BSP_LCD_SetBackColor+0x30>)
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	3304      	adds	r3, #4
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	601a      	str	r2, [r3, #0]
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	2000055c 	.word	0x2000055c
 8002cc4:	20000560 	.word	0x20000560

08002cc8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <BSP_LCD_SetFont+0x2c>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4908      	ldr	r1, [pc, #32]	; (8002cf8 <BSP_LCD_SetFont+0x30>)
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3308      	adds	r3, #8
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	601a      	str	r2, [r3, #0]
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	2000055c 	.word	0x2000055c
 8002cf8:	20000560 	.word	0x20000560

08002cfc <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002d00:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <BSP_LCD_GetFont+0x24>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4907      	ldr	r1, [pc, #28]	; (8002d24 <BSP_LCD_GetFont+0x28>)
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3308      	adds	r3, #8
 8002d12:	681b      	ldr	r3, [r3, #0]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	2000055c 	.word	0x2000055c
 8002d24:	20000560 	.word	0x20000560

08002d28 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <BSP_LCD_Clear+0x48>)
 8002d32:	681c      	ldr	r4, [r3, #0]
 8002d34:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <BSP_LCD_Clear+0x48>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0e      	ldr	r2, [pc, #56]	; (8002d74 <BSP_LCD_Clear+0x4c>)
 8002d3a:	2134      	movs	r1, #52	; 0x34
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	335c      	adds	r3, #92	; 0x5c
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	461e      	mov	r6, r3
 8002d48:	f7ff ff00 	bl	8002b4c <BSP_LCD_GetXSize>
 8002d4c:	4605      	mov	r5, r0
 8002d4e:	f7ff ff09 	bl	8002b64 <BSP_LCD_GetYSize>
 8002d52:	4602      	mov	r2, r0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	9301      	str	r3, [sp, #4]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	462a      	mov	r2, r5
 8002d60:	4631      	mov	r1, r6
 8002d62:	4620      	mov	r0, r4
 8002d64:	f000 fcb0 	bl	80036c8 <FillBuffer>
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d70:	2000055c 	.word	0x2000055c
 8002d74:	20000444 	.word	0x20000444

08002d78 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	80fb      	strh	r3, [r7, #6]
 8002d82:	460b      	mov	r3, r1
 8002d84:	80bb      	strh	r3, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <BSP_LCD_DisplayChar+0x80>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	491b      	ldr	r1, [pc, #108]	; (8002dfc <BSP_LCD_DisplayChar+0x84>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002da6:	4b14      	ldr	r3, [pc, #80]	; (8002df8 <BSP_LCD_DisplayChar+0x80>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4c14      	ldr	r4, [pc, #80]	; (8002dfc <BSP_LCD_DisplayChar+0x84>)
 8002dac:	4613      	mov	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4423      	add	r3, r4
 8002db6:	3308      	adds	r3, #8
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002dbc:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <BSP_LCD_DisplayChar+0x80>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4c0d      	ldr	r4, [pc, #52]	; (8002dfc <BSP_LCD_DisplayChar+0x84>)
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4423      	add	r3, r4
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	889b      	ldrh	r3, [r3, #4]
 8002dd6:	3307      	adds	r3, #7
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	da00      	bge.n	8002dde <BSP_LCD_DisplayChar+0x66>
 8002ddc:	3307      	adds	r3, #7
 8002dde:	10db      	asrs	r3, r3, #3
 8002de0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002de4:	18ca      	adds	r2, r1, r3
 8002de6:	88b9      	ldrh	r1, [r7, #4]
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fbb2 	bl	8003554 <DrawChar>
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd90      	pop	{r4, r7, pc}
 8002df8:	2000055c 	.word	0x2000055c
 8002dfc:	20000560 	.word	0x20000560

08002e00 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002e00:	b5b0      	push	{r4, r5, r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60ba      	str	r2, [r7, #8]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	81fb      	strh	r3, [r7, #14]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	81bb      	strh	r3, [r7, #12]
 8002e12:	4613      	mov	r3, r2
 8002e14:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002e16:	2301      	movs	r3, #1
 8002e18:	83fb      	strh	r3, [r7, #30]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002e2a:	e002      	b.n	8002e32 <BSP_LCD_DisplayStringAt+0x32>
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	617a      	str	r2, [r7, #20]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f6      	bne.n	8002e2c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002e3e:	f7ff fe85 	bl	8002b4c <BSP_LCD_GetXSize>
 8002e42:	4601      	mov	r1, r0
 8002e44:	4b4b      	ldr	r3, [pc, #300]	; (8002f74 <BSP_LCD_DisplayStringAt+0x174>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	484b      	ldr	r0, [pc, #300]	; (8002f78 <BSP_LCD_DisplayStringAt+0x178>)
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4403      	add	r3, r0
 8002e54:	3308      	adds	r3, #8
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	889b      	ldrh	r3, [r3, #4]
 8002e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e5e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	d01c      	beq.n	8002ea0 <BSP_LCD_DisplayStringAt+0xa0>
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	dc33      	bgt.n	8002ed2 <BSP_LCD_DisplayStringAt+0xd2>
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d002      	beq.n	8002e74 <BSP_LCD_DisplayStringAt+0x74>
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d019      	beq.n	8002ea6 <BSP_LCD_DisplayStringAt+0xa6>
 8002e72:	e02e      	b.n	8002ed2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	1ad1      	subs	r1, r2, r3
 8002e7a:	4b3e      	ldr	r3, [pc, #248]	; (8002f74 <BSP_LCD_DisplayStringAt+0x174>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	483e      	ldr	r0, [pc, #248]	; (8002f78 <BSP_LCD_DisplayStringAt+0x178>)
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4403      	add	r3, r0
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	889b      	ldrh	r3, [r3, #4]
 8002e90:	fb01 f303 	mul.w	r3, r1, r3
 8002e94:	085b      	lsrs	r3, r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	89fb      	ldrh	r3, [r7, #14]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	83fb      	strh	r3, [r7, #30]
      break;
 8002e9e:	e01b      	b.n	8002ed8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002ea0:	89fb      	ldrh	r3, [r7, #14]
 8002ea2:	83fb      	strh	r3, [r7, #30]
      break;
 8002ea4:	e018      	b.n	8002ed8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	b299      	uxth	r1, r3
 8002eae:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <BSP_LCD_DisplayStringAt+0x174>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4831      	ldr	r0, [pc, #196]	; (8002f78 <BSP_LCD_DisplayStringAt+0x178>)
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4403      	add	r3, r0
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	889b      	ldrh	r3, [r3, #4]
 8002ec4:	fb11 f303 	smulbb	r3, r1, r3
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	89fb      	ldrh	r3, [r7, #14]
 8002ecc:	4413      	add	r3, r2
 8002ece:	83fb      	strh	r3, [r7, #30]
      break;
 8002ed0:	e002      	b.n	8002ed8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002ed2:	89fb      	ldrh	r3, [r7, #14]
 8002ed4:	83fb      	strh	r3, [r7, #30]
      break;
 8002ed6:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ed8:	e01a      	b.n	8002f10 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	89b9      	ldrh	r1, [r7, #12]
 8002ee0:	8bfb      	ldrh	r3, [r7, #30]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff ff48 	bl	8002d78 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002ee8:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <BSP_LCD_DisplayStringAt+0x174>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4922      	ldr	r1, [pc, #136]	; (8002f78 <BSP_LCD_DisplayStringAt+0x178>)
 8002eee:	4613      	mov	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3308      	adds	r3, #8
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	889a      	ldrh	r2, [r3, #4]
 8002efe:	8bfb      	ldrh	r3, [r7, #30]
 8002f00:	4413      	add	r3, r2
 8002f02:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	3301      	adds	r3, #1
 8002f08:	60bb      	str	r3, [r7, #8]
    i++;
 8002f0a:	8bbb      	ldrh	r3, [r7, #28]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2dc      	uxtb	r4, r3
 8002f1e:	f7ff fe15 	bl	8002b4c <BSP_LCD_GetXSize>
 8002f22:	8bb9      	ldrh	r1, [r7, #28]
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <BSP_LCD_DisplayStringAt+0x174>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4d13      	ldr	r5, [pc, #76]	; (8002f78 <BSP_LCD_DisplayStringAt+0x178>)
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	442b      	add	r3, r5
 8002f34:	3308      	adds	r3, #8
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	889b      	ldrh	r3, [r3, #4]
 8002f3a:	fb01 f303 	mul.w	r3, r1, r3
 8002f3e:	1ac3      	subs	r3, r0, r3
 8002f40:	b299      	uxth	r1, r3
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <BSP_LCD_DisplayStringAt+0x174>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	480c      	ldr	r0, [pc, #48]	; (8002f78 <BSP_LCD_DisplayStringAt+0x178>)
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4403      	add	r3, r0
 8002f52:	3308      	adds	r3, #8
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	889b      	ldrh	r3, [r3, #4]
 8002f58:	4299      	cmp	r1, r3
 8002f5a:	bf2c      	ite	cs
 8002f5c:	2301      	movcs	r3, #1
 8002f5e:	2300      	movcc	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	4023      	ands	r3, r4
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1b7      	bne.n	8002eda <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002f6a:	bf00      	nop
 8002f6c:	bf00      	nop
 8002f6e:	3720      	adds	r7, #32
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bdb0      	pop	{r4, r5, r7, pc}
 8002f74:	2000055c 	.word	0x2000055c
 8002f78:	20000560 	.word	0x20000560

08002f7c <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	6039      	str	r1, [r7, #0]
 8002f86:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002f88:	f7ff feb8 	bl	8002cfc <BSP_LCD_GetFont>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	88db      	ldrh	r3, [r3, #6]
 8002f90:	88fa      	ldrh	r2, [r7, #6]
 8002f92:	fb12 f303 	smulbb	r3, r2, r3
 8002f96:	b299      	uxth	r1, r3
 8002f98:	2303      	movs	r3, #3
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7ff ff2f 	bl	8002e00 <BSP_LCD_DisplayStringAt>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002fac:	b5b0      	push	{r4, r5, r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	80bb      	strh	r3, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002fc2:	4b16      	ldr	r3, [pc, #88]	; (800301c <BSP_LCD_DrawHLine+0x70>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a16      	ldr	r2, [pc, #88]	; (8003020 <BSP_LCD_DrawHLine+0x74>)
 8002fc8:	2134      	movs	r1, #52	; 0x34
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	335c      	adds	r3, #92	; 0x5c
 8002fd2:	681c      	ldr	r4, [r3, #0]
 8002fd4:	f7ff fdba 	bl	8002b4c <BSP_LCD_GetXSize>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	88bb      	ldrh	r3, [r7, #4]
 8002fdc:	fb03 f202 	mul.w	r2, r3, r2
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4423      	add	r3, r4
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002fea:	4b0c      	ldr	r3, [pc, #48]	; (800301c <BSP_LCD_DrawHLine+0x70>)
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	887c      	ldrh	r4, [r7, #2]
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	; (800301c <BSP_LCD_DrawHLine+0x70>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	4d0b      	ldr	r5, [pc, #44]	; (8003024 <BSP_LCD_DrawHLine+0x78>)
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	442b      	add	r3, r5
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	2300      	movs	r3, #0
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2301      	movs	r3, #1
 800300c:	4622      	mov	r2, r4
 800300e:	f000 fb5b 	bl	80036c8 <FillBuffer>
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bdb0      	pop	{r4, r5, r7, pc}
 800301a:	bf00      	nop
 800301c:	2000055c 	.word	0x2000055c
 8003020:	20000444 	.word	0x20000444
 8003024:	20000560 	.word	0x20000560

08003028 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	80fb      	strh	r3, [r7, #6]
 8003032:	460b      	mov	r3, r1
 8003034:	80bb      	strh	r3, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800303a:	887b      	ldrh	r3, [r7, #2]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	f1c3 0303 	rsb	r3, r3, #3
 8003042:	617b      	str	r3, [r7, #20]
  curx = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003048:	887b      	ldrh	r3, [r7, #2]
 800304a:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 800304c:	e0c7      	b.n	80031de <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	b29a      	uxth	r2, r3
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	4413      	add	r3, r2
 8003056:	b298      	uxth	r0, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	b29b      	uxth	r3, r3
 800305c:	88ba      	ldrh	r2, [r7, #4]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	b299      	uxth	r1, r3
 8003062:	4b64      	ldr	r3, [pc, #400]	; (80031f4 <BSP_LCD_DrawCircle+0x1cc>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4c64      	ldr	r4, [pc, #400]	; (80031f8 <BSP_LCD_DrawCircle+0x1d0>)
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4423      	add	r3, r4
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	f000 fa47 	bl	8003508 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	b29b      	uxth	r3, r3
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	b298      	uxth	r0, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	b29b      	uxth	r3, r3
 8003088:	88ba      	ldrh	r2, [r7, #4]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	b299      	uxth	r1, r3
 800308e:	4b59      	ldr	r3, [pc, #356]	; (80031f4 <BSP_LCD_DrawCircle+0x1cc>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4c59      	ldr	r4, [pc, #356]	; (80031f8 <BSP_LCD_DrawCircle+0x1d0>)
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4423      	add	r3, r4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	f000 fa31 	bl	8003508 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	4413      	add	r3, r2
 80030ae:	b298      	uxth	r0, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	88ba      	ldrh	r2, [r7, #4]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	b299      	uxth	r1, r3
 80030ba:	4b4e      	ldr	r3, [pc, #312]	; (80031f4 <BSP_LCD_DrawCircle+0x1cc>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4c4e      	ldr	r4, [pc, #312]	; (80031f8 <BSP_LCD_DrawCircle+0x1d0>)
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4423      	add	r3, r4
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	f000 fa1b 	bl	8003508 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	88fa      	ldrh	r2, [r7, #6]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	b298      	uxth	r0, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	88ba      	ldrh	r2, [r7, #4]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	b299      	uxth	r1, r3
 80030e6:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <BSP_LCD_DrawCircle+0x1cc>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4c43      	ldr	r4, [pc, #268]	; (80031f8 <BSP_LCD_DrawCircle+0x1d0>)
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4423      	add	r3, r4
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f000 fa05 	bl	8003508 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	b29a      	uxth	r2, r3
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	4413      	add	r3, r2
 8003106:	b298      	uxth	r0, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	b29a      	uxth	r2, r3
 800310c:	88bb      	ldrh	r3, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	b299      	uxth	r1, r3
 8003112:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <BSP_LCD_DrawCircle+0x1cc>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4c38      	ldr	r4, [pc, #224]	; (80031f8 <BSP_LCD_DrawCircle+0x1d0>)
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4423      	add	r3, r4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	f000 f9ef 	bl	8003508 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	b29b      	uxth	r3, r3
 800312e:	88fa      	ldrh	r2, [r7, #6]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	b298      	uxth	r0, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	b29a      	uxth	r2, r3
 8003138:	88bb      	ldrh	r3, [r7, #4]
 800313a:	4413      	add	r3, r2
 800313c:	b299      	uxth	r1, r3
 800313e:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <BSP_LCD_DrawCircle+0x1cc>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4c2d      	ldr	r4, [pc, #180]	; (80031f8 <BSP_LCD_DrawCircle+0x1d0>)
 8003144:	4613      	mov	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4423      	add	r3, r4
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	f000 f9d9 	bl	8003508 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	b29a      	uxth	r2, r3
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	4413      	add	r3, r2
 800315e:	b298      	uxth	r0, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	b29a      	uxth	r2, r3
 8003164:	88bb      	ldrh	r3, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	b299      	uxth	r1, r3
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <BSP_LCD_DrawCircle+0x1cc>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	4c22      	ldr	r4, [pc, #136]	; (80031f8 <BSP_LCD_DrawCircle+0x1d0>)
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4423      	add	r3, r4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	f000 f9c3 	bl	8003508 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	b29b      	uxth	r3, r3
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	b298      	uxth	r0, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	b29a      	uxth	r2, r3
 8003190:	88bb      	ldrh	r3, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	b299      	uxth	r1, r3
 8003196:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <BSP_LCD_DrawCircle+0x1cc>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4c17      	ldr	r4, [pc, #92]	; (80031f8 <BSP_LCD_DrawCircle+0x1d0>)
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4423      	add	r3, r4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	f000 f9ad 	bl	8003508 <BSP_LCD_DrawPixel>

    if (d < 0)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da06      	bge.n	80031c2 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	009a      	lsls	r2, r3, #2
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	4413      	add	r3, r2
 80031bc:	3306      	adds	r3, #6
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	e00a      	b.n	80031d8 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	009a      	lsls	r2, r3, #2
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	4413      	add	r3, r2
 80031ce:	330a      	adds	r3, #10
 80031d0:	617b      	str	r3, [r7, #20]
      cury--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	3301      	adds	r3, #1
 80031dc:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	f67f af33 	bls.w	800304e <BSP_LCD_DrawCircle+0x26>
  } 
}
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd90      	pop	{r4, r7, pc}
 80031f2:	bf00      	nop
 80031f4:	2000055c 	.word	0x2000055c
 80031f8:	20000560 	.word	0x20000560

080031fc <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	80fb      	strh	r3, [r7, #6]
 8003206:	460b      	mov	r3, r1
 8003208:	80bb      	strh	r3, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	f1c3 0303 	rsb	r3, r3, #3
 8003216:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800321c:	887b      	ldrh	r3, [r7, #2]
 800321e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003220:	4b44      	ldr	r3, [pc, #272]	; (8003334 <BSP_LCD_FillCircle+0x138>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4944      	ldr	r1, [pc, #272]	; (8003338 <BSP_LCD_FillCircle+0x13c>)
 8003226:	4613      	mov	r3, r2
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff fd16 	bl	8002c64 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003238:	e061      	b.n	80032fe <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d021      	beq.n	8003284 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	b29b      	uxth	r3, r3
 8003244:	88fa      	ldrh	r2, [r7, #6]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	b298      	uxth	r0, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	b29a      	uxth	r2, r3
 800324e:	88bb      	ldrh	r3, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	b299      	uxth	r1, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	b29b      	uxth	r3, r3
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	b29b      	uxth	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	f7ff fea5 	bl	8002fac <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	b29b      	uxth	r3, r3
 8003266:	88fa      	ldrh	r2, [r7, #6]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	b298      	uxth	r0, r3
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	b29b      	uxth	r3, r3
 8003270:	88ba      	ldrh	r2, [r7, #4]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	b299      	uxth	r1, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	b29b      	uxth	r3, r3
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	b29b      	uxth	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	f7ff fe94 	bl	8002fac <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d021      	beq.n	80032ce <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	b29b      	uxth	r3, r3
 800328e:	88fa      	ldrh	r2, [r7, #6]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	b298      	uxth	r0, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	b29b      	uxth	r3, r3
 8003298:	88ba      	ldrh	r2, [r7, #4]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	b299      	uxth	r1, r3
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	f7ff fe80 	bl	8002fac <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	88fa      	ldrh	r2, [r7, #6]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	b298      	uxth	r0, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	88bb      	ldrh	r3, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	b299      	uxth	r1, r3
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	461a      	mov	r2, r3
 80032ca:	f7ff fe6f 	bl	8002fac <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	da06      	bge.n	80032e2 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	009a      	lsls	r2, r3, #2
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	4413      	add	r3, r2
 80032dc:	3306      	adds	r3, #6
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e00a      	b.n	80032f8 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	009a      	lsls	r2, r3, #2
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	4413      	add	r3, r2
 80032ee:	330a      	adds	r3, #10
 80032f0:	617b      	str	r3, [r7, #20]
      cury--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	3301      	adds	r3, #1
 80032fc:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	429a      	cmp	r2, r3
 8003304:	d999      	bls.n	800323a <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003306:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <BSP_LCD_FillCircle+0x138>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	490b      	ldr	r1, [pc, #44]	; (8003338 <BSP_LCD_FillCircle+0x13c>)
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fca3 	bl	8002c64 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800331e:	887a      	ldrh	r2, [r7, #2]
 8003320:	88b9      	ldrh	r1, [r7, #4]
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fe7f 	bl	8003028 <BSP_LCD_DrawCircle>
}
 800332a:	bf00      	nop
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	2000055c 	.word	0x2000055c
 8003338:	20000560 	.word	0x20000560

0800333c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <BSP_LCD_DisplayOn+0x1c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800334a:	4b03      	ldr	r3, [pc, #12]	; (8003358 <BSP_LCD_DisplayOn+0x1c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4798      	blx	r3
  }
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000578 	.word	0x20000578

0800335c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08e      	sub	sp, #56	; 0x38
 8003360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	623b      	str	r3, [r7, #32]
 8003366:	4b61      	ldr	r3, [pc, #388]	; (80034ec <BSP_LCD_MspInit+0x190>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	4a60      	ldr	r2, [pc, #384]	; (80034ec <BSP_LCD_MspInit+0x190>)
 800336c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003370:	6453      	str	r3, [r2, #68]	; 0x44
 8003372:	4b5e      	ldr	r3, [pc, #376]	; (80034ec <BSP_LCD_MspInit+0x190>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800337a:	623b      	str	r3, [r7, #32]
 800337c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	4b5a      	ldr	r3, [pc, #360]	; (80034ec <BSP_LCD_MspInit+0x190>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a59      	ldr	r2, [pc, #356]	; (80034ec <BSP_LCD_MspInit+0x190>)
 8003388:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b57      	ldr	r3, [pc, #348]	; (80034ec <BSP_LCD_MspInit+0x190>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	4b53      	ldr	r3, [pc, #332]	; (80034ec <BSP_LCD_MspInit+0x190>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	4a52      	ldr	r2, [pc, #328]	; (80034ec <BSP_LCD_MspInit+0x190>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	6313      	str	r3, [r2, #48]	; 0x30
 80033aa:	4b50      	ldr	r3, [pc, #320]	; (80034ec <BSP_LCD_MspInit+0x190>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	4b4c      	ldr	r3, [pc, #304]	; (80034ec <BSP_LCD_MspInit+0x190>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4a4b      	ldr	r2, [pc, #300]	; (80034ec <BSP_LCD_MspInit+0x190>)
 80033c0:	f043 0302 	orr.w	r3, r3, #2
 80033c4:	6313      	str	r3, [r2, #48]	; 0x30
 80033c6:	4b49      	ldr	r3, [pc, #292]	; (80034ec <BSP_LCD_MspInit+0x190>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	4b45      	ldr	r3, [pc, #276]	; (80034ec <BSP_LCD_MspInit+0x190>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a44      	ldr	r2, [pc, #272]	; (80034ec <BSP_LCD_MspInit+0x190>)
 80033dc:	f043 0304 	orr.w	r3, r3, #4
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
 80033e2:	4b42      	ldr	r3, [pc, #264]	; (80034ec <BSP_LCD_MspInit+0x190>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033ee:	2300      	movs	r3, #0
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	4b3e      	ldr	r3, [pc, #248]	; (80034ec <BSP_LCD_MspInit+0x190>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	4a3d      	ldr	r2, [pc, #244]	; (80034ec <BSP_LCD_MspInit+0x190>)
 80033f8:	f043 0308 	orr.w	r3, r3, #8
 80033fc:	6313      	str	r3, [r2, #48]	; 0x30
 80033fe:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <BSP_LCD_MspInit+0x190>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	60fb      	str	r3, [r7, #12]
 8003408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	4b37      	ldr	r3, [pc, #220]	; (80034ec <BSP_LCD_MspInit+0x190>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4a36      	ldr	r2, [pc, #216]	; (80034ec <BSP_LCD_MspInit+0x190>)
 8003414:	f043 0320 	orr.w	r3, r3, #32
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	4b34      	ldr	r3, [pc, #208]	; (80034ec <BSP_LCD_MspInit+0x190>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	4b30      	ldr	r3, [pc, #192]	; (80034ec <BSP_LCD_MspInit+0x190>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4a2f      	ldr	r2, [pc, #188]	; (80034ec <BSP_LCD_MspInit+0x190>)
 8003430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003434:	6313      	str	r3, [r2, #48]	; 0x30
 8003436:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <BSP_LCD_MspInit+0x190>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	607b      	str	r3, [r7, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003442:	f641 0358 	movw	r3, #6232	; 0x1858
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003448:	2302      	movs	r3, #2
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800344c:	2300      	movs	r3, #0
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003450:	2302      	movs	r3, #2
 8003452:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003454:	230e      	movs	r3, #14
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800345c:	4619      	mov	r1, r3
 800345e:	4824      	ldr	r0, [pc, #144]	; (80034f0 <BSP_LCD_MspInit+0x194>)
 8003460:	f001 f8d0 	bl	8004604 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003464:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800346a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800346e:	4619      	mov	r1, r3
 8003470:	4820      	ldr	r0, [pc, #128]	; (80034f4 <BSP_LCD_MspInit+0x198>)
 8003472:	f001 f8c7 	bl	8004604 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003476:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800347c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003480:	4619      	mov	r1, r3
 8003482:	481d      	ldr	r0, [pc, #116]	; (80034f8 <BSP_LCD_MspInit+0x19c>)
 8003484:	f001 f8be 	bl	8004604 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003488:	2348      	movs	r3, #72	; 0x48
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800348c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003490:	4619      	mov	r1, r3
 8003492:	481a      	ldr	r0, [pc, #104]	; (80034fc <BSP_LCD_MspInit+0x1a0>)
 8003494:	f001 f8b6 	bl	8004604 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800349e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034a2:	4619      	mov	r1, r3
 80034a4:	4816      	ldr	r0, [pc, #88]	; (8003500 <BSP_LCD_MspInit+0x1a4>)
 80034a6:	f001 f8ad 	bl	8004604 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80034aa:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80034b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b4:	4619      	mov	r1, r3
 80034b6:	4813      	ldr	r0, [pc, #76]	; (8003504 <BSP_LCD_MspInit+0x1a8>)
 80034b8:	f001 f8a4 	bl	8004604 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80034bc:	2303      	movs	r3, #3
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80034c0:	2309      	movs	r3, #9
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c8:	4619      	mov	r1, r3
 80034ca:	480a      	ldr	r0, [pc, #40]	; (80034f4 <BSP_LCD_MspInit+0x198>)
 80034cc:	f001 f89a 	bl	8004604 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80034d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80034d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034da:	4619      	mov	r1, r3
 80034dc:	4809      	ldr	r0, [pc, #36]	; (8003504 <BSP_LCD_MspInit+0x1a8>)
 80034de:	f001 f891 	bl	8004604 <HAL_GPIO_Init>
}
 80034e2:	bf00      	nop
 80034e4:	3738      	adds	r7, #56	; 0x38
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40020000 	.word	0x40020000
 80034f4:	40020400 	.word	0x40020400
 80034f8:	40020800 	.word	0x40020800
 80034fc:	40020c00 	.word	0x40020c00
 8003500:	40021400 	.word	0x40021400
 8003504:	40021800 	.word	0x40021800

08003508 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003508:	b5b0      	push	{r4, r5, r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	603a      	str	r2, [r7, #0]
 8003512:	80fb      	strh	r3, [r7, #6]
 8003514:	460b      	mov	r3, r1
 8003516:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <BSP_LCD_DrawPixel+0x44>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <BSP_LCD_DrawPixel+0x48>)
 800351e:	2134      	movs	r1, #52	; 0x34
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	335c      	adds	r3, #92	; 0x5c
 8003528:	681c      	ldr	r4, [r3, #0]
 800352a:	88bd      	ldrh	r5, [r7, #4]
 800352c:	f7ff fb0e 	bl	8002b4c <BSP_LCD_GetXSize>
 8003530:	4603      	mov	r3, r0
 8003532:	fb03 f205 	mul.w	r2, r3, r5
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4423      	add	r3, r4
 800353e:	461a      	mov	r2, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6013      	str	r3, [r2, #0]
}
 8003544:	bf00      	nop
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bdb0      	pop	{r4, r5, r7, pc}
 800354c:	2000055c 	.word	0x2000055c
 8003550:	20000444 	.word	0x20000444

08003554 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	603a      	str	r2, [r7, #0]
 800355e:	80fb      	strh	r3, [r7, #6]
 8003560:	460b      	mov	r3, r1
 8003562:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	61fb      	str	r3, [r7, #28]
 8003568:	2300      	movs	r3, #0
 800356a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003570:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <DrawChar+0x16c>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4953      	ldr	r1, [pc, #332]	; (80036c4 <DrawChar+0x170>)
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3308      	adds	r3, #8
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	88db      	ldrh	r3, [r3, #6]
 8003586:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003588:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <DrawChar+0x16c>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <DrawChar+0x170>)
 800358e:	4613      	mov	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	3308      	adds	r3, #8
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	889b      	ldrh	r3, [r3, #4]
 800359e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80035a0:	8a3b      	ldrh	r3, [r7, #16]
 80035a2:	3307      	adds	r3, #7
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	da00      	bge.n	80035aa <DrawChar+0x56>
 80035a8:	3307      	adds	r3, #7
 80035aa:	10db      	asrs	r3, r3, #3
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	8a3b      	ldrh	r3, [r7, #16]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
 80035be:	e076      	b.n	80036ae <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80035c0:	8a3b      	ldrh	r3, [r7, #16]
 80035c2:	3307      	adds	r3, #7
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	da00      	bge.n	80035ca <DrawChar+0x76>
 80035c8:	3307      	adds	r3, #7
 80035ca:	10db      	asrs	r3, r3, #3
 80035cc:	461a      	mov	r2, r3
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80035da:	8a3b      	ldrh	r3, [r7, #16]
 80035dc:	3307      	adds	r3, #7
 80035de:	2b00      	cmp	r3, #0
 80035e0:	da00      	bge.n	80035e4 <DrawChar+0x90>
 80035e2:	3307      	adds	r3, #7
 80035e4:	10db      	asrs	r3, r3, #3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d002      	beq.n	80035f0 <DrawChar+0x9c>
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d004      	beq.n	80035f8 <DrawChar+0xa4>
 80035ee:	e00c      	b.n	800360a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	617b      	str	r3, [r7, #20]
      break;
 80035f6:	e016      	b.n	8003626 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	3201      	adds	r2, #1
 8003602:	7812      	ldrb	r2, [r2, #0]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
      break;
 8003608:	e00d      	b.n	8003626 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	041a      	lsls	r2, r3, #16
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	3301      	adds	r3, #1
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4313      	orrs	r3, r2
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	3202      	adds	r2, #2
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
      break;
 8003624:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	e036      	b.n	800369a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800362c:	8a3a      	ldrh	r2, [r7, #16]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	1ad2      	subs	r2, r2, r3
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	4413      	add	r3, r2
 8003636:	3b01      	subs	r3, #1
 8003638:	2201      	movs	r2, #1
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	461a      	mov	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d012      	beq.n	800366e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	b29a      	uxth	r2, r3
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	4413      	add	r3, r2
 8003650:	b298      	uxth	r0, r3
 8003652:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <DrawChar+0x16c>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	491b      	ldr	r1, [pc, #108]	; (80036c4 <DrawChar+0x170>)
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	88bb      	ldrh	r3, [r7, #4]
 8003666:	4619      	mov	r1, r3
 8003668:	f7ff ff4e 	bl	8003508 <BSP_LCD_DrawPixel>
 800366c:	e012      	b.n	8003694 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	b29a      	uxth	r2, r3
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	4413      	add	r3, r2
 8003676:	b298      	uxth	r0, r3
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <DrawChar+0x16c>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4911      	ldr	r1, [pc, #68]	; (80036c4 <DrawChar+0x170>)
 800367e:	4613      	mov	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	3304      	adds	r3, #4
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	88bb      	ldrh	r3, [r7, #4]
 800368e:	4619      	mov	r1, r3
 8003690:	f7ff ff3a 	bl	8003508 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	3301      	adds	r3, #1
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	8a3b      	ldrh	r3, [r7, #16]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d3c4      	bcc.n	800362c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80036a2:	88bb      	ldrh	r3, [r7, #4]
 80036a4:	3301      	adds	r3, #1
 80036a6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	3301      	adds	r3, #1
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	8a7b      	ldrh	r3, [r7, #18]
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d384      	bcc.n	80035c0 <DrawChar+0x6c>
  }
}
 80036b6:	bf00      	nop
 80036b8:	bf00      	nop
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	2000055c 	.word	0x2000055c
 80036c4:	20000560 	.word	0x20000560

080036c8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80036d6:	4b16      	ldr	r3, [pc, #88]	; (8003730 <FillBuffer+0x68>)
 80036d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036dc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <FillBuffer+0x68>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80036e4:	4a12      	ldr	r2, [pc, #72]	; (8003730 <FillBuffer+0x68>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <FillBuffer+0x68>)
 80036ec:	4a11      	ldr	r2, [pc, #68]	; (8003734 <FillBuffer+0x6c>)
 80036ee:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80036f0:	480f      	ldr	r0, [pc, #60]	; (8003730 <FillBuffer+0x68>)
 80036f2:	f000 fcf1 	bl	80040d8 <HAL_DMA2D_Init>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d115      	bne.n	8003728 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80036fc:	68f9      	ldr	r1, [r7, #12]
 80036fe:	480c      	ldr	r0, [pc, #48]	; (8003730 <FillBuffer+0x68>)
 8003700:	f000 fe52 	bl	80043a8 <HAL_DMA2D_ConfigLayer>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10e      	bne.n	8003728 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69f9      	ldr	r1, [r7, #28]
 8003714:	4806      	ldr	r0, [pc, #24]	; (8003730 <FillBuffer+0x68>)
 8003716:	f000 fd32 	bl	800417e <HAL_DMA2D_Start>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d103      	bne.n	8003728 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003720:	210a      	movs	r1, #10
 8003722:	4803      	ldr	r0, [pc, #12]	; (8003730 <FillBuffer+0x68>)
 8003724:	f000 fd56 	bl	80041d4 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	200004ec 	.word	0x200004ec
 8003734:	4002b000 	.word	0x4002b000

08003738 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800373c:	4b29      	ldr	r3, [pc, #164]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 800373e:	4a2a      	ldr	r2, [pc, #168]	; (80037e8 <BSP_SDRAM_Init+0xb0>)
 8003740:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003742:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 8003744:	2202      	movs	r2, #2
 8003746:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003748:	4b28      	ldr	r3, [pc, #160]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 800374a:	2207      	movs	r2, #7
 800374c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800374e:	4b27      	ldr	r3, [pc, #156]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 8003750:	2204      	movs	r2, #4
 8003752:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 8003756:	2207      	movs	r2, #7
 8003758:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800375a:	4b24      	ldr	r3, [pc, #144]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 800375c:	2202      	movs	r2, #2
 800375e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003760:	4b22      	ldr	r3, [pc, #136]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 8003762:	2202      	movs	r2, #2
 8003764:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003766:	4b21      	ldr	r3, [pc, #132]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 8003768:	2202      	movs	r2, #2
 800376a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 800376e:	2201      	movs	r2, #1
 8003770:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003772:	4b1c      	ldr	r3, [pc, #112]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003778:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 800377a:	2204      	movs	r2, #4
 800377c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800377e:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 8003780:	2210      	movs	r2, #16
 8003782:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 8003786:	2240      	movs	r2, #64	; 0x40
 8003788:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800378a:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 800378c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003790:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003792:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 8003794:	2200      	movs	r2, #0
 8003796:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 800379a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800379e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80037a0:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80037a6:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 80037a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037ac:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80037ae:	2100      	movs	r1, #0
 80037b0:	480c      	ldr	r0, [pc, #48]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 80037b2:	f000 f87f 	bl	80038b4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80037b6:	490d      	ldr	r1, [pc, #52]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 80037b8:	480a      	ldr	r0, [pc, #40]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 80037ba:	f003 fcdd 	bl	8007178 <HAL_SDRAM_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <BSP_SDRAM_Init+0xb8>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e002      	b.n	80037d2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <BSP_SDRAM_Init+0xb8>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80037d2:	f240 506a 	movw	r0, #1386	; 0x56a
 80037d6:	f000 f80d 	bl	80037f4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <BSP_SDRAM_Init+0xb8>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	2000057c 	.word	0x2000057c
 80037e8:	a0000140 	.word	0xa0000140
 80037ec:	200005b0 	.word	0x200005b0
 80037f0:	2000007c 	.word	0x2000007c

080037f4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003800:	4b2a      	ldr	r3, [pc, #168]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003806:	4b29      	ldr	r3, [pc, #164]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003808:	2208      	movs	r2, #8
 800380a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800380c:	4b27      	ldr	r3, [pc, #156]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800380e:	2201      	movs	r2, #1
 8003810:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003812:	4b26      	ldr	r3, [pc, #152]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003814:	2200      	movs	r2, #0
 8003816:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800381c:	4923      	ldr	r1, [pc, #140]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800381e:	4824      	ldr	r0, [pc, #144]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003820:	f003 fce8 	bl	80071f4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003824:	2001      	movs	r0, #1
 8003826:	f000 f993 	bl	8003b50 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800382c:	2202      	movs	r2, #2
 800382e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003830:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003832:	2208      	movs	r2, #8
 8003834:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003836:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003838:	2201      	movs	r2, #1
 800383a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800383c:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800383e:	2200      	movs	r2, #0
 8003840:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003846:	4919      	ldr	r1, [pc, #100]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003848:	4819      	ldr	r0, [pc, #100]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800384a:	f003 fcd3 	bl	80071f4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800384e:	4b17      	ldr	r3, [pc, #92]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003850:	2203      	movs	r2, #3
 8003852:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003854:	4b15      	ldr	r3, [pc, #84]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003856:	2208      	movs	r2, #8
 8003858:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800385c:	2204      	movs	r2, #4
 800385e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003862:	2200      	movs	r2, #0
 8003864:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800386a:	4910      	ldr	r1, [pc, #64]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800386c:	4810      	ldr	r0, [pc, #64]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800386e:	f003 fcc1 	bl	80071f4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003872:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003876:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800387a:	2204      	movs	r2, #4
 800387c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003880:	2208      	movs	r2, #8
 8003882:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003884:	4b09      	ldr	r3, [pc, #36]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003886:	2201      	movs	r2, #1
 8003888:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a07      	ldr	r2, [pc, #28]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800388e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003894:	4905      	ldr	r1, [pc, #20]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003896:	4806      	ldr	r0, [pc, #24]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003898:	f003 fcac 	bl	80071f4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4804      	ldr	r0, [pc, #16]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038a0:	f003 fcdd 	bl	800725e <HAL_SDRAM_ProgramRefreshRate>
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	200005cc 	.word	0x200005cc
 80038b0:	2000057c 	.word	0x2000057c

080038b4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b090      	sub	sp, #64	; 0x40
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80ec 	beq.w	8003a9e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ca:	4b77      	ldr	r3, [pc, #476]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	4a76      	ldr	r2, [pc, #472]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6393      	str	r3, [r2, #56]	; 0x38
 80038d6:	4b74      	ldr	r3, [pc, #464]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
 80038e6:	4b70      	ldr	r3, [pc, #448]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	4a6f      	ldr	r2, [pc, #444]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 80038ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038f0:	6313      	str	r3, [r2, #48]	; 0x30
 80038f2:	4b6d      	ldr	r3, [pc, #436]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
 8003902:	4b69      	ldr	r3, [pc, #420]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	4a68      	ldr	r2, [pc, #416]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003908:	f043 0302 	orr.w	r3, r3, #2
 800390c:	6313      	str	r3, [r2, #48]	; 0x30
 800390e:	4b66      	ldr	r3, [pc, #408]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	4b62      	ldr	r3, [pc, #392]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a61      	ldr	r2, [pc, #388]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003924:	f043 0304 	orr.w	r3, r3, #4
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b5f      	ldr	r3, [pc, #380]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	4b5b      	ldr	r3, [pc, #364]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4a5a      	ldr	r2, [pc, #360]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003940:	f043 0308 	orr.w	r3, r3, #8
 8003944:	6313      	str	r3, [r2, #48]	; 0x30
 8003946:	4b58      	ldr	r3, [pc, #352]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	4b54      	ldr	r3, [pc, #336]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a53      	ldr	r2, [pc, #332]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 800395c:	f043 0310 	orr.w	r3, r3, #16
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	4b4d      	ldr	r3, [pc, #308]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	4a4c      	ldr	r2, [pc, #304]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003978:	f043 0320 	orr.w	r3, r3, #32
 800397c:	6313      	str	r3, [r2, #48]	; 0x30
 800397e:	4b4a      	ldr	r3, [pc, #296]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	613b      	str	r3, [r7, #16]
 8003988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	4b46      	ldr	r3, [pc, #280]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	4a45      	ldr	r2, [pc, #276]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 8003994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003998:	6313      	str	r3, [r2, #48]	; 0x30
 800399a:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <BSP_SDRAM_MspInit+0x1f4>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80039a6:	2302      	movs	r3, #2
 80039a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80039aa:	2302      	movs	r3, #2
 80039ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80039b2:	230c      	movs	r3, #12
 80039b4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80039b6:	2360      	movs	r3, #96	; 0x60
 80039b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80039ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039be:	4619      	mov	r1, r3
 80039c0:	483a      	ldr	r0, [pc, #232]	; (8003aac <BSP_SDRAM_MspInit+0x1f8>)
 80039c2:	f000 fe1f 	bl	8004604 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80039c6:	2301      	movs	r3, #1
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80039ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ce:	4619      	mov	r1, r3
 80039d0:	4837      	ldr	r0, [pc, #220]	; (8003ab0 <BSP_SDRAM_MspInit+0x1fc>)
 80039d2:	f000 fe17 	bl	8004604 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80039d6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80039dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e0:	4619      	mov	r1, r3
 80039e2:	4834      	ldr	r0, [pc, #208]	; (8003ab4 <BSP_SDRAM_MspInit+0x200>)
 80039e4:	f000 fe0e 	bl	8004604 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80039e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80039ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039f2:	4619      	mov	r1, r3
 80039f4:	4830      	ldr	r0, [pc, #192]	; (8003ab8 <BSP_SDRAM_MspInit+0x204>)
 80039f6:	f000 fe05 	bl	8004604 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80039fa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a04:	4619      	mov	r1, r3
 8003a06:	482d      	ldr	r0, [pc, #180]	; (8003abc <BSP_SDRAM_MspInit+0x208>)
 8003a08:	f000 fdfc 	bl	8004604 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003a0c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a16:	4619      	mov	r1, r3
 8003a18:	4829      	ldr	r0, [pc, #164]	; (8003ac0 <BSP_SDRAM_MspInit+0x20c>)
 8003a1a:	f000 fdf3 	bl	8004604 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003a1e:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003a24:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003a2a:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a30:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a38:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a3a:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a40:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003a42:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a48:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003a4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003a50:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a56:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003a58:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003a5e:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a60:	2203      	movs	r2, #3
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003a64:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003a6a:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003a70:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a72:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <BSP_SDRAM_MspInit+0x214>)
 8003a74:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a7c:	4a11      	ldr	r2, [pc, #68]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003a82:	4810      	ldr	r0, [pc, #64]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a84:	f000 fa18 	bl	8003eb8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003a88:	480e      	ldr	r0, [pc, #56]	; (8003ac4 <BSP_SDRAM_MspInit+0x210>)
 8003a8a:	f000 f967 	bl	8003d5c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	210f      	movs	r1, #15
 8003a92:	2038      	movs	r0, #56	; 0x38
 8003a94:	f000 f938 	bl	8003d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003a98:	2038      	movs	r0, #56	; 0x38
 8003a9a:	f000 f951 	bl	8003d40 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003a9e:	bf00      	nop
 8003aa0:	3740      	adds	r7, #64	; 0x40
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40020400 	.word	0x40020400
 8003ab0:	40020800 	.word	0x40020800
 8003ab4:	40020c00 	.word	0x40020c00
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40021400 	.word	0x40021400
 8003ac0:	40021800 	.word	0x40021800
 8003ac4:	200005dc 	.word	0x200005dc
 8003ac8:	40026410 	.word	0x40026410

08003acc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ad0:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <HAL_Init+0x40>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <HAL_Init+0x40>)
 8003ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ada:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003adc:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <HAL_Init+0x40>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <HAL_Init+0x40>)
 8003ae2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ae6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ae8:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_Init+0x40>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <HAL_Init+0x40>)
 8003aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003af4:	2003      	movs	r0, #3
 8003af6:	f000 f8fc 	bl	8003cf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003afa:	200f      	movs	r0, #15
 8003afc:	f7fd ff72 	bl	80019e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b00:	f7fd ff44 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023c00 	.word	0x40023c00

08003b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <HAL_IncTick+0x20>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <HAL_IncTick+0x24>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4413      	add	r3, r2
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <HAL_IncTick+0x24>)
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000084 	.word	0x20000084
 8003b34:	2000063c 	.word	0x2000063c

08003b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	; (8003b4c <HAL_GetTick+0x14>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	2000063c 	.word	0x2000063c

08003b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7ff ffee 	bl	8003b38 <HAL_GetTick>
 8003b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d005      	beq.n	8003b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b6a:	4b0a      	ldr	r3, [pc, #40]	; (8003b94 <HAL_Delay+0x44>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4413      	add	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b76:	bf00      	nop
 8003b78:	f7ff ffde 	bl	8003b38 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d8f7      	bhi.n	8003b78 <HAL_Delay+0x28>
  {
  }
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	20000084 	.word	0x20000084

08003b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <__NVIC_SetPriorityGrouping+0x44>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bca:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <__NVIC_SetPriorityGrouping+0x44>)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	60d3      	str	r3, [r2, #12]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	e000ed00 	.word	0xe000ed00

08003be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be4:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	f003 0307 	and.w	r3, r3, #7
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000ed00 	.word	0xe000ed00

08003bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	db0b      	blt.n	8003c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	f003 021f 	and.w	r2, r3, #31
 8003c14:	4907      	ldr	r1, [pc, #28]	; (8003c34 <__NVIC_EnableIRQ+0x38>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	e000e100 	.word	0xe000e100

08003c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	6039      	str	r1, [r7, #0]
 8003c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	db0a      	blt.n	8003c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	490c      	ldr	r1, [pc, #48]	; (8003c84 <__NVIC_SetPriority+0x4c>)
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	0112      	lsls	r2, r2, #4
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c60:	e00a      	b.n	8003c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4908      	ldr	r1, [pc, #32]	; (8003c88 <__NVIC_SetPriority+0x50>)
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	3b04      	subs	r3, #4
 8003c70:	0112      	lsls	r2, r2, #4
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	440b      	add	r3, r1
 8003c76:	761a      	strb	r2, [r3, #24]
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000e100 	.word	0xe000e100
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b089      	sub	sp, #36	; 0x24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f1c3 0307 	rsb	r3, r3, #7
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	bf28      	it	cs
 8003caa:	2304      	movcs	r3, #4
 8003cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	2b06      	cmp	r3, #6
 8003cb4:	d902      	bls.n	8003cbc <NVIC_EncodePriority+0x30>
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3b03      	subs	r3, #3
 8003cba:	e000      	b.n	8003cbe <NVIC_EncodePriority+0x32>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	401a      	ands	r2, r3
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	fa01 f303 	lsl.w	r3, r1, r3
 8003cde:	43d9      	mvns	r1, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	4313      	orrs	r3, r2
         );
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3724      	adds	r7, #36	; 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ff4c 	bl	8003b98 <__NVIC_SetPriorityGrouping>
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d1a:	f7ff ff61 	bl	8003be0 <__NVIC_GetPriorityGrouping>
 8003d1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	68b9      	ldr	r1, [r7, #8]
 8003d24:	6978      	ldr	r0, [r7, #20]
 8003d26:	f7ff ffb1 	bl	8003c8c <NVIC_EncodePriority>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d30:	4611      	mov	r1, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff ff80 	bl	8003c38 <__NVIC_SetPriority>
}
 8003d38:	bf00      	nop
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ff54 	bl	8003bfc <__NVIC_EnableIRQ>
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d68:	f7ff fee6 	bl	8003b38 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e099      	b.n	8003eac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d98:	e00f      	b.n	8003dba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d9a:	f7ff fecd 	bl	8003b38 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b05      	cmp	r3, #5
 8003da6:	d908      	bls.n	8003dba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2203      	movs	r2, #3
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e078      	b.n	8003eac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e8      	bne.n	8003d9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	4b38      	ldr	r3, [pc, #224]	; (8003eb4 <HAL_DMA_Init+0x158>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d107      	bne.n	8003e24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f023 0307 	bic.w	r3, r3, #7
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d117      	bne.n	8003e7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00e      	beq.n	8003e7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f8bd 	bl	8003fe0 <DMA_CheckFifoParam>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2240      	movs	r2, #64	; 0x40
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e016      	b.n	8003eac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f874 	bl	8003f74 <DMA_CalcBaseAndBitshift>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	223f      	movs	r2, #63	; 0x3f
 8003e96:	409a      	lsls	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	f010803f 	.word	0xf010803f

08003eb8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e050      	b.n	8003f6c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d101      	bne.n	8003eda <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	e048      	b.n	8003f6c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0201 	bic.w	r2, r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2200      	movs	r2, #0
 8003f08:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2221      	movs	r2, #33	; 0x21
 8003f18:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f82a 	bl	8003f74 <DMA_CalcBaseAndBitshift>
 8003f20:	4603      	mov	r3, r0
 8003f22:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	223f      	movs	r2, #63	; 0x3f
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	3b10      	subs	r3, #16
 8003f84:	4a14      	ldr	r2, [pc, #80]	; (8003fd8 <DMA_CalcBaseAndBitshift+0x64>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f8e:	4a13      	ldr	r2, [pc, #76]	; (8003fdc <DMA_CalcBaseAndBitshift+0x68>)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d909      	bls.n	8003fb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003faa:	f023 0303 	bic.w	r3, r3, #3
 8003fae:	1d1a      	adds	r2, r3, #4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	659a      	str	r2, [r3, #88]	; 0x58
 8003fb4:	e007      	b.n	8003fc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fbe:	f023 0303 	bic.w	r3, r3, #3
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	aaaaaaab 	.word	0xaaaaaaab
 8003fdc:	08015750 	.word	0x08015750

08003fe0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d11f      	bne.n	800403a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d856      	bhi.n	80040ae <DMA_CheckFifoParam+0xce>
 8004000:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <DMA_CheckFifoParam+0x28>)
 8004002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004006:	bf00      	nop
 8004008:	08004019 	.word	0x08004019
 800400c:	0800402b 	.word	0x0800402b
 8004010:	08004019 	.word	0x08004019
 8004014:	080040af 	.word	0x080040af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d046      	beq.n	80040b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004028:	e043      	b.n	80040b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004032:	d140      	bne.n	80040b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004038:	e03d      	b.n	80040b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004042:	d121      	bne.n	8004088 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d837      	bhi.n	80040ba <DMA_CheckFifoParam+0xda>
 800404a:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <DMA_CheckFifoParam+0x70>)
 800404c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004050:	08004061 	.word	0x08004061
 8004054:	08004067 	.word	0x08004067
 8004058:	08004061 	.word	0x08004061
 800405c:	08004079 	.word	0x08004079
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      break;
 8004064:	e030      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d025      	beq.n	80040be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004076:	e022      	b.n	80040be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004080:	d11f      	bne.n	80040c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004086:	e01c      	b.n	80040c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d903      	bls.n	8004096 <DMA_CheckFifoParam+0xb6>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d003      	beq.n	800409c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004094:	e018      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
      break;
 800409a:	e015      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00e      	beq.n	80040c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      break;
 80040ac:	e00b      	b.n	80040c6 <DMA_CheckFifoParam+0xe6>
      break;
 80040ae:	bf00      	nop
 80040b0:	e00a      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040b2:	bf00      	nop
 80040b4:	e008      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040b6:	bf00      	nop
 80040b8:	e006      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040ba:	bf00      	nop
 80040bc:	e004      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040be:	bf00      	nop
 80040c0:	e002      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80040c2:	bf00      	nop
 80040c4:	e000      	b.n	80040c8 <DMA_CheckFifoParam+0xe8>
      break;
 80040c6:	bf00      	nop
    }
  } 
  
  return status; 
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop

080040d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e03b      	b.n	8004162 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d106      	bne.n	8004104 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f833 	bl	800416a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004128:	f023 0107 	bic.w	r1, r3, #7
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004142:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68d1      	ldr	r1, [r2, #12]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	430b      	orrs	r3, r1
 8004150:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b086      	sub	sp, #24
 8004182:	af02      	add	r7, sp, #8
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_DMA2D_Start+0x1c>
 8004196:	2302      	movs	r3, #2
 8004198:	e018      	b.n	80041cc <HAL_DMA2D_Start+0x4e>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2202      	movs	r2, #2
 80041a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	68b9      	ldr	r1, [r7, #8]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f989 	bl	80044cc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0201 	orr.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d056      	beq.n	800429e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80041f0:	f7ff fca2 	bl	8003b38 <HAL_GetTick>
 80041f4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80041f6:	e04b      	b.n	8004290 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004206:	2b00      	cmp	r3, #0
 8004208:	d023      	beq.n	8004252 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f003 0320 	and.w	r3, r3, #32
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	f043 0202 	orr.w	r2, r3, #2
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	f043 0201 	orr.w	r2, r3, #1
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2221      	movs	r2, #33	; 0x21
 800423c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2204      	movs	r2, #4
 8004242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e0a5      	b.n	800439e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d01a      	beq.n	8004290 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7ff fc6d 	bl	8003b38 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <HAL_DMA2D_PollForTransfer+0x9c>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10f      	bne.n	8004290 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004274:	f043 0220 	orr.w	r2, r3, #32
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2203      	movs	r2, #3
 8004280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e086      	b.n	800439e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0ac      	beq.n	80041f8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d061      	beq.n	8004384 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80042c0:	f7ff fc3a 	bl	8003b38 <HAL_GetTick>
 80042c4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80042c6:	e056      	b.n	8004376 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d02e      	beq.n	8004338 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e8:	f043 0204 	orr.w	r2, r3, #4
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0320 	and.w	r3, r3, #32
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	f043 0202 	orr.w	r2, r3, #2
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	f043 0201 	orr.w	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2229      	movs	r2, #41	; 0x29
 8004322:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2204      	movs	r2, #4
 8004328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e032      	b.n	800439e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d01a      	beq.n	8004376 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004340:	f7ff fbfa 	bl	8003b38 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <HAL_DMA2D_PollForTransfer+0x182>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10f      	bne.n	8004376 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	f043 0220 	orr.w	r2, r3, #32
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2203      	movs	r2, #3
 8004366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e013      	b.n	800439e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0a1      	beq.n	80042c8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2212      	movs	r2, #18
 800438a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_DMA2D_ConfigLayer+0x20>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e079      	b.n	80044bc <HAL_DMA2D_ConfigLayer+0x114>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	3318      	adds	r3, #24
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	4413      	add	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80043f2:	4b35      	ldr	r3, [pc, #212]	; (80044c8 <HAL_DMA2D_ConfigLayer+0x120>)
 80043f4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b0a      	cmp	r3, #10
 80043fc:	d003      	beq.n	8004406 <HAL_DMA2D_ConfigLayer+0x5e>
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b09      	cmp	r3, #9
 8004404:	d107      	bne.n	8004416 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	e005      	b.n	8004422 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	061b      	lsls	r3, r3, #24
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d120      	bne.n	800446a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	43db      	mvns	r3, r3
 8004432:	ea02 0103 	and.w	r1, r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	430a      	orrs	r2, r1
 800443e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b0a      	cmp	r3, #10
 8004450:	d003      	beq.n	800445a <HAL_DMA2D_ConfigLayer+0xb2>
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b09      	cmp	r3, #9
 8004458:	d127      	bne.n	80044aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
 8004468:	e01f      	b.n	80044aa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	43db      	mvns	r3, r3
 8004474:	ea02 0103 	and.w	r1, r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	430a      	orrs	r2, r1
 8004480:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b0a      	cmp	r3, #10
 8004492:	d003      	beq.n	800449c <HAL_DMA2D_ConfigLayer+0xf4>
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b09      	cmp	r3, #9
 800449a:	d106      	bne.n	80044aa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044a8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	371c      	adds	r7, #28
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	ff03000f 	.word	0xff03000f

080044cc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b08b      	sub	sp, #44	; 0x2c
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	041a      	lsls	r2, r3, #16
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	431a      	orrs	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004504:	d174      	bne.n	80045f0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800450c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004514:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800451c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d108      	bne.n	800453e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	431a      	orrs	r2, r3
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	4313      	orrs	r3, r2
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
 800453c:	e053      	b.n	80045e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d106      	bne.n	8004554 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4313      	orrs	r3, r2
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
 8004552:	e048      	b.n	80045e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b02      	cmp	r3, #2
 800455a:	d111      	bne.n	8004580 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	0cdb      	lsrs	r3, r3, #19
 8004560:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	0a9b      	lsrs	r3, r3, #10
 8004566:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	08db      	lsrs	r3, r3, #3
 800456c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	02db      	lsls	r3, r3, #11
 8004576:	4313      	orrs	r3, r2
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	4313      	orrs	r3, r2
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
 800457e:	e032      	b.n	80045e6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d117      	bne.n	80045b8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	0fdb      	lsrs	r3, r3, #31
 800458c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	0cdb      	lsrs	r3, r3, #19
 8004592:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	0adb      	lsrs	r3, r3, #11
 8004598:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	08db      	lsrs	r3, r3, #3
 800459e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	029b      	lsls	r3, r3, #10
 80045a8:	431a      	orrs	r2, r3
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	03db      	lsls	r3, r3, #15
 80045ae:	4313      	orrs	r3, r2
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
 80045b6:	e016      	b.n	80045e6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	0f1b      	lsrs	r3, r3, #28
 80045bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	0d1b      	lsrs	r3, r3, #20
 80045c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	0b1b      	lsrs	r3, r3, #12
 80045c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	011a      	lsls	r2, r3, #4
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	021b      	lsls	r3, r3, #8
 80045d8:	431a      	orrs	r2, r3
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	031b      	lsls	r3, r3, #12
 80045de:	4313      	orrs	r3, r2
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80045ee:	e003      	b.n	80045f8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	60da      	str	r2, [r3, #12]
}
 80045f8:	bf00      	nop
 80045fa:	372c      	adds	r7, #44	; 0x2c
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	; 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004616:	2300      	movs	r3, #0
 8004618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	e177      	b.n	8004910 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004620:	2201      	movs	r2, #1
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	4013      	ands	r3, r2
 8004632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	429a      	cmp	r2, r3
 800463a:	f040 8166 	bne.w	800490a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b01      	cmp	r3, #1
 8004648:	d005      	beq.n	8004656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004652:	2b02      	cmp	r3, #2
 8004654:	d130      	bne.n	80046b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	2203      	movs	r2, #3
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4313      	orrs	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800468c:	2201      	movs	r2, #1
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 0201 	and.w	r2, r3, #1
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d017      	beq.n	80046f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	2203      	movs	r2, #3
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d123      	bne.n	8004748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	08da      	lsrs	r2, r3, #3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3208      	adds	r2, #8
 8004708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	220f      	movs	r2, #15
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	43db      	mvns	r3, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4013      	ands	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	691a      	ldr	r2, [r3, #16]
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	08da      	lsrs	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3208      	adds	r2, #8
 8004742:	69b9      	ldr	r1, [r7, #24]
 8004744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	2203      	movs	r2, #3
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 0203 	and.w	r2, r3, #3
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 80c0 	beq.w	800490a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	4b66      	ldr	r3, [pc, #408]	; (8004928 <HAL_GPIO_Init+0x324>)
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	4a65      	ldr	r2, [pc, #404]	; (8004928 <HAL_GPIO_Init+0x324>)
 8004794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004798:	6453      	str	r3, [r2, #68]	; 0x44
 800479a:	4b63      	ldr	r3, [pc, #396]	; (8004928 <HAL_GPIO_Init+0x324>)
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047a6:	4a61      	ldr	r2, [pc, #388]	; (800492c <HAL_GPIO_Init+0x328>)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	089b      	lsrs	r3, r3, #2
 80047ac:	3302      	adds	r3, #2
 80047ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	220f      	movs	r2, #15
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4013      	ands	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a58      	ldr	r2, [pc, #352]	; (8004930 <HAL_GPIO_Init+0x32c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d037      	beq.n	8004842 <HAL_GPIO_Init+0x23e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a57      	ldr	r2, [pc, #348]	; (8004934 <HAL_GPIO_Init+0x330>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d031      	beq.n	800483e <HAL_GPIO_Init+0x23a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a56      	ldr	r2, [pc, #344]	; (8004938 <HAL_GPIO_Init+0x334>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d02b      	beq.n	800483a <HAL_GPIO_Init+0x236>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a55      	ldr	r2, [pc, #340]	; (800493c <HAL_GPIO_Init+0x338>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d025      	beq.n	8004836 <HAL_GPIO_Init+0x232>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a54      	ldr	r2, [pc, #336]	; (8004940 <HAL_GPIO_Init+0x33c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d01f      	beq.n	8004832 <HAL_GPIO_Init+0x22e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a53      	ldr	r2, [pc, #332]	; (8004944 <HAL_GPIO_Init+0x340>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d019      	beq.n	800482e <HAL_GPIO_Init+0x22a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a52      	ldr	r2, [pc, #328]	; (8004948 <HAL_GPIO_Init+0x344>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d013      	beq.n	800482a <HAL_GPIO_Init+0x226>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a51      	ldr	r2, [pc, #324]	; (800494c <HAL_GPIO_Init+0x348>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00d      	beq.n	8004826 <HAL_GPIO_Init+0x222>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a50      	ldr	r2, [pc, #320]	; (8004950 <HAL_GPIO_Init+0x34c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d007      	beq.n	8004822 <HAL_GPIO_Init+0x21e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a4f      	ldr	r2, [pc, #316]	; (8004954 <HAL_GPIO_Init+0x350>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d101      	bne.n	800481e <HAL_GPIO_Init+0x21a>
 800481a:	2309      	movs	r3, #9
 800481c:	e012      	b.n	8004844 <HAL_GPIO_Init+0x240>
 800481e:	230a      	movs	r3, #10
 8004820:	e010      	b.n	8004844 <HAL_GPIO_Init+0x240>
 8004822:	2308      	movs	r3, #8
 8004824:	e00e      	b.n	8004844 <HAL_GPIO_Init+0x240>
 8004826:	2307      	movs	r3, #7
 8004828:	e00c      	b.n	8004844 <HAL_GPIO_Init+0x240>
 800482a:	2306      	movs	r3, #6
 800482c:	e00a      	b.n	8004844 <HAL_GPIO_Init+0x240>
 800482e:	2305      	movs	r3, #5
 8004830:	e008      	b.n	8004844 <HAL_GPIO_Init+0x240>
 8004832:	2304      	movs	r3, #4
 8004834:	e006      	b.n	8004844 <HAL_GPIO_Init+0x240>
 8004836:	2303      	movs	r3, #3
 8004838:	e004      	b.n	8004844 <HAL_GPIO_Init+0x240>
 800483a:	2302      	movs	r3, #2
 800483c:	e002      	b.n	8004844 <HAL_GPIO_Init+0x240>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <HAL_GPIO_Init+0x240>
 8004842:	2300      	movs	r3, #0
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	f002 0203 	and.w	r2, r2, #3
 800484a:	0092      	lsls	r2, r2, #2
 800484c:	4093      	lsls	r3, r2
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004854:	4935      	ldr	r1, [pc, #212]	; (800492c <HAL_GPIO_Init+0x328>)
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	089b      	lsrs	r3, r3, #2
 800485a:	3302      	adds	r3, #2
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004862:	4b3d      	ldr	r3, [pc, #244]	; (8004958 <HAL_GPIO_Init+0x354>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004886:	4a34      	ldr	r2, [pc, #208]	; (8004958 <HAL_GPIO_Init+0x354>)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800488c:	4b32      	ldr	r3, [pc, #200]	; (8004958 <HAL_GPIO_Init+0x354>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048b0:	4a29      	ldr	r2, [pc, #164]	; (8004958 <HAL_GPIO_Init+0x354>)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048b6:	4b28      	ldr	r3, [pc, #160]	; (8004958 <HAL_GPIO_Init+0x354>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	43db      	mvns	r3, r3
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4013      	ands	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048da:	4a1f      	ldr	r2, [pc, #124]	; (8004958 <HAL_GPIO_Init+0x354>)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048e0:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <HAL_GPIO_Init+0x354>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4013      	ands	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004904:	4a14      	ldr	r2, [pc, #80]	; (8004958 <HAL_GPIO_Init+0x354>)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	3301      	adds	r3, #1
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	2b0f      	cmp	r3, #15
 8004914:	f67f ae84 	bls.w	8004620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	3724      	adds	r7, #36	; 0x24
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800
 800492c:	40013800 	.word	0x40013800
 8004930:	40020000 	.word	0x40020000
 8004934:	40020400 	.word	0x40020400
 8004938:	40020800 	.word	0x40020800
 800493c:	40020c00 	.word	0x40020c00
 8004940:	40021000 	.word	0x40021000
 8004944:	40021400 	.word	0x40021400
 8004948:	40021800 	.word	0x40021800
 800494c:	40021c00 	.word	0x40021c00
 8004950:	40022000 	.word	0x40022000
 8004954:	40022400 	.word	0x40022400
 8004958:	40013c00 	.word	0x40013c00

0800495c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	807b      	strh	r3, [r7, #2]
 8004968:	4613      	mov	r3, r2
 800496a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800496c:	787b      	ldrb	r3, [r7, #1]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004972:	887a      	ldrh	r2, [r7, #2]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004978:	e003      	b.n	8004982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800497a:	887b      	ldrh	r3, [r7, #2]
 800497c:	041a      	lsls	r2, r3, #16
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	619a      	str	r2, [r3, #24]
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
	...

08004990 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e0bf      	b.n	8004b22 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f8ba 	bl	8004b30 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699a      	ldr	r2, [r3, #24]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80049d2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6999      	ldr	r1, [r3, #24]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049e8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6899      	ldr	r1, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b4a      	ldr	r3, [pc, #296]	; (8004b2c <HAL_LTDC_Init+0x19c>)
 8004a04:	400b      	ands	r3, r1
 8004a06:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6899      	ldr	r1, [r3, #8]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68d9      	ldr	r1, [r3, #12]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4b3e      	ldr	r3, [pc, #248]	; (8004b2c <HAL_LTDC_Init+0x19c>)
 8004a32:	400b      	ands	r3, r1
 8004a34:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	041b      	lsls	r3, r3, #16
 8004a3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68d9      	ldr	r1, [r3, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6919      	ldr	r1, [r3, #16]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b33      	ldr	r3, [pc, #204]	; (8004b2c <HAL_LTDC_Init+0x19c>)
 8004a60:	400b      	ands	r3, r1
 8004a62:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6919      	ldr	r1, [r3, #16]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6959      	ldr	r1, [r3, #20]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b27      	ldr	r3, [pc, #156]	; (8004b2c <HAL_LTDC_Init+0x19c>)
 8004a8e:	400b      	ands	r3, r1
 8004a90:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6959      	ldr	r1, [r3, #20]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004ac0:	041b      	lsls	r3, r3, #16
 8004ac2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0206 	orr.w	r2, r2, #6
 8004afe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	f000f800 	.word	0xf000f800

08004b30 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b44:	b5b0      	push	{r4, r5, r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_LTDC_ConfigLayer+0x1a>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	e02c      	b.n	8004bb8 <HAL_LTDC_ConfigLayer+0x74>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2134      	movs	r1, #52	; 0x34
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	4413      	add	r3, r2
 8004b7a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4614      	mov	r4, r2
 8004b82:	461d      	mov	r5, r3
 8004b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f83b 	bl	8004c14 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bdb0      	pop	{r4, r5, r7, pc}

08004bc0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_LTDC_EnableDither+0x16>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e016      	b.n	8004c04 <HAL_LTDC_EnableDither+0x44>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2202      	movs	r2, #2
 8004be2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004be6:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <HAL_LTDC_EnableDither+0x50>)
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	4a09      	ldr	r2, [pc, #36]	; (8004c10 <HAL_LTDC_EnableDither+0x50>)
 8004bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40016800 	.word	0x40016800

08004c14 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b089      	sub	sp, #36	; 0x24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c30:	4413      	add	r3, r2
 8004c32:	041b      	lsls	r3, r3, #16
 8004c34:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	01db      	lsls	r3, r3, #7
 8004c40:	4413      	add	r3, r2
 8004c42:	3384      	adds	r3, #132	; 0x84
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	6812      	ldr	r2, [r2, #0]
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	01d2      	lsls	r2, r2, #7
 8004c50:	440a      	add	r2, r1
 8004c52:	3284      	adds	r2, #132	; 0x84
 8004c54:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004c58:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c6a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c6c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4619      	mov	r1, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	01db      	lsls	r3, r3, #7
 8004c78:	440b      	add	r3, r1
 8004c7a:	3384      	adds	r3, #132	; 0x84
 8004c7c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c82:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c92:	4413      	add	r3, r2
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	01db      	lsls	r3, r3, #7
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3384      	adds	r3, #132	; 0x84
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	4611      	mov	r1, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	01d2      	lsls	r2, r2, #7
 8004cb2:	440a      	add	r2, r1
 8004cb4:	3284      	adds	r2, #132	; 0x84
 8004cb6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004cba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cca:	4413      	add	r3, r2
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	01db      	lsls	r3, r3, #7
 8004cd8:	440b      	add	r3, r1
 8004cda:	3384      	adds	r3, #132	; 0x84
 8004cdc:	4619      	mov	r1, r3
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	01db      	lsls	r3, r3, #7
 8004cee:	4413      	add	r3, r2
 8004cf0:	3384      	adds	r3, #132	; 0x84
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	01d2      	lsls	r2, r2, #7
 8004cfe:	440a      	add	r2, r1
 8004d00:	3284      	adds	r2, #132	; 0x84
 8004d02:	f023 0307 	bic.w	r3, r3, #7
 8004d06:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	01db      	lsls	r3, r3, #7
 8004d12:	4413      	add	r3, r2
 8004d14:	3384      	adds	r3, #132	; 0x84
 8004d16:	461a      	mov	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d2e:	041b      	lsls	r3, r3, #16
 8004d30:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	061b      	lsls	r3, r3, #24
 8004d38:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	01db      	lsls	r3, r3, #7
 8004d44:	4413      	add	r3, r2
 8004d46:	3384      	adds	r3, #132	; 0x84
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	01db      	lsls	r3, r3, #7
 8004d54:	4413      	add	r3, r2
 8004d56:	3384      	adds	r3, #132	; 0x84
 8004d58:	461a      	mov	r2, r3
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d64:	461a      	mov	r2, r3
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4619      	mov	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	01db      	lsls	r3, r3, #7
 8004d78:	440b      	add	r3, r1
 8004d7a:	3384      	adds	r3, #132	; 0x84
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	01db      	lsls	r3, r3, #7
 8004d8e:	4413      	add	r3, r2
 8004d90:	3384      	adds	r3, #132	; 0x84
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	4611      	mov	r1, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	01d2      	lsls	r2, r2, #7
 8004d9e:	440a      	add	r2, r1
 8004da0:	3284      	adds	r2, #132	; 0x84
 8004da2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004da6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	01db      	lsls	r3, r3, #7
 8004db2:	4413      	add	r3, r2
 8004db4:	3384      	adds	r3, #132	; 0x84
 8004db6:	461a      	mov	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	01db      	lsls	r3, r3, #7
 8004dc8:	4413      	add	r3, r2
 8004dca:	3384      	adds	r3, #132	; 0x84
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	01d2      	lsls	r2, r2, #7
 8004dd8:	440a      	add	r2, r1
 8004dda:	3284      	adds	r2, #132	; 0x84
 8004ddc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004de0:	f023 0307 	bic.w	r3, r3, #7
 8004de4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	69da      	ldr	r2, [r3, #28]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	68f9      	ldr	r1, [r7, #12]
 8004df0:	6809      	ldr	r1, [r1, #0]
 8004df2:	4608      	mov	r0, r1
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	01c9      	lsls	r1, r1, #7
 8004df8:	4401      	add	r1, r0
 8004dfa:	3184      	adds	r1, #132	; 0x84
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	01db      	lsls	r3, r3, #7
 8004e0a:	4413      	add	r3, r2
 8004e0c:	3384      	adds	r3, #132	; 0x84
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	01db      	lsls	r3, r3, #7
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3384      	adds	r3, #132	; 0x84
 8004e1e:	461a      	mov	r2, r3
 8004e20:	2300      	movs	r3, #0
 8004e22:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	01db      	lsls	r3, r3, #7
 8004e2e:	4413      	add	r3, r2
 8004e30:	3384      	adds	r3, #132	; 0x84
 8004e32:	461a      	mov	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004e42:	2304      	movs	r3, #4
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	e01b      	b.n	8004e80 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d102      	bne.n	8004e56 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004e50:	2303      	movs	r3, #3
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	e014      	b.n	8004e80 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d00b      	beq.n	8004e76 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d007      	beq.n	8004e76 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d003      	beq.n	8004e76 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e72:	2b07      	cmp	r3, #7
 8004e74:	d102      	bne.n	8004e7c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004e76:	2302      	movs	r3, #2
 8004e78:	61fb      	str	r3, [r7, #28]
 8004e7a:	e001      	b.n	8004e80 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	01db      	lsls	r3, r3, #7
 8004e8a:	4413      	add	r3, r2
 8004e8c:	3384      	adds	r3, #132	; 0x84
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	4611      	mov	r1, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	01d2      	lsls	r2, r2, #7
 8004e9a:	440a      	add	r2, r1
 8004e9c:	3284      	adds	r2, #132	; 0x84
 8004e9e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	6859      	ldr	r1, [r3, #4]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	1acb      	subs	r3, r1, r3
 8004eba:	69f9      	ldr	r1, [r7, #28]
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004ec2:	68f9      	ldr	r1, [r7, #12]
 8004ec4:	6809      	ldr	r1, [r1, #0]
 8004ec6:	4608      	mov	r0, r1
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	01c9      	lsls	r1, r1, #7
 8004ecc:	4401      	add	r1, r0
 8004ece:	3184      	adds	r1, #132	; 0x84
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	01db      	lsls	r3, r3, #7
 8004ede:	4413      	add	r3, r2
 8004ee0:	3384      	adds	r3, #132	; 0x84
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	4611      	mov	r1, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	01d2      	lsls	r2, r2, #7
 8004eee:	440a      	add	r2, r1
 8004ef0:	3284      	adds	r2, #132	; 0x84
 8004ef2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ef6:	f023 0307 	bic.w	r3, r3, #7
 8004efa:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	461a      	mov	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	01db      	lsls	r3, r3, #7
 8004f06:	4413      	add	r3, r2
 8004f08:	3384      	adds	r3, #132	; 0x84
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	01db      	lsls	r3, r3, #7
 8004f1c:	4413      	add	r3, r2
 8004f1e:	3384      	adds	r3, #132	; 0x84
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	4611      	mov	r1, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	01d2      	lsls	r2, r2, #7
 8004f2c:	440a      	add	r2, r1
 8004f2e:	3284      	adds	r2, #132	; 0x84
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6013      	str	r3, [r2, #0]
}
 8004f36:	bf00      	nop
 8004f38:	3724      	adds	r7, #36	; 0x24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f44:	b08f      	sub	sp, #60	; 0x3c
 8004f46:	af0a      	add	r7, sp, #40	; 0x28
 8004f48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e10f      	b.n	8005174 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f009 ff08 	bl	800ed84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2203      	movs	r2, #3
 8004f78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f003 fc5b 	bl	800884e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	603b      	str	r3, [r7, #0]
 8004f9e:	687e      	ldr	r6, [r7, #4]
 8004fa0:	466d      	mov	r5, sp
 8004fa2:	f106 0410 	add.w	r4, r6, #16
 8004fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fb6:	1d33      	adds	r3, r6, #4
 8004fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fba:	6838      	ldr	r0, [r7, #0]
 8004fbc:	f003 fb32 	bl	8008624 <USB_CoreInit>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e0d0      	b.n	8005174 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f003 fc49 	bl	8008870 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
 8004fe2:	e04a      	b.n	800507a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fe4:	7bfa      	ldrb	r2, [r7, #15]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	4413      	add	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	333d      	adds	r3, #61	; 0x3d
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ff8:	7bfa      	ldrb	r2, [r7, #15]
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	4413      	add	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	333c      	adds	r3, #60	; 0x3c
 8005008:	7bfa      	ldrb	r2, [r7, #15]
 800500a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800500c:	7bfa      	ldrb	r2, [r7, #15]
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	b298      	uxth	r0, r3
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	3344      	adds	r3, #68	; 0x44
 8005020:	4602      	mov	r2, r0
 8005022:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005024:	7bfa      	ldrb	r2, [r7, #15]
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	3340      	adds	r3, #64	; 0x40
 8005034:	2200      	movs	r2, #0
 8005036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005038:	7bfa      	ldrb	r2, [r7, #15]
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	3348      	adds	r3, #72	; 0x48
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800504c:	7bfa      	ldrb	r2, [r7, #15]
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	334c      	adds	r3, #76	; 0x4c
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005060:	7bfa      	ldrb	r2, [r7, #15]
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	3354      	adds	r3, #84	; 0x54
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	3301      	adds	r3, #1
 8005078:	73fb      	strb	r3, [r7, #15]
 800507a:	7bfa      	ldrb	r2, [r7, #15]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	d3af      	bcc.n	8004fe4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005084:	2300      	movs	r3, #0
 8005086:	73fb      	strb	r3, [r7, #15]
 8005088:	e044      	b.n	8005114 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800508a:	7bfa      	ldrb	r2, [r7, #15]
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800509c:	2200      	movs	r2, #0
 800509e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050a0:	7bfa      	ldrb	r2, [r7, #15]
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80050b2:	7bfa      	ldrb	r2, [r7, #15]
 80050b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050b6:	7bfa      	ldrb	r2, [r7, #15]
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050cc:	7bfa      	ldrb	r2, [r7, #15]
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050e2:	7bfa      	ldrb	r2, [r7, #15]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050f8:	7bfa      	ldrb	r2, [r7, #15]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	3301      	adds	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
 8005114:	7bfa      	ldrb	r2, [r7, #15]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	429a      	cmp	r2, r3
 800511c:	d3b5      	bcc.n	800508a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	687e      	ldr	r6, [r7, #4]
 8005126:	466d      	mov	r5, sp
 8005128:	f106 0410 	add.w	r4, r6, #16
 800512c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800512e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005134:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005138:	e885 0003 	stmia.w	r5, {r0, r1}
 800513c:	1d33      	adds	r3, r6, #4
 800513e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005140:	6838      	ldr	r0, [r7, #0]
 8005142:	f003 fbe1 	bl	8008908 <USB_DevInit>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e00d      	b.n	8005174 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4618      	mov	r0, r3
 800516e:	f004 fd30 	bl	8009bd2 <USB_DevDisconnect>

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800517c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_PCD_Start+0x1c>
 8005194:	2302      	movs	r3, #2
 8005196:	e020      	b.n	80051da <HAL_PCD_Start+0x5e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d109      	bne.n	80051bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d005      	beq.n	80051bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f003 fb33 	bl	800882c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f004 fce0 	bl	8009b90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80051e2:	b590      	push	{r4, r7, lr}
 80051e4:	b08d      	sub	sp, #52	; 0x34
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f004 fd9e 	bl	8009d3a <USB_GetMode>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	f040 848a 	bne.w	8005b1a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f004 fd02 	bl	8009c14 <USB_ReadInterrupts>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 8480 	beq.w	8005b18 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	0a1b      	lsrs	r3, r3, #8
 8005222:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f004 fcef 	bl	8009c14 <USB_ReadInterrupts>
 8005236:	4603      	mov	r3, r0
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b02      	cmp	r3, #2
 800523e:	d107      	bne.n	8005250 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695a      	ldr	r2, [r3, #20]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f002 0202 	and.w	r2, r2, #2
 800524e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f004 fcdd 	bl	8009c14 <USB_ReadInterrupts>
 800525a:	4603      	mov	r3, r0
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b10      	cmp	r3, #16
 8005262:	d161      	bne.n	8005328 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0210 	bic.w	r2, r2, #16
 8005272:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	6a1b      	ldr	r3, [r3, #32]
 8005278:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f003 020f 	and.w	r2, r3, #15
 8005280:	4613      	mov	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	4413      	add	r3, r2
 8005290:	3304      	adds	r3, #4
 8005292:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	0c5b      	lsrs	r3, r3, #17
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	2b02      	cmp	r3, #2
 800529e:	d124      	bne.n	80052ea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80052a6:	4013      	ands	r3, r2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d035      	beq.n	8005318 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	6a38      	ldr	r0, [r7, #32]
 80052c0:	f004 fb14 	bl	80098ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	091b      	lsrs	r3, r3, #4
 80052cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052d0:	441a      	add	r2, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	6a1a      	ldr	r2, [r3, #32]
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	091b      	lsrs	r3, r3, #4
 80052de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052e2:	441a      	add	r2, r3
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	621a      	str	r2, [r3, #32]
 80052e8:	e016      	b.n	8005318 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	0c5b      	lsrs	r3, r3, #17
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	2b06      	cmp	r3, #6
 80052f4:	d110      	bne.n	8005318 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052fc:	2208      	movs	r2, #8
 80052fe:	4619      	mov	r1, r3
 8005300:	6a38      	ldr	r0, [r7, #32]
 8005302:	f004 faf3 	bl	80098ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	6a1a      	ldr	r2, [r3, #32]
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005312:	441a      	add	r2, r3
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0210 	orr.w	r2, r2, #16
 8005326:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4618      	mov	r0, r3
 800532e:	f004 fc71 	bl	8009c14 <USB_ReadInterrupts>
 8005332:	4603      	mov	r3, r0
 8005334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005338:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800533c:	f040 80a7 	bne.w	800548e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f004 fc76 	bl	8009c3a <USB_ReadDevAllOutEpInterrupt>
 800534e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005350:	e099      	b.n	8005486 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 808e 	beq.w	800547a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	4611      	mov	r1, r2
 8005368:	4618      	mov	r0, r3
 800536a:	f004 fc9a 	bl	8009ca2 <USB_ReadDevOutEPInterrupt>
 800536e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00c      	beq.n	8005394 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005386:	461a      	mov	r2, r3
 8005388:	2301      	movs	r3, #1
 800538a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800538c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fec2 	bl	8006118 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00c      	beq.n	80053b8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	461a      	mov	r2, r3
 80053ac:	2308      	movs	r3, #8
 80053ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80053b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 ff98 	bl	80062e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ce:	461a      	mov	r2, r3
 80053d0:	2310      	movs	r3, #16
 80053d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d030      	beq.n	8005440 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e6:	2b80      	cmp	r3, #128	; 0x80
 80053e8:	d109      	bne.n	80053fe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053fc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80053fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005400:	4613      	mov	r3, r2
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	4413      	add	r3, r2
 8005410:	3304      	adds	r3, #4
 8005412:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	78db      	ldrb	r3, [r3, #3]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d108      	bne.n	800542e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2200      	movs	r2, #0
 8005420:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	b2db      	uxtb	r3, r3
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f009 fdad 	bl	800ef88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	461a      	mov	r2, r3
 800543c:	2302      	movs	r3, #2
 800543e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d008      	beq.n	800545c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	461a      	mov	r2, r3
 8005458:	2320      	movs	r3, #32
 800545a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d009      	beq.n	800547a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005472:	461a      	mov	r2, r3
 8005474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005478:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	3301      	adds	r3, #1
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	2b00      	cmp	r3, #0
 800548a:	f47f af62 	bne.w	8005352 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4618      	mov	r0, r3
 8005494:	f004 fbbe 	bl	8009c14 <USB_ReadInterrupts>
 8005498:	4603      	mov	r3, r0
 800549a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800549e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054a2:	f040 80db 	bne.w	800565c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f004 fbdf 	bl	8009c6e <USB_ReadDevAllInEpInterrupt>
 80054b0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80054b2:	2300      	movs	r3, #0
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80054b6:	e0cd      	b.n	8005654 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 80c2 	beq.w	8005648 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	4611      	mov	r1, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f004 fc05 	bl	8009cde <USB_ReadDevInEPInterrupt>
 80054d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d057      	beq.n	8005590 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	2201      	movs	r2, #1
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	43db      	mvns	r3, r3
 80054fa:	69f9      	ldr	r1, [r7, #28]
 80054fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005500:	4013      	ands	r3, r2
 8005502:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	461a      	mov	r2, r3
 8005512:	2301      	movs	r3, #1
 8005514:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d132      	bne.n	8005584 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005522:	4613      	mov	r3, r2
 8005524:	00db      	lsls	r3, r3, #3
 8005526:	4413      	add	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	440b      	add	r3, r1
 800552c:	334c      	adds	r3, #76	; 0x4c
 800552e:	6819      	ldr	r1, [r3, #0]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005534:	4613      	mov	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4403      	add	r3, r0
 800553e:	3348      	adds	r3, #72	; 0x48
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4419      	add	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005548:	4613      	mov	r3, r2
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4403      	add	r3, r0
 8005552:	334c      	adds	r3, #76	; 0x4c
 8005554:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	2b00      	cmp	r3, #0
 800555a:	d113      	bne.n	8005584 <HAL_PCD_IRQHandler+0x3a2>
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005560:	4613      	mov	r3, r2
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	4413      	add	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	3354      	adds	r3, #84	; 0x54
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d108      	bne.n	8005584 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800557c:	461a      	mov	r2, r3
 800557e:	2101      	movs	r1, #1
 8005580:	f004 fc0c 	bl	8009d9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	b2db      	uxtb	r3, r3
 8005588:	4619      	mov	r1, r3
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f009 fc77 	bl	800ee7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d008      	beq.n	80055ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a6:	461a      	mov	r2, r3
 80055a8:	2308      	movs	r3, #8
 80055aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d008      	beq.n	80055c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c2:	461a      	mov	r2, r3
 80055c4:	2310      	movs	r3, #16
 80055c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d008      	beq.n	80055e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055de:	461a      	mov	r2, r3
 80055e0:	2340      	movs	r3, #64	; 0x40
 80055e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d023      	beq.n	8005636 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80055ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055f0:	6a38      	ldr	r0, [r7, #32]
 80055f2:	f003 faed 	bl	8008bd0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80055f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f8:	4613      	mov	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	3338      	adds	r3, #56	; 0x38
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	4413      	add	r3, r2
 8005606:	3304      	adds	r3, #4
 8005608:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	78db      	ldrb	r3, [r3, #3]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d108      	bne.n	8005624 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2200      	movs	r2, #0
 8005616:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	b2db      	uxtb	r3, r3
 800561c:	4619      	mov	r1, r3
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f009 fcc4 	bl	800efac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005630:	461a      	mov	r2, r3
 8005632:	2302      	movs	r3, #2
 8005634:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fcdb 	bl	8005ffe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	3301      	adds	r3, #1
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	085b      	lsrs	r3, r3, #1
 8005652:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	2b00      	cmp	r3, #0
 8005658:	f47f af2e 	bne.w	80054b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f004 fad7 	bl	8009c14 <USB_ReadInterrupts>
 8005666:	4603      	mov	r3, r0
 8005668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800566c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005670:	d122      	bne.n	80056b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800568c:	2b01      	cmp	r3, #1
 800568e:	d108      	bne.n	80056a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005698:	2100      	movs	r1, #0
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fec2 	bl	8006424 <HAL_PCDEx_LPM_Callback>
 80056a0:	e002      	b.n	80056a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f009 fc62 	bl	800ef6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80056b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f004 faa9 	bl	8009c14 <USB_ReadInterrupts>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056cc:	d112      	bne.n	80056f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d102      	bne.n	80056e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f009 fc1e 	bl	800ef20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695a      	ldr	r2, [r3, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80056f2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f004 fa8b 	bl	8009c14 <USB_ReadInterrupts>
 80056fe:	4603      	mov	r3, r0
 8005700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005708:	f040 80b7 	bne.w	800587a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2110      	movs	r1, #16
 8005726:	4618      	mov	r0, r3
 8005728:	f003 fa52 	bl	8008bd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800572c:	2300      	movs	r3, #0
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005730:	e046      	b.n	80057c0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573e:	461a      	mov	r2, r3
 8005740:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005744:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005760:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005764:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005772:	461a      	mov	r2, r3
 8005774:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005778:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	69fa      	ldr	r2, [r7, #28]
 800578e:	440a      	add	r2, r1
 8005790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005794:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005798:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800579a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057aa:	0151      	lsls	r1, r2, #5
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	440a      	add	r2, r1
 80057b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	3301      	adds	r3, #1
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d3b3      	bcc.n	8005732 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80057dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d016      	beq.n	8005814 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f6:	f043 030b 	orr.w	r3, r3, #11
 80057fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800580c:	f043 030b 	orr.w	r3, r3, #11
 8005810:	6453      	str	r3, [r2, #68]	; 0x44
 8005812:	e015      	b.n	8005840 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	69fa      	ldr	r2, [r7, #28]
 800581e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005822:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005826:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800582a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800583a:	f043 030b 	orr.w	r3, r3, #11
 800583e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800584e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005852:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005864:	461a      	mov	r2, r3
 8005866:	f004 fa99 	bl	8009d9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f004 f9c8 	bl	8009c14 <USB_ReadInterrupts>
 8005884:	4603      	mov	r3, r0
 8005886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800588a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800588e:	d124      	bne.n	80058da <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f004 fa5e 	bl	8009d56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f003 fa13 	bl	8008cca <USB_GetDevSpeed>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681c      	ldr	r4, [r3, #0]
 80058b0:	f001 fa34 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 80058b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	4620      	mov	r0, r4
 80058c0:	f002 ff12 	bl	80086e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f009 fb02 	bl	800eece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80058d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f004 f998 	bl	8009c14 <USB_ReadInterrupts>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d10a      	bne.n	8005904 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f009 fadf 	bl	800eeb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f002 0208 	and.w	r2, r2, #8
 8005902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f004 f983 	bl	8009c14 <USB_ReadInterrupts>
 800590e:	4603      	mov	r3, r0
 8005910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005914:	2b80      	cmp	r3, #128	; 0x80
 8005916:	d122      	bne.n	800595e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005924:	2301      	movs	r3, #1
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
 8005928:	e014      	b.n	8005954 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592e:	4613      	mov	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d105      	bne.n	800594e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	b2db      	uxtb	r3, r3
 8005946:	4619      	mov	r1, r3
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fb27 	bl	8005f9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	3301      	adds	r3, #1
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800595a:	429a      	cmp	r2, r3
 800595c:	d3e5      	bcc.n	800592a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f004 f956 	bl	8009c14 <USB_ReadInterrupts>
 8005968:	4603      	mov	r3, r0
 800596a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800596e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005972:	d13b      	bne.n	80059ec <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005974:	2301      	movs	r3, #1
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
 8005978:	e02b      	b.n	80059d2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800598a:	6879      	ldr	r1, [r7, #4]
 800598c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598e:	4613      	mov	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	3340      	adds	r3, #64	; 0x40
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d115      	bne.n	80059cc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80059a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	da12      	bge.n	80059cc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059aa:	4613      	mov	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	333f      	adds	r3, #63	; 0x3f
 80059b6:	2201      	movs	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fae8 	bl	8005f9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	3301      	adds	r3, #1
 80059d0:	627b      	str	r3, [r7, #36]	; 0x24
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d8:	429a      	cmp	r2, r3
 80059da:	d3ce      	bcc.n	800597a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80059ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f004 f90f 	bl	8009c14 <USB_ReadInterrupts>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a00:	d155      	bne.n	8005aae <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a02:	2301      	movs	r3, #1
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
 8005a06:	e045      	b.n	8005a94 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d12e      	bne.n	8005a8e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	da2b      	bge.n	8005a8e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005a42:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d121      	bne.n	8005a8e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005a4a:	6879      	ldr	r1, [r7, #4]
 8005a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4e:	4613      	mov	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10a      	bne.n	8005a8e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	69fa      	ldr	r2, [r7, #28]
 8005a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a8a:	6053      	str	r3, [r2, #4]
            break;
 8005a8c:	e007      	b.n	8005a9e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	3301      	adds	r3, #1
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d3b4      	bcc.n	8005a08 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695a      	ldr	r2, [r3, #20]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f004 f8ae 	bl	8009c14 <USB_ReadInterrupts>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac2:	d10a      	bne.n	8005ada <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f009 fa83 	bl	800efd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f004 f898 	bl	8009c14 <USB_ReadInterrupts>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d115      	bne.n	8005b1a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f009 fa73 	bl	800efec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6859      	ldr	r1, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]
 8005b16:	e000      	b.n	8005b1a <HAL_PCD_IRQHandler+0x938>
      return;
 8005b18:	bf00      	nop
    }
  }
}
 8005b1a:	3734      	adds	r7, #52	; 0x34
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd90      	pop	{r4, r7, pc}

08005b20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d101      	bne.n	8005b3a <HAL_PCD_SetAddress+0x1a>
 8005b36:	2302      	movs	r3, #2
 8005b38:	e013      	b.n	8005b62 <HAL_PCD_SetAddress+0x42>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	78fa      	ldrb	r2, [r7, #3]
 8005b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	4611      	mov	r1, r2
 8005b52:	4618      	mov	r0, r3
 8005b54:	f003 fff6 	bl	8009b44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	4608      	mov	r0, r1
 8005b74:	4611      	mov	r1, r2
 8005b76:	461a      	mov	r2, r3
 8005b78:	4603      	mov	r3, r0
 8005b7a:	70fb      	strb	r3, [r7, #3]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	803b      	strh	r3, [r7, #0]
 8005b80:	4613      	mov	r3, r2
 8005b82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	da0f      	bge.n	8005bb0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	f003 020f 	and.w	r2, r3, #15
 8005b96:	4613      	mov	r3, r2
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	3338      	adds	r3, #56	; 0x38
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	705a      	strb	r2, [r3, #1]
 8005bae:	e00f      	b.n	8005bd0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	f003 020f 	and.w	r2, r3, #15
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005bdc:	883a      	ldrh	r2, [r7, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	78ba      	ldrb	r2, [r7, #2]
 8005be6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005bfa:	78bb      	ldrb	r3, [r7, #2]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d102      	bne.n	8005c06 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_PCD_EP_Open+0xaa>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e00e      	b.n	8005c32 <HAL_PCD_EP_Open+0xc8>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68f9      	ldr	r1, [r7, #12]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f003 f876 	bl	8008d14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005c30:	7afb      	ldrb	r3, [r7, #11]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	460b      	mov	r3, r1
 8005c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	da0f      	bge.n	8005c6e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	f003 020f 	and.w	r2, r3, #15
 8005c54:	4613      	mov	r3, r2
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	4413      	add	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	3338      	adds	r3, #56	; 0x38
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	4413      	add	r3, r2
 8005c62:	3304      	adds	r3, #4
 8005c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	705a      	strb	r2, [r3, #1]
 8005c6c:	e00f      	b.n	8005c8e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	f003 020f 	and.w	r2, r3, #15
 8005c74:	4613      	mov	r3, r2
 8005c76:	00db      	lsls	r3, r3, #3
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	4413      	add	r3, r2
 8005c84:	3304      	adds	r3, #4
 8005c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_PCD_EP_Close+0x6e>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e00e      	b.n	8005cc6 <HAL_PCD_EP_Close+0x8c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68f9      	ldr	r1, [r7, #12]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f003 f8b4 	bl	8008e24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b086      	sub	sp, #24
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cde:	7afb      	ldrb	r3, [r7, #11]
 8005ce0:	f003 020f 	and.w	r2, r3, #15
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2200      	movs	r2, #0
 8005d08:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d10:	7afb      	ldrb	r3, [r7, #11]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d102      	bne.n	8005d2a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d2a:	7afb      	ldrb	r3, [r7, #11]
 8005d2c:	f003 030f 	and.w	r3, r3, #15
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d109      	bne.n	8005d48 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6979      	ldr	r1, [r7, #20]
 8005d42:	f003 fb93 	bl	800946c <USB_EP0StartXfer>
 8005d46:	e008      	b.n	8005d5a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	461a      	mov	r2, r3
 8005d54:	6979      	ldr	r1, [r7, #20]
 8005d56:	f003 f941 	bl	8008fdc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	f003 020f 	and.w	r2, r3, #15
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	440b      	add	r3, r1
 8005d82:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005d86:	681b      	ldr	r3, [r3, #0]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	607a      	str	r2, [r7, #4]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	460b      	mov	r3, r1
 8005da2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005da4:	7afb      	ldrb	r3, [r7, #11]
 8005da6:	f003 020f 	and.w	r2, r3, #15
 8005daa:	4613      	mov	r3, r2
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	3338      	adds	r3, #56	; 0x38
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	3304      	adds	r3, #4
 8005dba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dd4:	7afb      	ldrb	r3, [r7, #11]
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d102      	bne.n	8005dee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005dee:	7afb      	ldrb	r3, [r7, #11]
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d109      	bne.n	8005e0c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6818      	ldr	r0, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	6979      	ldr	r1, [r7, #20]
 8005e06:	f003 fb31 	bl	800946c <USB_EP0StartXfer>
 8005e0a:	e008      	b.n	8005e1e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	461a      	mov	r2, r3
 8005e18:	6979      	ldr	r1, [r7, #20]
 8005e1a:	f003 f8df 	bl	8008fdc <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3718      	adds	r7, #24
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	f003 020f 	and.w	r2, r3, #15
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d901      	bls.n	8005e46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e050      	b.n	8005ee8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	da0f      	bge.n	8005e6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e4e:	78fb      	ldrb	r3, [r7, #3]
 8005e50:	f003 020f 	and.w	r2, r3, #15
 8005e54:	4613      	mov	r3, r2
 8005e56:	00db      	lsls	r3, r3, #3
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	3338      	adds	r3, #56	; 0x38
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	4413      	add	r3, r2
 8005e62:	3304      	adds	r3, #4
 8005e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	705a      	strb	r2, [r3, #1]
 8005e6c:	e00d      	b.n	8005e8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e6e:	78fa      	ldrb	r2, [r7, #3]
 8005e70:	4613      	mov	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	4413      	add	r3, r2
 8005e80:	3304      	adds	r3, #4
 8005e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	f003 030f 	and.w	r3, r3, #15
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_PCD_EP_SetStall+0x82>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e01e      	b.n	8005ee8 <HAL_PCD_EP_SetStall+0xc0>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f003 fd6f 	bl	800999c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ebe:	78fb      	ldrb	r3, [r7, #3]
 8005ec0:	f003 030f 	and.w	r3, r3, #15
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	b2d9      	uxtb	r1, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f003 ff5f 	bl	8009d9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 020f 	and.w	r2, r3, #15
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d901      	bls.n	8005f0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e042      	b.n	8005f94 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da0f      	bge.n	8005f36 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	f003 020f 	and.w	r2, r3, #15
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	3338      	adds	r3, #56	; 0x38
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	4413      	add	r3, r2
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2201      	movs	r2, #1
 8005f32:	705a      	strb	r2, [r3, #1]
 8005f34:	e00f      	b.n	8005f56 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	f003 020f 	and.w	r2, r3, #15
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f5c:	78fb      	ldrb	r3, [r7, #3]
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_PCD_EP_ClrStall+0x86>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e00e      	b.n	8005f94 <HAL_PCD_EP_ClrStall+0xa4>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68f9      	ldr	r1, [r7, #12]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f003 fd77 	bl	8009a78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	da0c      	bge.n	8005fca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	f003 020f 	and.w	r2, r3, #15
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	3338      	adds	r3, #56	; 0x38
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e00c      	b.n	8005fe4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fca:	78fb      	ldrb	r3, [r7, #3]
 8005fcc:	f003 020f 	and.w	r2, r3, #15
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	00db      	lsls	r3, r3, #3
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	4413      	add	r3, r2
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68f9      	ldr	r1, [r7, #12]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f003 fb96 	bl	800971c <USB_EPStopXfer>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005ff4:	7afb      	ldrb	r3, [r7, #11]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b08a      	sub	sp, #40	; 0x28
 8006002:	af02      	add	r7, sp, #8
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	4613      	mov	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	3338      	adds	r3, #56	; 0x38
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	4413      	add	r3, r2
 8006022:	3304      	adds	r3, #4
 8006024:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1a      	ldr	r2, [r3, #32]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	429a      	cmp	r2, r3
 8006030:	d901      	bls.n	8006036 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e06c      	b.n	8006110 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	429a      	cmp	r2, r3
 800604a:	d902      	bls.n	8006052 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	3303      	adds	r3, #3
 8006056:	089b      	lsrs	r3, r3, #2
 8006058:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800605a:	e02b      	b.n	80060b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	699a      	ldr	r2, [r3, #24]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	69fa      	ldr	r2, [r7, #28]
 800606e:	429a      	cmp	r2, r3
 8006070:	d902      	bls.n	8006078 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	3303      	adds	r3, #3
 800607c:	089b      	lsrs	r3, r3, #2
 800607e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6919      	ldr	r1, [r3, #16]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	b2da      	uxtb	r2, r3
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006090:	b2db      	uxtb	r3, r3
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	4603      	mov	r3, r0
 8006096:	6978      	ldr	r0, [r7, #20]
 8006098:	f003 fbea 	bl	8009870 <USB_WritePacket>

    ep->xfer_buff  += len;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	441a      	add	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a1a      	ldr	r2, [r3, #32]
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	441a      	add	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d809      	bhi.n	80060de <PCD_WriteEmptyTxFifo+0xe0>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a1a      	ldr	r2, [r3, #32]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d203      	bcs.n	80060de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1be      	bne.n	800605c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d811      	bhi.n	800610e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	2201      	movs	r2, #1
 80060f2:	fa02 f303 	lsl.w	r3, r2, r3
 80060f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	43db      	mvns	r3, r3
 8006104:	6939      	ldr	r1, [r7, #16]
 8006106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800610a:	4013      	ands	r3, r2
 800610c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3720      	adds	r7, #32
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	333c      	adds	r3, #60	; 0x3c
 8006130:	3304      	adds	r3, #4
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d17b      	bne.n	8006246 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d015      	beq.n	8006184 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	4a61      	ldr	r2, [pc, #388]	; (80062e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800615c:	4293      	cmp	r3, r2
 800615e:	f240 80b9 	bls.w	80062d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80b3 	beq.w	80062d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617a:	461a      	mov	r2, r3
 800617c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006180:	6093      	str	r3, [r2, #8]
 8006182:	e0a7      	b.n	80062d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619a:	461a      	mov	r2, r3
 800619c:	2320      	movs	r3, #32
 800619e:	6093      	str	r3, [r2, #8]
 80061a0:	e098      	b.n	80062d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f040 8093 	bne.w	80062d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	4a4b      	ldr	r2, [pc, #300]	; (80062e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d90f      	bls.n	80061d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061cc:	461a      	mov	r2, r3
 80061ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d2:	6093      	str	r3, [r2, #8]
 80061d4:	e07e      	b.n	80062d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	4613      	mov	r3, r2
 80061da:	00db      	lsls	r3, r3, #3
 80061dc:	4413      	add	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	4413      	add	r3, r2
 80061e8:	3304      	adds	r3, #4
 80061ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	69da      	ldr	r2, [r3, #28]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	0159      	lsls	r1, r3, #5
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	440b      	add	r3, r1
 80061f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006202:	1ad2      	subs	r2, r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d114      	bne.n	8006238 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006220:	461a      	mov	r2, r3
 8006222:	2101      	movs	r1, #1
 8006224:	f003 fdba 	bl	8009d9c <USB_EP0_OutStart>
 8006228:	e006      	b.n	8006238 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	441a      	add	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	b2db      	uxtb	r3, r3
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f008 fe02 	bl	800ee48 <HAL_PCD_DataOutStageCallback>
 8006244:	e046      	b.n	80062d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	4a26      	ldr	r2, [pc, #152]	; (80062e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d124      	bne.n	8006298 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006264:	461a      	mov	r2, r3
 8006266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626a:	6093      	str	r3, [r2, #8]
 800626c:	e032      	b.n	80062d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f003 0320 	and.w	r3, r3, #32
 8006274:	2b00      	cmp	r3, #0
 8006276:	d008      	beq.n	800628a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006284:	461a      	mov	r2, r3
 8006286:	2320      	movs	r3, #32
 8006288:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	b2db      	uxtb	r3, r3
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f008 fdd9 	bl	800ee48 <HAL_PCD_DataOutStageCallback>
 8006296:	e01d      	b.n	80062d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d114      	bne.n	80062c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	4613      	mov	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d108      	bne.n	80062c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062c0:	461a      	mov	r2, r3
 80062c2:	2100      	movs	r1, #0
 80062c4:	f003 fd6a 	bl	8009d9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	4619      	mov	r1, r3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f008 fdba 	bl	800ee48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3720      	adds	r7, #32
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	4f54300a 	.word	0x4f54300a
 80062e4:	4f54310a 	.word	0x4f54310a

080062e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	333c      	adds	r3, #60	; 0x3c
 8006300:	3304      	adds	r3, #4
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4a15      	ldr	r2, [pc, #84]	; (8006370 <PCD_EP_OutSetupPacket_int+0x88>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d90e      	bls.n	800633c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006324:	2b00      	cmp	r3, #0
 8006326:	d009      	beq.n	800633c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	461a      	mov	r2, r3
 8006336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f008 fd71 	bl	800ee24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a0a      	ldr	r2, [pc, #40]	; (8006370 <PCD_EP_OutSetupPacket_int+0x88>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d90c      	bls.n	8006364 <PCD_EP_OutSetupPacket_int+0x7c>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d108      	bne.n	8006364 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800635c:	461a      	mov	r2, r3
 800635e:	2101      	movs	r1, #1
 8006360:	f003 fd1c 	bl	8009d9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	4f54300a 	.word	0x4f54300a

08006374 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
 8006380:	4613      	mov	r3, r2
 8006382:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d107      	bne.n	80063a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006392:	883b      	ldrh	r3, [r7, #0]
 8006394:	0419      	lsls	r1, r3, #16
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	430a      	orrs	r2, r1
 800639e:	629a      	str	r2, [r3, #40]	; 0x28
 80063a0:	e028      	b.n	80063f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a8:	0c1b      	lsrs	r3, r3, #16
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	4413      	add	r3, r2
 80063ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063b0:	2300      	movs	r3, #0
 80063b2:	73fb      	strb	r3, [r7, #15]
 80063b4:	e00d      	b.n	80063d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	3340      	adds	r3, #64	; 0x40
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	0c1b      	lsrs	r3, r3, #16
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4413      	add	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	3301      	adds	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
 80063d2:	7bfa      	ldrb	r2, [r7, #15]
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	429a      	cmp	r2, r3
 80063da:	d3ec      	bcc.n	80063b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80063dc:	883b      	ldrh	r3, [r7, #0]
 80063de:	0418      	lsls	r0, r3, #16
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6819      	ldr	r1, [r3, #0]
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	3b01      	subs	r3, #1
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	4302      	orrs	r2, r0
 80063ec:	3340      	adds	r3, #64	; 0x40
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	887a      	ldrh	r2, [r7, #2]
 8006414:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e267      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d075      	beq.n	8006546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800645a:	4b88      	ldr	r3, [pc, #544]	; (800667c <HAL_RCC_OscConfig+0x240>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 030c 	and.w	r3, r3, #12
 8006462:	2b04      	cmp	r3, #4
 8006464:	d00c      	beq.n	8006480 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006466:	4b85      	ldr	r3, [pc, #532]	; (800667c <HAL_RCC_OscConfig+0x240>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800646e:	2b08      	cmp	r3, #8
 8006470:	d112      	bne.n	8006498 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006472:	4b82      	ldr	r3, [pc, #520]	; (800667c <HAL_RCC_OscConfig+0x240>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800647a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800647e:	d10b      	bne.n	8006498 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006480:	4b7e      	ldr	r3, [pc, #504]	; (800667c <HAL_RCC_OscConfig+0x240>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d05b      	beq.n	8006544 <HAL_RCC_OscConfig+0x108>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d157      	bne.n	8006544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e242      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a0:	d106      	bne.n	80064b0 <HAL_RCC_OscConfig+0x74>
 80064a2:	4b76      	ldr	r3, [pc, #472]	; (800667c <HAL_RCC_OscConfig+0x240>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a75      	ldr	r2, [pc, #468]	; (800667c <HAL_RCC_OscConfig+0x240>)
 80064a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	e01d      	b.n	80064ec <HAL_RCC_OscConfig+0xb0>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064b8:	d10c      	bne.n	80064d4 <HAL_RCC_OscConfig+0x98>
 80064ba:	4b70      	ldr	r3, [pc, #448]	; (800667c <HAL_RCC_OscConfig+0x240>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a6f      	ldr	r2, [pc, #444]	; (800667c <HAL_RCC_OscConfig+0x240>)
 80064c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064c4:	6013      	str	r3, [r2, #0]
 80064c6:	4b6d      	ldr	r3, [pc, #436]	; (800667c <HAL_RCC_OscConfig+0x240>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a6c      	ldr	r2, [pc, #432]	; (800667c <HAL_RCC_OscConfig+0x240>)
 80064cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	e00b      	b.n	80064ec <HAL_RCC_OscConfig+0xb0>
 80064d4:	4b69      	ldr	r3, [pc, #420]	; (800667c <HAL_RCC_OscConfig+0x240>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a68      	ldr	r2, [pc, #416]	; (800667c <HAL_RCC_OscConfig+0x240>)
 80064da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064de:	6013      	str	r3, [r2, #0]
 80064e0:	4b66      	ldr	r3, [pc, #408]	; (800667c <HAL_RCC_OscConfig+0x240>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a65      	ldr	r2, [pc, #404]	; (800667c <HAL_RCC_OscConfig+0x240>)
 80064e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d013      	beq.n	800651c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064f4:	f7fd fb20 	bl	8003b38 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064fc:	f7fd fb1c 	bl	8003b38 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b64      	cmp	r3, #100	; 0x64
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e207      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800650e:	4b5b      	ldr	r3, [pc, #364]	; (800667c <HAL_RCC_OscConfig+0x240>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f0      	beq.n	80064fc <HAL_RCC_OscConfig+0xc0>
 800651a:	e014      	b.n	8006546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800651c:	f7fd fb0c 	bl	8003b38 <HAL_GetTick>
 8006520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006522:	e008      	b.n	8006536 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006524:	f7fd fb08 	bl	8003b38 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b64      	cmp	r3, #100	; 0x64
 8006530:	d901      	bls.n	8006536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e1f3      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006536:	4b51      	ldr	r3, [pc, #324]	; (800667c <HAL_RCC_OscConfig+0x240>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1f0      	bne.n	8006524 <HAL_RCC_OscConfig+0xe8>
 8006542:	e000      	b.n	8006546 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d063      	beq.n	800661a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006552:	4b4a      	ldr	r3, [pc, #296]	; (800667c <HAL_RCC_OscConfig+0x240>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 030c 	and.w	r3, r3, #12
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00b      	beq.n	8006576 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800655e:	4b47      	ldr	r3, [pc, #284]	; (800667c <HAL_RCC_OscConfig+0x240>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006566:	2b08      	cmp	r3, #8
 8006568:	d11c      	bne.n	80065a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800656a:	4b44      	ldr	r3, [pc, #272]	; (800667c <HAL_RCC_OscConfig+0x240>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d116      	bne.n	80065a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006576:	4b41      	ldr	r3, [pc, #260]	; (800667c <HAL_RCC_OscConfig+0x240>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <HAL_RCC_OscConfig+0x152>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d001      	beq.n	800658e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e1c7      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800658e:	4b3b      	ldr	r3, [pc, #236]	; (800667c <HAL_RCC_OscConfig+0x240>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	4937      	ldr	r1, [pc, #220]	; (800667c <HAL_RCC_OscConfig+0x240>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065a2:	e03a      	b.n	800661a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d020      	beq.n	80065ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065ac:	4b34      	ldr	r3, [pc, #208]	; (8006680 <HAL_RCC_OscConfig+0x244>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b2:	f7fd fac1 	bl	8003b38 <HAL_GetTick>
 80065b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b8:	e008      	b.n	80065cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065ba:	f7fd fabd 	bl	8003b38 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e1a8      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065cc:	4b2b      	ldr	r3, [pc, #172]	; (800667c <HAL_RCC_OscConfig+0x240>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0f0      	beq.n	80065ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065d8:	4b28      	ldr	r3, [pc, #160]	; (800667c <HAL_RCC_OscConfig+0x240>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	4925      	ldr	r1, [pc, #148]	; (800667c <HAL_RCC_OscConfig+0x240>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	600b      	str	r3, [r1, #0]
 80065ec:	e015      	b.n	800661a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065ee:	4b24      	ldr	r3, [pc, #144]	; (8006680 <HAL_RCC_OscConfig+0x244>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7fd faa0 	bl	8003b38 <HAL_GetTick>
 80065f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065fa:	e008      	b.n	800660e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065fc:	f7fd fa9c 	bl	8003b38 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e187      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800660e:	4b1b      	ldr	r3, [pc, #108]	; (800667c <HAL_RCC_OscConfig+0x240>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1f0      	bne.n	80065fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d036      	beq.n	8006694 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d016      	beq.n	800665c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800662e:	4b15      	ldr	r3, [pc, #84]	; (8006684 <HAL_RCC_OscConfig+0x248>)
 8006630:	2201      	movs	r2, #1
 8006632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006634:	f7fd fa80 	bl	8003b38 <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800663a:	e008      	b.n	800664e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800663c:	f7fd fa7c 	bl	8003b38 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e167      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800664e:	4b0b      	ldr	r3, [pc, #44]	; (800667c <HAL_RCC_OscConfig+0x240>)
 8006650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0f0      	beq.n	800663c <HAL_RCC_OscConfig+0x200>
 800665a:	e01b      	b.n	8006694 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800665c:	4b09      	ldr	r3, [pc, #36]	; (8006684 <HAL_RCC_OscConfig+0x248>)
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006662:	f7fd fa69 	bl	8003b38 <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006668:	e00e      	b.n	8006688 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800666a:	f7fd fa65 	bl	8003b38 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d907      	bls.n	8006688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e150      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
 800667c:	40023800 	.word	0x40023800
 8006680:	42470000 	.word	0x42470000
 8006684:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006688:	4b88      	ldr	r3, [pc, #544]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 800668a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1ea      	bne.n	800666a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0304 	and.w	r3, r3, #4
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 8097 	beq.w	80067d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066a2:	2300      	movs	r3, #0
 80066a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066a6:	4b81      	ldr	r3, [pc, #516]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10f      	bne.n	80066d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066b2:	2300      	movs	r3, #0
 80066b4:	60bb      	str	r3, [r7, #8]
 80066b6:	4b7d      	ldr	r3, [pc, #500]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	4a7c      	ldr	r2, [pc, #496]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 80066bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c0:	6413      	str	r3, [r2, #64]	; 0x40
 80066c2:	4b7a      	ldr	r3, [pc, #488]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ca:	60bb      	str	r3, [r7, #8]
 80066cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066ce:	2301      	movs	r3, #1
 80066d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066d2:	4b77      	ldr	r3, [pc, #476]	; (80068b0 <HAL_RCC_OscConfig+0x474>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d118      	bne.n	8006710 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066de:	4b74      	ldr	r3, [pc, #464]	; (80068b0 <HAL_RCC_OscConfig+0x474>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a73      	ldr	r2, [pc, #460]	; (80068b0 <HAL_RCC_OscConfig+0x474>)
 80066e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066ea:	f7fd fa25 	bl	8003b38 <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066f0:	e008      	b.n	8006704 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066f2:	f7fd fa21 	bl	8003b38 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e10c      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006704:	4b6a      	ldr	r3, [pc, #424]	; (80068b0 <HAL_RCC_OscConfig+0x474>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800670c:	2b00      	cmp	r3, #0
 800670e:	d0f0      	beq.n	80066f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	2b01      	cmp	r3, #1
 8006716:	d106      	bne.n	8006726 <HAL_RCC_OscConfig+0x2ea>
 8006718:	4b64      	ldr	r3, [pc, #400]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 800671a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671c:	4a63      	ldr	r2, [pc, #396]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 800671e:	f043 0301 	orr.w	r3, r3, #1
 8006722:	6713      	str	r3, [r2, #112]	; 0x70
 8006724:	e01c      	b.n	8006760 <HAL_RCC_OscConfig+0x324>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2b05      	cmp	r3, #5
 800672c:	d10c      	bne.n	8006748 <HAL_RCC_OscConfig+0x30c>
 800672e:	4b5f      	ldr	r3, [pc, #380]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	4a5e      	ldr	r2, [pc, #376]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 8006734:	f043 0304 	orr.w	r3, r3, #4
 8006738:	6713      	str	r3, [r2, #112]	; 0x70
 800673a:	4b5c      	ldr	r3, [pc, #368]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 800673c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673e:	4a5b      	ldr	r2, [pc, #364]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 8006740:	f043 0301 	orr.w	r3, r3, #1
 8006744:	6713      	str	r3, [r2, #112]	; 0x70
 8006746:	e00b      	b.n	8006760 <HAL_RCC_OscConfig+0x324>
 8006748:	4b58      	ldr	r3, [pc, #352]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 800674a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674c:	4a57      	ldr	r2, [pc, #348]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 800674e:	f023 0301 	bic.w	r3, r3, #1
 8006752:	6713      	str	r3, [r2, #112]	; 0x70
 8006754:	4b55      	ldr	r3, [pc, #340]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 8006756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006758:	4a54      	ldr	r2, [pc, #336]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 800675a:	f023 0304 	bic.w	r3, r3, #4
 800675e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d015      	beq.n	8006794 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006768:	f7fd f9e6 	bl	8003b38 <HAL_GetTick>
 800676c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800676e:	e00a      	b.n	8006786 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006770:	f7fd f9e2 	bl	8003b38 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	f241 3288 	movw	r2, #5000	; 0x1388
 800677e:	4293      	cmp	r3, r2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e0cb      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006786:	4b49      	ldr	r3, [pc, #292]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d0ee      	beq.n	8006770 <HAL_RCC_OscConfig+0x334>
 8006792:	e014      	b.n	80067be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006794:	f7fd f9d0 	bl	8003b38 <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800679a:	e00a      	b.n	80067b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800679c:	f7fd f9cc 	bl	8003b38 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e0b5      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067b2:	4b3e      	ldr	r3, [pc, #248]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 80067b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1ee      	bne.n	800679c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d105      	bne.n	80067d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067c4:	4b39      	ldr	r3, [pc, #228]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	4a38      	ldr	r2, [pc, #224]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 80067ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 80a1 	beq.w	800691c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067da:	4b34      	ldr	r3, [pc, #208]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 030c 	and.w	r3, r3, #12
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d05c      	beq.n	80068a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d141      	bne.n	8006872 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067ee:	4b31      	ldr	r3, [pc, #196]	; (80068b4 <HAL_RCC_OscConfig+0x478>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f4:	f7fd f9a0 	bl	8003b38 <HAL_GetTick>
 80067f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067fa:	e008      	b.n	800680e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067fc:	f7fd f99c 	bl	8003b38 <HAL_GetTick>
 8006800:	4602      	mov	r2, r0
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	1ad3      	subs	r3, r2, r3
 8006806:	2b02      	cmp	r3, #2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e087      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800680e:	4b27      	ldr	r3, [pc, #156]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1f0      	bne.n	80067fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69da      	ldr	r2, [r3, #28]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	019b      	lsls	r3, r3, #6
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006830:	085b      	lsrs	r3, r3, #1
 8006832:	3b01      	subs	r3, #1
 8006834:	041b      	lsls	r3, r3, #16
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683c:	061b      	lsls	r3, r3, #24
 800683e:	491b      	ldr	r1, [pc, #108]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 8006840:	4313      	orrs	r3, r2
 8006842:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006844:	4b1b      	ldr	r3, [pc, #108]	; (80068b4 <HAL_RCC_OscConfig+0x478>)
 8006846:	2201      	movs	r2, #1
 8006848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800684a:	f7fd f975 	bl	8003b38 <HAL_GetTick>
 800684e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006850:	e008      	b.n	8006864 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006852:	f7fd f971 	bl	8003b38 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b02      	cmp	r3, #2
 800685e:	d901      	bls.n	8006864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e05c      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006864:	4b11      	ldr	r3, [pc, #68]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d0f0      	beq.n	8006852 <HAL_RCC_OscConfig+0x416>
 8006870:	e054      	b.n	800691c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006872:	4b10      	ldr	r3, [pc, #64]	; (80068b4 <HAL_RCC_OscConfig+0x478>)
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006878:	f7fd f95e 	bl	8003b38 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006880:	f7fd f95a 	bl	8003b38 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e045      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006892:	4b06      	ldr	r3, [pc, #24]	; (80068ac <HAL_RCC_OscConfig+0x470>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0x444>
 800689e:	e03d      	b.n	800691c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d107      	bne.n	80068b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e038      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
 80068ac:	40023800 	.word	0x40023800
 80068b0:	40007000 	.word	0x40007000
 80068b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068b8:	4b1b      	ldr	r3, [pc, #108]	; (8006928 <HAL_RCC_OscConfig+0x4ec>)
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d028      	beq.n	8006918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d121      	bne.n	8006918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068de:	429a      	cmp	r2, r3
 80068e0:	d11a      	bne.n	8006918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068e8:	4013      	ands	r3, r2
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d111      	bne.n	8006918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	085b      	lsrs	r3, r3, #1
 8006900:	3b01      	subs	r3, #1
 8006902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006904:	429a      	cmp	r2, r3
 8006906:	d107      	bne.n	8006918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006914:	429a      	cmp	r2, r3
 8006916:	d001      	beq.n	800691c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e000      	b.n	800691e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	40023800 	.word	0x40023800

0800692c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e0cc      	b.n	8006ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006940:	4b68      	ldr	r3, [pc, #416]	; (8006ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d90c      	bls.n	8006968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800694e:	4b65      	ldr	r3, [pc, #404]	; (8006ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006956:	4b63      	ldr	r3, [pc, #396]	; (8006ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d001      	beq.n	8006968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e0b8      	b.n	8006ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d020      	beq.n	80069b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006980:	4b59      	ldr	r3, [pc, #356]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	4a58      	ldr	r2, [pc, #352]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8006986:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800698a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b00      	cmp	r3, #0
 8006996:	d005      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006998:	4b53      	ldr	r3, [pc, #332]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	4a52      	ldr	r2, [pc, #328]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800699e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a4:	4b50      	ldr	r3, [pc, #320]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	494d      	ldr	r1, [pc, #308]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d044      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d107      	bne.n	80069da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ca:	4b47      	ldr	r3, [pc, #284]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d119      	bne.n	8006a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e07f      	b.n	8006ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d003      	beq.n	80069ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d107      	bne.n	80069fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ea:	4b3f      	ldr	r3, [pc, #252]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d109      	bne.n	8006a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e06f      	b.n	8006ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069fa:	4b3b      	ldr	r3, [pc, #236]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e067      	b.n	8006ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a0a:	4b37      	ldr	r3, [pc, #220]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f023 0203 	bic.w	r2, r3, #3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	4934      	ldr	r1, [pc, #208]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a1c:	f7fd f88c 	bl	8003b38 <HAL_GetTick>
 8006a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a22:	e00a      	b.n	8006a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a24:	f7fd f888 	bl	8003b38 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e04f      	b.n	8006ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a3a:	4b2b      	ldr	r3, [pc, #172]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 020c 	and.w	r2, r3, #12
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d1eb      	bne.n	8006a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a4c:	4b25      	ldr	r3, [pc, #148]	; (8006ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d20c      	bcs.n	8006a74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a5a:	4b22      	ldr	r3, [pc, #136]	; (8006ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a62:	4b20      	ldr	r3, [pc, #128]	; (8006ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d001      	beq.n	8006a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e032      	b.n	8006ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d008      	beq.n	8006a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a80:	4b19      	ldr	r3, [pc, #100]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	4916      	ldr	r1, [pc, #88]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d009      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a9e:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	490e      	ldr	r1, [pc, #56]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ab2:	f000 f82d 	bl	8006b10 <HAL_RCC_GetSysClockFreq>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	4b0b      	ldr	r3, [pc, #44]	; (8006ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	091b      	lsrs	r3, r3, #4
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	490a      	ldr	r1, [pc, #40]	; (8006aec <HAL_RCC_ClockConfig+0x1c0>)
 8006ac4:	5ccb      	ldrb	r3, [r1, r3]
 8006ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aca:	4a09      	ldr	r2, [pc, #36]	; (8006af0 <HAL_RCC_ClockConfig+0x1c4>)
 8006acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ace:	4b09      	ldr	r3, [pc, #36]	; (8006af4 <HAL_RCC_ClockConfig+0x1c8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fa ff86 	bl	80019e4 <HAL_InitTick>

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40023c00 	.word	0x40023c00
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	08013c80 	.word	0x08013c80
 8006af0:	20000000 	.word	0x20000000
 8006af4:	20000080 	.word	0x20000080

08006af8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006af8:	b480      	push	{r7}
 8006afa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006afc:	4b03      	ldr	r3, [pc, #12]	; (8006b0c <HAL_RCC_EnableCSS+0x14>)
 8006afe:	2201      	movs	r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
}
 8006b02:	bf00      	nop
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	4247004c 	.word	0x4247004c

08006b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b14:	b094      	sub	sp, #80	; 0x50
 8006b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b20:	2300      	movs	r3, #0
 8006b22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b28:	4b79      	ldr	r3, [pc, #484]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 030c 	and.w	r3, r3, #12
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d00d      	beq.n	8006b50 <HAL_RCC_GetSysClockFreq+0x40>
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	f200 80e1 	bhi.w	8006cfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <HAL_RCC_GetSysClockFreq+0x34>
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d003      	beq.n	8006b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8006b42:	e0db      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b44:	4b73      	ldr	r3, [pc, #460]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006b48:	e0db      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b4a:	4b73      	ldr	r3, [pc, #460]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x208>)
 8006b4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b4e:	e0d8      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b50:	4b6f      	ldr	r3, [pc, #444]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b5a:	4b6d      	ldr	r3, [pc, #436]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d063      	beq.n	8006c2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b66:	4b6a      	ldr	r3, [pc, #424]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	099b      	lsrs	r3, r3, #6
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b78:	633b      	str	r3, [r7, #48]	; 0x30
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b82:	4622      	mov	r2, r4
 8006b84:	462b      	mov	r3, r5
 8006b86:	f04f 0000 	mov.w	r0, #0
 8006b8a:	f04f 0100 	mov.w	r1, #0
 8006b8e:	0159      	lsls	r1, r3, #5
 8006b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b94:	0150      	lsls	r0, r2, #5
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	1a51      	subs	r1, r2, r1
 8006b9e:	6139      	str	r1, [r7, #16]
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bb4:	4659      	mov	r1, fp
 8006bb6:	018b      	lsls	r3, r1, #6
 8006bb8:	4651      	mov	r1, sl
 8006bba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bbe:	4651      	mov	r1, sl
 8006bc0:	018a      	lsls	r2, r1, #6
 8006bc2:	4651      	mov	r1, sl
 8006bc4:	ebb2 0801 	subs.w	r8, r2, r1
 8006bc8:	4659      	mov	r1, fp
 8006bca:	eb63 0901 	sbc.w	r9, r3, r1
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006be2:	4690      	mov	r8, r2
 8006be4:	4699      	mov	r9, r3
 8006be6:	4623      	mov	r3, r4
 8006be8:	eb18 0303 	adds.w	r3, r8, r3
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	462b      	mov	r3, r5
 8006bf0:	eb49 0303 	adc.w	r3, r9, r3
 8006bf4:	60fb      	str	r3, [r7, #12]
 8006bf6:	f04f 0200 	mov.w	r2, #0
 8006bfa:	f04f 0300 	mov.w	r3, #0
 8006bfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c02:	4629      	mov	r1, r5
 8006c04:	024b      	lsls	r3, r1, #9
 8006c06:	4621      	mov	r1, r4
 8006c08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	024a      	lsls	r2, r1, #9
 8006c10:	4610      	mov	r0, r2
 8006c12:	4619      	mov	r1, r3
 8006c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c16:	2200      	movs	r2, #0
 8006c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c20:	f7fa f842 	bl	8000ca8 <__aeabi_uldivmod>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4613      	mov	r3, r2
 8006c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c2c:	e058      	b.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c2e:	4b38      	ldr	r3, [pc, #224]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	099b      	lsrs	r3, r3, #6
 8006c34:	2200      	movs	r2, #0
 8006c36:	4618      	mov	r0, r3
 8006c38:	4611      	mov	r1, r2
 8006c3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c3e:	623b      	str	r3, [r7, #32]
 8006c40:	2300      	movs	r3, #0
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
 8006c44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c48:	4642      	mov	r2, r8
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	f04f 0000 	mov.w	r0, #0
 8006c50:	f04f 0100 	mov.w	r1, #0
 8006c54:	0159      	lsls	r1, r3, #5
 8006c56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c5a:	0150      	lsls	r0, r2, #5
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4641      	mov	r1, r8
 8006c62:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c66:	4649      	mov	r1, r9
 8006c68:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c6c:	f04f 0200 	mov.w	r2, #0
 8006c70:	f04f 0300 	mov.w	r3, #0
 8006c74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c80:	ebb2 040a 	subs.w	r4, r2, sl
 8006c84:	eb63 050b 	sbc.w	r5, r3, fp
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	00eb      	lsls	r3, r5, #3
 8006c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c96:	00e2      	lsls	r2, r4, #3
 8006c98:	4614      	mov	r4, r2
 8006c9a:	461d      	mov	r5, r3
 8006c9c:	4643      	mov	r3, r8
 8006c9e:	18e3      	adds	r3, r4, r3
 8006ca0:	603b      	str	r3, [r7, #0]
 8006ca2:	464b      	mov	r3, r9
 8006ca4:	eb45 0303 	adc.w	r3, r5, r3
 8006ca8:	607b      	str	r3, [r7, #4]
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	f04f 0300 	mov.w	r3, #0
 8006cb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	028b      	lsls	r3, r1, #10
 8006cba:	4621      	mov	r1, r4
 8006cbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	028a      	lsls	r2, r1, #10
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cca:	2200      	movs	r2, #0
 8006ccc:	61bb      	str	r3, [r7, #24]
 8006cce:	61fa      	str	r2, [r7, #28]
 8006cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cd4:	f7f9 ffe8 	bl	8000ca8 <__aeabi_uldivmod>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4613      	mov	r3, r2
 8006cde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	0c1b      	lsrs	r3, r3, #16
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	3301      	adds	r3, #1
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006cf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006cfa:	e002      	b.n	8006d02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cfc:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3750      	adds	r7, #80	; 0x50
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d0e:	bf00      	nop
 8006d10:	40023800 	.word	0x40023800
 8006d14:	00f42400 	.word	0x00f42400
 8006d18:	007a1200 	.word	0x007a1200

08006d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d20:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d22:	681b      	ldr	r3, [r3, #0]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	20000000 	.word	0x20000000

08006d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d38:	f7ff fff0 	bl	8006d1c <HAL_RCC_GetHCLKFreq>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	0a9b      	lsrs	r3, r3, #10
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	4903      	ldr	r1, [pc, #12]	; (8006d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d4a:	5ccb      	ldrb	r3, [r1, r3]
 8006d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40023800 	.word	0x40023800
 8006d58:	08013c90 	.word	0x08013c90

08006d5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	220f      	movs	r2, #15
 8006d6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d6c:	4b12      	ldr	r3, [pc, #72]	; (8006db8 <HAL_RCC_GetClockConfig+0x5c>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 0203 	and.w	r2, r3, #3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d78:	4b0f      	ldr	r3, [pc, #60]	; (8006db8 <HAL_RCC_GetClockConfig+0x5c>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d84:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <HAL_RCC_GetClockConfig+0x5c>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006d90:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <HAL_RCC_GetClockConfig+0x5c>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	08db      	lsrs	r3, r3, #3
 8006d96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d9e:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <HAL_RCC_GetClockConfig+0x60>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 020f 	and.w	r2, r3, #15
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	601a      	str	r2, [r3, #0]
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	40023c00 	.word	0x40023c00

08006dc0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006dc4:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dcc:	2b80      	cmp	r3, #128	; 0x80
 8006dce:	d104      	bne.n	8006dda <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006dd0:	f000 f80a 	bl	8006de8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006dd4:	4b03      	ldr	r3, [pc, #12]	; (8006de4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006dd6:	2280      	movs	r2, #128	; 0x80
 8006dd8:	701a      	strb	r2, [r3, #0]
  }
}
 8006dda:	bf00      	nop
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	40023800 	.word	0x40023800
 8006de4:	4002380e 	.word	0x4002380e

08006de8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006dec:	bf00      	nop
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
	...

08006df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b086      	sub	sp, #24
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10b      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d105      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d075      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e2c:	4b91      	ldr	r3, [pc, #580]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e32:	f7fc fe81 	bl	8003b38 <HAL_GetTick>
 8006e36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e38:	e008      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e3a:	f7fc fe7d 	bl	8003b38 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e189      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e4c:	4b8a      	ldr	r3, [pc, #552]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f0      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	019a      	lsls	r2, r3, #6
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	071b      	lsls	r3, r3, #28
 8006e70:	4981      	ldr	r1, [pc, #516]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e72:	4313      	orrs	r3, r2
 8006e74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01f      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e84:	4b7c      	ldr	r3, [pc, #496]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e8a:	0f1b      	lsrs	r3, r3, #28
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	019a      	lsls	r2, r3, #6
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	061b      	lsls	r3, r3, #24
 8006e9e:	431a      	orrs	r2, r3
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	071b      	lsls	r3, r3, #28
 8006ea4:	4974      	ldr	r1, [pc, #464]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006eac:	4b72      	ldr	r3, [pc, #456]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eb2:	f023 021f 	bic.w	r2, r3, #31
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	496e      	ldr	r1, [pc, #440]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00d      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	019a      	lsls	r2, r3, #6
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	061b      	lsls	r3, r3, #24
 8006edc:	431a      	orrs	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	071b      	lsls	r3, r3, #28
 8006ee4:	4964      	ldr	r1, [pc, #400]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006eec:	4b61      	ldr	r3, [pc, #388]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006eee:	2201      	movs	r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ef2:	f7fc fe21 	bl	8003b38 <HAL_GetTick>
 8006ef6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ef8:	e008      	b.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006efa:	f7fc fe1d 	bl	8003b38 <HAL_GetTick>
 8006efe:	4602      	mov	r2, r0
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d901      	bls.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e129      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f0c:	4b5a      	ldr	r3, [pc, #360]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0f0      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d105      	bne.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d079      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006f30:	4b52      	ldr	r3, [pc, #328]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f36:	f7fc fdff 	bl	8003b38 <HAL_GetTick>
 8006f3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006f3e:	f7fc fdfb 	bl	8003b38 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e107      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f50:	4b49      	ldr	r3, [pc, #292]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f5c:	d0ef      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0304 	and.w	r3, r3, #4
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d020      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f6a:	4b43      	ldr	r3, [pc, #268]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f70:	0f1b      	lsrs	r3, r3, #28
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	019a      	lsls	r2, r3, #6
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	061b      	lsls	r3, r3, #24
 8006f84:	431a      	orrs	r2, r3
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	071b      	lsls	r3, r3, #28
 8006f8a:	493b      	ldr	r1, [pc, #236]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f92:	4b39      	ldr	r3, [pc, #228]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	021b      	lsls	r3, r3, #8
 8006fa4:	4934      	ldr	r1, [pc, #208]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0308 	and.w	r3, r3, #8
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01e      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006fb8:	4b2f      	ldr	r3, [pc, #188]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbe:	0e1b      	lsrs	r3, r3, #24
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	019a      	lsls	r2, r3, #6
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	061b      	lsls	r3, r3, #24
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	071b      	lsls	r3, r3, #28
 8006fd8:	4927      	ldr	r1, [pc, #156]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006fe0:	4b25      	ldr	r3, [pc, #148]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fe6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	4922      	ldr	r1, [pc, #136]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ff6:	4b21      	ldr	r3, [pc, #132]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ffc:	f7fc fd9c 	bl	8003b38 <HAL_GetTick>
 8007000:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007002:	e008      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007004:	f7fc fd98 	bl	8003b38 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b02      	cmp	r3, #2
 8007010:	d901      	bls.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e0a4      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007016:	4b18      	ldr	r3, [pc, #96]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800701e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007022:	d1ef      	bne.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0320 	and.w	r3, r3, #32
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 808b 	beq.w	8007148 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007032:	2300      	movs	r3, #0
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	4b10      	ldr	r3, [pc, #64]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	4a0f      	ldr	r2, [pc, #60]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800703c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007040:	6413      	str	r3, [r2, #64]	; 0x40
 8007042:	4b0d      	ldr	r3, [pc, #52]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800704e:	4b0c      	ldr	r3, [pc, #48]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a0b      	ldr	r2, [pc, #44]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007058:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800705a:	f7fc fd6d 	bl	8003b38 <HAL_GetTick>
 800705e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007060:	e010      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007062:	f7fc fd69 	bl	8003b38 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	2b02      	cmp	r3, #2
 800706e:	d909      	bls.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e075      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007074:	42470068 	.word	0x42470068
 8007078:	40023800 	.word	0x40023800
 800707c:	42470070 	.word	0x42470070
 8007080:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007084:	4b38      	ldr	r3, [pc, #224]	; (8007168 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0e8      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007090:	4b36      	ldr	r3, [pc, #216]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007098:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d02f      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d028      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070ae:	4b2f      	ldr	r3, [pc, #188]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070b8:	4b2d      	ldr	r3, [pc, #180]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80070ba:	2201      	movs	r2, #1
 80070bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070be:	4b2c      	ldr	r3, [pc, #176]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80070c4:	4a29      	ldr	r2, [pc, #164]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80070ca:	4b28      	ldr	r3, [pc, #160]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d114      	bne.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80070d6:	f7fc fd2f 	bl	8003b38 <HAL_GetTick>
 80070da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070dc:	e00a      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070de:	f7fc fd2b 	bl	8003b38 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d901      	bls.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e035      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070f4:	4b1d      	ldr	r3, [pc, #116]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d0ee      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800710c:	d10d      	bne.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800710e:	4b17      	ldr	r3, [pc, #92]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800711e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007122:	4912      	ldr	r1, [pc, #72]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007124:	4313      	orrs	r3, r2
 8007126:	608b      	str	r3, [r1, #8]
 8007128:	e005      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800712a:	4b10      	ldr	r3, [pc, #64]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	4a0f      	ldr	r2, [pc, #60]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007130:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007134:	6093      	str	r3, [r2, #8]
 8007136:	4b0d      	ldr	r3, [pc, #52]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007138:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007142:	490a      	ldr	r1, [pc, #40]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007144:	4313      	orrs	r3, r2
 8007146:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0310 	and.w	r3, r3, #16
 8007150:	2b00      	cmp	r3, #0
 8007152:	d004      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800715a:	4b06      	ldr	r3, [pc, #24]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800715c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	40007000 	.word	0x40007000
 800716c:	40023800 	.word	0x40023800
 8007170:	42470e40 	.word	0x42470e40
 8007174:	424711e0 	.word	0x424711e0

08007178 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e025      	b.n	80071d8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d106      	bne.n	80071a6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f81d 	bl	80071e0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2202      	movs	r2, #2
 80071aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4619      	mov	r1, r3
 80071b8:	4610      	mov	r0, r2
 80071ba:	f001 f919 	bl	80083f0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	461a      	mov	r2, r3
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	f001 f96e 	bl	80084aa <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007206:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	2b02      	cmp	r3, #2
 800720c:	d101      	bne.n	8007212 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800720e:	2302      	movs	r3, #2
 8007210:	e021      	b.n	8007256 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d002      	beq.n	800721e <HAL_SDRAM_SendCommand+0x2a>
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	2b05      	cmp	r3, #5
 800721c:	d118      	bne.n	8007250 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2202      	movs	r2, #2
 8007222:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	4618      	mov	r0, r3
 8007230:	f001 f9a4 	bl	800857c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b02      	cmp	r3, #2
 800723a:	d104      	bne.n	8007246 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2205      	movs	r2, #5
 8007240:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007244:	e006      	b.n	8007254 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800724e:	e001      	b.n	8007254 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e000      	b.n	8007256 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d101      	bne.n	8007278 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007274:	2302      	movs	r3, #2
 8007276:	e016      	b.n	80072a6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b01      	cmp	r3, #1
 8007282:	d10f      	bne.n	80072a4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	4618      	mov	r0, r3
 8007294:	f001 f9af 	bl	80085f6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	e000      	b.n	80072a6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e07b      	b.n	80073b8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d108      	bne.n	80072da <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072d0:	d009      	beq.n	80072e6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	61da      	str	r2, [r3, #28]
 80072d8:	e005      	b.n	80072e6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d106      	bne.n	8007306 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f885 	bl	8007410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2202      	movs	r2, #2
 800730a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800731c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800732e:	431a      	orrs	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007338:	431a      	orrs	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	431a      	orrs	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007356:	431a      	orrs	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007360:	431a      	orrs	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736a:	ea42 0103 	orr.w	r1, r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	0c1b      	lsrs	r3, r3, #16
 8007384:	f003 0104 	and.w	r1, r3, #4
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	f003 0210 	and.w	r2, r3, #16
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69da      	ldr	r2, [r3, #28]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e01a      	b.n	8007408 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2202      	movs	r2, #2
 80073d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f81a 	bl	8007424 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	4613      	mov	r3, r2
 8007446:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_SPI_Transmit+0x22>
 8007456:	2302      	movs	r3, #2
 8007458:	e126      	b.n	80076a8 <HAL_SPI_Transmit+0x270>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007462:	f7fc fb69 	bl	8003b38 <HAL_GetTick>
 8007466:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007468:	88fb      	ldrh	r3, [r7, #6]
 800746a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	d002      	beq.n	800747e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007478:	2302      	movs	r3, #2
 800747a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800747c:	e10b      	b.n	8007696 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <HAL_SPI_Transmit+0x52>
 8007484:	88fb      	ldrh	r3, [r7, #6]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d102      	bne.n	8007490 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800748e:	e102      	b.n	8007696 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2203      	movs	r2, #3
 8007494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	88fa      	ldrh	r2, [r7, #6]
 80074a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	88fa      	ldrh	r2, [r7, #6]
 80074ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d6:	d10f      	bne.n	80074f8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007502:	2b40      	cmp	r3, #64	; 0x40
 8007504:	d007      	beq.n	8007516 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007514:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800751e:	d14b      	bne.n	80075b8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <HAL_SPI_Transmit+0xf6>
 8007528:	8afb      	ldrh	r3, [r7, #22]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d13e      	bne.n	80075ac <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	881a      	ldrh	r2, [r3, #0]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	1c9a      	adds	r2, r3, #2
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007548:	b29b      	uxth	r3, r3
 800754a:	3b01      	subs	r3, #1
 800754c:	b29a      	uxth	r2, r3
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007552:	e02b      	b.n	80075ac <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b02      	cmp	r3, #2
 8007560:	d112      	bne.n	8007588 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007566:	881a      	ldrh	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007572:	1c9a      	adds	r2, r3, #2
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	86da      	strh	r2, [r3, #54]	; 0x36
 8007586:	e011      	b.n	80075ac <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007588:	f7fc fad6 	bl	8003b38 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	429a      	cmp	r2, r3
 8007596:	d803      	bhi.n	80075a0 <HAL_SPI_Transmit+0x168>
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800759e:	d102      	bne.n	80075a6 <HAL_SPI_Transmit+0x16e>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d102      	bne.n	80075ac <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075aa:	e074      	b.n	8007696 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1ce      	bne.n	8007554 <HAL_SPI_Transmit+0x11c>
 80075b6:	e04c      	b.n	8007652 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <HAL_SPI_Transmit+0x18e>
 80075c0:	8afb      	ldrh	r3, [r7, #22]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d140      	bne.n	8007648 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	330c      	adds	r3, #12
 80075d0:	7812      	ldrb	r2, [r2, #0]
 80075d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075ec:	e02c      	b.n	8007648 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f003 0302 	and.w	r3, r3, #2
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d113      	bne.n	8007624 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	330c      	adds	r3, #12
 8007606:	7812      	ldrb	r2, [r2, #0]
 8007608:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	86da      	strh	r2, [r3, #54]	; 0x36
 8007622:	e011      	b.n	8007648 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007624:	f7fc fa88 	bl	8003b38 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	429a      	cmp	r2, r3
 8007632:	d803      	bhi.n	800763c <HAL_SPI_Transmit+0x204>
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763a:	d102      	bne.n	8007642 <HAL_SPI_Transmit+0x20a>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d102      	bne.n	8007648 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007646:	e026      	b.n	8007696 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1cd      	bne.n	80075ee <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f000 fbda 	bl	8007e10 <SPI_EndRxTxTransaction>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d002      	beq.n	8007668 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2220      	movs	r2, #32
 8007666:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10a      	bne.n	8007686 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007670:	2300      	movs	r3, #0
 8007672:	613b      	str	r3, [r7, #16]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	613b      	str	r3, [r7, #16]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	613b      	str	r3, [r7, #16]
 8007684:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	77fb      	strb	r3, [r7, #31]
 8007692:	e000      	b.n	8007696 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007694:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3720      	adds	r7, #32
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b088      	sub	sp, #32
 80076b4:	af02      	add	r7, sp, #8
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	603b      	str	r3, [r7, #0]
 80076bc:	4613      	mov	r3, r2
 80076be:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076cc:	d112      	bne.n	80076f4 <HAL_SPI_Receive+0x44>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10e      	bne.n	80076f4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2204      	movs	r2, #4
 80076da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80076de:	88fa      	ldrh	r2, [r7, #6]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	4613      	mov	r3, r2
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	68b9      	ldr	r1, [r7, #8]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 f8f1 	bl	80078d2 <HAL_SPI_TransmitReceive>
 80076f0:	4603      	mov	r3, r0
 80076f2:	e0ea      	b.n	80078ca <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d101      	bne.n	8007702 <HAL_SPI_Receive+0x52>
 80076fe:	2302      	movs	r3, #2
 8007700:	e0e3      	b.n	80078ca <HAL_SPI_Receive+0x21a>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800770a:	f7fc fa15 	bl	8003b38 <HAL_GetTick>
 800770e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b01      	cmp	r3, #1
 800771a:	d002      	beq.n	8007722 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800771c:	2302      	movs	r3, #2
 800771e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007720:	e0ca      	b.n	80078b8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <HAL_SPI_Receive+0x7e>
 8007728:	88fb      	ldrh	r3, [r7, #6]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d102      	bne.n	8007734 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007732:	e0c1      	b.n	80078b8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2204      	movs	r2, #4
 8007738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	88fa      	ldrh	r2, [r7, #6]
 800774c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	88fa      	ldrh	r2, [r7, #6]
 8007752:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2200      	movs	r2, #0
 800776a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800777a:	d10f      	bne.n	800779c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800778a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800779a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a6:	2b40      	cmp	r3, #64	; 0x40
 80077a8:	d007      	beq.n	80077ba <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d162      	bne.n	8007888 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80077c2:	e02e      	b.n	8007822 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d115      	bne.n	80077fe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f103 020c 	add.w	r2, r3, #12
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	7812      	ldrb	r2, [r2, #0]
 80077e0:	b2d2      	uxtb	r2, r2
 80077e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077fc:	e011      	b.n	8007822 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077fe:	f7fc f99b 	bl	8003b38 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	429a      	cmp	r2, r3
 800780c:	d803      	bhi.n	8007816 <HAL_SPI_Receive+0x166>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007814:	d102      	bne.n	800781c <HAL_SPI_Receive+0x16c>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007820:	e04a      	b.n	80078b8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007826:	b29b      	uxth	r3, r3
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1cb      	bne.n	80077c4 <HAL_SPI_Receive+0x114>
 800782c:	e031      	b.n	8007892 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b01      	cmp	r3, #1
 800783a:	d113      	bne.n	8007864 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68da      	ldr	r2, [r3, #12]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	b292      	uxth	r2, r2
 8007848:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	1c9a      	adds	r2, r3, #2
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007858:	b29b      	uxth	r3, r3
 800785a:	3b01      	subs	r3, #1
 800785c:	b29a      	uxth	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007862:	e011      	b.n	8007888 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007864:	f7fc f968 	bl	8003b38 <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d803      	bhi.n	800787c <HAL_SPI_Receive+0x1cc>
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	d102      	bne.n	8007882 <HAL_SPI_Receive+0x1d2>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d102      	bne.n	8007888 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007886:	e017      	b.n	80078b8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800788c:	b29b      	uxth	r3, r3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1cd      	bne.n	800782e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fa54 	bl	8007d44 <SPI_EndRxTransaction>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2220      	movs	r2, #32
 80078a6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	75fb      	strb	r3, [r7, #23]
 80078b4:	e000      	b.n	80078b8 <HAL_SPI_Receive+0x208>
  }

error :
 80078b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b08c      	sub	sp, #48	; 0x30
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	607a      	str	r2, [r7, #4]
 80078de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078e0:	2301      	movs	r3, #1
 80078e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_SPI_TransmitReceive+0x26>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e18a      	b.n	8007c0e <HAL_SPI_TransmitReceive+0x33c>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007900:	f7fc f91a 	bl	8003b38 <HAL_GetTick>
 8007904:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800790c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007916:	887b      	ldrh	r3, [r7, #2]
 8007918:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800791a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800791e:	2b01      	cmp	r3, #1
 8007920:	d00f      	beq.n	8007942 <HAL_SPI_TransmitReceive+0x70>
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007928:	d107      	bne.n	800793a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d103      	bne.n	800793a <HAL_SPI_TransmitReceive+0x68>
 8007932:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007936:	2b04      	cmp	r3, #4
 8007938:	d003      	beq.n	8007942 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800793a:	2302      	movs	r3, #2
 800793c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007940:	e15b      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <HAL_SPI_TransmitReceive+0x82>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <HAL_SPI_TransmitReceive+0x82>
 800794e:	887b      	ldrh	r3, [r7, #2]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d103      	bne.n	800795c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800795a:	e14e      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b04      	cmp	r3, #4
 8007966:	d003      	beq.n	8007970 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2205      	movs	r2, #5
 800796c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	887a      	ldrh	r2, [r7, #2]
 8007980:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	887a      	ldrh	r2, [r7, #2]
 8007986:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	887a      	ldrh	r2, [r7, #2]
 8007992:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	887a      	ldrh	r2, [r7, #2]
 8007998:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b40      	cmp	r3, #64	; 0x40
 80079b2:	d007      	beq.n	80079c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079cc:	d178      	bne.n	8007ac0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <HAL_SPI_TransmitReceive+0x10a>
 80079d6:	8b7b      	ldrh	r3, [r7, #26]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d166      	bne.n	8007aaa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e0:	881a      	ldrh	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ec:	1c9a      	adds	r2, r3, #2
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	3b01      	subs	r3, #1
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a00:	e053      	b.n	8007aaa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f003 0302 	and.w	r3, r3, #2
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d11b      	bne.n	8007a48 <HAL_SPI_TransmitReceive+0x176>
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d016      	beq.n	8007a48 <HAL_SPI_TransmitReceive+0x176>
 8007a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d113      	bne.n	8007a48 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a24:	881a      	ldrh	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a30:	1c9a      	adds	r2, r3, #2
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d119      	bne.n	8007a8a <HAL_SPI_TransmitReceive+0x1b8>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d014      	beq.n	8007a8a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6a:	b292      	uxth	r2, r2
 8007a6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	1c9a      	adds	r2, r3, #2
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a86:	2301      	movs	r3, #1
 8007a88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a8a:	f7fc f855 	bl	8003b38 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d807      	bhi.n	8007aaa <HAL_SPI_TransmitReceive+0x1d8>
 8007a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa0:	d003      	beq.n	8007aaa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007aa8:	e0a7      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1a6      	bne.n	8007a02 <HAL_SPI_TransmitReceive+0x130>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1a1      	bne.n	8007a02 <HAL_SPI_TransmitReceive+0x130>
 8007abe:	e07c      	b.n	8007bba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <HAL_SPI_TransmitReceive+0x1fc>
 8007ac8:	8b7b      	ldrh	r3, [r7, #26]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d16b      	bne.n	8007ba6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	330c      	adds	r3, #12
 8007ad8:	7812      	ldrb	r2, [r2, #0]
 8007ada:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae0:	1c5a      	adds	r2, r3, #1
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007af4:	e057      	b.n	8007ba6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d11c      	bne.n	8007b3e <HAL_SPI_TransmitReceive+0x26c>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d017      	beq.n	8007b3e <HAL_SPI_TransmitReceive+0x26c>
 8007b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d114      	bne.n	8007b3e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	330c      	adds	r3, #12
 8007b1e:	7812      	ldrb	r2, [r2, #0]
 8007b20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d119      	bne.n	8007b80 <HAL_SPI_TransmitReceive+0x2ae>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d014      	beq.n	8007b80 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	b2d2      	uxtb	r2, r2
 8007b62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b68:	1c5a      	adds	r2, r3, #1
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b80:	f7fb ffda 	bl	8003b38 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d803      	bhi.n	8007b98 <HAL_SPI_TransmitReceive+0x2c6>
 8007b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b96:	d102      	bne.n	8007b9e <HAL_SPI_TransmitReceive+0x2cc>
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d103      	bne.n	8007ba6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ba4:	e029      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1a2      	bne.n	8007af6 <HAL_SPI_TransmitReceive+0x224>
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d19d      	bne.n	8007af6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 f926 	bl	8007e10 <SPI_EndRxTxTransaction>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d006      	beq.n	8007bd8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007bd6:	e010      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d10b      	bne.n	8007bf8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007be0:	2300      	movs	r3, #0
 8007be2:	617b      	str	r3, [r7, #20]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	e000      	b.n	8007bfa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007bf8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3730      	adds	r7, #48	; 0x30
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c24:	b2db      	uxtb	r3, r3
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
	...

08007c34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	4613      	mov	r3, r2
 8007c42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c44:	f7fb ff78 	bl	8003b38 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	1a9b      	subs	r3, r3, r2
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	4413      	add	r3, r2
 8007c52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c54:	f7fb ff70 	bl	8003b38 <HAL_GetTick>
 8007c58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c5a:	4b39      	ldr	r3, [pc, #228]	; (8007d40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	015b      	lsls	r3, r3, #5
 8007c60:	0d1b      	lsrs	r3, r3, #20
 8007c62:	69fa      	ldr	r2, [r7, #28]
 8007c64:	fb02 f303 	mul.w	r3, r2, r3
 8007c68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c6a:	e054      	b.n	8007d16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c72:	d050      	beq.n	8007d16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c74:	f7fb ff60 	bl	8003b38 <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d902      	bls.n	8007c8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d13d      	bne.n	8007d06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ca2:	d111      	bne.n	8007cc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cac:	d004      	beq.n	8007cb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb6:	d107      	bne.n	8007cc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd0:	d10f      	bne.n	8007cf2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e017      	b.n	8007d36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	bf0c      	ite	eq
 8007d26:	2301      	moveq	r3, #1
 8007d28:	2300      	movne	r3, #0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d19b      	bne.n	8007c6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3720      	adds	r7, #32
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000000 	.word	0x20000000

08007d44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af02      	add	r7, sp, #8
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d58:	d111      	bne.n	8007d7e <SPI_EndRxTransaction+0x3a>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d62:	d004      	beq.n	8007d6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d6c:	d107      	bne.n	8007d7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d86:	d12a      	bne.n	8007dde <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d90:	d012      	beq.n	8007db8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2180      	movs	r1, #128	; 0x80
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7ff ff49 	bl	8007c34 <SPI_WaitFlagStateUntilTimeout>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d02d      	beq.n	8007e04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dac:	f043 0220 	orr.w	r2, r3, #32
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e026      	b.n	8007e06 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f7ff ff36 	bl	8007c34 <SPI_WaitFlagStateUntilTimeout>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d01a      	beq.n	8007e04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dd2:	f043 0220 	orr.w	r2, r3, #32
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	e013      	b.n	8007e06 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2200      	movs	r2, #0
 8007de6:	2101      	movs	r1, #1
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f7ff ff23 	bl	8007c34 <SPI_WaitFlagStateUntilTimeout>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d007      	beq.n	8007e04 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df8:	f043 0220 	orr.w	r2, r3, #32
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e000      	b.n	8007e06 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
	...

08007e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b088      	sub	sp, #32
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e1c:	4b1b      	ldr	r3, [pc, #108]	; (8007e8c <SPI_EndRxTxTransaction+0x7c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a1b      	ldr	r2, [pc, #108]	; (8007e90 <SPI_EndRxTxTransaction+0x80>)
 8007e22:	fba2 2303 	umull	r2, r3, r2, r3
 8007e26:	0d5b      	lsrs	r3, r3, #21
 8007e28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e2c:	fb02 f303 	mul.w	r3, r2, r3
 8007e30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e3a:	d112      	bne.n	8007e62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2200      	movs	r2, #0
 8007e44:	2180      	movs	r1, #128	; 0x80
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f7ff fef4 	bl	8007c34 <SPI_WaitFlagStateUntilTimeout>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d016      	beq.n	8007e80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e56:	f043 0220 	orr.w	r2, r3, #32
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e00f      	b.n	8007e82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00a      	beq.n	8007e7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e78:	2b80      	cmp	r3, #128	; 0x80
 8007e7a:	d0f2      	beq.n	8007e62 <SPI_EndRxTxTransaction+0x52>
 8007e7c:	e000      	b.n	8007e80 <SPI_EndRxTxTransaction+0x70>
        break;
 8007e7e:	bf00      	nop
  }

  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000000 	.word	0x20000000
 8007e90:	165e9f81 	.word	0x165e9f81

08007e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e041      	b.n	8007f2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d106      	bne.n	8007ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f839 	bl	8007f32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	3304      	adds	r3, #4
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	f000 f9d8 	bl	8008288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3708      	adds	r7, #8
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
	...

08007f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d001      	beq.n	8007f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e04e      	b.n	8007ffe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f042 0201 	orr.w	r2, r2, #1
 8007f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a23      	ldr	r2, [pc, #140]	; (800800c <HAL_TIM_Base_Start_IT+0xc4>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d022      	beq.n	8007fc8 <HAL_TIM_Base_Start_IT+0x80>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8a:	d01d      	beq.n	8007fc8 <HAL_TIM_Base_Start_IT+0x80>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a1f      	ldr	r2, [pc, #124]	; (8008010 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d018      	beq.n	8007fc8 <HAL_TIM_Base_Start_IT+0x80>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a1e      	ldr	r2, [pc, #120]	; (8008014 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d013      	beq.n	8007fc8 <HAL_TIM_Base_Start_IT+0x80>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a1c      	ldr	r2, [pc, #112]	; (8008018 <HAL_TIM_Base_Start_IT+0xd0>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00e      	beq.n	8007fc8 <HAL_TIM_Base_Start_IT+0x80>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a1b      	ldr	r2, [pc, #108]	; (800801c <HAL_TIM_Base_Start_IT+0xd4>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d009      	beq.n	8007fc8 <HAL_TIM_Base_Start_IT+0x80>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a19      	ldr	r2, [pc, #100]	; (8008020 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d004      	beq.n	8007fc8 <HAL_TIM_Base_Start_IT+0x80>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a18      	ldr	r2, [pc, #96]	; (8008024 <HAL_TIM_Base_Start_IT+0xdc>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d111      	bne.n	8007fec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f003 0307 	and.w	r3, r3, #7
 8007fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b06      	cmp	r3, #6
 8007fd8:	d010      	beq.n	8007ffc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f042 0201 	orr.w	r2, r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fea:	e007      	b.n	8007ffc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0201 	orr.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3714      	adds	r7, #20
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	40010000 	.word	0x40010000
 8008010:	40000400 	.word	0x40000400
 8008014:	40000800 	.word	0x40000800
 8008018:	40000c00 	.word	0x40000c00
 800801c:	40010400 	.word	0x40010400
 8008020:	40014000 	.word	0x40014000
 8008024:	40001800 	.word	0x40001800

08008028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b02      	cmp	r3, #2
 800803c:	d122      	bne.n	8008084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b02      	cmp	r3, #2
 800804a:	d11b      	bne.n	8008084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f06f 0202 	mvn.w	r2, #2
 8008054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2201      	movs	r2, #1
 800805a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	f003 0303 	and.w	r3, r3, #3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f8ee 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8008070:	e005      	b.n	800807e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f8e0 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f8f1 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0304 	and.w	r3, r3, #4
 800808e:	2b04      	cmp	r3, #4
 8008090:	d122      	bne.n	80080d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0304 	and.w	r3, r3, #4
 800809c:	2b04      	cmp	r3, #4
 800809e:	d11b      	bne.n	80080d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f06f 0204 	mvn.w	r2, #4
 80080a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2202      	movs	r2, #2
 80080ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f8c4 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 80080c4:	e005      	b.n	80080d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f8b6 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f8c7 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f003 0308 	and.w	r3, r3, #8
 80080e2:	2b08      	cmp	r3, #8
 80080e4:	d122      	bne.n	800812c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f003 0308 	and.w	r3, r3, #8
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d11b      	bne.n	800812c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f06f 0208 	mvn.w	r2, #8
 80080fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2204      	movs	r2, #4
 8008102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f89a 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 8008118:	e005      	b.n	8008126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f88c 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f89d 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f003 0310 	and.w	r3, r3, #16
 8008136:	2b10      	cmp	r3, #16
 8008138:	d122      	bne.n	8008180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f003 0310 	and.w	r3, r3, #16
 8008144:	2b10      	cmp	r3, #16
 8008146:	d11b      	bne.n	8008180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f06f 0210 	mvn.w	r2, #16
 8008150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2208      	movs	r2, #8
 8008156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008162:	2b00      	cmp	r3, #0
 8008164:	d003      	beq.n	800816e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f870 	bl	800824c <HAL_TIM_IC_CaptureCallback>
 800816c:	e005      	b.n	800817a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f862 	bl	8008238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f873 	bl	8008260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	2b01      	cmp	r3, #1
 800818c:	d10e      	bne.n	80081ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b01      	cmp	r3, #1
 800819a:	d107      	bne.n	80081ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0201 	mvn.w	r2, #1
 80081a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7f9 fbd8 	bl	800195c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b6:	2b80      	cmp	r3, #128	; 0x80
 80081b8:	d10e      	bne.n	80081d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c4:	2b80      	cmp	r3, #128	; 0x80
 80081c6:	d107      	bne.n	80081d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f902 	bl	80083dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e2:	2b40      	cmp	r3, #64	; 0x40
 80081e4:	d10e      	bne.n	8008204 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f0:	2b40      	cmp	r3, #64	; 0x40
 80081f2:	d107      	bne.n	8008204 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f838 	bl	8008274 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f003 0320 	and.w	r3, r3, #32
 800820e:	2b20      	cmp	r3, #32
 8008210:	d10e      	bne.n	8008230 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b20      	cmp	r3, #32
 800821e:	d107      	bne.n	8008230 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f06f 0220 	mvn.w	r2, #32
 8008228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f8cc 	bl	80083c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a40      	ldr	r2, [pc, #256]	; (800839c <TIM_Base_SetConfig+0x114>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d013      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a6:	d00f      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a3d      	ldr	r2, [pc, #244]	; (80083a0 <TIM_Base_SetConfig+0x118>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d00b      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a3c      	ldr	r2, [pc, #240]	; (80083a4 <TIM_Base_SetConfig+0x11c>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d007      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a3b      	ldr	r2, [pc, #236]	; (80083a8 <TIM_Base_SetConfig+0x120>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d003      	beq.n	80082c8 <TIM_Base_SetConfig+0x40>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a3a      	ldr	r2, [pc, #232]	; (80083ac <TIM_Base_SetConfig+0x124>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d108      	bne.n	80082da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a2f      	ldr	r2, [pc, #188]	; (800839c <TIM_Base_SetConfig+0x114>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d02b      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e8:	d027      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a2c      	ldr	r2, [pc, #176]	; (80083a0 <TIM_Base_SetConfig+0x118>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d023      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a2b      	ldr	r2, [pc, #172]	; (80083a4 <TIM_Base_SetConfig+0x11c>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d01f      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a2a      	ldr	r2, [pc, #168]	; (80083a8 <TIM_Base_SetConfig+0x120>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d01b      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a29      	ldr	r2, [pc, #164]	; (80083ac <TIM_Base_SetConfig+0x124>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d017      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a28      	ldr	r2, [pc, #160]	; (80083b0 <TIM_Base_SetConfig+0x128>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d013      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a27      	ldr	r2, [pc, #156]	; (80083b4 <TIM_Base_SetConfig+0x12c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d00f      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a26      	ldr	r2, [pc, #152]	; (80083b8 <TIM_Base_SetConfig+0x130>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d00b      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a25      	ldr	r2, [pc, #148]	; (80083bc <TIM_Base_SetConfig+0x134>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d007      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a24      	ldr	r2, [pc, #144]	; (80083c0 <TIM_Base_SetConfig+0x138>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d003      	beq.n	800833a <TIM_Base_SetConfig+0xb2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a23      	ldr	r2, [pc, #140]	; (80083c4 <TIM_Base_SetConfig+0x13c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d108      	bne.n	800834c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	4313      	orrs	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a0a      	ldr	r2, [pc, #40]	; (800839c <TIM_Base_SetConfig+0x114>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d003      	beq.n	8008380 <TIM_Base_SetConfig+0xf8>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a0c      	ldr	r2, [pc, #48]	; (80083ac <TIM_Base_SetConfig+0x124>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d103      	bne.n	8008388 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	615a      	str	r2, [r3, #20]
}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	40010000 	.word	0x40010000
 80083a0:	40000400 	.word	0x40000400
 80083a4:	40000800 	.word	0x40000800
 80083a8:	40000c00 	.word	0x40000c00
 80083ac:	40010400 	.word	0x40010400
 80083b0:	40014000 	.word	0x40014000
 80083b4:	40014400 	.word	0x40014400
 80083b8:	40014800 	.word	0x40014800
 80083bc:	40001800 	.word	0x40001800
 80083c0:	40001c00 	.word	0x40001c00
 80083c4:	40002000 	.word	0x40002000

080083c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083d0:	bf00      	nop
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d123      	bne.n	800844a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800840a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	6851      	ldr	r1, [r2, #4]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	6892      	ldr	r2, [r2, #8]
 8008416:	4311      	orrs	r1, r2
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	68d2      	ldr	r2, [r2, #12]
 800841c:	4311      	orrs	r1, r2
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	6912      	ldr	r2, [r2, #16]
 8008422:	4311      	orrs	r1, r2
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	6952      	ldr	r2, [r2, #20]
 8008428:	4311      	orrs	r1, r2
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	6992      	ldr	r2, [r2, #24]
 800842e:	4311      	orrs	r1, r2
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	69d2      	ldr	r2, [r2, #28]
 8008434:	4311      	orrs	r1, r2
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	6a12      	ldr	r2, [r2, #32]
 800843a:	4311      	orrs	r1, r2
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008440:	430a      	orrs	r2, r1
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	601a      	str	r2, [r3, #0]
 8008448:	e028      	b.n	800849c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	69d9      	ldr	r1, [r3, #28]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	4319      	orrs	r1, r3
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	430b      	orrs	r3, r1
 8008462:	431a      	orrs	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008470:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	6851      	ldr	r1, [r2, #4]
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	6892      	ldr	r2, [r2, #8]
 800847c:	4311      	orrs	r1, r2
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	68d2      	ldr	r2, [r2, #12]
 8008482:	4311      	orrs	r1, r2
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	6912      	ldr	r2, [r2, #16]
 8008488:	4311      	orrs	r1, r2
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	6952      	ldr	r2, [r2, #20]
 800848e:	4311      	orrs	r1, r2
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	6992      	ldr	r2, [r2, #24]
 8008494:	430a      	orrs	r2, r1
 8008496:	431a      	orrs	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b085      	sub	sp, #20
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d128      	bne.n	800850e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	1e59      	subs	r1, r3, #1
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	4319      	orrs	r1, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	3b01      	subs	r3, #1
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	4319      	orrs	r1, r3
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	031b      	lsls	r3, r3, #12
 80084e6:	4319      	orrs	r1, r3
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	041b      	lsls	r3, r3, #16
 80084f0:	4319      	orrs	r1, r3
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	051b      	lsls	r3, r3, #20
 80084fa:	4319      	orrs	r1, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	3b01      	subs	r3, #1
 8008502:	061b      	lsls	r3, r3, #24
 8008504:	430b      	orrs	r3, r1
 8008506:	431a      	orrs	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	609a      	str	r2, [r3, #8]
 800850c:	e02f      	b.n	800856e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008516:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	68d2      	ldr	r2, [r2, #12]
 800851e:	3a01      	subs	r2, #1
 8008520:	0311      	lsls	r1, r2, #12
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	6952      	ldr	r2, [r2, #20]
 8008526:	3a01      	subs	r2, #1
 8008528:	0512      	lsls	r2, r2, #20
 800852a:	430a      	orrs	r2, r1
 800852c:	431a      	orrs	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	1e59      	subs	r1, r3, #1
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	3b01      	subs	r3, #1
 8008546:	011b      	lsls	r3, r3, #4
 8008548:	4319      	orrs	r1, r3
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	3b01      	subs	r3, #1
 8008550:	021b      	lsls	r3, r3, #8
 8008552:	4319      	orrs	r1, r3
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	3b01      	subs	r3, #1
 800855a:	041b      	lsls	r3, r3, #16
 800855c:	4319      	orrs	r1, r3
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	3b01      	subs	r3, #1
 8008564:	061b      	lsls	r3, r3, #24
 8008566:	430b      	orrs	r3, r1
 8008568:	431a      	orrs	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	0d9b      	lsrs	r3, r3, #22
 8008592:	059b      	lsls	r3, r3, #22
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	6811      	ldr	r1, [r2, #0]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	6852      	ldr	r2, [r2, #4]
 800859c:	4311      	orrs	r1, r2
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	6892      	ldr	r2, [r2, #8]
 80085a2:	3a01      	subs	r2, #1
 80085a4:	0152      	lsls	r2, r2, #5
 80085a6:	4311      	orrs	r1, r2
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	68d2      	ldr	r2, [r2, #12]
 80085ac:	0252      	lsls	r2, r2, #9
 80085ae:	430a      	orrs	r2, r1
 80085b0:	431a      	orrs	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80085b6:	f7fb fabf 	bl	8003b38 <HAL_GetTick>
 80085ba:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80085bc:	e010      	b.n	80085e0 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c4:	d00c      	beq.n	80085e0 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d007      	beq.n	80085dc <FMC_SDRAM_SendCommand+0x60>
 80085cc:	f7fb fab4 	bl	8003b38 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d201      	bcs.n	80085e0 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e006      	b.n	80085ee <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	f003 0320 	and.w	r3, r3, #32
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	d0e8      	beq.n	80085be <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3718      	adds	r7, #24
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80085f6:	b480      	push	{r7}
 80085f8:	b083      	sub	sp, #12
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
 80085fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008608:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800860c:	683a      	ldr	r2, [r7, #0]
 800860e:	0052      	lsls	r2, r2, #1
 8008610:	431a      	orrs	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008624:	b084      	sub	sp, #16
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
 800862e:	f107 001c 	add.w	r0, r7, #28
 8008632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	2b01      	cmp	r3, #1
 800863a:	d122      	bne.n	8008682 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008666:	2b01      	cmp	r3, #1
 8008668:	d105      	bne.n	8008676 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f001 fbee 	bl	8009e58 <USB_CoreReset>
 800867c:	4603      	mov	r3, r0
 800867e:	73fb      	strb	r3, [r7, #15]
 8008680:	e01a      	b.n	80086b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f001 fbe2 	bl	8009e58 <USB_CoreReset>
 8008694:	4603      	mov	r3, r0
 8008696:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	d106      	bne.n	80086ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	639a      	str	r2, [r3, #56]	; 0x38
 80086aa:	e005      	b.n	80086b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80086b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d10b      	bne.n	80086d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f043 0206 	orr.w	r2, r3, #6
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f043 0220 	orr.w	r2, r3, #32
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086e2:	b004      	add	sp, #16
 80086e4:	4770      	bx	lr
	...

080086e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	4613      	mov	r3, r2
 80086f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80086f6:	79fb      	ldrb	r3, [r7, #7]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d165      	bne.n	80087c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4a41      	ldr	r2, [pc, #260]	; (8008804 <USB_SetTurnaroundTime+0x11c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d906      	bls.n	8008712 <USB_SetTurnaroundTime+0x2a>
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	4a40      	ldr	r2, [pc, #256]	; (8008808 <USB_SetTurnaroundTime+0x120>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d202      	bcs.n	8008712 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800870c:	230f      	movs	r3, #15
 800870e:	617b      	str	r3, [r7, #20]
 8008710:	e062      	b.n	80087d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	4a3c      	ldr	r2, [pc, #240]	; (8008808 <USB_SetTurnaroundTime+0x120>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d306      	bcc.n	8008728 <USB_SetTurnaroundTime+0x40>
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	4a3b      	ldr	r2, [pc, #236]	; (800880c <USB_SetTurnaroundTime+0x124>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d202      	bcs.n	8008728 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008722:	230e      	movs	r3, #14
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	e057      	b.n	80087d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	4a38      	ldr	r2, [pc, #224]	; (800880c <USB_SetTurnaroundTime+0x124>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d306      	bcc.n	800873e <USB_SetTurnaroundTime+0x56>
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	4a37      	ldr	r2, [pc, #220]	; (8008810 <USB_SetTurnaroundTime+0x128>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d202      	bcs.n	800873e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008738:	230d      	movs	r3, #13
 800873a:	617b      	str	r3, [r7, #20]
 800873c:	e04c      	b.n	80087d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	4a33      	ldr	r2, [pc, #204]	; (8008810 <USB_SetTurnaroundTime+0x128>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d306      	bcc.n	8008754 <USB_SetTurnaroundTime+0x6c>
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4a32      	ldr	r2, [pc, #200]	; (8008814 <USB_SetTurnaroundTime+0x12c>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d802      	bhi.n	8008754 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800874e:	230c      	movs	r3, #12
 8008750:	617b      	str	r3, [r7, #20]
 8008752:	e041      	b.n	80087d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	4a2f      	ldr	r2, [pc, #188]	; (8008814 <USB_SetTurnaroundTime+0x12c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d906      	bls.n	800876a <USB_SetTurnaroundTime+0x82>
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	4a2e      	ldr	r2, [pc, #184]	; (8008818 <USB_SetTurnaroundTime+0x130>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d802      	bhi.n	800876a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008764:	230b      	movs	r3, #11
 8008766:	617b      	str	r3, [r7, #20]
 8008768:	e036      	b.n	80087d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	4a2a      	ldr	r2, [pc, #168]	; (8008818 <USB_SetTurnaroundTime+0x130>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d906      	bls.n	8008780 <USB_SetTurnaroundTime+0x98>
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	4a29      	ldr	r2, [pc, #164]	; (800881c <USB_SetTurnaroundTime+0x134>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d802      	bhi.n	8008780 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800877a:	230a      	movs	r3, #10
 800877c:	617b      	str	r3, [r7, #20]
 800877e:	e02b      	b.n	80087d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	4a26      	ldr	r2, [pc, #152]	; (800881c <USB_SetTurnaroundTime+0x134>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d906      	bls.n	8008796 <USB_SetTurnaroundTime+0xae>
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4a25      	ldr	r2, [pc, #148]	; (8008820 <USB_SetTurnaroundTime+0x138>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d202      	bcs.n	8008796 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008790:	2309      	movs	r3, #9
 8008792:	617b      	str	r3, [r7, #20]
 8008794:	e020      	b.n	80087d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	4a21      	ldr	r2, [pc, #132]	; (8008820 <USB_SetTurnaroundTime+0x138>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d306      	bcc.n	80087ac <USB_SetTurnaroundTime+0xc4>
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4a20      	ldr	r2, [pc, #128]	; (8008824 <USB_SetTurnaroundTime+0x13c>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d802      	bhi.n	80087ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80087a6:	2308      	movs	r3, #8
 80087a8:	617b      	str	r3, [r7, #20]
 80087aa:	e015      	b.n	80087d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	4a1d      	ldr	r2, [pc, #116]	; (8008824 <USB_SetTurnaroundTime+0x13c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d906      	bls.n	80087c2 <USB_SetTurnaroundTime+0xda>
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	4a1c      	ldr	r2, [pc, #112]	; (8008828 <USB_SetTurnaroundTime+0x140>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d202      	bcs.n	80087c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80087bc:	2307      	movs	r3, #7
 80087be:	617b      	str	r3, [r7, #20]
 80087c0:	e00a      	b.n	80087d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80087c2:	2306      	movs	r3, #6
 80087c4:	617b      	str	r3, [r7, #20]
 80087c6:	e007      	b.n	80087d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d102      	bne.n	80087d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80087ce:	2309      	movs	r3, #9
 80087d0:	617b      	str	r3, [r7, #20]
 80087d2:	e001      	b.n	80087d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80087d4:	2309      	movs	r3, #9
 80087d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	68da      	ldr	r2, [r3, #12]
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	029b      	lsls	r3, r3, #10
 80087ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80087f0:	431a      	orrs	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	371c      	adds	r7, #28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	00d8acbf 	.word	0x00d8acbf
 8008808:	00e4e1c0 	.word	0x00e4e1c0
 800880c:	00f42400 	.word	0x00f42400
 8008810:	01067380 	.word	0x01067380
 8008814:	011a499f 	.word	0x011a499f
 8008818:	01312cff 	.word	0x01312cff
 800881c:	014ca43f 	.word	0x014ca43f
 8008820:	016e3600 	.word	0x016e3600
 8008824:	01a6ab1f 	.word	0x01a6ab1f
 8008828:	01e84800 	.word	0x01e84800

0800882c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f043 0201 	orr.w	r2, r3, #1
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f023 0201 	bic.w	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800888c:	78fb      	ldrb	r3, [r7, #3]
 800888e:	2b01      	cmp	r3, #1
 8008890:	d115      	bne.n	80088be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800889e:	2001      	movs	r0, #1
 80088a0:	f7fb f956 	bl	8003b50 <HAL_Delay>
      ms++;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3301      	adds	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f001 fa45 	bl	8009d3a <USB_GetMode>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d01e      	beq.n	80088f4 <USB_SetCurrentMode+0x84>
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2b31      	cmp	r3, #49	; 0x31
 80088ba:	d9f0      	bls.n	800889e <USB_SetCurrentMode+0x2e>
 80088bc:	e01a      	b.n	80088f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80088be:	78fb      	ldrb	r3, [r7, #3]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d115      	bne.n	80088f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088d0:	2001      	movs	r0, #1
 80088d2:	f7fb f93d 	bl	8003b50 <HAL_Delay>
      ms++;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3301      	adds	r3, #1
 80088da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f001 fa2c 	bl	8009d3a <USB_GetMode>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <USB_SetCurrentMode+0x84>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2b31      	cmp	r3, #49	; 0x31
 80088ec:	d9f0      	bls.n	80088d0 <USB_SetCurrentMode+0x60>
 80088ee:	e001      	b.n	80088f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e005      	b.n	8008900 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b32      	cmp	r3, #50	; 0x32
 80088f8:	d101      	bne.n	80088fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e000      	b.n	8008900 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008908:	b084      	sub	sp, #16
 800890a:	b580      	push	{r7, lr}
 800890c:	b086      	sub	sp, #24
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
 8008926:	e009      	b.n	800893c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	3340      	adds	r3, #64	; 0x40
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	4413      	add	r3, r2
 8008932:	2200      	movs	r2, #0
 8008934:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	3301      	adds	r3, #1
 800893a:	613b      	str	r3, [r7, #16]
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	2b0e      	cmp	r3, #14
 8008940:	d9f2      	bls.n	8008928 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008944:	2b00      	cmp	r3, #0
 8008946:	d11c      	bne.n	8008982 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008956:	f043 0302 	orr.w	r3, r3, #2
 800895a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008960:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008978:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	639a      	str	r2, [r3, #56]	; 0x38
 8008980:	e00b      	b.n	800899a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008986:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008992:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089a0:	461a      	mov	r2, r3
 80089a2:	2300      	movs	r3, #0
 80089a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ac:	4619      	mov	r1, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b4:	461a      	mov	r2, r3
 80089b6:	680b      	ldr	r3, [r1, #0]
 80089b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d10c      	bne.n	80089da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80089c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d104      	bne.n	80089d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80089c6:	2100      	movs	r1, #0
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f965 	bl	8008c98 <USB_SetDevSpeed>
 80089ce:	e008      	b.n	80089e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80089d0:	2101      	movs	r1, #1
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f960 	bl	8008c98 <USB_SetDevSpeed>
 80089d8:	e003      	b.n	80089e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80089da:	2103      	movs	r1, #3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f95b 	bl	8008c98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089e2:	2110      	movs	r1, #16
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f8f3 	bl	8008bd0 <USB_FlushTxFifo>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d001      	beq.n	80089f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f91f 	bl	8008c38 <USB_FlushRxFifo>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a16:	461a      	mov	r2, r3
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a22:	461a      	mov	r2, r3
 8008a24:	2300      	movs	r3, #0
 8008a26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a28:	2300      	movs	r3, #0
 8008a2a:	613b      	str	r3, [r7, #16]
 8008a2c:	e043      	b.n	8008ab6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a44:	d118      	bne.n	8008a78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10a      	bne.n	8008a62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a5e:	6013      	str	r3, [r2, #0]
 8008a60:	e013      	b.n	8008a8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	e008      	b.n	8008a8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a84:	461a      	mov	r2, r3
 8008a86:	2300      	movs	r3, #0
 8008a88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a96:	461a      	mov	r2, r3
 8008a98:	2300      	movs	r3, #0
 8008a9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008aae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	613b      	str	r3, [r7, #16]
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d3b7      	bcc.n	8008a2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008abe:	2300      	movs	r3, #0
 8008ac0:	613b      	str	r3, [r7, #16]
 8008ac2:	e043      	b.n	8008b4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	015a      	lsls	r2, r3, #5
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ada:	d118      	bne.n	8008b0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10a      	bne.n	8008af8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aee:	461a      	mov	r2, r3
 8008af0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	e013      	b.n	8008b20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b04:	461a      	mov	r2, r3
 8008b06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	e008      	b.n	8008b20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	015a      	lsls	r2, r3, #5
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4413      	add	r3, r2
 8008b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	2300      	movs	r3, #0
 8008b30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	613b      	str	r3, [r7, #16]
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d3b7      	bcc.n	8008ac4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5a:	691b      	ldr	r3, [r3, #16]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d105      	bne.n	8008b88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	f043 0210 	orr.w	r2, r3, #16
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	699a      	ldr	r2, [r3, #24]
 8008b8c:	4b0f      	ldr	r3, [pc, #60]	; (8008bcc <USB_DevInit+0x2c4>)
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d005      	beq.n	8008ba6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	f043 0208 	orr.w	r2, r3, #8
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d107      	bne.n	8008bbc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bb4:	f043 0304 	orr.w	r3, r3, #4
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bc8:	b004      	add	sp, #16
 8008bca:	4770      	bx	lr
 8008bcc:	803c3800 	.word	0x803c3800

08008bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3301      	adds	r3, #1
 8008be2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	4a13      	ldr	r2, [pc, #76]	; (8008c34 <USB_FlushTxFifo+0x64>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d901      	bls.n	8008bf0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e01b      	b.n	8008c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	daf2      	bge.n	8008bde <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	019b      	lsls	r3, r3, #6
 8008c00:	f043 0220 	orr.w	r2, r3, #32
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4a08      	ldr	r2, [pc, #32]	; (8008c34 <USB_FlushTxFifo+0x64>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d901      	bls.n	8008c1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e006      	b.n	8008c28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b20      	cmp	r3, #32
 8008c24:	d0f0      	beq.n	8008c08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	00030d40 	.word	0x00030d40

08008c38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	3301      	adds	r3, #1
 8008c48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	4a11      	ldr	r2, [pc, #68]	; (8008c94 <USB_FlushRxFifo+0x5c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d901      	bls.n	8008c56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c52:	2303      	movs	r3, #3
 8008c54:	e018      	b.n	8008c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	daf2      	bge.n	8008c44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2210      	movs	r2, #16
 8008c66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	4a08      	ldr	r2, [pc, #32]	; (8008c94 <USB_FlushRxFifo+0x5c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d901      	bls.n	8008c7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e006      	b.n	8008c88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	f003 0310 	and.w	r3, r3, #16
 8008c82:	2b10      	cmp	r3, #16
 8008c84:	d0f0      	beq.n	8008c68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	00030d40 	.word	0x00030d40

08008c98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	68f9      	ldr	r1, [r7, #12]
 8008cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr

08008cca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008cca:	b480      	push	{r7}
 8008ccc:	b087      	sub	sp, #28
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f003 0306 	and.w	r3, r3, #6
 8008ce2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008cea:	2300      	movs	r3, #0
 8008cec:	75fb      	strb	r3, [r7, #23]
 8008cee:	e00a      	b.n	8008d06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d002      	beq.n	8008cfc <USB_GetDevSpeed+0x32>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b06      	cmp	r3, #6
 8008cfa:	d102      	bne.n	8008d02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	75fb      	strb	r3, [r7, #23]
 8008d00:	e001      	b.n	8008d06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008d02:	230f      	movs	r3, #15
 8008d04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	371c      	adds	r7, #28
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	785b      	ldrb	r3, [r3, #1]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d13a      	bne.n	8008da6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d36:	69da      	ldr	r2, [r3, #28]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	f003 030f 	and.w	r3, r3, #15
 8008d40:	2101      	movs	r1, #1
 8008d42:	fa01 f303 	lsl.w	r3, r1, r3
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	68f9      	ldr	r1, [r7, #12]
 8008d4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	015a      	lsls	r2, r3, #5
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	4413      	add	r3, r2
 8008d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d155      	bne.n	8008e14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	791b      	ldrb	r3, [r3, #4]
 8008d82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	059b      	lsls	r3, r3, #22
 8008d8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	0151      	lsls	r1, r2, #5
 8008d92:	68fa      	ldr	r2, [r7, #12]
 8008d94:	440a      	add	r2, r1
 8008d96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008da2:	6013      	str	r3, [r2, #0]
 8008da4:	e036      	b.n	8008e14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dac:	69da      	ldr	r2, [r3, #28]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	2101      	movs	r1, #1
 8008db8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dbc:	041b      	lsls	r3, r3, #16
 8008dbe:	68f9      	ldr	r1, [r7, #12]
 8008dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	015a      	lsls	r2, r3, #5
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4413      	add	r3, r2
 8008dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d11a      	bne.n	8008e14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	791b      	ldrb	r3, [r3, #4]
 8008df8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008dfa:	430b      	orrs	r3, r1
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	0151      	lsls	r1, r2, #5
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	440a      	add	r2, r1
 8008e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
	...

08008e24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	785b      	ldrb	r3, [r3, #1]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d161      	bne.n	8008f04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e56:	d11f      	bne.n	8008e98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	0151      	lsls	r1, r2, #5
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	440a      	add	r2, r1
 8008e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	0151      	lsls	r1, r2, #5
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	440a      	add	r2, r1
 8008e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	f003 030f 	and.w	r3, r3, #15
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	43db      	mvns	r3, r3
 8008eb2:	68f9      	ldr	r1, [r7, #12]
 8008eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eb8:	4013      	ands	r3, r2
 8008eba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec2:	69da      	ldr	r2, [r3, #28]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	f003 030f 	and.w	r3, r3, #15
 8008ecc:	2101      	movs	r1, #1
 8008ece:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	43db      	mvns	r3, r3
 8008ed6:	68f9      	ldr	r1, [r7, #12]
 8008ed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008edc:	4013      	ands	r3, r2
 8008ede:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	0159      	lsls	r1, r3, #5
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	440b      	add	r3, r1
 8008ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efa:	4619      	mov	r1, r3
 8008efc:	4b35      	ldr	r3, [pc, #212]	; (8008fd4 <USB_DeactivateEndpoint+0x1b0>)
 8008efe:	4013      	ands	r3, r2
 8008f00:	600b      	str	r3, [r1, #0]
 8008f02:	e060      	b.n	8008fc6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f1a:	d11f      	bne.n	8008f5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	0151      	lsls	r1, r2, #5
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	440a      	add	r2, r1
 8008f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	0151      	lsls	r1, r2, #5
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	440a      	add	r2, r1
 8008f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	f003 030f 	and.w	r3, r3, #15
 8008f6c:	2101      	movs	r1, #1
 8008f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f72:	041b      	lsls	r3, r3, #16
 8008f74:	43db      	mvns	r3, r3
 8008f76:	68f9      	ldr	r1, [r7, #12]
 8008f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f86:	69da      	ldr	r2, [r3, #28]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	f003 030f 	and.w	r3, r3, #15
 8008f90:	2101      	movs	r1, #1
 8008f92:	fa01 f303 	lsl.w	r3, r1, r3
 8008f96:	041b      	lsls	r3, r3, #16
 8008f98:	43db      	mvns	r3, r3
 8008f9a:	68f9      	ldr	r1, [r7, #12]
 8008f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	0159      	lsls	r1, r3, #5
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	440b      	add	r3, r1
 8008fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4b05      	ldr	r3, [pc, #20]	; (8008fd8 <USB_DeactivateEndpoint+0x1b4>)
 8008fc2:	4013      	ands	r3, r2
 8008fc4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	ec337800 	.word	0xec337800
 8008fd8:	eff37800 	.word	0xeff37800

08008fdc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b08a      	sub	sp, #40	; 0x28
 8008fe0:	af02      	add	r7, sp, #8
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	785b      	ldrb	r3, [r3, #1]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	f040 815c 	bne.w	80092b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d132      	bne.n	800906c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	69ba      	ldr	r2, [r7, #24]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	69fa      	ldr	r2, [r7, #28]
 800901a:	440a      	add	r2, r1
 800901c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009020:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009024:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009028:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	0151      	lsls	r1, r2, #5
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	440a      	add	r2, r1
 8009040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009048:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	0151      	lsls	r1, r2, #5
 800905c:	69fa      	ldr	r2, [r7, #28]
 800905e:	440a      	add	r2, r1
 8009060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009064:	0cdb      	lsrs	r3, r3, #19
 8009066:	04db      	lsls	r3, r3, #19
 8009068:	6113      	str	r3, [r2, #16]
 800906a:	e074      	b.n	8009156 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	0151      	lsls	r1, r2, #5
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	440a      	add	r2, r1
 8009082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009086:	0cdb      	lsrs	r3, r3, #19
 8009088:	04db      	lsls	r3, r3, #19
 800908a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	69ba      	ldr	r2, [r7, #24]
 800909c:	0151      	lsls	r1, r2, #5
 800909e:	69fa      	ldr	r2, [r7, #28]
 80090a0:	440a      	add	r2, r1
 80090a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	015a      	lsls	r2, r3, #5
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	4413      	add	r3, r2
 80090b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	6999      	ldr	r1, [r3, #24]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	440b      	add	r3, r1
 80090c8:	1e59      	subs	r1, r3, #1
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80090d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80090d4:	4b9d      	ldr	r3, [pc, #628]	; (800934c <USB_EPStartXfer+0x370>)
 80090d6:	400b      	ands	r3, r1
 80090d8:	69b9      	ldr	r1, [r7, #24]
 80090da:	0148      	lsls	r0, r1, #5
 80090dc:	69f9      	ldr	r1, [r7, #28]
 80090de:	4401      	add	r1, r0
 80090e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090e4:	4313      	orrs	r3, r2
 80090e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	69fb      	ldr	r3, [r7, #28]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f4:	691a      	ldr	r2, [r3, #16]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090fe:	69b9      	ldr	r1, [r7, #24]
 8009100:	0148      	lsls	r0, r1, #5
 8009102:	69f9      	ldr	r1, [r7, #28]
 8009104:	4401      	add	r1, r0
 8009106:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800910a:	4313      	orrs	r3, r2
 800910c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	791b      	ldrb	r3, [r3, #4]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d11f      	bne.n	8009156 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	69ba      	ldr	r2, [r7, #24]
 8009126:	0151      	lsls	r1, r2, #5
 8009128:	69fa      	ldr	r2, [r7, #28]
 800912a:	440a      	add	r2, r1
 800912c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009130:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009134:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	015a      	lsls	r2, r3, #5
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	4413      	add	r3, r2
 800913e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	0151      	lsls	r1, r2, #5
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	440a      	add	r2, r1
 800914c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009150:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009154:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009156:	79fb      	ldrb	r3, [r7, #7]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d14b      	bne.n	80091f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d009      	beq.n	8009178 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009170:	461a      	mov	r2, r3
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	791b      	ldrb	r3, [r3, #4]
 800917c:	2b01      	cmp	r3, #1
 800917e:	d128      	bne.n	80091d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918c:	2b00      	cmp	r3, #0
 800918e:	d110      	bne.n	80091b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	015a      	lsls	r2, r3, #5
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	4413      	add	r3, r2
 8009198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69ba      	ldr	r2, [r7, #24]
 80091a0:	0151      	lsls	r1, r2, #5
 80091a2:	69fa      	ldr	r2, [r7, #28]
 80091a4:	440a      	add	r2, r1
 80091a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091ae:	6013      	str	r3, [r2, #0]
 80091b0:	e00f      	b.n	80091d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	015a      	lsls	r2, r3, #5
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	69ba      	ldr	r2, [r7, #24]
 80091c2:	0151      	lsls	r1, r2, #5
 80091c4:	69fa      	ldr	r2, [r7, #28]
 80091c6:	440a      	add	r2, r1
 80091c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	0151      	lsls	r1, r2, #5
 80091e4:	69fa      	ldr	r2, [r7, #28]
 80091e6:	440a      	add	r2, r1
 80091e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091f0:	6013      	str	r3, [r2, #0]
 80091f2:	e133      	b.n	800945c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	69ba      	ldr	r2, [r7, #24]
 8009204:	0151      	lsls	r1, r2, #5
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	440a      	add	r2, r1
 800920a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800920e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009212:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	791b      	ldrb	r3, [r3, #4]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d015      	beq.n	8009248 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 811b 	beq.w	800945c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800922c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	f003 030f 	and.w	r3, r3, #15
 8009236:	2101      	movs	r1, #1
 8009238:	fa01 f303 	lsl.w	r3, r1, r3
 800923c:	69f9      	ldr	r1, [r7, #28]
 800923e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009242:	4313      	orrs	r3, r2
 8009244:	634b      	str	r3, [r1, #52]	; 0x34
 8009246:	e109      	b.n	800945c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009248:	69fb      	ldr	r3, [r7, #28]
 800924a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009254:	2b00      	cmp	r3, #0
 8009256:	d110      	bne.n	800927a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	0151      	lsls	r1, r2, #5
 800926a:	69fa      	ldr	r2, [r7, #28]
 800926c:	440a      	add	r2, r1
 800926e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009272:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	e00f      	b.n	800929a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	4413      	add	r3, r2
 8009282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	69ba      	ldr	r2, [r7, #24]
 800928a:	0151      	lsls	r1, r2, #5
 800928c:	69fa      	ldr	r2, [r7, #28]
 800928e:	440a      	add	r2, r1
 8009290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009298:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	6919      	ldr	r1, [r3, #16]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	781a      	ldrb	r2, [r3, #0]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	b298      	uxth	r0, r3
 80092a8:	79fb      	ldrb	r3, [r7, #7]
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	4603      	mov	r3, r0
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 fade 	bl	8009870 <USB_WritePacket>
 80092b4:	e0d2      	b.n	800945c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	69ba      	ldr	r2, [r7, #24]
 80092c6:	0151      	lsls	r1, r2, #5
 80092c8:	69fa      	ldr	r2, [r7, #28]
 80092ca:	440a      	add	r2, r1
 80092cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d0:	0cdb      	lsrs	r3, r3, #19
 80092d2:	04db      	lsls	r3, r3, #19
 80092d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	69ba      	ldr	r2, [r7, #24]
 80092e6:	0151      	lsls	r1, r2, #5
 80092e8:	69fa      	ldr	r2, [r7, #28]
 80092ea:	440a      	add	r2, r1
 80092ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d126      	bne.n	8009350 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	015a      	lsls	r2, r3, #5
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	4413      	add	r3, r2
 800930a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930e:	691a      	ldr	r2, [r3, #16]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009318:	69b9      	ldr	r1, [r7, #24]
 800931a:	0148      	lsls	r0, r1, #5
 800931c:	69f9      	ldr	r1, [r7, #28]
 800931e:	4401      	add	r1, r0
 8009320:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009324:	4313      	orrs	r3, r2
 8009326:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	69ba      	ldr	r2, [r7, #24]
 8009338:	0151      	lsls	r1, r2, #5
 800933a:	69fa      	ldr	r2, [r7, #28]
 800933c:	440a      	add	r2, r1
 800933e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009346:	6113      	str	r3, [r2, #16]
 8009348:	e03a      	b.n	80093c0 <USB_EPStartXfer+0x3e4>
 800934a:	bf00      	nop
 800934c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	699a      	ldr	r2, [r3, #24]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	4413      	add	r3, r2
 800935a:	1e5a      	subs	r2, r3, #1
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	fbb2 f3f3 	udiv	r3, r2, r3
 8009364:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	8afa      	ldrh	r2, [r7, #22]
 800936c:	fb03 f202 	mul.w	r2, r3, r2
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	4413      	add	r3, r2
 800937c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009380:	691a      	ldr	r2, [r3, #16]
 8009382:	8afb      	ldrh	r3, [r7, #22]
 8009384:	04d9      	lsls	r1, r3, #19
 8009386:	4b38      	ldr	r3, [pc, #224]	; (8009468 <USB_EPStartXfer+0x48c>)
 8009388:	400b      	ands	r3, r1
 800938a:	69b9      	ldr	r1, [r7, #24]
 800938c:	0148      	lsls	r0, r1, #5
 800938e:	69f9      	ldr	r1, [r7, #28]
 8009390:	4401      	add	r1, r0
 8009392:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009396:	4313      	orrs	r3, r2
 8009398:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a6:	691a      	ldr	r2, [r3, #16]
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	69db      	ldr	r3, [r3, #28]
 80093ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093b0:	69b9      	ldr	r1, [r7, #24]
 80093b2:	0148      	lsls	r0, r1, #5
 80093b4:	69f9      	ldr	r1, [r7, #28]
 80093b6:	4401      	add	r1, r0
 80093b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093bc:	4313      	orrs	r3, r2
 80093be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80093c0:	79fb      	ldrb	r3, [r7, #7]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d10d      	bne.n	80093e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d009      	beq.n	80093e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	6919      	ldr	r1, [r3, #16]
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093de:	460a      	mov	r2, r1
 80093e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	791b      	ldrb	r3, [r3, #4]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d128      	bne.n	800943c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d110      	bne.n	800941c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	0151      	lsls	r1, r2, #5
 800940c:	69fa      	ldr	r2, [r7, #28]
 800940e:	440a      	add	r2, r1
 8009410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009414:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009418:	6013      	str	r3, [r2, #0]
 800941a:	e00f      	b.n	800943c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	0151      	lsls	r1, r2, #5
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	440a      	add	r2, r1
 8009432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800943a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69ba      	ldr	r2, [r7, #24]
 800944c:	0151      	lsls	r1, r2, #5
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	440a      	add	r2, r1
 8009452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009456:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800945a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3720      	adds	r7, #32
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	1ff80000 	.word	0x1ff80000

0800946c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800946c:	b480      	push	{r7}
 800946e:	b087      	sub	sp, #28
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	4613      	mov	r3, r2
 8009478:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	785b      	ldrb	r3, [r3, #1]
 8009488:	2b01      	cmp	r3, #1
 800948a:	f040 80ce 	bne.w	800962a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d132      	bne.n	80094fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	0151      	lsls	r1, r2, #5
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	440a      	add	r2, r1
 80094ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c6:	691b      	ldr	r3, [r3, #16]
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	0151      	lsls	r1, r2, #5
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	440a      	add	r2, r1
 80094d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	015a      	lsls	r2, r3, #5
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	4413      	add	r3, r2
 80094e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e6:	691b      	ldr	r3, [r3, #16]
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	0151      	lsls	r1, r2, #5
 80094ec:	697a      	ldr	r2, [r7, #20]
 80094ee:	440a      	add	r2, r1
 80094f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094f4:	0cdb      	lsrs	r3, r3, #19
 80094f6:	04db      	lsls	r3, r3, #19
 80094f8:	6113      	str	r3, [r2, #16]
 80094fa:	e04e      	b.n	800959a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	015a      	lsls	r2, r3, #5
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	4413      	add	r3, r2
 8009504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	693a      	ldr	r2, [r7, #16]
 800950c:	0151      	lsls	r1, r2, #5
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	440a      	add	r2, r1
 8009512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009516:	0cdb      	lsrs	r3, r3, #19
 8009518:	04db      	lsls	r3, r3, #19
 800951a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	4413      	add	r3, r2
 8009524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	0151      	lsls	r1, r2, #5
 800952e:	697a      	ldr	r2, [r7, #20]
 8009530:	440a      	add	r2, r1
 8009532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009536:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800953a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800953e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	699a      	ldr	r2, [r3, #24]
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	429a      	cmp	r2, r3
 800954a:	d903      	bls.n	8009554 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	68da      	ldr	r2, [r3, #12]
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	440a      	add	r2, r1
 800956a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800956e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009572:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009580:	691a      	ldr	r2, [r3, #16]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800958a:	6939      	ldr	r1, [r7, #16]
 800958c:	0148      	lsls	r0, r1, #5
 800958e:	6979      	ldr	r1, [r7, #20]
 8009590:	4401      	add	r1, r0
 8009592:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009596:	4313      	orrs	r3, r2
 8009598:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800959a:	79fb      	ldrb	r3, [r7, #7]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d11e      	bne.n	80095de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	695b      	ldr	r3, [r3, #20]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d009      	beq.n	80095bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b4:	461a      	mov	r2, r3
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	015a      	lsls	r2, r3, #5
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	4413      	add	r3, r2
 80095c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	0151      	lsls	r1, r2, #5
 80095ce:	697a      	ldr	r2, [r7, #20]
 80095d0:	440a      	add	r2, r1
 80095d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095da:	6013      	str	r3, [r2, #0]
 80095dc:	e097      	b.n	800970e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	015a      	lsls	r2, r3, #5
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	4413      	add	r3, r2
 80095e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	693a      	ldr	r2, [r7, #16]
 80095ee:	0151      	lsls	r1, r2, #5
 80095f0:	697a      	ldr	r2, [r7, #20]
 80095f2:	440a      	add	r2, r1
 80095f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 8083 	beq.w	800970e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	f003 030f 	and.w	r3, r3, #15
 8009618:	2101      	movs	r1, #1
 800961a:	fa01 f303 	lsl.w	r3, r1, r3
 800961e:	6979      	ldr	r1, [r7, #20]
 8009620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009624:	4313      	orrs	r3, r2
 8009626:	634b      	str	r3, [r1, #52]	; 0x34
 8009628:	e071      	b.n	800970e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	015a      	lsls	r2, r3, #5
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	4413      	add	r3, r2
 8009632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	0151      	lsls	r1, r2, #5
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	440a      	add	r2, r1
 8009640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009644:	0cdb      	lsrs	r3, r3, #19
 8009646:	04db      	lsls	r3, r3, #19
 8009648:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	693a      	ldr	r2, [r7, #16]
 800965a:	0151      	lsls	r1, r2, #5
 800965c:	697a      	ldr	r2, [r7, #20]
 800965e:	440a      	add	r2, r1
 8009660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009664:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009668:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800966c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	68da      	ldr	r2, [r3, #12]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	0151      	lsls	r1, r2, #5
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	440a      	add	r2, r1
 800969c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096bc:	6939      	ldr	r1, [r7, #16]
 80096be:	0148      	lsls	r0, r1, #5
 80096c0:	6979      	ldr	r1, [r7, #20]
 80096c2:	4401      	add	r1, r0
 80096c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096c8:	4313      	orrs	r3, r2
 80096ca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80096cc:	79fb      	ldrb	r3, [r7, #7]
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d10d      	bne.n	80096ee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d009      	beq.n	80096ee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	6919      	ldr	r1, [r3, #16]
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ea:	460a      	mov	r2, r1
 80096ec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	015a      	lsls	r2, r3, #5
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	4413      	add	r3, r2
 80096f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	693a      	ldr	r2, [r7, #16]
 80096fe:	0151      	lsls	r1, r2, #5
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	440a      	add	r2, r1
 8009704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009708:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800970c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	371c      	adds	r7, #28
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	785b      	ldrb	r3, [r3, #1]
 8009736:	2b01      	cmp	r3, #1
 8009738:	d14a      	bne.n	80097d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	015a      	lsls	r2, r3, #5
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	4413      	add	r3, r2
 8009744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800974e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009752:	f040 8086 	bne.w	8009862 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	015a      	lsls	r2, r3, #5
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	4413      	add	r3, r2
 8009760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	7812      	ldrb	r2, [r2, #0]
 800976a:	0151      	lsls	r1, r2, #5
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	440a      	add	r2, r1
 8009770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009774:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009778:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	7812      	ldrb	r2, [r2, #0]
 800978e:	0151      	lsls	r1, r2, #5
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	440a      	add	r2, r1
 8009794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009798:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800979c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3301      	adds	r3, #1
 80097a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d902      	bls.n	80097b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	75fb      	strb	r3, [r7, #23]
          break;
 80097b2:	e056      	b.n	8009862 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	015a      	lsls	r2, r3, #5
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	4413      	add	r3, r2
 80097be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097cc:	d0e7      	beq.n	800979e <USB_EPStopXfer+0x82>
 80097ce:	e048      	b.n	8009862 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097e8:	d13b      	bne.n	8009862 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	7812      	ldrb	r2, [r2, #0]
 80097fe:	0151      	lsls	r1, r2, #5
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	440a      	add	r2, r1
 8009804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009808:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800980c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	7812      	ldrb	r2, [r2, #0]
 8009822:	0151      	lsls	r1, r2, #5
 8009824:	693a      	ldr	r2, [r7, #16]
 8009826:	440a      	add	r2, r1
 8009828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800982c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009830:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	3301      	adds	r3, #1
 8009836:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f242 7210 	movw	r2, #10000	; 0x2710
 800983e:	4293      	cmp	r3, r2
 8009840:	d902      	bls.n	8009848 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	75fb      	strb	r3, [r7, #23]
          break;
 8009846:	e00c      	b.n	8009862 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	015a      	lsls	r2, r3, #5
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	4413      	add	r3, r2
 8009852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800985c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009860:	d0e7      	beq.n	8009832 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009862:	7dfb      	ldrb	r3, [r7, #23]
}
 8009864:	4618      	mov	r0, r3
 8009866:	371c      	adds	r7, #28
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009870:	b480      	push	{r7}
 8009872:	b089      	sub	sp, #36	; 0x24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	4611      	mov	r1, r2
 800987c:	461a      	mov	r2, r3
 800987e:	460b      	mov	r3, r1
 8009880:	71fb      	strb	r3, [r7, #7]
 8009882:	4613      	mov	r3, r2
 8009884:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800988e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009892:	2b00      	cmp	r3, #0
 8009894:	d123      	bne.n	80098de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009896:	88bb      	ldrh	r3, [r7, #4]
 8009898:	3303      	adds	r3, #3
 800989a:	089b      	lsrs	r3, r3, #2
 800989c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800989e:	2300      	movs	r3, #0
 80098a0:	61bb      	str	r3, [r7, #24]
 80098a2:	e018      	b.n	80098d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80098a4:	79fb      	ldrb	r3, [r7, #7]
 80098a6:	031a      	lsls	r2, r3, #12
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098b0:	461a      	mov	r2, r3
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	3301      	adds	r3, #1
 80098bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	3301      	adds	r3, #1
 80098c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	3301      	adds	r3, #1
 80098c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	3301      	adds	r3, #1
 80098ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	3301      	adds	r3, #1
 80098d4:	61bb      	str	r3, [r7, #24]
 80098d6:	69ba      	ldr	r2, [r7, #24]
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d3e2      	bcc.n	80098a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3724      	adds	r7, #36	; 0x24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b08b      	sub	sp, #44	; 0x2c
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	4613      	mov	r3, r2
 80098f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009902:	88fb      	ldrh	r3, [r7, #6]
 8009904:	089b      	lsrs	r3, r3, #2
 8009906:	b29b      	uxth	r3, r3
 8009908:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800990a:	88fb      	ldrh	r3, [r7, #6]
 800990c:	f003 0303 	and.w	r3, r3, #3
 8009910:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009912:	2300      	movs	r3, #0
 8009914:	623b      	str	r3, [r7, #32]
 8009916:	e014      	b.n	8009942 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	601a      	str	r2, [r3, #0]
    pDest++;
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	3301      	adds	r3, #1
 8009928:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	3301      	adds	r3, #1
 800992e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	3301      	adds	r3, #1
 8009934:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	3301      	adds	r3, #1
 800993a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	3301      	adds	r3, #1
 8009940:	623b      	str	r3, [r7, #32]
 8009942:	6a3a      	ldr	r2, [r7, #32]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	429a      	cmp	r2, r3
 8009948:	d3e6      	bcc.n	8009918 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800994a:	8bfb      	ldrh	r3, [r7, #30]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d01e      	beq.n	800998e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009950:	2300      	movs	r3, #0
 8009952:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800995a:	461a      	mov	r2, r3
 800995c:	f107 0310 	add.w	r3, r7, #16
 8009960:	6812      	ldr	r2, [r2, #0]
 8009962:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	6a3b      	ldr	r3, [r7, #32]
 8009968:	b2db      	uxtb	r3, r3
 800996a:	00db      	lsls	r3, r3, #3
 800996c:	fa22 f303 	lsr.w	r3, r2, r3
 8009970:	b2da      	uxtb	r2, r3
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	701a      	strb	r2, [r3, #0]
      i++;
 8009976:	6a3b      	ldr	r3, [r7, #32]
 8009978:	3301      	adds	r3, #1
 800997a:	623b      	str	r3, [r7, #32]
      pDest++;
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	3301      	adds	r3, #1
 8009980:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009982:	8bfb      	ldrh	r3, [r7, #30]
 8009984:	3b01      	subs	r3, #1
 8009986:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009988:	8bfb      	ldrh	r3, [r7, #30]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1ea      	bne.n	8009964 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009990:	4618      	mov	r0, r3
 8009992:	372c      	adds	r7, #44	; 0x2c
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	785b      	ldrb	r3, [r3, #1]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d12c      	bne.n	8009a12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	db12      	blt.n	80099f0 <USB_EPSetStall+0x54>
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00f      	beq.n	80099f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	0151      	lsls	r1, r2, #5
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	440a      	add	r2, r1
 80099e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	0151      	lsls	r1, r2, #5
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	440a      	add	r2, r1
 8009a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	e02b      	b.n	8009a6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	015a      	lsls	r2, r3, #5
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	4413      	add	r3, r2
 8009a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	db12      	blt.n	8009a4a <USB_EPSetStall+0xae>
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00f      	beq.n	8009a4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	015a      	lsls	r2, r3, #5
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	4413      	add	r3, r2
 8009a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	0151      	lsls	r1, r2, #5
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	440a      	add	r2, r1
 8009a40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	015a      	lsls	r2, r3, #5
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	4413      	add	r3, r2
 8009a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68ba      	ldr	r2, [r7, #8]
 8009a5a:	0151      	lsls	r1, r2, #5
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	440a      	add	r2, r1
 8009a60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	785b      	ldrb	r3, [r3, #1]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d128      	bne.n	8009ae6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	0151      	lsls	r1, r2, #5
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	440a      	add	r2, r1
 8009aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ab2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	791b      	ldrb	r3, [r3, #4]
 8009ab8:	2b03      	cmp	r3, #3
 8009aba:	d003      	beq.n	8009ac4 <USB_EPClearStall+0x4c>
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	791b      	ldrb	r3, [r3, #4]
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d138      	bne.n	8009b36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	015a      	lsls	r2, r3, #5
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4413      	add	r3, r2
 8009acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	0151      	lsls	r1, r2, #5
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	440a      	add	r2, r1
 8009ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	e027      	b.n	8009b36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	015a      	lsls	r2, r3, #5
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4413      	add	r3, r2
 8009aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	0151      	lsls	r1, r2, #5
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	440a      	add	r2, r1
 8009afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	791b      	ldrb	r3, [r3, #4]
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d003      	beq.n	8009b16 <USB_EPClearStall+0x9e>
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	791b      	ldrb	r3, [r3, #4]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d10f      	bne.n	8009b36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	015a      	lsls	r2, r3, #5
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68ba      	ldr	r2, [r7, #8]
 8009b26:	0151      	lsls	r1, r2, #5
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	440a      	add	r2, r1
 8009b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009b66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	011b      	lsls	r3, r3, #4
 8009b74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009b78:	68f9      	ldr	r1, [r7, #12]
 8009b7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009baa:	f023 0303 	bic.w	r3, r3, #3
 8009bae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	68fa      	ldr	r2, [r7, #12]
 8009bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bbe:	f023 0302 	bic.w	r3, r3, #2
 8009bc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b085      	sub	sp, #20
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bec:	f023 0303 	bic.w	r3, r3, #3
 8009bf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c00:	f043 0302 	orr.w	r3, r3, #2
 8009c04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b085      	sub	sp, #20
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	4013      	ands	r3, r2
 8009c2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b085      	sub	sp, #20
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	0c1b      	lsrs	r3, r3, #16
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b085      	sub	sp, #20
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c80:	699b      	ldr	r3, [r3, #24]
 8009c82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c8a:	69db      	ldr	r3, [r3, #28]
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	4013      	ands	r3, r2
 8009c90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	b29b      	uxth	r3, r3
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3714      	adds	r7, #20
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca0:	4770      	bx	lr

08009ca2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ca2:	b480      	push	{r7}
 8009ca4:	b085      	sub	sp, #20
 8009ca6:	af00      	add	r7, sp, #0
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	460b      	mov	r3, r1
 8009cac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009cb2:	78fb      	ldrb	r3, [r7, #3]
 8009cb4:	015a      	lsls	r2, r3, #5
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	4413      	add	r3, r2
 8009cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	4013      	ands	r3, r2
 8009cce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009cd0:	68bb      	ldr	r3, [r7, #8]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b087      	sub	sp, #28
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009d02:	78fb      	ldrb	r3, [r7, #3]
 8009d04:	f003 030f 	and.w	r3, r3, #15
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d0e:	01db      	lsls	r3, r3, #7
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	693a      	ldr	r2, [r7, #16]
 8009d14:	4313      	orrs	r3, r2
 8009d16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009d18:	78fb      	ldrb	r3, [r7, #3]
 8009d1a:	015a      	lsls	r2, r3, #5
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	4013      	ands	r3, r2
 8009d2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	371c      	adds	r7, #28
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b083      	sub	sp, #12
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	f003 0301 	and.w	r3, r3, #1
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	370c      	adds	r7, #12
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr

08009d56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b085      	sub	sp, #20
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009d74:	f023 0307 	bic.w	r3, r3, #7
 8009d78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3714      	adds	r7, #20
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b087      	sub	sp, #28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	460b      	mov	r3, r1
 8009da6:	607a      	str	r2, [r7, #4]
 8009da8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	333c      	adds	r3, #60	; 0x3c
 8009db2:	3304      	adds	r3, #4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	4a26      	ldr	r2, [pc, #152]	; (8009e54 <USB_EP0_OutStart+0xb8>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d90a      	bls.n	8009dd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dd0:	d101      	bne.n	8009dd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	e037      	b.n	8009e46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ddc:	461a      	mov	r2, r3
 8009dde:	2300      	movs	r3, #0
 8009de0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009df0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009df4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e04:	f043 0318 	orr.w	r3, r3, #24
 8009e08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009e1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009e1e:	7afb      	ldrb	r3, [r7, #11]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d10f      	bne.n	8009e44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009e42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	371c      	adds	r7, #28
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	4f54300a 	.word	0x4f54300a

08009e58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e60:	2300      	movs	r3, #0
 8009e62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	3301      	adds	r3, #1
 8009e68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	4a13      	ldr	r2, [pc, #76]	; (8009ebc <USB_CoreReset+0x64>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d901      	bls.n	8009e76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e01b      	b.n	8009eae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	daf2      	bge.n	8009e64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	f043 0201 	orr.w	r2, r3, #1
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3301      	adds	r3, #1
 8009e92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	4a09      	ldr	r2, [pc, #36]	; (8009ebc <USB_CoreReset+0x64>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d901      	bls.n	8009ea0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e006      	b.n	8009eae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d0f0      	beq.n	8009e8e <USB_CoreReset+0x36>

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	00030d40 	.word	0x00030d40

08009ec0 <__NVIC_SetPriority>:
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	6039      	str	r1, [r7, #0]
 8009eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	db0a      	blt.n	8009eea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	490c      	ldr	r1, [pc, #48]	; (8009f0c <__NVIC_SetPriority+0x4c>)
 8009eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ede:	0112      	lsls	r2, r2, #4
 8009ee0:	b2d2      	uxtb	r2, r2
 8009ee2:	440b      	add	r3, r1
 8009ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009ee8:	e00a      	b.n	8009f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	4908      	ldr	r1, [pc, #32]	; (8009f10 <__NVIC_SetPriority+0x50>)
 8009ef0:	79fb      	ldrb	r3, [r7, #7]
 8009ef2:	f003 030f 	and.w	r3, r3, #15
 8009ef6:	3b04      	subs	r3, #4
 8009ef8:	0112      	lsls	r2, r2, #4
 8009efa:	b2d2      	uxtb	r2, r2
 8009efc:	440b      	add	r3, r1
 8009efe:	761a      	strb	r2, [r3, #24]
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	e000e100 	.word	0xe000e100
 8009f10:	e000ed00 	.word	0xe000ed00

08009f14 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009f14:	b580      	push	{r7, lr}
 8009f16:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009f18:	4b05      	ldr	r3, [pc, #20]	; (8009f30 <SysTick_Handler+0x1c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009f1c:	f002 f936 	bl	800c18c <xTaskGetSchedulerState>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d001      	beq.n	8009f2a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009f26:	f000 fd97 	bl	800aa58 <xPortSysTickHandler>
  }
}
 8009f2a:	bf00      	nop
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	e000e010 	.word	0xe000e010

08009f34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009f34:	b580      	push	{r7, lr}
 8009f36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009f38:	2100      	movs	r1, #0
 8009f3a:	f06f 0004 	mvn.w	r0, #4
 8009f3e:	f7ff ffbf 	bl	8009ec0 <__NVIC_SetPriority>
#endif
}
 8009f42:	bf00      	nop
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f4e:	f3ef 8305 	mrs	r3, IPSR
 8009f52:	603b      	str	r3, [r7, #0]
  return(result);
 8009f54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d003      	beq.n	8009f62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009f5a:	f06f 0305 	mvn.w	r3, #5
 8009f5e:	607b      	str	r3, [r7, #4]
 8009f60:	e00c      	b.n	8009f7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009f62:	4b0a      	ldr	r3, [pc, #40]	; (8009f8c <osKernelInitialize+0x44>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d105      	bne.n	8009f76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009f6a:	4b08      	ldr	r3, [pc, #32]	; (8009f8c <osKernelInitialize+0x44>)
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009f70:	2300      	movs	r3, #0
 8009f72:	607b      	str	r3, [r7, #4]
 8009f74:	e002      	b.n	8009f7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009f76:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009f7c:	687b      	ldr	r3, [r7, #4]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	370c      	adds	r7, #12
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop
 8009f8c:	20000640 	.word	0x20000640

08009f90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f96:	f3ef 8305 	mrs	r3, IPSR
 8009f9a:	603b      	str	r3, [r7, #0]
  return(result);
 8009f9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d003      	beq.n	8009faa <osKernelStart+0x1a>
    stat = osErrorISR;
 8009fa2:	f06f 0305 	mvn.w	r3, #5
 8009fa6:	607b      	str	r3, [r7, #4]
 8009fa8:	e010      	b.n	8009fcc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009faa:	4b0b      	ldr	r3, [pc, #44]	; (8009fd8 <osKernelStart+0x48>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d109      	bne.n	8009fc6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009fb2:	f7ff ffbf 	bl	8009f34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009fb6:	4b08      	ldr	r3, [pc, #32]	; (8009fd8 <osKernelStart+0x48>)
 8009fb8:	2202      	movs	r2, #2
 8009fba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009fbc:	f001 fc9e 	bl	800b8fc <vTaskStartScheduler>
      stat = osOK;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	607b      	str	r3, [r7, #4]
 8009fc4:	e002      	b.n	8009fcc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009fcc:	687b      	ldr	r3, [r7, #4]
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3708      	adds	r7, #8
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	20000640 	.word	0x20000640

08009fdc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08e      	sub	sp, #56	; 0x38
 8009fe0:	af04      	add	r7, sp, #16
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fec:	f3ef 8305 	mrs	r3, IPSR
 8009ff0:	617b      	str	r3, [r7, #20]
  return(result);
 8009ff2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d17e      	bne.n	800a0f6 <osThreadNew+0x11a>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d07b      	beq.n	800a0f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009ffe:	2380      	movs	r3, #128	; 0x80
 800a000:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a002:	2318      	movs	r3, #24
 800a004:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a006:	2300      	movs	r3, #0
 800a008:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a00a:	f04f 33ff 	mov.w	r3, #4294967295
 800a00e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d045      	beq.n	800a0a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <osThreadNew+0x48>
        name = attr->name;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	699b      	ldr	r3, [r3, #24]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d008      	beq.n	800a04a <osThreadNew+0x6e>
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	2b38      	cmp	r3, #56	; 0x38
 800a03c:	d805      	bhi.n	800a04a <osThreadNew+0x6e>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	d001      	beq.n	800a04e <osThreadNew+0x72>
        return (NULL);
 800a04a:	2300      	movs	r3, #0
 800a04c:	e054      	b.n	800a0f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	089b      	lsrs	r3, r3, #2
 800a05c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00e      	beq.n	800a084 <osThreadNew+0xa8>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	2b5b      	cmp	r3, #91	; 0x5b
 800a06c:	d90a      	bls.n	800a084 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a072:	2b00      	cmp	r3, #0
 800a074:	d006      	beq.n	800a084 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d002      	beq.n	800a084 <osThreadNew+0xa8>
        mem = 1;
 800a07e:	2301      	movs	r3, #1
 800a080:	61bb      	str	r3, [r7, #24]
 800a082:	e010      	b.n	800a0a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10c      	bne.n	800a0a6 <osThreadNew+0xca>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d108      	bne.n	800a0a6 <osThreadNew+0xca>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d104      	bne.n	800a0a6 <osThreadNew+0xca>
          mem = 0;
 800a09c:	2300      	movs	r3, #0
 800a09e:	61bb      	str	r3, [r7, #24]
 800a0a0:	e001      	b.n	800a0a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d110      	bne.n	800a0ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a0b4:	9202      	str	r2, [sp, #8]
 800a0b6:	9301      	str	r3, [sp, #4]
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	6a3a      	ldr	r2, [r7, #32]
 800a0c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f001 fa44 	bl	800b550 <xTaskCreateStatic>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	613b      	str	r3, [r7, #16]
 800a0cc:	e013      	b.n	800a0f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d110      	bne.n	800a0f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	f107 0310 	add.w	r3, r7, #16
 800a0dc:	9301      	str	r3, [sp, #4]
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f001 fa8f 	bl	800b60a <xTaskCreate>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d001      	beq.n	800a0f6 <osThreadNew+0x11a>
            hTask = NULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a0f6:	693b      	ldr	r3, [r7, #16]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3728      	adds	r7, #40	; 0x28
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a108:	f3ef 8305 	mrs	r3, IPSR
 800a10c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a10e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a110:	2b00      	cmp	r3, #0
 800a112:	d003      	beq.n	800a11c <osDelay+0x1c>
    stat = osErrorISR;
 800a114:	f06f 0305 	mvn.w	r3, #5
 800a118:	60fb      	str	r3, [r7, #12]
 800a11a:	e007      	b.n	800a12c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d002      	beq.n	800a12c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f001 fbb4 	bl	800b894 <vTaskDelay>
    }
  }

  return (stat);
 800a12c:	68fb      	ldr	r3, [r7, #12]
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3710      	adds	r7, #16
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
	...

0800a138 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	4a07      	ldr	r2, [pc, #28]	; (800a164 <vApplicationGetIdleTaskMemory+0x2c>)
 800a148:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	4a06      	ldr	r2, [pc, #24]	; (800a168 <vApplicationGetIdleTaskMemory+0x30>)
 800a14e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2280      	movs	r2, #128	; 0x80
 800a154:	601a      	str	r2, [r3, #0]
}
 800a156:	bf00      	nop
 800a158:	3714      	adds	r7, #20
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	20000644 	.word	0x20000644
 800a168:	200006a0 	.word	0x200006a0

0800a16c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4a07      	ldr	r2, [pc, #28]	; (800a198 <vApplicationGetTimerTaskMemory+0x2c>)
 800a17c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	4a06      	ldr	r2, [pc, #24]	; (800a19c <vApplicationGetTimerTaskMemory+0x30>)
 800a182:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a18a:	601a      	str	r2, [r3, #0]
}
 800a18c:	bf00      	nop
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	200008a0 	.word	0x200008a0
 800a19c:	200008fc 	.word	0x200008fc

0800a1a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08a      	sub	sp, #40	; 0x28
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a1ac:	f001 fc0c 	bl	800b9c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a1b0:	4b5b      	ldr	r3, [pc, #364]	; (800a320 <pvPortMalloc+0x180>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1b8:	f000 f920 	bl	800a3fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1bc:	4b59      	ldr	r3, [pc, #356]	; (800a324 <pvPortMalloc+0x184>)
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f040 8093 	bne.w	800a2f0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d01d      	beq.n	800a20c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a1d0:	2208      	movs	r2, #8
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4413      	add	r3, r2
 800a1d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f003 0307 	and.w	r3, r3, #7
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d014      	beq.n	800a20c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f023 0307 	bic.w	r3, r3, #7
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f003 0307 	and.w	r3, r3, #7
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a208:	bf00      	nop
 800a20a:	e7fe      	b.n	800a20a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d06e      	beq.n	800a2f0 <pvPortMalloc+0x150>
 800a212:	4b45      	ldr	r3, [pc, #276]	; (800a328 <pvPortMalloc+0x188>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d869      	bhi.n	800a2f0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a21c:	4b43      	ldr	r3, [pc, #268]	; (800a32c <pvPortMalloc+0x18c>)
 800a21e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a220:	4b42      	ldr	r3, [pc, #264]	; (800a32c <pvPortMalloc+0x18c>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a226:	e004      	b.n	800a232 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d903      	bls.n	800a244 <pvPortMalloc+0xa4>
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1f1      	bne.n	800a228 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a244:	4b36      	ldr	r3, [pc, #216]	; (800a320 <pvPortMalloc+0x180>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d050      	beq.n	800a2f0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2208      	movs	r2, #8
 800a254:	4413      	add	r3, r2
 800a256:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	1ad2      	subs	r2, r2, r3
 800a268:	2308      	movs	r3, #8
 800a26a:	005b      	lsls	r3, r3, #1
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d91f      	bls.n	800a2b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4413      	add	r3, r2
 800a276:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	f003 0307 	and.w	r3, r3, #7
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00a      	beq.n	800a298 <pvPortMalloc+0xf8>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	613b      	str	r3, [r7, #16]
}
 800a294:	bf00      	nop
 800a296:	e7fe      	b.n	800a296 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	1ad2      	subs	r2, r2, r3
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2aa:	69b8      	ldr	r0, [r7, #24]
 800a2ac:	f000 f908 	bl	800a4c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2b0:	4b1d      	ldr	r3, [pc, #116]	; (800a328 <pvPortMalloc+0x188>)
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	4a1b      	ldr	r2, [pc, #108]	; (800a328 <pvPortMalloc+0x188>)
 800a2bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2be:	4b1a      	ldr	r3, [pc, #104]	; (800a328 <pvPortMalloc+0x188>)
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	4b1b      	ldr	r3, [pc, #108]	; (800a330 <pvPortMalloc+0x190>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d203      	bcs.n	800a2d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2ca:	4b17      	ldr	r3, [pc, #92]	; (800a328 <pvPortMalloc+0x188>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a18      	ldr	r2, [pc, #96]	; (800a330 <pvPortMalloc+0x190>)
 800a2d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d4:	685a      	ldr	r2, [r3, #4]
 800a2d6:	4b13      	ldr	r3, [pc, #76]	; (800a324 <pvPortMalloc+0x184>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	431a      	orrs	r2, r3
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a2e6:	4b13      	ldr	r3, [pc, #76]	; (800a334 <pvPortMalloc+0x194>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	4a11      	ldr	r2, [pc, #68]	; (800a334 <pvPortMalloc+0x194>)
 800a2ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2f0:	f001 fb78 	bl	800b9e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	f003 0307 	and.w	r3, r3, #7
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00a      	beq.n	800a314 <pvPortMalloc+0x174>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	60fb      	str	r3, [r7, #12]
}
 800a310:	bf00      	nop
 800a312:	e7fe      	b.n	800a312 <pvPortMalloc+0x172>
	return pvReturn;
 800a314:	69fb      	ldr	r3, [r7, #28]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3728      	adds	r7, #40	; 0x28
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	20004904 	.word	0x20004904
 800a324:	20004918 	.word	0x20004918
 800a328:	20004908 	.word	0x20004908
 800a32c:	200048fc 	.word	0x200048fc
 800a330:	2000490c 	.word	0x2000490c
 800a334:	20004910 	.word	0x20004910

0800a338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d04d      	beq.n	800a3e6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a34a:	2308      	movs	r3, #8
 800a34c:	425b      	negs	r3, r3
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	4413      	add	r3, r2
 800a352:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	4b24      	ldr	r3, [pc, #144]	; (800a3f0 <vPortFree+0xb8>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4013      	ands	r3, r2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10a      	bne.n	800a37c <vPortFree+0x44>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	60fb      	str	r3, [r7, #12]
}
 800a378:	bf00      	nop
 800a37a:	e7fe      	b.n	800a37a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00a      	beq.n	800a39a <vPortFree+0x62>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	60bb      	str	r3, [r7, #8]
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	4b14      	ldr	r3, [pc, #80]	; (800a3f0 <vPortFree+0xb8>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d01e      	beq.n	800a3e6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d11a      	bne.n	800a3e6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	4b0e      	ldr	r3, [pc, #56]	; (800a3f0 <vPortFree+0xb8>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	43db      	mvns	r3, r3
 800a3ba:	401a      	ands	r2, r3
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a3c0:	f001 fb02 	bl	800b9c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	4b0a      	ldr	r3, [pc, #40]	; (800a3f4 <vPortFree+0xbc>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	4a09      	ldr	r2, [pc, #36]	; (800a3f4 <vPortFree+0xbc>)
 800a3d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a3d2:	6938      	ldr	r0, [r7, #16]
 800a3d4:	f000 f874 	bl	800a4c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a3d8:	4b07      	ldr	r3, [pc, #28]	; (800a3f8 <vPortFree+0xc0>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	4a06      	ldr	r2, [pc, #24]	; (800a3f8 <vPortFree+0xc0>)
 800a3e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a3e2:	f001 faff 	bl	800b9e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a3e6:	bf00      	nop
 800a3e8:	3718      	adds	r7, #24
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20004918 	.word	0x20004918
 800a3f4:	20004908 	.word	0x20004908
 800a3f8:	20004914 	.word	0x20004914

0800a3fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a402:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a406:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a408:	4b27      	ldr	r3, [pc, #156]	; (800a4a8 <prvHeapInit+0xac>)
 800a40a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f003 0307 	and.w	r3, r3, #7
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00c      	beq.n	800a430 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	3307      	adds	r3, #7
 800a41a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f023 0307 	bic.w	r3, r3, #7
 800a422:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	4a1f      	ldr	r2, [pc, #124]	; (800a4a8 <prvHeapInit+0xac>)
 800a42c:	4413      	add	r3, r2
 800a42e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a434:	4a1d      	ldr	r2, [pc, #116]	; (800a4ac <prvHeapInit+0xb0>)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a43a:	4b1c      	ldr	r3, [pc, #112]	; (800a4ac <prvHeapInit+0xb0>)
 800a43c:	2200      	movs	r2, #0
 800a43e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	4413      	add	r3, r2
 800a446:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a448:	2208      	movs	r2, #8
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	1a9b      	subs	r3, r3, r2
 800a44e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f023 0307 	bic.w	r3, r3, #7
 800a456:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	4a15      	ldr	r2, [pc, #84]	; (800a4b0 <prvHeapInit+0xb4>)
 800a45c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a45e:	4b14      	ldr	r3, [pc, #80]	; (800a4b0 <prvHeapInit+0xb4>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2200      	movs	r2, #0
 800a464:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a466:	4b12      	ldr	r3, [pc, #72]	; (800a4b0 <prvHeapInit+0xb4>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2200      	movs	r2, #0
 800a46c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	68fa      	ldr	r2, [r7, #12]
 800a476:	1ad2      	subs	r2, r2, r3
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a47c:	4b0c      	ldr	r3, [pc, #48]	; (800a4b0 <prvHeapInit+0xb4>)
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	4a0a      	ldr	r2, [pc, #40]	; (800a4b4 <prvHeapInit+0xb8>)
 800a48a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	4a09      	ldr	r2, [pc, #36]	; (800a4b8 <prvHeapInit+0xbc>)
 800a492:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a494:	4b09      	ldr	r3, [pc, #36]	; (800a4bc <prvHeapInit+0xc0>)
 800a496:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a49a:	601a      	str	r2, [r3, #0]
}
 800a49c:	bf00      	nop
 800a49e:	3714      	adds	r7, #20
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr
 800a4a8:	20000cfc 	.word	0x20000cfc
 800a4ac:	200048fc 	.word	0x200048fc
 800a4b0:	20004904 	.word	0x20004904
 800a4b4:	2000490c 	.word	0x2000490c
 800a4b8:	20004908 	.word	0x20004908
 800a4bc:	20004918 	.word	0x20004918

0800a4c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a4c8:	4b28      	ldr	r3, [pc, #160]	; (800a56c <prvInsertBlockIntoFreeList+0xac>)
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	e002      	b.n	800a4d4 <prvInsertBlockIntoFreeList+0x14>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d8f7      	bhi.n	800a4ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d108      	bne.n	800a502 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	441a      	add	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	441a      	add	r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	429a      	cmp	r2, r3
 800a514:	d118      	bne.n	800a548 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	4b15      	ldr	r3, [pc, #84]	; (800a570 <prvInsertBlockIntoFreeList+0xb0>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d00d      	beq.n	800a53e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	441a      	add	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	601a      	str	r2, [r3, #0]
 800a53c:	e008      	b.n	800a550 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a53e:	4b0c      	ldr	r3, [pc, #48]	; (800a570 <prvInsertBlockIntoFreeList+0xb0>)
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	e003      	b.n	800a550 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	429a      	cmp	r2, r3
 800a556:	d002      	beq.n	800a55e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a55e:	bf00      	nop
 800a560:	3714      	adds	r7, #20
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	200048fc 	.word	0x200048fc
 800a570:	20004904 	.word	0x20004904

0800a574 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f103 0208 	add.w	r2, r3, #8
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	f04f 32ff 	mov.w	r2, #4294967295
 800a58c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f103 0208 	add.w	r2, r3, #8
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f103 0208 	add.w	r2, r3, #8
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5a8:	bf00      	nop
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a5c2:	bf00      	nop
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b085      	sub	sp, #20
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	689a      	ldr	r2, [r3, #8]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	689b      	ldr	r3, [r3, #8]
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	601a      	str	r2, [r3, #0]
}
 800a60a:	bf00      	nop
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr

0800a616 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a616:	b480      	push	{r7}
 800a618:	b085      	sub	sp, #20
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62c:	d103      	bne.n	800a636 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	e00c      	b.n	800a650 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	3308      	adds	r3, #8
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	e002      	b.n	800a644 <vListInsert+0x2e>
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d2f6      	bcs.n	800a63e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	685a      	ldr	r2, [r3, #4]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	683a      	ldr	r2, [r7, #0]
 800a65e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	601a      	str	r2, [r3, #0]
}
 800a67c:	bf00      	nop
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	6892      	ldr	r2, [r2, #8]
 800a69e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	6852      	ldr	r2, [r2, #4]
 800a6a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d103      	bne.n	800a6bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	689a      	ldr	r2, [r3, #8]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	1e5a      	subs	r2, r3, #1
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	3b04      	subs	r3, #4
 800a6ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3b04      	subs	r3, #4
 800a6fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f023 0201 	bic.w	r2, r3, #1
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	3b04      	subs	r3, #4
 800a70a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a70c:	4a0c      	ldr	r2, [pc, #48]	; (800a740 <pxPortInitialiseStack+0x64>)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	3b14      	subs	r3, #20
 800a716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3b04      	subs	r3, #4
 800a722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f06f 0202 	mvn.w	r2, #2
 800a72a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	3b20      	subs	r3, #32
 800a730:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a732:	68fb      	ldr	r3, [r7, #12]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3714      	adds	r7, #20
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	0800a745 	.word	0x0800a745

0800a744 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a74e:	4b12      	ldr	r3, [pc, #72]	; (800a798 <prvTaskExitError+0x54>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a756:	d00a      	beq.n	800a76e <prvTaskExitError+0x2a>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	60fb      	str	r3, [r7, #12]
}
 800a76a:	bf00      	nop
 800a76c:	e7fe      	b.n	800a76c <prvTaskExitError+0x28>
	__asm volatile
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	60bb      	str	r3, [r7, #8]
}
 800a780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a782:	bf00      	nop
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d0fc      	beq.n	800a784 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	20000088 	.word	0x20000088
 800a79c:	00000000 	.word	0x00000000

0800a7a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7a0:	4b07      	ldr	r3, [pc, #28]	; (800a7c0 <pxCurrentTCBConst2>)
 800a7a2:	6819      	ldr	r1, [r3, #0]
 800a7a4:	6808      	ldr	r0, [r1, #0]
 800a7a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7aa:	f380 8809 	msr	PSP, r0
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f04f 0000 	mov.w	r0, #0
 800a7b6:	f380 8811 	msr	BASEPRI, r0
 800a7ba:	4770      	bx	lr
 800a7bc:	f3af 8000 	nop.w

0800a7c0 <pxCurrentTCBConst2>:
 800a7c0:	20004964 	.word	0x20004964
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7c4:	bf00      	nop
 800a7c6:	bf00      	nop

0800a7c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7c8:	4808      	ldr	r0, [pc, #32]	; (800a7ec <prvPortStartFirstTask+0x24>)
 800a7ca:	6800      	ldr	r0, [r0, #0]
 800a7cc:	6800      	ldr	r0, [r0, #0]
 800a7ce:	f380 8808 	msr	MSP, r0
 800a7d2:	f04f 0000 	mov.w	r0, #0
 800a7d6:	f380 8814 	msr	CONTROL, r0
 800a7da:	b662      	cpsie	i
 800a7dc:	b661      	cpsie	f
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	df00      	svc	0
 800a7e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7ea:	bf00      	nop
 800a7ec:	e000ed08 	.word	0xe000ed08

0800a7f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7f6:	4b46      	ldr	r3, [pc, #280]	; (800a910 <xPortStartScheduler+0x120>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a46      	ldr	r2, [pc, #280]	; (800a914 <xPortStartScheduler+0x124>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d10a      	bne.n	800a816 <xPortStartScheduler+0x26>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	613b      	str	r3, [r7, #16]
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a816:	4b3e      	ldr	r3, [pc, #248]	; (800a910 <xPortStartScheduler+0x120>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a3f      	ldr	r2, [pc, #252]	; (800a918 <xPortStartScheduler+0x128>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d10a      	bne.n	800a836 <xPortStartScheduler+0x46>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	60fb      	str	r3, [r7, #12]
}
 800a832:	bf00      	nop
 800a834:	e7fe      	b.n	800a834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a836:	4b39      	ldr	r3, [pc, #228]	; (800a91c <xPortStartScheduler+0x12c>)
 800a838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	22ff      	movs	r2, #255	; 0xff
 800a846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a850:	78fb      	ldrb	r3, [r7, #3]
 800a852:	b2db      	uxtb	r3, r3
 800a854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	4b31      	ldr	r3, [pc, #196]	; (800a920 <xPortStartScheduler+0x130>)
 800a85c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a85e:	4b31      	ldr	r3, [pc, #196]	; (800a924 <xPortStartScheduler+0x134>)
 800a860:	2207      	movs	r2, #7
 800a862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a864:	e009      	b.n	800a87a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a866:	4b2f      	ldr	r3, [pc, #188]	; (800a924 <xPortStartScheduler+0x134>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	4a2d      	ldr	r2, [pc, #180]	; (800a924 <xPortStartScheduler+0x134>)
 800a86e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	b2db      	uxtb	r3, r3
 800a874:	005b      	lsls	r3, r3, #1
 800a876:	b2db      	uxtb	r3, r3
 800a878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a87a:	78fb      	ldrb	r3, [r7, #3]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a882:	2b80      	cmp	r3, #128	; 0x80
 800a884:	d0ef      	beq.n	800a866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a886:	4b27      	ldr	r3, [pc, #156]	; (800a924 <xPortStartScheduler+0x134>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f1c3 0307 	rsb	r3, r3, #7
 800a88e:	2b04      	cmp	r3, #4
 800a890:	d00a      	beq.n	800a8a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	60bb      	str	r3, [r7, #8]
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8a8:	4b1e      	ldr	r3, [pc, #120]	; (800a924 <xPortStartScheduler+0x134>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	4a1d      	ldr	r2, [pc, #116]	; (800a924 <xPortStartScheduler+0x134>)
 800a8b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8b2:	4b1c      	ldr	r3, [pc, #112]	; (800a924 <xPortStartScheduler+0x134>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8ba:	4a1a      	ldr	r2, [pc, #104]	; (800a924 <xPortStartScheduler+0x134>)
 800a8bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8c6:	4b18      	ldr	r3, [pc, #96]	; (800a928 <xPortStartScheduler+0x138>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a17      	ldr	r2, [pc, #92]	; (800a928 <xPortStartScheduler+0x138>)
 800a8cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8d2:	4b15      	ldr	r3, [pc, #84]	; (800a928 <xPortStartScheduler+0x138>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a14      	ldr	r2, [pc, #80]	; (800a928 <xPortStartScheduler+0x138>)
 800a8d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8de:	f000 f8dd 	bl	800aa9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8e2:	4b12      	ldr	r3, [pc, #72]	; (800a92c <xPortStartScheduler+0x13c>)
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8e8:	f000 f8fc 	bl	800aae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8ec:	4b10      	ldr	r3, [pc, #64]	; (800a930 <xPortStartScheduler+0x140>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a0f      	ldr	r2, [pc, #60]	; (800a930 <xPortStartScheduler+0x140>)
 800a8f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8f8:	f7ff ff66 	bl	800a7c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8fc:	f001 f9da 	bl	800bcb4 <vTaskSwitchContext>
	prvTaskExitError();
 800a900:	f7ff ff20 	bl	800a744 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3718      	adds	r7, #24
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	e000ed00 	.word	0xe000ed00
 800a914:	410fc271 	.word	0x410fc271
 800a918:	410fc270 	.word	0x410fc270
 800a91c:	e000e400 	.word	0xe000e400
 800a920:	2000491c 	.word	0x2000491c
 800a924:	20004920 	.word	0x20004920
 800a928:	e000ed20 	.word	0xe000ed20
 800a92c:	20000088 	.word	0x20000088
 800a930:	e000ef34 	.word	0xe000ef34

0800a934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	607b      	str	r3, [r7, #4]
}
 800a94c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a94e:	4b0f      	ldr	r3, [pc, #60]	; (800a98c <vPortEnterCritical+0x58>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	4a0d      	ldr	r2, [pc, #52]	; (800a98c <vPortEnterCritical+0x58>)
 800a956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a958:	4b0c      	ldr	r3, [pc, #48]	; (800a98c <vPortEnterCritical+0x58>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d10f      	bne.n	800a980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a960:	4b0b      	ldr	r3, [pc, #44]	; (800a990 <vPortEnterCritical+0x5c>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00a      	beq.n	800a980 <vPortEnterCritical+0x4c>
	__asm volatile
 800a96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96e:	f383 8811 	msr	BASEPRI, r3
 800a972:	f3bf 8f6f 	isb	sy
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	603b      	str	r3, [r7, #0]
}
 800a97c:	bf00      	nop
 800a97e:	e7fe      	b.n	800a97e <vPortEnterCritical+0x4a>
	}
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	20000088 	.word	0x20000088
 800a990:	e000ed04 	.word	0xe000ed04

0800a994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a99a:	4b12      	ldr	r3, [pc, #72]	; (800a9e4 <vPortExitCritical+0x50>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10a      	bne.n	800a9b8 <vPortExitCritical+0x24>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	607b      	str	r3, [r7, #4]
}
 800a9b4:	bf00      	nop
 800a9b6:	e7fe      	b.n	800a9b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9b8:	4b0a      	ldr	r3, [pc, #40]	; (800a9e4 <vPortExitCritical+0x50>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	4a09      	ldr	r2, [pc, #36]	; (800a9e4 <vPortExitCritical+0x50>)
 800a9c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9c2:	4b08      	ldr	r3, [pc, #32]	; (800a9e4 <vPortExitCritical+0x50>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d105      	bne.n	800a9d6 <vPortExitCritical+0x42>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a9d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9d6:	bf00      	nop
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	20000088 	.word	0x20000088
	...

0800a9f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9f0:	f3ef 8009 	mrs	r0, PSP
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	4b15      	ldr	r3, [pc, #84]	; (800aa50 <pxCurrentTCBConst>)
 800a9fa:	681a      	ldr	r2, [r3, #0]
 800a9fc:	f01e 0f10 	tst.w	lr, #16
 800aa00:	bf08      	it	eq
 800aa02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa0a:	6010      	str	r0, [r2, #0]
 800aa0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa14:	f380 8811 	msr	BASEPRI, r0
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f001 f948 	bl	800bcb4 <vTaskSwitchContext>
 800aa24:	f04f 0000 	mov.w	r0, #0
 800aa28:	f380 8811 	msr	BASEPRI, r0
 800aa2c:	bc09      	pop	{r0, r3}
 800aa2e:	6819      	ldr	r1, [r3, #0]
 800aa30:	6808      	ldr	r0, [r1, #0]
 800aa32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa36:	f01e 0f10 	tst.w	lr, #16
 800aa3a:	bf08      	it	eq
 800aa3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa40:	f380 8809 	msr	PSP, r0
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	f3af 8000 	nop.w

0800aa50 <pxCurrentTCBConst>:
 800aa50:	20004964 	.word	0x20004964
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa54:	bf00      	nop
 800aa56:	bf00      	nop

0800aa58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	607b      	str	r3, [r7, #4]
}
 800aa70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa72:	f001 f865 	bl	800bb40 <xTaskIncrementTick>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d003      	beq.n	800aa84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa7c:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <xPortSysTickHandler+0x40>)
 800aa7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	2300      	movs	r3, #0
 800aa86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	f383 8811 	msr	BASEPRI, r3
}
 800aa8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	e000ed04 	.word	0xe000ed04

0800aa9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aaa0:	4b0b      	ldr	r3, [pc, #44]	; (800aad0 <vPortSetupTimerInterrupt+0x34>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aaa6:	4b0b      	ldr	r3, [pc, #44]	; (800aad4 <vPortSetupTimerInterrupt+0x38>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aaac:	4b0a      	ldr	r3, [pc, #40]	; (800aad8 <vPortSetupTimerInterrupt+0x3c>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a0a      	ldr	r2, [pc, #40]	; (800aadc <vPortSetupTimerInterrupt+0x40>)
 800aab2:	fba2 2303 	umull	r2, r3, r2, r3
 800aab6:	099b      	lsrs	r3, r3, #6
 800aab8:	4a09      	ldr	r2, [pc, #36]	; (800aae0 <vPortSetupTimerInterrupt+0x44>)
 800aaba:	3b01      	subs	r3, #1
 800aabc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aabe:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <vPortSetupTimerInterrupt+0x34>)
 800aac0:	2207      	movs	r2, #7
 800aac2:	601a      	str	r2, [r3, #0]
}
 800aac4:	bf00      	nop
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	e000e010 	.word	0xe000e010
 800aad4:	e000e018 	.word	0xe000e018
 800aad8:	20000000 	.word	0x20000000
 800aadc:	10624dd3 	.word	0x10624dd3
 800aae0:	e000e014 	.word	0xe000e014

0800aae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aaf4 <vPortEnableVFP+0x10>
 800aae8:	6801      	ldr	r1, [r0, #0]
 800aaea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aaee:	6001      	str	r1, [r0, #0]
 800aaf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aaf2:	bf00      	nop
 800aaf4:	e000ed88 	.word	0xe000ed88

0800aaf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aafe:	f3ef 8305 	mrs	r3, IPSR
 800ab02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2b0f      	cmp	r3, #15
 800ab08:	d914      	bls.n	800ab34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab0a:	4a17      	ldr	r2, [pc, #92]	; (800ab68 <vPortValidateInterruptPriority+0x70>)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab14:	4b15      	ldr	r3, [pc, #84]	; (800ab6c <vPortValidateInterruptPriority+0x74>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	7afa      	ldrb	r2, [r7, #11]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d20a      	bcs.n	800ab34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	607b      	str	r3, [r7, #4]
}
 800ab30:	bf00      	nop
 800ab32:	e7fe      	b.n	800ab32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab34:	4b0e      	ldr	r3, [pc, #56]	; (800ab70 <vPortValidateInterruptPriority+0x78>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab3c:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <vPortValidateInterruptPriority+0x7c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d90a      	bls.n	800ab5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	603b      	str	r3, [r7, #0]
}
 800ab56:	bf00      	nop
 800ab58:	e7fe      	b.n	800ab58 <vPortValidateInterruptPriority+0x60>
	}
 800ab5a:	bf00      	nop
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	e000e3f0 	.word	0xe000e3f0
 800ab6c:	2000491c 	.word	0x2000491c
 800ab70:	e000ed0c 	.word	0xe000ed0c
 800ab74:	20004920 	.word	0x20004920

0800ab78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10a      	bne.n	800aba2 <xQueueGenericReset+0x2a>
	__asm volatile
 800ab8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	60bb      	str	r3, [r7, #8]
}
 800ab9e:	bf00      	nop
 800aba0:	e7fe      	b.n	800aba0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aba2:	f7ff fec7 	bl	800a934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abae:	68f9      	ldr	r1, [r7, #12]
 800abb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abb2:	fb01 f303 	mul.w	r3, r1, r3
 800abb6:	441a      	add	r2, r3
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd2:	3b01      	subs	r3, #1
 800abd4:	68f9      	ldr	r1, [r7, #12]
 800abd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abd8:	fb01 f303 	mul.w	r3, r1, r3
 800abdc:	441a      	add	r2, r3
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	22ff      	movs	r2, #255	; 0xff
 800abe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	22ff      	movs	r2, #255	; 0xff
 800abee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d114      	bne.n	800ac22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d01a      	beq.n	800ac36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3310      	adds	r3, #16
 800ac04:	4618      	mov	r0, r3
 800ac06:	f001 f903 	bl	800be10 <xTaskRemoveFromEventList>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d012      	beq.n	800ac36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac10:	4b0c      	ldr	r3, [pc, #48]	; (800ac44 <xQueueGenericReset+0xcc>)
 800ac12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	e009      	b.n	800ac36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3310      	adds	r3, #16
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7ff fca4 	bl	800a574 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	3324      	adds	r3, #36	; 0x24
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7ff fc9f 	bl	800a574 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac36:	f7ff fead 	bl	800a994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac3a:	2301      	movs	r3, #1
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	e000ed04 	.word	0xe000ed04

0800ac48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b08e      	sub	sp, #56	; 0x38
 800ac4c:	af02      	add	r7, sp, #8
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10a      	bne.n	800ac72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac60:	f383 8811 	msr	BASEPRI, r3
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac6e:	bf00      	nop
 800ac70:	e7fe      	b.n	800ac70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10a      	bne.n	800ac8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac8a:	bf00      	nop
 800ac8c:	e7fe      	b.n	800ac8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <xQueueGenericCreateStatic+0x52>
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <xQueueGenericCreateStatic+0x56>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e000      	b.n	800aca0 <xQueueGenericCreateStatic+0x58>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10a      	bne.n	800acba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	623b      	str	r3, [r7, #32]
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d102      	bne.n	800acc6 <xQueueGenericCreateStatic+0x7e>
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d101      	bne.n	800acca <xQueueGenericCreateStatic+0x82>
 800acc6:	2301      	movs	r3, #1
 800acc8:	e000      	b.n	800accc <xQueueGenericCreateStatic+0x84>
 800acca:	2300      	movs	r3, #0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10a      	bne.n	800ace6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800acd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd4:	f383 8811 	msr	BASEPRI, r3
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	f3bf 8f4f 	dsb	sy
 800ace0:	61fb      	str	r3, [r7, #28]
}
 800ace2:	bf00      	nop
 800ace4:	e7fe      	b.n	800ace4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ace6:	2350      	movs	r3, #80	; 0x50
 800ace8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	2b50      	cmp	r3, #80	; 0x50
 800acee:	d00a      	beq.n	800ad06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800acf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	61bb      	str	r3, [r7, #24]
}
 800ad02:	bf00      	nop
 800ad04:	e7fe      	b.n	800ad04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ad0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00d      	beq.n	800ad2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ad1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad20:	9300      	str	r3, [sp, #0]
 800ad22:	4613      	mov	r3, r2
 800ad24:	687a      	ldr	r2, [r7, #4]
 800ad26:	68b9      	ldr	r1, [r7, #8]
 800ad28:	68f8      	ldr	r0, [r7, #12]
 800ad2a:	f000 f805 	bl	800ad38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3730      	adds	r7, #48	; 0x30
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	607a      	str	r2, [r7, #4]
 800ad44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d103      	bne.n	800ad54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	69ba      	ldr	r2, [r7, #24]
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	e002      	b.n	800ad5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	68ba      	ldr	r2, [r7, #8]
 800ad64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad66:	2101      	movs	r1, #1
 800ad68:	69b8      	ldr	r0, [r7, #24]
 800ad6a:	f7ff ff05 	bl	800ab78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	78fa      	ldrb	r2, [r7, #3]
 800ad72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad76:	bf00      	nop
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
	...

0800ad80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08e      	sub	sp, #56	; 0x38
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10a      	bne.n	800adb2 <xQueueGenericSend+0x32>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800adae:	bf00      	nop
 800adb0:	e7fe      	b.n	800adb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d103      	bne.n	800adc0 <xQueueGenericSend+0x40>
 800adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d101      	bne.n	800adc4 <xQueueGenericSend+0x44>
 800adc0:	2301      	movs	r3, #1
 800adc2:	e000      	b.n	800adc6 <xQueueGenericSend+0x46>
 800adc4:	2300      	movs	r3, #0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d10a      	bne.n	800ade0 <xQueueGenericSend+0x60>
	__asm volatile
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	627b      	str	r3, [r7, #36]	; 0x24
}
 800addc:	bf00      	nop
 800adde:	e7fe      	b.n	800adde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	2b02      	cmp	r3, #2
 800ade4:	d103      	bne.n	800adee <xQueueGenericSend+0x6e>
 800ade6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adea:	2b01      	cmp	r3, #1
 800adec:	d101      	bne.n	800adf2 <xQueueGenericSend+0x72>
 800adee:	2301      	movs	r3, #1
 800adf0:	e000      	b.n	800adf4 <xQueueGenericSend+0x74>
 800adf2:	2300      	movs	r3, #0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10a      	bne.n	800ae0e <xQueueGenericSend+0x8e>
	__asm volatile
 800adf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfc:	f383 8811 	msr	BASEPRI, r3
 800ae00:	f3bf 8f6f 	isb	sy
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	623b      	str	r3, [r7, #32]
}
 800ae0a:	bf00      	nop
 800ae0c:	e7fe      	b.n	800ae0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae0e:	f001 f9bd 	bl	800c18c <xTaskGetSchedulerState>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d102      	bne.n	800ae1e <xQueueGenericSend+0x9e>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <xQueueGenericSend+0xa2>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e000      	b.n	800ae24 <xQueueGenericSend+0xa4>
 800ae22:	2300      	movs	r3, #0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d10a      	bne.n	800ae3e <xQueueGenericSend+0xbe>
	__asm volatile
 800ae28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2c:	f383 8811 	msr	BASEPRI, r3
 800ae30:	f3bf 8f6f 	isb	sy
 800ae34:	f3bf 8f4f 	dsb	sy
 800ae38:	61fb      	str	r3, [r7, #28]
}
 800ae3a:	bf00      	nop
 800ae3c:	e7fe      	b.n	800ae3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae3e:	f7ff fd79 	bl	800a934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d302      	bcc.n	800ae54 <xQueueGenericSend+0xd4>
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d129      	bne.n	800aea8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae54:	683a      	ldr	r2, [r7, #0]
 800ae56:	68b9      	ldr	r1, [r7, #8]
 800ae58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae5a:	f000 fa0b 	bl	800b274 <prvCopyDataToQueue>
 800ae5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d010      	beq.n	800ae8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	3324      	adds	r3, #36	; 0x24
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f000 ffcf 	bl	800be10 <xTaskRemoveFromEventList>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d013      	beq.n	800aea0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae78:	4b3f      	ldr	r3, [pc, #252]	; (800af78 <xQueueGenericSend+0x1f8>)
 800ae7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae7e:	601a      	str	r2, [r3, #0]
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	e00a      	b.n	800aea0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d007      	beq.n	800aea0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae90:	4b39      	ldr	r3, [pc, #228]	; (800af78 <xQueueGenericSend+0x1f8>)
 800ae92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae96:	601a      	str	r2, [r3, #0]
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aea0:	f7ff fd78 	bl	800a994 <vPortExitCritical>
				return pdPASS;
 800aea4:	2301      	movs	r3, #1
 800aea6:	e063      	b.n	800af70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d103      	bne.n	800aeb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aeae:	f7ff fd71 	bl	800a994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	e05c      	b.n	800af70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aeb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d106      	bne.n	800aeca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aebc:	f107 0314 	add.w	r3, r7, #20
 800aec0:	4618      	mov	r0, r3
 800aec2:	f001 f809 	bl	800bed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aec6:	2301      	movs	r3, #1
 800aec8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aeca:	f7ff fd63 	bl	800a994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aece:	f000 fd7b 	bl	800b9c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aed2:	f7ff fd2f 	bl	800a934 <vPortEnterCritical>
 800aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aedc:	b25b      	sxtb	r3, r3
 800aede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee2:	d103      	bne.n	800aeec <xQueueGenericSend+0x16c>
 800aee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee6:	2200      	movs	r2, #0
 800aee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aeec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aef2:	b25b      	sxtb	r3, r3
 800aef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef8:	d103      	bne.n	800af02 <xQueueGenericSend+0x182>
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af02:	f7ff fd47 	bl	800a994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af06:	1d3a      	adds	r2, r7, #4
 800af08:	f107 0314 	add.w	r3, r7, #20
 800af0c:	4611      	mov	r1, r2
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 fff8 	bl	800bf04 <xTaskCheckForTimeOut>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	d124      	bne.n	800af64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af1c:	f000 faa2 	bl	800b464 <prvIsQueueFull>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d018      	beq.n	800af58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	3310      	adds	r3, #16
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	4611      	mov	r1, r2
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 ff1e 	bl	800bd70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af36:	f000 fa2d 	bl	800b394 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af3a:	f000 fd53 	bl	800b9e4 <xTaskResumeAll>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	f47f af7c 	bne.w	800ae3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af46:	4b0c      	ldr	r3, [pc, #48]	; (800af78 <xQueueGenericSend+0x1f8>)
 800af48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	e772      	b.n	800ae3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af5a:	f000 fa1b 	bl	800b394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af5e:	f000 fd41 	bl	800b9e4 <xTaskResumeAll>
 800af62:	e76c      	b.n	800ae3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af66:	f000 fa15 	bl	800b394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af6a:	f000 fd3b 	bl	800b9e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af70:	4618      	mov	r0, r3
 800af72:	3738      	adds	r7, #56	; 0x38
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	e000ed04 	.word	0xe000ed04

0800af7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b090      	sub	sp, #64	; 0x40
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
 800af88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800af8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10a      	bne.n	800afaa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af98:	f383 8811 	msr	BASEPRI, r3
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800afa6:	bf00      	nop
 800afa8:	e7fe      	b.n	800afa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d103      	bne.n	800afb8 <xQueueGenericSendFromISR+0x3c>
 800afb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d101      	bne.n	800afbc <xQueueGenericSendFromISR+0x40>
 800afb8:	2301      	movs	r3, #1
 800afba:	e000      	b.n	800afbe <xQueueGenericSendFromISR+0x42>
 800afbc:	2300      	movs	r3, #0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10a      	bne.n	800afd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afd4:	bf00      	nop
 800afd6:	e7fe      	b.n	800afd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d103      	bne.n	800afe6 <xQueueGenericSendFromISR+0x6a>
 800afde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe2:	2b01      	cmp	r3, #1
 800afe4:	d101      	bne.n	800afea <xQueueGenericSendFromISR+0x6e>
 800afe6:	2301      	movs	r3, #1
 800afe8:	e000      	b.n	800afec <xQueueGenericSendFromISR+0x70>
 800afea:	2300      	movs	r3, #0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d10a      	bne.n	800b006 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	623b      	str	r3, [r7, #32]
}
 800b002:	bf00      	nop
 800b004:	e7fe      	b.n	800b004 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b006:	f7ff fd77 	bl	800aaf8 <vPortValidateInterruptPriority>
	__asm volatile
 800b00a:	f3ef 8211 	mrs	r2, BASEPRI
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	61fa      	str	r2, [r7, #28]
 800b020:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b022:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b024:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b02e:	429a      	cmp	r2, r3
 800b030:	d302      	bcc.n	800b038 <xQueueGenericSendFromISR+0xbc>
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	2b02      	cmp	r3, #2
 800b036:	d12f      	bne.n	800b098 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b046:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	68b9      	ldr	r1, [r7, #8]
 800b04c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b04e:	f000 f911 	bl	800b274 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b052:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b05a:	d112      	bne.n	800b082 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b060:	2b00      	cmp	r3, #0
 800b062:	d016      	beq.n	800b092 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b066:	3324      	adds	r3, #36	; 0x24
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 fed1 	bl	800be10 <xTaskRemoveFromEventList>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00e      	beq.n	800b092 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00b      	beq.n	800b092 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	601a      	str	r2, [r3, #0]
 800b080:	e007      	b.n	800b092 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b082:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b086:	3301      	adds	r3, #1
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	b25a      	sxtb	r2, r3
 800b08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b092:	2301      	movs	r3, #1
 800b094:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b096:	e001      	b.n	800b09c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b098:	2300      	movs	r3, #0
 800b09a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b09e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	f383 8811 	msr	BASEPRI, r3
}
 800b0a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3740      	adds	r7, #64	; 0x40
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08c      	sub	sp, #48	; 0x30
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10a      	bne.n	800b0e4 <xQueueReceive+0x30>
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	f383 8811 	msr	BASEPRI, r3
 800b0d6:	f3bf 8f6f 	isb	sy
 800b0da:	f3bf 8f4f 	dsb	sy
 800b0de:	623b      	str	r3, [r7, #32]
}
 800b0e0:	bf00      	nop
 800b0e2:	e7fe      	b.n	800b0e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d103      	bne.n	800b0f2 <xQueueReceive+0x3e>
 800b0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d101      	bne.n	800b0f6 <xQueueReceive+0x42>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e000      	b.n	800b0f8 <xQueueReceive+0x44>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d10a      	bne.n	800b112 <xQueueReceive+0x5e>
	__asm volatile
 800b0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b100:	f383 8811 	msr	BASEPRI, r3
 800b104:	f3bf 8f6f 	isb	sy
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	61fb      	str	r3, [r7, #28]
}
 800b10e:	bf00      	nop
 800b110:	e7fe      	b.n	800b110 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b112:	f001 f83b 	bl	800c18c <xTaskGetSchedulerState>
 800b116:	4603      	mov	r3, r0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d102      	bne.n	800b122 <xQueueReceive+0x6e>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d101      	bne.n	800b126 <xQueueReceive+0x72>
 800b122:	2301      	movs	r3, #1
 800b124:	e000      	b.n	800b128 <xQueueReceive+0x74>
 800b126:	2300      	movs	r3, #0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10a      	bne.n	800b142 <xQueueReceive+0x8e>
	__asm volatile
 800b12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b130:	f383 8811 	msr	BASEPRI, r3
 800b134:	f3bf 8f6f 	isb	sy
 800b138:	f3bf 8f4f 	dsb	sy
 800b13c:	61bb      	str	r3, [r7, #24]
}
 800b13e:	bf00      	nop
 800b140:	e7fe      	b.n	800b140 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b142:	f7ff fbf7 	bl	800a934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d01f      	beq.n	800b192 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b152:	68b9      	ldr	r1, [r7, #8]
 800b154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b156:	f000 f8f7 	bl	800b348 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15c:	1e5a      	subs	r2, r3, #1
 800b15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b160:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00f      	beq.n	800b18a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16c:	3310      	adds	r3, #16
 800b16e:	4618      	mov	r0, r3
 800b170:	f000 fe4e 	bl	800be10 <xTaskRemoveFromEventList>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d007      	beq.n	800b18a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b17a:	4b3d      	ldr	r3, [pc, #244]	; (800b270 <xQueueReceive+0x1bc>)
 800b17c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b180:	601a      	str	r2, [r3, #0]
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b18a:	f7ff fc03 	bl	800a994 <vPortExitCritical>
				return pdPASS;
 800b18e:	2301      	movs	r3, #1
 800b190:	e069      	b.n	800b266 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d103      	bne.n	800b1a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b198:	f7ff fbfc 	bl	800a994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b19c:	2300      	movs	r3, #0
 800b19e:	e062      	b.n	800b266 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d106      	bne.n	800b1b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1a6:	f107 0310 	add.w	r3, r7, #16
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fe94 	bl	800bed8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1b4:	f7ff fbee 	bl	800a994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1b8:	f000 fc06 	bl	800b9c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1bc:	f7ff fbba 	bl	800a934 <vPortEnterCritical>
 800b1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1c6:	b25b      	sxtb	r3, r3
 800b1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1cc:	d103      	bne.n	800b1d6 <xQueueReceive+0x122>
 800b1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1dc:	b25b      	sxtb	r3, r3
 800b1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e2:	d103      	bne.n	800b1ec <xQueueReceive+0x138>
 800b1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1ec:	f7ff fbd2 	bl	800a994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b1f0:	1d3a      	adds	r2, r7, #4
 800b1f2:	f107 0310 	add.w	r3, r7, #16
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f000 fe83 	bl	800bf04 <xTaskCheckForTimeOut>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d123      	bne.n	800b24c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b206:	f000 f917 	bl	800b438 <prvIsQueueEmpty>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d017      	beq.n	800b240 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b212:	3324      	adds	r3, #36	; 0x24
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	4611      	mov	r1, r2
 800b218:	4618      	mov	r0, r3
 800b21a:	f000 fda9 	bl	800bd70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b21e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b220:	f000 f8b8 	bl	800b394 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b224:	f000 fbde 	bl	800b9e4 <xTaskResumeAll>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d189      	bne.n	800b142 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b22e:	4b10      	ldr	r3, [pc, #64]	; (800b270 <xQueueReceive+0x1bc>)
 800b230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	f3bf 8f4f 	dsb	sy
 800b23a:	f3bf 8f6f 	isb	sy
 800b23e:	e780      	b.n	800b142 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b242:	f000 f8a7 	bl	800b394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b246:	f000 fbcd 	bl	800b9e4 <xTaskResumeAll>
 800b24a:	e77a      	b.n	800b142 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b24c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b24e:	f000 f8a1 	bl	800b394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b252:	f000 fbc7 	bl	800b9e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b258:	f000 f8ee 	bl	800b438 <prvIsQueueEmpty>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f43f af6f 	beq.w	800b142 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b264:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b266:	4618      	mov	r0, r3
 800b268:	3730      	adds	r7, #48	; 0x30
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	e000ed04 	.word	0xe000ed04

0800b274 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b280:	2300      	movs	r3, #0
 800b282:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b288:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10d      	bne.n	800b2ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d14d      	bne.n	800b336 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 ff92 	bl	800c1c8 <xTaskPriorityDisinherit>
 800b2a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	609a      	str	r2, [r3, #8]
 800b2ac:	e043      	b.n	800b336 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d119      	bne.n	800b2e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6858      	ldr	r0, [r3, #4]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2bc:	461a      	mov	r2, r3
 800b2be:	68b9      	ldr	r1, [r7, #8]
 800b2c0:	f005 f87e 	bl	80103c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	685a      	ldr	r2, [r3, #4]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2cc:	441a      	add	r2, r3
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d32b      	bcc.n	800b336 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	605a      	str	r2, [r3, #4]
 800b2e6:	e026      	b.n	800b336 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	68d8      	ldr	r0, [r3, #12]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	68b9      	ldr	r1, [r7, #8]
 800b2f4:	f005 f864 	bl	80103c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	68da      	ldr	r2, [r3, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b300:	425b      	negs	r3, r3
 800b302:	441a      	add	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	68da      	ldr	r2, [r3, #12]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	429a      	cmp	r2, r3
 800b312:	d207      	bcs.n	800b324 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	689a      	ldr	r2, [r3, #8]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31c:	425b      	negs	r3, r3
 800b31e:	441a      	add	r2, r3
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b02      	cmp	r3, #2
 800b328:	d105      	bne.n	800b336 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	3b01      	subs	r3, #1
 800b334:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	1c5a      	adds	r2, r3, #1
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b33e:	697b      	ldr	r3, [r7, #20]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3718      	adds	r7, #24
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b356:	2b00      	cmp	r3, #0
 800b358:	d018      	beq.n	800b38c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	68da      	ldr	r2, [r3, #12]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b362:	441a      	add	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	68da      	ldr	r2, [r3, #12]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	429a      	cmp	r2, r3
 800b372:	d303      	bcc.n	800b37c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68d9      	ldr	r1, [r3, #12]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b384:	461a      	mov	r2, r3
 800b386:	6838      	ldr	r0, [r7, #0]
 800b388:	f005 f81a 	bl	80103c0 <memcpy>
	}
}
 800b38c:	bf00      	nop
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b39c:	f7ff faca 	bl	800a934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3a8:	e011      	b.n	800b3ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d012      	beq.n	800b3d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3324      	adds	r3, #36	; 0x24
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 fd2a 	bl	800be10 <xTaskRemoveFromEventList>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b3c2:	f000 fe01 	bl	800bfc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b3c6:	7bfb      	ldrb	r3, [r7, #15]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	dce9      	bgt.n	800b3aa <prvUnlockQueue+0x16>
 800b3d6:	e000      	b.n	800b3da <prvUnlockQueue+0x46>
					break;
 800b3d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	22ff      	movs	r2, #255	; 0xff
 800b3de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b3e2:	f7ff fad7 	bl	800a994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3e6:	f7ff faa5 	bl	800a934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3f2:	e011      	b.n	800b418 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	691b      	ldr	r3, [r3, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d012      	beq.n	800b422 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	3310      	adds	r3, #16
 800b400:	4618      	mov	r0, r3
 800b402:	f000 fd05 	bl	800be10 <xTaskRemoveFromEventList>
 800b406:	4603      	mov	r3, r0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d001      	beq.n	800b410 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b40c:	f000 fddc 	bl	800bfc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b410:	7bbb      	ldrb	r3, [r7, #14]
 800b412:	3b01      	subs	r3, #1
 800b414:	b2db      	uxtb	r3, r3
 800b416:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b418:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	dce9      	bgt.n	800b3f4 <prvUnlockQueue+0x60>
 800b420:	e000      	b.n	800b424 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b422:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	22ff      	movs	r2, #255	; 0xff
 800b428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b42c:	f7ff fab2 	bl	800a994 <vPortExitCritical>
}
 800b430:	bf00      	nop
 800b432:	3710      	adds	r7, #16
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b440:	f7ff fa78 	bl	800a934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d102      	bne.n	800b452 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b44c:	2301      	movs	r3, #1
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	e001      	b.n	800b456 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b452:	2300      	movs	r3, #0
 800b454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b456:	f7ff fa9d 	bl	800a994 <vPortExitCritical>

	return xReturn;
 800b45a:	68fb      	ldr	r3, [r7, #12]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b46c:	f7ff fa62 	bl	800a934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b478:	429a      	cmp	r2, r3
 800b47a:	d102      	bne.n	800b482 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b47c:	2301      	movs	r3, #1
 800b47e:	60fb      	str	r3, [r7, #12]
 800b480:	e001      	b.n	800b486 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b482:	2300      	movs	r3, #0
 800b484:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b486:	f7ff fa85 	bl	800a994 <vPortExitCritical>

	return xReturn;
 800b48a:	68fb      	ldr	r3, [r7, #12]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60fb      	str	r3, [r7, #12]
 800b4a2:	e014      	b.n	800b4ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b4a4:	4a0f      	ldr	r2, [pc, #60]	; (800b4e4 <vQueueAddToRegistry+0x50>)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10b      	bne.n	800b4c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b4b0:	490c      	ldr	r1, [pc, #48]	; (800b4e4 <vQueueAddToRegistry+0x50>)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	683a      	ldr	r2, [r7, #0]
 800b4b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b4ba:	4a0a      	ldr	r2, [pc, #40]	; (800b4e4 <vQueueAddToRegistry+0x50>)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	00db      	lsls	r3, r3, #3
 800b4c0:	4413      	add	r3, r2
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b4c6:	e006      	b.n	800b4d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	60fb      	str	r3, [r7, #12]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2b07      	cmp	r3, #7
 800b4d2:	d9e7      	bls.n	800b4a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b4d4:	bf00      	nop
 800b4d6:	bf00      	nop
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	20004924 	.word	0x20004924

0800b4e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b4f8:	f7ff fa1c 	bl	800a934 <vPortEnterCritical>
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b502:	b25b      	sxtb	r3, r3
 800b504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b508:	d103      	bne.n	800b512 <vQueueWaitForMessageRestricted+0x2a>
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b518:	b25b      	sxtb	r3, r3
 800b51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b51e:	d103      	bne.n	800b528 <vQueueWaitForMessageRestricted+0x40>
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b528:	f7ff fa34 	bl	800a994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b530:	2b00      	cmp	r3, #0
 800b532:	d106      	bne.n	800b542 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	3324      	adds	r3, #36	; 0x24
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	68b9      	ldr	r1, [r7, #8]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f000 fc3b 	bl	800bdb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b542:	6978      	ldr	r0, [r7, #20]
 800b544:	f7ff ff26 	bl	800b394 <prvUnlockQueue>
	}
 800b548:	bf00      	nop
 800b54a:	3718      	adds	r7, #24
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b550:	b580      	push	{r7, lr}
 800b552:	b08e      	sub	sp, #56	; 0x38
 800b554:	af04      	add	r7, sp, #16
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
 800b55c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10a      	bne.n	800b57a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	623b      	str	r3, [r7, #32]
}
 800b576:	bf00      	nop
 800b578:	e7fe      	b.n	800b578 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10a      	bne.n	800b596 <xTaskCreateStatic+0x46>
	__asm volatile
 800b580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	61fb      	str	r3, [r7, #28]
}
 800b592:	bf00      	nop
 800b594:	e7fe      	b.n	800b594 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b596:	235c      	movs	r3, #92	; 0x5c
 800b598:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	2b5c      	cmp	r3, #92	; 0x5c
 800b59e:	d00a      	beq.n	800b5b6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a4:	f383 8811 	msr	BASEPRI, r3
 800b5a8:	f3bf 8f6f 	isb	sy
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	61bb      	str	r3, [r7, #24]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b5b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d01e      	beq.n	800b5fc <xTaskCreateStatic+0xac>
 800b5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d01b      	beq.n	800b5fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d0:	2202      	movs	r2, #2
 800b5d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	9303      	str	r3, [sp, #12]
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	9302      	str	r3, [sp, #8]
 800b5de:	f107 0314 	add.w	r3, r7, #20
 800b5e2:	9301      	str	r3, [sp, #4]
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e6:	9300      	str	r3, [sp, #0]
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	68b9      	ldr	r1, [r7, #8]
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f000 f850 	bl	800b694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5f6:	f000 f8dd 	bl	800b7b4 <prvAddNewTaskToReadyList>
 800b5fa:	e001      	b.n	800b600 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b600:	697b      	ldr	r3, [r7, #20]
	}
 800b602:	4618      	mov	r0, r3
 800b604:	3728      	adds	r7, #40	; 0x28
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b08c      	sub	sp, #48	; 0x30
 800b60e:	af04      	add	r7, sp, #16
 800b610:	60f8      	str	r0, [r7, #12]
 800b612:	60b9      	str	r1, [r7, #8]
 800b614:	603b      	str	r3, [r7, #0]
 800b616:	4613      	mov	r3, r2
 800b618:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b61a:	88fb      	ldrh	r3, [r7, #6]
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fe fdbe 	bl	800a1a0 <pvPortMalloc>
 800b624:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00e      	beq.n	800b64a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b62c:	205c      	movs	r0, #92	; 0x5c
 800b62e:	f7fe fdb7 	bl	800a1a0 <pvPortMalloc>
 800b632:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d003      	beq.n	800b642 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	631a      	str	r2, [r3, #48]	; 0x30
 800b640:	e005      	b.n	800b64e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b642:	6978      	ldr	r0, [r7, #20]
 800b644:	f7fe fe78 	bl	800a338 <vPortFree>
 800b648:	e001      	b.n	800b64e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b64a:	2300      	movs	r3, #0
 800b64c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d017      	beq.n	800b684 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b65c:	88fa      	ldrh	r2, [r7, #6]
 800b65e:	2300      	movs	r3, #0
 800b660:	9303      	str	r3, [sp, #12]
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	9302      	str	r3, [sp, #8]
 800b666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b668:	9301      	str	r3, [sp, #4]
 800b66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	68b9      	ldr	r1, [r7, #8]
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f000 f80e 	bl	800b694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b678:	69f8      	ldr	r0, [r7, #28]
 800b67a:	f000 f89b 	bl	800b7b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b67e:	2301      	movs	r3, #1
 800b680:	61bb      	str	r3, [r7, #24]
 800b682:	e002      	b.n	800b68a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b684:	f04f 33ff 	mov.w	r3, #4294967295
 800b688:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b68a:	69bb      	ldr	r3, [r7, #24]
	}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3720      	adds	r7, #32
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b088      	sub	sp, #32
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
 800b6a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	21a5      	movs	r1, #165	; 0xa5
 800b6ae:	f004 fe08 	bl	80102c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	009b      	lsls	r3, r3, #2
 800b6c0:	4413      	add	r3, r2
 800b6c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	f023 0307 	bic.w	r3, r3, #7
 800b6ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	f003 0307 	and.w	r3, r3, #7
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00a      	beq.n	800b6ec <prvInitialiseNewTask+0x58>
	__asm volatile
 800b6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6da:	f383 8811 	msr	BASEPRI, r3
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f3bf 8f4f 	dsb	sy
 800b6e6:	617b      	str	r3, [r7, #20]
}
 800b6e8:	bf00      	nop
 800b6ea:	e7fe      	b.n	800b6ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d01f      	beq.n	800b732 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	61fb      	str	r3, [r7, #28]
 800b6f6:	e012      	b.n	800b71e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	7819      	ldrb	r1, [r3, #0]
 800b700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	4413      	add	r3, r2
 800b706:	3334      	adds	r3, #52	; 0x34
 800b708:	460a      	mov	r2, r1
 800b70a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b70c:	68ba      	ldr	r2, [r7, #8]
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	4413      	add	r3, r2
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d006      	beq.n	800b726 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	3301      	adds	r3, #1
 800b71c:	61fb      	str	r3, [r7, #28]
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	2b0f      	cmp	r3, #15
 800b722:	d9e9      	bls.n	800b6f8 <prvInitialiseNewTask+0x64>
 800b724:	e000      	b.n	800b728 <prvInitialiseNewTask+0x94>
			{
				break;
 800b726:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72a:	2200      	movs	r2, #0
 800b72c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b730:	e003      	b.n	800b73a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b734:	2200      	movs	r2, #0
 800b736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b73c:	2b37      	cmp	r3, #55	; 0x37
 800b73e:	d901      	bls.n	800b744 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b740:	2337      	movs	r3, #55	; 0x37
 800b742:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b748:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b74e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	2200      	movs	r2, #0
 800b754:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	3304      	adds	r3, #4
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7fe ff2a 	bl	800a5b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b762:	3318      	adds	r3, #24
 800b764:	4618      	mov	r0, r3
 800b766:	f7fe ff25 	bl	800a5b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b76e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b772:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b778:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b782:	2200      	movs	r2, #0
 800b784:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	68f9      	ldr	r1, [r7, #12]
 800b792:	69b8      	ldr	r0, [r7, #24]
 800b794:	f7fe ffa2 	bl	800a6dc <pxPortInitialiseStack>
 800b798:	4602      	mov	r2, r0
 800b79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7aa:	bf00      	nop
 800b7ac:	3720      	adds	r7, #32
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
	...

0800b7b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7bc:	f7ff f8ba 	bl	800a934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7c0:	4b2d      	ldr	r3, [pc, #180]	; (800b878 <prvAddNewTaskToReadyList+0xc4>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	4a2c      	ldr	r2, [pc, #176]	; (800b878 <prvAddNewTaskToReadyList+0xc4>)
 800b7c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7ca:	4b2c      	ldr	r3, [pc, #176]	; (800b87c <prvAddNewTaskToReadyList+0xc8>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d109      	bne.n	800b7e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7d2:	4a2a      	ldr	r2, [pc, #168]	; (800b87c <prvAddNewTaskToReadyList+0xc8>)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7d8:	4b27      	ldr	r3, [pc, #156]	; (800b878 <prvAddNewTaskToReadyList+0xc4>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d110      	bne.n	800b802 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7e0:	f000 fc16 	bl	800c010 <prvInitialiseTaskLists>
 800b7e4:	e00d      	b.n	800b802 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7e6:	4b26      	ldr	r3, [pc, #152]	; (800b880 <prvAddNewTaskToReadyList+0xcc>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d109      	bne.n	800b802 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7ee:	4b23      	ldr	r3, [pc, #140]	; (800b87c <prvAddNewTaskToReadyList+0xc8>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d802      	bhi.n	800b802 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7fc:	4a1f      	ldr	r2, [pc, #124]	; (800b87c <prvAddNewTaskToReadyList+0xc8>)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b802:	4b20      	ldr	r3, [pc, #128]	; (800b884 <prvAddNewTaskToReadyList+0xd0>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	3301      	adds	r3, #1
 800b808:	4a1e      	ldr	r2, [pc, #120]	; (800b884 <prvAddNewTaskToReadyList+0xd0>)
 800b80a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b80c:	4b1d      	ldr	r3, [pc, #116]	; (800b884 <prvAddNewTaskToReadyList+0xd0>)
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b818:	4b1b      	ldr	r3, [pc, #108]	; (800b888 <prvAddNewTaskToReadyList+0xd4>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d903      	bls.n	800b828 <prvAddNewTaskToReadyList+0x74>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b824:	4a18      	ldr	r2, [pc, #96]	; (800b888 <prvAddNewTaskToReadyList+0xd4>)
 800b826:	6013      	str	r3, [r2, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82c:	4613      	mov	r3, r2
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	4413      	add	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4a15      	ldr	r2, [pc, #84]	; (800b88c <prvAddNewTaskToReadyList+0xd8>)
 800b836:	441a      	add	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	3304      	adds	r3, #4
 800b83c:	4619      	mov	r1, r3
 800b83e:	4610      	mov	r0, r2
 800b840:	f7fe fec5 	bl	800a5ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b844:	f7ff f8a6 	bl	800a994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b848:	4b0d      	ldr	r3, [pc, #52]	; (800b880 <prvAddNewTaskToReadyList+0xcc>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00e      	beq.n	800b86e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b850:	4b0a      	ldr	r3, [pc, #40]	; (800b87c <prvAddNewTaskToReadyList+0xc8>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d207      	bcs.n	800b86e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b85e:	4b0c      	ldr	r3, [pc, #48]	; (800b890 <prvAddNewTaskToReadyList+0xdc>)
 800b860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b864:	601a      	str	r2, [r3, #0]
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b86e:	bf00      	nop
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	20004e38 	.word	0x20004e38
 800b87c:	20004964 	.word	0x20004964
 800b880:	20004e44 	.word	0x20004e44
 800b884:	20004e54 	.word	0x20004e54
 800b888:	20004e40 	.word	0x20004e40
 800b88c:	20004968 	.word	0x20004968
 800b890:	e000ed04 	.word	0xe000ed04

0800b894 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b89c:	2300      	movs	r3, #0
 800b89e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d017      	beq.n	800b8d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8a6:	4b13      	ldr	r3, [pc, #76]	; (800b8f4 <vTaskDelay+0x60>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <vTaskDelay+0x30>
	__asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	60bb      	str	r3, [r7, #8]
}
 800b8c0:	bf00      	nop
 800b8c2:	e7fe      	b.n	800b8c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8c4:	f000 f880 	bl	800b9c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fcea 	bl	800c2a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8d0:	f000 f888 	bl	800b9e4 <xTaskResumeAll>
 800b8d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d107      	bne.n	800b8ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b8dc:	4b06      	ldr	r3, [pc, #24]	; (800b8f8 <vTaskDelay+0x64>)
 800b8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8e2:	601a      	str	r2, [r3, #0]
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8ec:	bf00      	nop
 800b8ee:	3710      	adds	r7, #16
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	20004e60 	.word	0x20004e60
 800b8f8:	e000ed04 	.word	0xe000ed04

0800b8fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08a      	sub	sp, #40	; 0x28
 800b900:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b902:	2300      	movs	r3, #0
 800b904:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b906:	2300      	movs	r3, #0
 800b908:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b90a:	463a      	mov	r2, r7
 800b90c:	1d39      	adds	r1, r7, #4
 800b90e:	f107 0308 	add.w	r3, r7, #8
 800b912:	4618      	mov	r0, r3
 800b914:	f7fe fc10 	bl	800a138 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b918:	6839      	ldr	r1, [r7, #0]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	9202      	str	r2, [sp, #8]
 800b920:	9301      	str	r3, [sp, #4]
 800b922:	2300      	movs	r3, #0
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	2300      	movs	r3, #0
 800b928:	460a      	mov	r2, r1
 800b92a:	4921      	ldr	r1, [pc, #132]	; (800b9b0 <vTaskStartScheduler+0xb4>)
 800b92c:	4821      	ldr	r0, [pc, #132]	; (800b9b4 <vTaskStartScheduler+0xb8>)
 800b92e:	f7ff fe0f 	bl	800b550 <xTaskCreateStatic>
 800b932:	4603      	mov	r3, r0
 800b934:	4a20      	ldr	r2, [pc, #128]	; (800b9b8 <vTaskStartScheduler+0xbc>)
 800b936:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b938:	4b1f      	ldr	r3, [pc, #124]	; (800b9b8 <vTaskStartScheduler+0xbc>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b940:	2301      	movs	r3, #1
 800b942:	617b      	str	r3, [r7, #20]
 800b944:	e001      	b.n	800b94a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b946:	2300      	movs	r3, #0
 800b948:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d102      	bne.n	800b956 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b950:	f000 fcfc 	bl	800c34c <xTimerCreateTimerTask>
 800b954:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d116      	bne.n	800b98a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	613b      	str	r3, [r7, #16]
}
 800b96e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b970:	4b12      	ldr	r3, [pc, #72]	; (800b9bc <vTaskStartScheduler+0xc0>)
 800b972:	f04f 32ff 	mov.w	r2, #4294967295
 800b976:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b978:	4b11      	ldr	r3, [pc, #68]	; (800b9c0 <vTaskStartScheduler+0xc4>)
 800b97a:	2201      	movs	r2, #1
 800b97c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b97e:	4b11      	ldr	r3, [pc, #68]	; (800b9c4 <vTaskStartScheduler+0xc8>)
 800b980:	2200      	movs	r2, #0
 800b982:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b984:	f7fe ff34 	bl	800a7f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b988:	e00e      	b.n	800b9a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b990:	d10a      	bne.n	800b9a8 <vTaskStartScheduler+0xac>
	__asm volatile
 800b992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b996:	f383 8811 	msr	BASEPRI, r3
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	f3bf 8f4f 	dsb	sy
 800b9a2:	60fb      	str	r3, [r7, #12]
}
 800b9a4:	bf00      	nop
 800b9a6:	e7fe      	b.n	800b9a6 <vTaskStartScheduler+0xaa>
}
 800b9a8:	bf00      	nop
 800b9aa:	3718      	adds	r7, #24
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	08013bb4 	.word	0x08013bb4
 800b9b4:	0800bfe1 	.word	0x0800bfe1
 800b9b8:	20004e5c 	.word	0x20004e5c
 800b9bc:	20004e58 	.word	0x20004e58
 800b9c0:	20004e44 	.word	0x20004e44
 800b9c4:	20004e3c 	.word	0x20004e3c

0800b9c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b9cc:	4b04      	ldr	r3, [pc, #16]	; (800b9e0 <vTaskSuspendAll+0x18>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	4a03      	ldr	r2, [pc, #12]	; (800b9e0 <vTaskSuspendAll+0x18>)
 800b9d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b9d6:	bf00      	nop
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	20004e60 	.word	0x20004e60

0800b9e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9f2:	4b42      	ldr	r3, [pc, #264]	; (800bafc <xTaskResumeAll+0x118>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10a      	bne.n	800ba10 <xTaskResumeAll+0x2c>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	603b      	str	r3, [r7, #0]
}
 800ba0c:	bf00      	nop
 800ba0e:	e7fe      	b.n	800ba0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba10:	f7fe ff90 	bl	800a934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba14:	4b39      	ldr	r3, [pc, #228]	; (800bafc <xTaskResumeAll+0x118>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	4a38      	ldr	r2, [pc, #224]	; (800bafc <xTaskResumeAll+0x118>)
 800ba1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba1e:	4b37      	ldr	r3, [pc, #220]	; (800bafc <xTaskResumeAll+0x118>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d162      	bne.n	800baec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba26:	4b36      	ldr	r3, [pc, #216]	; (800bb00 <xTaskResumeAll+0x11c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d05e      	beq.n	800baec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba2e:	e02f      	b.n	800ba90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba30:	4b34      	ldr	r3, [pc, #208]	; (800bb04 <xTaskResumeAll+0x120>)
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	3318      	adds	r3, #24
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fe fe23 	bl	800a688 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	3304      	adds	r3, #4
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe fe1e 	bl	800a688 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba50:	4b2d      	ldr	r3, [pc, #180]	; (800bb08 <xTaskResumeAll+0x124>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d903      	bls.n	800ba60 <xTaskResumeAll+0x7c>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5c:	4a2a      	ldr	r2, [pc, #168]	; (800bb08 <xTaskResumeAll+0x124>)
 800ba5e:	6013      	str	r3, [r2, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba64:	4613      	mov	r3, r2
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4413      	add	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4a27      	ldr	r2, [pc, #156]	; (800bb0c <xTaskResumeAll+0x128>)
 800ba6e:	441a      	add	r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	3304      	adds	r3, #4
 800ba74:	4619      	mov	r1, r3
 800ba76:	4610      	mov	r0, r2
 800ba78:	f7fe fda9 	bl	800a5ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba80:	4b23      	ldr	r3, [pc, #140]	; (800bb10 <xTaskResumeAll+0x12c>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d302      	bcc.n	800ba90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba8a:	4b22      	ldr	r3, [pc, #136]	; (800bb14 <xTaskResumeAll+0x130>)
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba90:	4b1c      	ldr	r3, [pc, #112]	; (800bb04 <xTaskResumeAll+0x120>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d1cb      	bne.n	800ba30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d001      	beq.n	800baa2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba9e:	f000 fb55 	bl	800c14c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800baa2:	4b1d      	ldr	r3, [pc, #116]	; (800bb18 <xTaskResumeAll+0x134>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d010      	beq.n	800bad0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800baae:	f000 f847 	bl	800bb40 <xTaskIncrementTick>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bab8:	4b16      	ldr	r3, [pc, #88]	; (800bb14 <xTaskResumeAll+0x130>)
 800baba:	2201      	movs	r2, #1
 800babc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	3b01      	subs	r3, #1
 800bac2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1f1      	bne.n	800baae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800baca:	4b13      	ldr	r3, [pc, #76]	; (800bb18 <xTaskResumeAll+0x134>)
 800bacc:	2200      	movs	r2, #0
 800bace:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bad0:	4b10      	ldr	r3, [pc, #64]	; (800bb14 <xTaskResumeAll+0x130>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d009      	beq.n	800baec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bad8:	2301      	movs	r3, #1
 800bada:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800badc:	4b0f      	ldr	r3, [pc, #60]	; (800bb1c <xTaskResumeAll+0x138>)
 800bade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800baec:	f7fe ff52 	bl	800a994 <vPortExitCritical>

	return xAlreadyYielded;
 800baf0:	68bb      	ldr	r3, [r7, #8]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	20004e60 	.word	0x20004e60
 800bb00:	20004e38 	.word	0x20004e38
 800bb04:	20004df8 	.word	0x20004df8
 800bb08:	20004e40 	.word	0x20004e40
 800bb0c:	20004968 	.word	0x20004968
 800bb10:	20004964 	.word	0x20004964
 800bb14:	20004e4c 	.word	0x20004e4c
 800bb18:	20004e48 	.word	0x20004e48
 800bb1c:	e000ed04 	.word	0xe000ed04

0800bb20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb26:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <xTaskGetTickCount+0x1c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb2c:	687b      	ldr	r3, [r7, #4]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	370c      	adds	r7, #12
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	20004e3c 	.word	0x20004e3c

0800bb40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb46:	2300      	movs	r3, #0
 800bb48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb4a:	4b4f      	ldr	r3, [pc, #316]	; (800bc88 <xTaskIncrementTick+0x148>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	f040 808f 	bne.w	800bc72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb54:	4b4d      	ldr	r3, [pc, #308]	; (800bc8c <xTaskIncrementTick+0x14c>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb5c:	4a4b      	ldr	r2, [pc, #300]	; (800bc8c <xTaskIncrementTick+0x14c>)
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d120      	bne.n	800bbaa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb68:	4b49      	ldr	r3, [pc, #292]	; (800bc90 <xTaskIncrementTick+0x150>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00a      	beq.n	800bb88 <xTaskIncrementTick+0x48>
	__asm volatile
 800bb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	603b      	str	r3, [r7, #0]
}
 800bb84:	bf00      	nop
 800bb86:	e7fe      	b.n	800bb86 <xTaskIncrementTick+0x46>
 800bb88:	4b41      	ldr	r3, [pc, #260]	; (800bc90 <xTaskIncrementTick+0x150>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	60fb      	str	r3, [r7, #12]
 800bb8e:	4b41      	ldr	r3, [pc, #260]	; (800bc94 <xTaskIncrementTick+0x154>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a3f      	ldr	r2, [pc, #252]	; (800bc90 <xTaskIncrementTick+0x150>)
 800bb94:	6013      	str	r3, [r2, #0]
 800bb96:	4a3f      	ldr	r2, [pc, #252]	; (800bc94 <xTaskIncrementTick+0x154>)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6013      	str	r3, [r2, #0]
 800bb9c:	4b3e      	ldr	r3, [pc, #248]	; (800bc98 <xTaskIncrementTick+0x158>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	3301      	adds	r3, #1
 800bba2:	4a3d      	ldr	r2, [pc, #244]	; (800bc98 <xTaskIncrementTick+0x158>)
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	f000 fad1 	bl	800c14c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bbaa:	4b3c      	ldr	r3, [pc, #240]	; (800bc9c <xTaskIncrementTick+0x15c>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	693a      	ldr	r2, [r7, #16]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d349      	bcc.n	800bc48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbb4:	4b36      	ldr	r3, [pc, #216]	; (800bc90 <xTaskIncrementTick+0x150>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d104      	bne.n	800bbc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbbe:	4b37      	ldr	r3, [pc, #220]	; (800bc9c <xTaskIncrementTick+0x15c>)
 800bbc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc4:	601a      	str	r2, [r3, #0]
					break;
 800bbc6:	e03f      	b.n	800bc48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbc8:	4b31      	ldr	r3, [pc, #196]	; (800bc90 <xTaskIncrementTick+0x150>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	68db      	ldr	r3, [r3, #12]
 800bbd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bbd8:	693a      	ldr	r2, [r7, #16]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d203      	bcs.n	800bbe8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bbe0:	4a2e      	ldr	r2, [pc, #184]	; (800bc9c <xTaskIncrementTick+0x15c>)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bbe6:	e02f      	b.n	800bc48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	3304      	adds	r3, #4
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7fe fd4b 	bl	800a688 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d004      	beq.n	800bc04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	3318      	adds	r3, #24
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fe fd42 	bl	800a688 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc08:	4b25      	ldr	r3, [pc, #148]	; (800bca0 <xTaskIncrementTick+0x160>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d903      	bls.n	800bc18 <xTaskIncrementTick+0xd8>
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc14:	4a22      	ldr	r2, [pc, #136]	; (800bca0 <xTaskIncrementTick+0x160>)
 800bc16:	6013      	str	r3, [r2, #0]
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4a1f      	ldr	r2, [pc, #124]	; (800bca4 <xTaskIncrementTick+0x164>)
 800bc26:	441a      	add	r2, r3
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	4610      	mov	r0, r2
 800bc30:	f7fe fccd 	bl	800a5ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc38:	4b1b      	ldr	r3, [pc, #108]	; (800bca8 <xTaskIncrementTick+0x168>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d3b8      	bcc.n	800bbb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc42:	2301      	movs	r3, #1
 800bc44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc46:	e7b5      	b.n	800bbb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc48:	4b17      	ldr	r3, [pc, #92]	; (800bca8 <xTaskIncrementTick+0x168>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc4e:	4915      	ldr	r1, [pc, #84]	; (800bca4 <xTaskIncrementTick+0x164>)
 800bc50:	4613      	mov	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	4413      	add	r3, r2
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	440b      	add	r3, r1
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d901      	bls.n	800bc64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bc60:	2301      	movs	r3, #1
 800bc62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc64:	4b11      	ldr	r3, [pc, #68]	; (800bcac <xTaskIncrementTick+0x16c>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d007      	beq.n	800bc7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	617b      	str	r3, [r7, #20]
 800bc70:	e004      	b.n	800bc7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc72:	4b0f      	ldr	r3, [pc, #60]	; (800bcb0 <xTaskIncrementTick+0x170>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	3301      	adds	r3, #1
 800bc78:	4a0d      	ldr	r2, [pc, #52]	; (800bcb0 <xTaskIncrementTick+0x170>)
 800bc7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc7c:	697b      	ldr	r3, [r7, #20]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3718      	adds	r7, #24
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	20004e60 	.word	0x20004e60
 800bc8c:	20004e3c 	.word	0x20004e3c
 800bc90:	20004df0 	.word	0x20004df0
 800bc94:	20004df4 	.word	0x20004df4
 800bc98:	20004e50 	.word	0x20004e50
 800bc9c:	20004e58 	.word	0x20004e58
 800bca0:	20004e40 	.word	0x20004e40
 800bca4:	20004968 	.word	0x20004968
 800bca8:	20004964 	.word	0x20004964
 800bcac:	20004e4c 	.word	0x20004e4c
 800bcb0:	20004e48 	.word	0x20004e48

0800bcb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bcba:	4b28      	ldr	r3, [pc, #160]	; (800bd5c <vTaskSwitchContext+0xa8>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bcc2:	4b27      	ldr	r3, [pc, #156]	; (800bd60 <vTaskSwitchContext+0xac>)
 800bcc4:	2201      	movs	r2, #1
 800bcc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bcc8:	e041      	b.n	800bd4e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bcca:	4b25      	ldr	r3, [pc, #148]	; (800bd60 <vTaskSwitchContext+0xac>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcd0:	4b24      	ldr	r3, [pc, #144]	; (800bd64 <vTaskSwitchContext+0xb0>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	60fb      	str	r3, [r7, #12]
 800bcd6:	e010      	b.n	800bcfa <vTaskSwitchContext+0x46>
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10a      	bne.n	800bcf4 <vTaskSwitchContext+0x40>
	__asm volatile
 800bcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce2:	f383 8811 	msr	BASEPRI, r3
 800bce6:	f3bf 8f6f 	isb	sy
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	607b      	str	r3, [r7, #4]
}
 800bcf0:	bf00      	nop
 800bcf2:	e7fe      	b.n	800bcf2 <vTaskSwitchContext+0x3e>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	60fb      	str	r3, [r7, #12]
 800bcfa:	491b      	ldr	r1, [pc, #108]	; (800bd68 <vTaskSwitchContext+0xb4>)
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	440b      	add	r3, r1
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d0e4      	beq.n	800bcd8 <vTaskSwitchContext+0x24>
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	4613      	mov	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4413      	add	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4a13      	ldr	r2, [pc, #76]	; (800bd68 <vTaskSwitchContext+0xb4>)
 800bd1a:	4413      	add	r3, r2
 800bd1c:	60bb      	str	r3, [r7, #8]
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	685a      	ldr	r2, [r3, #4]
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	605a      	str	r2, [r3, #4]
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	685a      	ldr	r2, [r3, #4]
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	3308      	adds	r3, #8
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d104      	bne.n	800bd3e <vTaskSwitchContext+0x8a>
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	685a      	ldr	r2, [r3, #4]
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	605a      	str	r2, [r3, #4]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	4a09      	ldr	r2, [pc, #36]	; (800bd6c <vTaskSwitchContext+0xb8>)
 800bd46:	6013      	str	r3, [r2, #0]
 800bd48:	4a06      	ldr	r2, [pc, #24]	; (800bd64 <vTaskSwitchContext+0xb0>)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6013      	str	r3, [r2, #0]
}
 800bd4e:	bf00      	nop
 800bd50:	3714      	adds	r7, #20
 800bd52:	46bd      	mov	sp, r7
 800bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd58:	4770      	bx	lr
 800bd5a:	bf00      	nop
 800bd5c:	20004e60 	.word	0x20004e60
 800bd60:	20004e4c 	.word	0x20004e4c
 800bd64:	20004e40 	.word	0x20004e40
 800bd68:	20004968 	.word	0x20004968
 800bd6c:	20004964 	.word	0x20004964

0800bd70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b084      	sub	sp, #16
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10a      	bne.n	800bd96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd84:	f383 8811 	msr	BASEPRI, r3
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	f3bf 8f4f 	dsb	sy
 800bd90:	60fb      	str	r3, [r7, #12]
}
 800bd92:	bf00      	nop
 800bd94:	e7fe      	b.n	800bd94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd96:	4b07      	ldr	r3, [pc, #28]	; (800bdb4 <vTaskPlaceOnEventList+0x44>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3318      	adds	r3, #24
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f7fe fc39 	bl	800a616 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bda4:	2101      	movs	r1, #1
 800bda6:	6838      	ldr	r0, [r7, #0]
 800bda8:	f000 fa7c 	bl	800c2a4 <prvAddCurrentTaskToDelayedList>
}
 800bdac:	bf00      	nop
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	20004964 	.word	0x20004964

0800bdb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b086      	sub	sp, #24
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10a      	bne.n	800bde0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bdca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdce:	f383 8811 	msr	BASEPRI, r3
 800bdd2:	f3bf 8f6f 	isb	sy
 800bdd6:	f3bf 8f4f 	dsb	sy
 800bdda:	617b      	str	r3, [r7, #20]
}
 800bddc:	bf00      	nop
 800bdde:	e7fe      	b.n	800bdde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bde0:	4b0a      	ldr	r3, [pc, #40]	; (800be0c <vTaskPlaceOnEventListRestricted+0x54>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	3318      	adds	r3, #24
 800bde6:	4619      	mov	r1, r3
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f7fe fbf0 	bl	800a5ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d002      	beq.n	800bdfa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bdf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	68b8      	ldr	r0, [r7, #8]
 800bdfe:	f000 fa51 	bl	800c2a4 <prvAddCurrentTaskToDelayedList>
	}
 800be02:	bf00      	nop
 800be04:	3718      	adds	r7, #24
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	20004964 	.word	0x20004964

0800be10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d10a      	bne.n	800be3c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800be26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2a:	f383 8811 	msr	BASEPRI, r3
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	60fb      	str	r3, [r7, #12]
}
 800be38:	bf00      	nop
 800be3a:	e7fe      	b.n	800be3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	3318      	adds	r3, #24
 800be40:	4618      	mov	r0, r3
 800be42:	f7fe fc21 	bl	800a688 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be46:	4b1e      	ldr	r3, [pc, #120]	; (800bec0 <xTaskRemoveFromEventList+0xb0>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d11d      	bne.n	800be8a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	3304      	adds	r3, #4
 800be52:	4618      	mov	r0, r3
 800be54:	f7fe fc18 	bl	800a688 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be5c:	4b19      	ldr	r3, [pc, #100]	; (800bec4 <xTaskRemoveFromEventList+0xb4>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	429a      	cmp	r2, r3
 800be62:	d903      	bls.n	800be6c <xTaskRemoveFromEventList+0x5c>
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be68:	4a16      	ldr	r2, [pc, #88]	; (800bec4 <xTaskRemoveFromEventList+0xb4>)
 800be6a:	6013      	str	r3, [r2, #0]
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be70:	4613      	mov	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4413      	add	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	4a13      	ldr	r2, [pc, #76]	; (800bec8 <xTaskRemoveFromEventList+0xb8>)
 800be7a:	441a      	add	r2, r3
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	3304      	adds	r3, #4
 800be80:	4619      	mov	r1, r3
 800be82:	4610      	mov	r0, r2
 800be84:	f7fe fba3 	bl	800a5ce <vListInsertEnd>
 800be88:	e005      	b.n	800be96 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	3318      	adds	r3, #24
 800be8e:	4619      	mov	r1, r3
 800be90:	480e      	ldr	r0, [pc, #56]	; (800becc <xTaskRemoveFromEventList+0xbc>)
 800be92:	f7fe fb9c 	bl	800a5ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9a:	4b0d      	ldr	r3, [pc, #52]	; (800bed0 <xTaskRemoveFromEventList+0xc0>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d905      	bls.n	800beb0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bea4:	2301      	movs	r3, #1
 800bea6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bea8:	4b0a      	ldr	r3, [pc, #40]	; (800bed4 <xTaskRemoveFromEventList+0xc4>)
 800beaa:	2201      	movs	r2, #1
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	e001      	b.n	800beb4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800beb0:	2300      	movs	r3, #0
 800beb2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800beb4:	697b      	ldr	r3, [r7, #20]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3718      	adds	r7, #24
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	20004e60 	.word	0x20004e60
 800bec4:	20004e40 	.word	0x20004e40
 800bec8:	20004968 	.word	0x20004968
 800becc:	20004df8 	.word	0x20004df8
 800bed0:	20004964 	.word	0x20004964
 800bed4:	20004e4c 	.word	0x20004e4c

0800bed8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bee0:	4b06      	ldr	r3, [pc, #24]	; (800befc <vTaskInternalSetTimeOutState+0x24>)
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bee8:	4b05      	ldr	r3, [pc, #20]	; (800bf00 <vTaskInternalSetTimeOutState+0x28>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	605a      	str	r2, [r3, #4]
}
 800bef0:	bf00      	nop
 800bef2:	370c      	adds	r7, #12
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr
 800befc:	20004e50 	.word	0x20004e50
 800bf00:	20004e3c 	.word	0x20004e3c

0800bf04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b088      	sub	sp, #32
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d10a      	bne.n	800bf2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bf14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	613b      	str	r3, [r7, #16]
}
 800bf26:	bf00      	nop
 800bf28:	e7fe      	b.n	800bf28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10a      	bne.n	800bf46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf34:	f383 8811 	msr	BASEPRI, r3
 800bf38:	f3bf 8f6f 	isb	sy
 800bf3c:	f3bf 8f4f 	dsb	sy
 800bf40:	60fb      	str	r3, [r7, #12]
}
 800bf42:	bf00      	nop
 800bf44:	e7fe      	b.n	800bf44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bf46:	f7fe fcf5 	bl	800a934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bf4a:	4b1d      	ldr	r3, [pc, #116]	; (800bfc0 <xTaskCheckForTimeOut+0xbc>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	69ba      	ldr	r2, [r7, #24]
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf62:	d102      	bne.n	800bf6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf64:	2300      	movs	r3, #0
 800bf66:	61fb      	str	r3, [r7, #28]
 800bf68:	e023      	b.n	800bfb2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	4b15      	ldr	r3, [pc, #84]	; (800bfc4 <xTaskCheckForTimeOut+0xc0>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d007      	beq.n	800bf86 <xTaskCheckForTimeOut+0x82>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	69ba      	ldr	r2, [r7, #24]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d302      	bcc.n	800bf86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf80:	2301      	movs	r3, #1
 800bf82:	61fb      	str	r3, [r7, #28]
 800bf84:	e015      	b.n	800bfb2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d20b      	bcs.n	800bfa8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	1ad2      	subs	r2, r2, r3
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f7ff ff9b 	bl	800bed8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	61fb      	str	r3, [r7, #28]
 800bfa6:	e004      	b.n	800bfb2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bfb2:	f7fe fcef 	bl	800a994 <vPortExitCritical>

	return xReturn;
 800bfb6:	69fb      	ldr	r3, [r7, #28]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3720      	adds	r7, #32
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	20004e3c 	.word	0x20004e3c
 800bfc4:	20004e50 	.word	0x20004e50

0800bfc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bfc8:	b480      	push	{r7}
 800bfca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bfcc:	4b03      	ldr	r3, [pc, #12]	; (800bfdc <vTaskMissedYield+0x14>)
 800bfce:	2201      	movs	r2, #1
 800bfd0:	601a      	str	r2, [r3, #0]
}
 800bfd2:	bf00      	nop
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr
 800bfdc:	20004e4c 	.word	0x20004e4c

0800bfe0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bfe8:	f000 f852 	bl	800c090 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bfec:	4b06      	ldr	r3, [pc, #24]	; (800c008 <prvIdleTask+0x28>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d9f9      	bls.n	800bfe8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bff4:	4b05      	ldr	r3, [pc, #20]	; (800c00c <prvIdleTask+0x2c>)
 800bff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bffa:	601a      	str	r2, [r3, #0]
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c004:	e7f0      	b.n	800bfe8 <prvIdleTask+0x8>
 800c006:	bf00      	nop
 800c008:	20004968 	.word	0x20004968
 800c00c:	e000ed04 	.word	0xe000ed04

0800c010 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c016:	2300      	movs	r3, #0
 800c018:	607b      	str	r3, [r7, #4]
 800c01a:	e00c      	b.n	800c036 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	4613      	mov	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	4413      	add	r3, r2
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	4a12      	ldr	r2, [pc, #72]	; (800c070 <prvInitialiseTaskLists+0x60>)
 800c028:	4413      	add	r3, r2
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fe faa2 	bl	800a574 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	3301      	adds	r3, #1
 800c034:	607b      	str	r3, [r7, #4]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b37      	cmp	r3, #55	; 0x37
 800c03a:	d9ef      	bls.n	800c01c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c03c:	480d      	ldr	r0, [pc, #52]	; (800c074 <prvInitialiseTaskLists+0x64>)
 800c03e:	f7fe fa99 	bl	800a574 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c042:	480d      	ldr	r0, [pc, #52]	; (800c078 <prvInitialiseTaskLists+0x68>)
 800c044:	f7fe fa96 	bl	800a574 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c048:	480c      	ldr	r0, [pc, #48]	; (800c07c <prvInitialiseTaskLists+0x6c>)
 800c04a:	f7fe fa93 	bl	800a574 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c04e:	480c      	ldr	r0, [pc, #48]	; (800c080 <prvInitialiseTaskLists+0x70>)
 800c050:	f7fe fa90 	bl	800a574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c054:	480b      	ldr	r0, [pc, #44]	; (800c084 <prvInitialiseTaskLists+0x74>)
 800c056:	f7fe fa8d 	bl	800a574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c05a:	4b0b      	ldr	r3, [pc, #44]	; (800c088 <prvInitialiseTaskLists+0x78>)
 800c05c:	4a05      	ldr	r2, [pc, #20]	; (800c074 <prvInitialiseTaskLists+0x64>)
 800c05e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c060:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <prvInitialiseTaskLists+0x7c>)
 800c062:	4a05      	ldr	r2, [pc, #20]	; (800c078 <prvInitialiseTaskLists+0x68>)
 800c064:	601a      	str	r2, [r3, #0]
}
 800c066:	bf00      	nop
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	20004968 	.word	0x20004968
 800c074:	20004dc8 	.word	0x20004dc8
 800c078:	20004ddc 	.word	0x20004ddc
 800c07c:	20004df8 	.word	0x20004df8
 800c080:	20004e0c 	.word	0x20004e0c
 800c084:	20004e24 	.word	0x20004e24
 800c088:	20004df0 	.word	0x20004df0
 800c08c:	20004df4 	.word	0x20004df4

0800c090 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c096:	e019      	b.n	800c0cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c098:	f7fe fc4c 	bl	800a934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c09c:	4b10      	ldr	r3, [pc, #64]	; (800c0e0 <prvCheckTasksWaitingTermination+0x50>)
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	3304      	adds	r3, #4
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7fe faed 	bl	800a688 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c0ae:	4b0d      	ldr	r3, [pc, #52]	; (800c0e4 <prvCheckTasksWaitingTermination+0x54>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	4a0b      	ldr	r2, [pc, #44]	; (800c0e4 <prvCheckTasksWaitingTermination+0x54>)
 800c0b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c0b8:	4b0b      	ldr	r3, [pc, #44]	; (800c0e8 <prvCheckTasksWaitingTermination+0x58>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	4a0a      	ldr	r2, [pc, #40]	; (800c0e8 <prvCheckTasksWaitingTermination+0x58>)
 800c0c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c0c2:	f7fe fc67 	bl	800a994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 f810 	bl	800c0ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0cc:	4b06      	ldr	r3, [pc, #24]	; (800c0e8 <prvCheckTasksWaitingTermination+0x58>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d1e1      	bne.n	800c098 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c0d4:	bf00      	nop
 800c0d6:	bf00      	nop
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	20004e0c 	.word	0x20004e0c
 800c0e4:	20004e38 	.word	0x20004e38
 800c0e8:	20004e20 	.word	0x20004e20

0800c0ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d108      	bne.n	800c110 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c102:	4618      	mov	r0, r3
 800c104:	f7fe f918 	bl	800a338 <vPortFree>
				vPortFree( pxTCB );
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7fe f915 	bl	800a338 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c10e:	e018      	b.n	800c142 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c116:	2b01      	cmp	r3, #1
 800c118:	d103      	bne.n	800c122 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f7fe f90c 	bl	800a338 <vPortFree>
	}
 800c120:	e00f      	b.n	800c142 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d00a      	beq.n	800c142 <prvDeleteTCB+0x56>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	60fb      	str	r3, [r7, #12]
}
 800c13e:	bf00      	nop
 800c140:	e7fe      	b.n	800c140 <prvDeleteTCB+0x54>
	}
 800c142:	bf00      	nop
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
	...

0800c14c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c152:	4b0c      	ldr	r3, [pc, #48]	; (800c184 <prvResetNextTaskUnblockTime+0x38>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d104      	bne.n	800c166 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c15c:	4b0a      	ldr	r3, [pc, #40]	; (800c188 <prvResetNextTaskUnblockTime+0x3c>)
 800c15e:	f04f 32ff 	mov.w	r2, #4294967295
 800c162:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c164:	e008      	b.n	800c178 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c166:	4b07      	ldr	r3, [pc, #28]	; (800c184 <prvResetNextTaskUnblockTime+0x38>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	4a04      	ldr	r2, [pc, #16]	; (800c188 <prvResetNextTaskUnblockTime+0x3c>)
 800c176:	6013      	str	r3, [r2, #0]
}
 800c178:	bf00      	nop
 800c17a:	370c      	adds	r7, #12
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr
 800c184:	20004df0 	.word	0x20004df0
 800c188:	20004e58 	.word	0x20004e58

0800c18c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c192:	4b0b      	ldr	r3, [pc, #44]	; (800c1c0 <xTaskGetSchedulerState+0x34>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d102      	bne.n	800c1a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c19a:	2301      	movs	r3, #1
 800c19c:	607b      	str	r3, [r7, #4]
 800c19e:	e008      	b.n	800c1b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1a0:	4b08      	ldr	r3, [pc, #32]	; (800c1c4 <xTaskGetSchedulerState+0x38>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d102      	bne.n	800c1ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c1a8:	2302      	movs	r3, #2
 800c1aa:	607b      	str	r3, [r7, #4]
 800c1ac:	e001      	b.n	800c1b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c1b2:	687b      	ldr	r3, [r7, #4]
	}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	20004e44 	.word	0x20004e44
 800c1c4:	20004e60 	.word	0x20004e60

0800c1c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d056      	beq.n	800c28c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c1de:	4b2e      	ldr	r3, [pc, #184]	; (800c298 <xTaskPriorityDisinherit+0xd0>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d00a      	beq.n	800c1fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ec:	f383 8811 	msr	BASEPRI, r3
 800c1f0:	f3bf 8f6f 	isb	sy
 800c1f4:	f3bf 8f4f 	dsb	sy
 800c1f8:	60fb      	str	r3, [r7, #12]
}
 800c1fa:	bf00      	nop
 800c1fc:	e7fe      	b.n	800c1fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c202:	2b00      	cmp	r3, #0
 800c204:	d10a      	bne.n	800c21c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20a:	f383 8811 	msr	BASEPRI, r3
 800c20e:	f3bf 8f6f 	isb	sy
 800c212:	f3bf 8f4f 	dsb	sy
 800c216:	60bb      	str	r3, [r7, #8]
}
 800c218:	bf00      	nop
 800c21a:	e7fe      	b.n	800c21a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c220:	1e5a      	subs	r2, r3, #1
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c22e:	429a      	cmp	r2, r3
 800c230:	d02c      	beq.n	800c28c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c236:	2b00      	cmp	r3, #0
 800c238:	d128      	bne.n	800c28c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	3304      	adds	r3, #4
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fe fa22 	bl	800a688 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c250:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c25c:	4b0f      	ldr	r3, [pc, #60]	; (800c29c <xTaskPriorityDisinherit+0xd4>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	429a      	cmp	r2, r3
 800c262:	d903      	bls.n	800c26c <xTaskPriorityDisinherit+0xa4>
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c268:	4a0c      	ldr	r2, [pc, #48]	; (800c29c <xTaskPriorityDisinherit+0xd4>)
 800c26a:	6013      	str	r3, [r2, #0]
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c270:	4613      	mov	r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4413      	add	r3, r2
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4a09      	ldr	r2, [pc, #36]	; (800c2a0 <xTaskPriorityDisinherit+0xd8>)
 800c27a:	441a      	add	r2, r3
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	3304      	adds	r3, #4
 800c280:	4619      	mov	r1, r3
 800c282:	4610      	mov	r0, r2
 800c284:	f7fe f9a3 	bl	800a5ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c288:	2301      	movs	r3, #1
 800c28a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c28c:	697b      	ldr	r3, [r7, #20]
	}
 800c28e:	4618      	mov	r0, r3
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	20004964 	.word	0x20004964
 800c29c:	20004e40 	.word	0x20004e40
 800c2a0:	20004968 	.word	0x20004968

0800c2a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2ae:	4b21      	ldr	r3, [pc, #132]	; (800c334 <prvAddCurrentTaskToDelayedList+0x90>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2b4:	4b20      	ldr	r3, [pc, #128]	; (800c338 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fe f9e4 	bl	800a688 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c6:	d10a      	bne.n	800c2de <prvAddCurrentTaskToDelayedList+0x3a>
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d007      	beq.n	800c2de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2ce:	4b1a      	ldr	r3, [pc, #104]	; (800c338 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	3304      	adds	r3, #4
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	4819      	ldr	r0, [pc, #100]	; (800c33c <prvAddCurrentTaskToDelayedList+0x98>)
 800c2d8:	f7fe f979 	bl	800a5ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2dc:	e026      	b.n	800c32c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2e6:	4b14      	ldr	r3, [pc, #80]	; (800c338 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d209      	bcs.n	800c30a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2f6:	4b12      	ldr	r3, [pc, #72]	; (800c340 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	4b0f      	ldr	r3, [pc, #60]	; (800c338 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	3304      	adds	r3, #4
 800c300:	4619      	mov	r1, r3
 800c302:	4610      	mov	r0, r2
 800c304:	f7fe f987 	bl	800a616 <vListInsert>
}
 800c308:	e010      	b.n	800c32c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c30a:	4b0e      	ldr	r3, [pc, #56]	; (800c344 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	4b0a      	ldr	r3, [pc, #40]	; (800c338 <prvAddCurrentTaskToDelayedList+0x94>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3304      	adds	r3, #4
 800c314:	4619      	mov	r1, r3
 800c316:	4610      	mov	r0, r2
 800c318:	f7fe f97d 	bl	800a616 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c31c:	4b0a      	ldr	r3, [pc, #40]	; (800c348 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	429a      	cmp	r2, r3
 800c324:	d202      	bcs.n	800c32c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c326:	4a08      	ldr	r2, [pc, #32]	; (800c348 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	6013      	str	r3, [r2, #0]
}
 800c32c:	bf00      	nop
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	20004e3c 	.word	0x20004e3c
 800c338:	20004964 	.word	0x20004964
 800c33c:	20004e24 	.word	0x20004e24
 800c340:	20004df4 	.word	0x20004df4
 800c344:	20004df0 	.word	0x20004df0
 800c348:	20004e58 	.word	0x20004e58

0800c34c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b08a      	sub	sp, #40	; 0x28
 800c350:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c352:	2300      	movs	r3, #0
 800c354:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c356:	f000 fb07 	bl	800c968 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c35a:	4b1c      	ldr	r3, [pc, #112]	; (800c3cc <xTimerCreateTimerTask+0x80>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d021      	beq.n	800c3a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c362:	2300      	movs	r3, #0
 800c364:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c366:	2300      	movs	r3, #0
 800c368:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c36a:	1d3a      	adds	r2, r7, #4
 800c36c:	f107 0108 	add.w	r1, r7, #8
 800c370:	f107 030c 	add.w	r3, r7, #12
 800c374:	4618      	mov	r0, r3
 800c376:	f7fd fef9 	bl	800a16c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c37a:	6879      	ldr	r1, [r7, #4]
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	68fa      	ldr	r2, [r7, #12]
 800c380:	9202      	str	r2, [sp, #8]
 800c382:	9301      	str	r3, [sp, #4]
 800c384:	2302      	movs	r3, #2
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	2300      	movs	r3, #0
 800c38a:	460a      	mov	r2, r1
 800c38c:	4910      	ldr	r1, [pc, #64]	; (800c3d0 <xTimerCreateTimerTask+0x84>)
 800c38e:	4811      	ldr	r0, [pc, #68]	; (800c3d4 <xTimerCreateTimerTask+0x88>)
 800c390:	f7ff f8de 	bl	800b550 <xTaskCreateStatic>
 800c394:	4603      	mov	r3, r0
 800c396:	4a10      	ldr	r2, [pc, #64]	; (800c3d8 <xTimerCreateTimerTask+0x8c>)
 800c398:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c39a:	4b0f      	ldr	r3, [pc, #60]	; (800c3d8 <xTimerCreateTimerTask+0x8c>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d001      	beq.n	800c3a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10a      	bne.n	800c3c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b0:	f383 8811 	msr	BASEPRI, r3
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	613b      	str	r3, [r7, #16]
}
 800c3be:	bf00      	nop
 800c3c0:	e7fe      	b.n	800c3c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c3c2:	697b      	ldr	r3, [r7, #20]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3718      	adds	r7, #24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	20004e94 	.word	0x20004e94
 800c3d0:	08013bbc 	.word	0x08013bbc
 800c3d4:	0800c511 	.word	0x0800c511
 800c3d8:	20004e98 	.word	0x20004e98

0800c3dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b08a      	sub	sp, #40	; 0x28
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
 800c3e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d10a      	bne.n	800c40a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f8:	f383 8811 	msr	BASEPRI, r3
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	623b      	str	r3, [r7, #32]
}
 800c406:	bf00      	nop
 800c408:	e7fe      	b.n	800c408 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c40a:	4b1a      	ldr	r3, [pc, #104]	; (800c474 <xTimerGenericCommand+0x98>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d02a      	beq.n	800c468 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	2b05      	cmp	r3, #5
 800c422:	dc18      	bgt.n	800c456 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c424:	f7ff feb2 	bl	800c18c <xTaskGetSchedulerState>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d109      	bne.n	800c442 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c42e:	4b11      	ldr	r3, [pc, #68]	; (800c474 <xTimerGenericCommand+0x98>)
 800c430:	6818      	ldr	r0, [r3, #0]
 800c432:	f107 0110 	add.w	r1, r7, #16
 800c436:	2300      	movs	r3, #0
 800c438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c43a:	f7fe fca1 	bl	800ad80 <xQueueGenericSend>
 800c43e:	6278      	str	r0, [r7, #36]	; 0x24
 800c440:	e012      	b.n	800c468 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c442:	4b0c      	ldr	r3, [pc, #48]	; (800c474 <xTimerGenericCommand+0x98>)
 800c444:	6818      	ldr	r0, [r3, #0]
 800c446:	f107 0110 	add.w	r1, r7, #16
 800c44a:	2300      	movs	r3, #0
 800c44c:	2200      	movs	r2, #0
 800c44e:	f7fe fc97 	bl	800ad80 <xQueueGenericSend>
 800c452:	6278      	str	r0, [r7, #36]	; 0x24
 800c454:	e008      	b.n	800c468 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c456:	4b07      	ldr	r3, [pc, #28]	; (800c474 <xTimerGenericCommand+0x98>)
 800c458:	6818      	ldr	r0, [r3, #0]
 800c45a:	f107 0110 	add.w	r1, r7, #16
 800c45e:	2300      	movs	r3, #0
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	f7fe fd8b 	bl	800af7c <xQueueGenericSendFromISR>
 800c466:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3728      	adds	r7, #40	; 0x28
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20004e94 	.word	0x20004e94

0800c478 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b088      	sub	sp, #32
 800c47c:	af02      	add	r7, sp, #8
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c482:	4b22      	ldr	r3, [pc, #136]	; (800c50c <prvProcessExpiredTimer+0x94>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	3304      	adds	r3, #4
 800c490:	4618      	mov	r0, r3
 800c492:	f7fe f8f9 	bl	800a688 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c49c:	f003 0304 	and.w	r3, r3, #4
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d022      	beq.n	800c4ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	699a      	ldr	r2, [r3, #24]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	18d1      	adds	r1, r2, r3
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	6978      	ldr	r0, [r7, #20]
 800c4b2:	f000 f8d1 	bl	800c658 <prvInsertTimerInActiveList>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d01f      	beq.n	800c4fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4bc:	2300      	movs	r3, #0
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	6978      	ldr	r0, [r7, #20]
 800c4c8:	f7ff ff88 	bl	800c3dc <xTimerGenericCommand>
 800c4cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d113      	bne.n	800c4fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	60fb      	str	r3, [r7, #12]
}
 800c4e6:	bf00      	nop
 800c4e8:	e7fe      	b.n	800c4e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4f0:	f023 0301 	bic.w	r3, r3, #1
 800c4f4:	b2da      	uxtb	r2, r3
 800c4f6:	697b      	ldr	r3, [r7, #20]
 800c4f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	6a1b      	ldr	r3, [r3, #32]
 800c500:	6978      	ldr	r0, [r7, #20]
 800c502:	4798      	blx	r3
}
 800c504:	bf00      	nop
 800c506:	3718      	adds	r7, #24
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	20004e8c 	.word	0x20004e8c

0800c510 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c518:	f107 0308 	add.w	r3, r7, #8
 800c51c:	4618      	mov	r0, r3
 800c51e:	f000 f857 	bl	800c5d0 <prvGetNextExpireTime>
 800c522:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	4619      	mov	r1, r3
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f000 f803 	bl	800c534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c52e:	f000 f8d5 	bl	800c6dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c532:	e7f1      	b.n	800c518 <prvTimerTask+0x8>

0800c534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c53e:	f7ff fa43 	bl	800b9c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c542:	f107 0308 	add.w	r3, r7, #8
 800c546:	4618      	mov	r0, r3
 800c548:	f000 f866 	bl	800c618 <prvSampleTimeNow>
 800c54c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d130      	bne.n	800c5b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10a      	bne.n	800c570 <prvProcessTimerOrBlockTask+0x3c>
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d806      	bhi.n	800c570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c562:	f7ff fa3f 	bl	800b9e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c566:	68f9      	ldr	r1, [r7, #12]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7ff ff85 	bl	800c478 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c56e:	e024      	b.n	800c5ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d008      	beq.n	800c588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c576:	4b13      	ldr	r3, [pc, #76]	; (800c5c4 <prvProcessTimerOrBlockTask+0x90>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d101      	bne.n	800c584 <prvProcessTimerOrBlockTask+0x50>
 800c580:	2301      	movs	r3, #1
 800c582:	e000      	b.n	800c586 <prvProcessTimerOrBlockTask+0x52>
 800c584:	2300      	movs	r3, #0
 800c586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c588:	4b0f      	ldr	r3, [pc, #60]	; (800c5c8 <prvProcessTimerOrBlockTask+0x94>)
 800c58a:	6818      	ldr	r0, [r3, #0]
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	683a      	ldr	r2, [r7, #0]
 800c594:	4619      	mov	r1, r3
 800c596:	f7fe ffa7 	bl	800b4e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c59a:	f7ff fa23 	bl	800b9e4 <xTaskResumeAll>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10a      	bne.n	800c5ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c5a4:	4b09      	ldr	r3, [pc, #36]	; (800c5cc <prvProcessTimerOrBlockTask+0x98>)
 800c5a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5aa:	601a      	str	r2, [r3, #0]
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	f3bf 8f6f 	isb	sy
}
 800c5b4:	e001      	b.n	800c5ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c5b6:	f7ff fa15 	bl	800b9e4 <xTaskResumeAll>
}
 800c5ba:	bf00      	nop
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	20004e90 	.word	0x20004e90
 800c5c8:	20004e94 	.word	0x20004e94
 800c5cc:	e000ed04 	.word	0xe000ed04

0800c5d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c5d8:	4b0e      	ldr	r3, [pc, #56]	; (800c614 <prvGetNextExpireTime+0x44>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d101      	bne.n	800c5e6 <prvGetNextExpireTime+0x16>
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	e000      	b.n	800c5e8 <prvGetNextExpireTime+0x18>
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d105      	bne.n	800c600 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5f4:	4b07      	ldr	r3, [pc, #28]	; (800c614 <prvGetNextExpireTime+0x44>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	60fb      	str	r3, [r7, #12]
 800c5fe:	e001      	b.n	800c604 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c600:	2300      	movs	r3, #0
 800c602:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c604:	68fb      	ldr	r3, [r7, #12]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3714      	adds	r7, #20
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	20004e8c 	.word	0x20004e8c

0800c618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b084      	sub	sp, #16
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c620:	f7ff fa7e 	bl	800bb20 <xTaskGetTickCount>
 800c624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c626:	4b0b      	ldr	r3, [pc, #44]	; (800c654 <prvSampleTimeNow+0x3c>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d205      	bcs.n	800c63c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c630:	f000 f936 	bl	800c8a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	601a      	str	r2, [r3, #0]
 800c63a:	e002      	b.n	800c642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2200      	movs	r2, #0
 800c640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c642:	4a04      	ldr	r2, [pc, #16]	; (800c654 <prvSampleTimeNow+0x3c>)
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c648:	68fb      	ldr	r3, [r7, #12]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	3710      	adds	r7, #16
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	20004e9c 	.word	0x20004e9c

0800c658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
 800c664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c666:	2300      	movs	r3, #0
 800c668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d812      	bhi.n	800c6a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	1ad2      	subs	r2, r2, r3
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	699b      	ldr	r3, [r3, #24]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d302      	bcc.n	800c692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c68c:	2301      	movs	r3, #1
 800c68e:	617b      	str	r3, [r7, #20]
 800c690:	e01b      	b.n	800c6ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c692:	4b10      	ldr	r3, [pc, #64]	; (800c6d4 <prvInsertTimerInActiveList+0x7c>)
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	3304      	adds	r3, #4
 800c69a:	4619      	mov	r1, r3
 800c69c:	4610      	mov	r0, r2
 800c69e:	f7fd ffba 	bl	800a616 <vListInsert>
 800c6a2:	e012      	b.n	800c6ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d206      	bcs.n	800c6ba <prvInsertTimerInActiveList+0x62>
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d302      	bcc.n	800c6ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	617b      	str	r3, [r7, #20]
 800c6b8:	e007      	b.n	800c6ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6ba:	4b07      	ldr	r3, [pc, #28]	; (800c6d8 <prvInsertTimerInActiveList+0x80>)
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	f7fd ffa6 	bl	800a616 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c6ca:	697b      	ldr	r3, [r7, #20]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3718      	adds	r7, #24
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	20004e90 	.word	0x20004e90
 800c6d8:	20004e8c 	.word	0x20004e8c

0800c6dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b08e      	sub	sp, #56	; 0x38
 800c6e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6e2:	e0ca      	b.n	800c87a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	da18      	bge.n	800c71c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c6ea:	1d3b      	adds	r3, r7, #4
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d10a      	bne.n	800c70c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	61fb      	str	r3, [r7, #28]
}
 800c708:	bf00      	nop
 800c70a:	e7fe      	b.n	800c70a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c712:	6850      	ldr	r0, [r2, #4]
 800c714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c716:	6892      	ldr	r2, [r2, #8]
 800c718:	4611      	mov	r1, r2
 800c71a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f2c0 80ab 	blt.w	800c87a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d004      	beq.n	800c73a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c732:	3304      	adds	r3, #4
 800c734:	4618      	mov	r0, r3
 800c736:	f7fd ffa7 	bl	800a688 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c73a:	463b      	mov	r3, r7
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff ff6b 	bl	800c618 <prvSampleTimeNow>
 800c742:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b09      	cmp	r3, #9
 800c748:	f200 8096 	bhi.w	800c878 <prvProcessReceivedCommands+0x19c>
 800c74c:	a201      	add	r2, pc, #4	; (adr r2, 800c754 <prvProcessReceivedCommands+0x78>)
 800c74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c752:	bf00      	nop
 800c754:	0800c77d 	.word	0x0800c77d
 800c758:	0800c77d 	.word	0x0800c77d
 800c75c:	0800c77d 	.word	0x0800c77d
 800c760:	0800c7f1 	.word	0x0800c7f1
 800c764:	0800c805 	.word	0x0800c805
 800c768:	0800c84f 	.word	0x0800c84f
 800c76c:	0800c77d 	.word	0x0800c77d
 800c770:	0800c77d 	.word	0x0800c77d
 800c774:	0800c7f1 	.word	0x0800c7f1
 800c778:	0800c805 	.word	0x0800c805
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c782:	f043 0301 	orr.w	r3, r3, #1
 800c786:	b2da      	uxtb	r2, r3
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c78e:	68ba      	ldr	r2, [r7, #8]
 800c790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	18d1      	adds	r1, r2, r3
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c79a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c79c:	f7ff ff5c 	bl	800c658 <prvInsertTimerInActiveList>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d069      	beq.n	800c87a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a8:	6a1b      	ldr	r3, [r3, #32]
 800c7aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7b4:	f003 0304 	and.w	r3, r3, #4
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d05e      	beq.n	800c87a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	699b      	ldr	r3, [r3, #24]
 800c7c2:	441a      	add	r2, r3
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ce:	f7ff fe05 	bl	800c3dc <xTimerGenericCommand>
 800c7d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c7d4:	6a3b      	ldr	r3, [r7, #32]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d14f      	bne.n	800c87a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7de:	f383 8811 	msr	BASEPRI, r3
 800c7e2:	f3bf 8f6f 	isb	sy
 800c7e6:	f3bf 8f4f 	dsb	sy
 800c7ea:	61bb      	str	r3, [r7, #24]
}
 800c7ec:	bf00      	nop
 800c7ee:	e7fe      	b.n	800c7ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7f6:	f023 0301 	bic.w	r3, r3, #1
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c802:	e03a      	b.n	800c87a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c80a:	f043 0301 	orr.w	r3, r3, #1
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81e:	699b      	ldr	r3, [r3, #24]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10a      	bne.n	800c83a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	617b      	str	r3, [r7, #20]
}
 800c836:	bf00      	nop
 800c838:	e7fe      	b.n	800c838 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c83c:	699a      	ldr	r2, [r3, #24]
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c840:	18d1      	adds	r1, r2, r3
 800c842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c848:	f7ff ff06 	bl	800c658 <prvInsertTimerInActiveList>
					break;
 800c84c:	e015      	b.n	800c87a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c854:	f003 0302 	and.w	r3, r3, #2
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d103      	bne.n	800c864 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c85c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c85e:	f7fd fd6b 	bl	800a338 <vPortFree>
 800c862:	e00a      	b.n	800c87a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c86a:	f023 0301 	bic.w	r3, r3, #1
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c876:	e000      	b.n	800c87a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c878:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c87a:	4b08      	ldr	r3, [pc, #32]	; (800c89c <prvProcessReceivedCommands+0x1c0>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	1d39      	adds	r1, r7, #4
 800c880:	2200      	movs	r2, #0
 800c882:	4618      	mov	r0, r3
 800c884:	f7fe fc16 	bl	800b0b4 <xQueueReceive>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f47f af2a 	bne.w	800c6e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c890:	bf00      	nop
 800c892:	bf00      	nop
 800c894:	3730      	adds	r7, #48	; 0x30
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	20004e94 	.word	0x20004e94

0800c8a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b088      	sub	sp, #32
 800c8a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8a6:	e048      	b.n	800c93a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8a8:	4b2d      	ldr	r3, [pc, #180]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8b2:	4b2b      	ldr	r3, [pc, #172]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	3304      	adds	r3, #4
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7fd fee1 	bl	800a688 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8d4:	f003 0304 	and.w	r3, r3, #4
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d02e      	beq.n	800c93a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	699b      	ldr	r3, [r3, #24]
 800c8e0:	693a      	ldr	r2, [r7, #16]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d90e      	bls.n	800c90c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	68ba      	ldr	r2, [r7, #8]
 800c8f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	68fa      	ldr	r2, [r7, #12]
 800c8f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c8fa:	4b19      	ldr	r3, [pc, #100]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	3304      	adds	r3, #4
 800c902:	4619      	mov	r1, r3
 800c904:	4610      	mov	r0, r2
 800c906:	f7fd fe86 	bl	800a616 <vListInsert>
 800c90a:	e016      	b.n	800c93a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c90c:	2300      	movs	r3, #0
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	2300      	movs	r3, #0
 800c912:	693a      	ldr	r2, [r7, #16]
 800c914:	2100      	movs	r1, #0
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f7ff fd60 	bl	800c3dc <xTimerGenericCommand>
 800c91c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d10a      	bne.n	800c93a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c928:	f383 8811 	msr	BASEPRI, r3
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	f3bf 8f4f 	dsb	sy
 800c934:	603b      	str	r3, [r7, #0]
}
 800c936:	bf00      	nop
 800c938:	e7fe      	b.n	800c938 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c93a:	4b09      	ldr	r3, [pc, #36]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1b1      	bne.n	800c8a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c944:	4b06      	ldr	r3, [pc, #24]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c94a:	4b06      	ldr	r3, [pc, #24]	; (800c964 <prvSwitchTimerLists+0xc4>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a04      	ldr	r2, [pc, #16]	; (800c960 <prvSwitchTimerLists+0xc0>)
 800c950:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c952:	4a04      	ldr	r2, [pc, #16]	; (800c964 <prvSwitchTimerLists+0xc4>)
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	6013      	str	r3, [r2, #0]
}
 800c958:	bf00      	nop
 800c95a:	3718      	adds	r7, #24
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	20004e8c 	.word	0x20004e8c
 800c964:	20004e90 	.word	0x20004e90

0800c968 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c96e:	f7fd ffe1 	bl	800a934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c972:	4b15      	ldr	r3, [pc, #84]	; (800c9c8 <prvCheckForValidListAndQueue+0x60>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d120      	bne.n	800c9bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c97a:	4814      	ldr	r0, [pc, #80]	; (800c9cc <prvCheckForValidListAndQueue+0x64>)
 800c97c:	f7fd fdfa 	bl	800a574 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c980:	4813      	ldr	r0, [pc, #76]	; (800c9d0 <prvCheckForValidListAndQueue+0x68>)
 800c982:	f7fd fdf7 	bl	800a574 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c986:	4b13      	ldr	r3, [pc, #76]	; (800c9d4 <prvCheckForValidListAndQueue+0x6c>)
 800c988:	4a10      	ldr	r2, [pc, #64]	; (800c9cc <prvCheckForValidListAndQueue+0x64>)
 800c98a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c98c:	4b12      	ldr	r3, [pc, #72]	; (800c9d8 <prvCheckForValidListAndQueue+0x70>)
 800c98e:	4a10      	ldr	r2, [pc, #64]	; (800c9d0 <prvCheckForValidListAndQueue+0x68>)
 800c990:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c992:	2300      	movs	r3, #0
 800c994:	9300      	str	r3, [sp, #0]
 800c996:	4b11      	ldr	r3, [pc, #68]	; (800c9dc <prvCheckForValidListAndQueue+0x74>)
 800c998:	4a11      	ldr	r2, [pc, #68]	; (800c9e0 <prvCheckForValidListAndQueue+0x78>)
 800c99a:	2110      	movs	r1, #16
 800c99c:	200a      	movs	r0, #10
 800c99e:	f7fe f953 	bl	800ac48 <xQueueGenericCreateStatic>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	4a08      	ldr	r2, [pc, #32]	; (800c9c8 <prvCheckForValidListAndQueue+0x60>)
 800c9a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9a8:	4b07      	ldr	r3, [pc, #28]	; (800c9c8 <prvCheckForValidListAndQueue+0x60>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d005      	beq.n	800c9bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9b0:	4b05      	ldr	r3, [pc, #20]	; (800c9c8 <prvCheckForValidListAndQueue+0x60>)
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	490b      	ldr	r1, [pc, #44]	; (800c9e4 <prvCheckForValidListAndQueue+0x7c>)
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7fe fd6c 	bl	800b494 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9bc:	f7fd ffea 	bl	800a994 <vPortExitCritical>
}
 800c9c0:	bf00      	nop
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	20004e94 	.word	0x20004e94
 800c9cc:	20004e64 	.word	0x20004e64
 800c9d0:	20004e78 	.word	0x20004e78
 800c9d4:	20004e8c 	.word	0x20004e8c
 800c9d8:	20004e90 	.word	0x20004e90
 800c9dc:	20004f40 	.word	0x20004f40
 800c9e0:	20004ea0 	.word	0x20004ea0
 800c9e4:	08013bc4 	.word	0x08013bc4

0800c9e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c9f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c9f8:	f002 fc96 	bl	800f328 <USBD_static_malloc>
 800c9fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d109      	bne.n	800ca18 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	32b0      	adds	r2, #176	; 0xb0
 800ca0e:	2100      	movs	r1, #0
 800ca10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ca14:	2302      	movs	r3, #2
 800ca16:	e0d4      	b.n	800cbc2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ca18:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	f003 fc4f 	bl	80102c2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	32b0      	adds	r2, #176	; 0xb0
 800ca2e:	68f9      	ldr	r1, [r7, #12]
 800ca30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	32b0      	adds	r2, #176	; 0xb0
 800ca3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	7c1b      	ldrb	r3, [r3, #16]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d138      	bne.n	800cac2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ca50:	4b5e      	ldr	r3, [pc, #376]	; (800cbcc <USBD_CDC_Init+0x1e4>)
 800ca52:	7819      	ldrb	r1, [r3, #0]
 800ca54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca58:	2202      	movs	r2, #2
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f002 fb41 	bl	800f0e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ca60:	4b5a      	ldr	r3, [pc, #360]	; (800cbcc <USBD_CDC_Init+0x1e4>)
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	f003 020f 	and.w	r2, r3, #15
 800ca68:	6879      	ldr	r1, [r7, #4]
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	4413      	add	r3, r2
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	440b      	add	r3, r1
 800ca74:	3324      	adds	r3, #36	; 0x24
 800ca76:	2201      	movs	r2, #1
 800ca78:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ca7a:	4b55      	ldr	r3, [pc, #340]	; (800cbd0 <USBD_CDC_Init+0x1e8>)
 800ca7c:	7819      	ldrb	r1, [r3, #0]
 800ca7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca82:	2202      	movs	r2, #2
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f002 fb2c 	bl	800f0e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ca8a:	4b51      	ldr	r3, [pc, #324]	; (800cbd0 <USBD_CDC_Init+0x1e8>)
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	f003 020f 	and.w	r2, r3, #15
 800ca92:	6879      	ldr	r1, [r7, #4]
 800ca94:	4613      	mov	r3, r2
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	4413      	add	r3, r2
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	440b      	add	r3, r1
 800ca9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800caa2:	2201      	movs	r2, #1
 800caa4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800caa6:	4b4b      	ldr	r3, [pc, #300]	; (800cbd4 <USBD_CDC_Init+0x1ec>)
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	f003 020f 	and.w	r2, r3, #15
 800caae:	6879      	ldr	r1, [r7, #4]
 800cab0:	4613      	mov	r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	009b      	lsls	r3, r3, #2
 800cab8:	440b      	add	r3, r1
 800caba:	3326      	adds	r3, #38	; 0x26
 800cabc:	2210      	movs	r2, #16
 800cabe:	801a      	strh	r2, [r3, #0]
 800cac0:	e035      	b.n	800cb2e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cac2:	4b42      	ldr	r3, [pc, #264]	; (800cbcc <USBD_CDC_Init+0x1e4>)
 800cac4:	7819      	ldrb	r1, [r3, #0]
 800cac6:	2340      	movs	r3, #64	; 0x40
 800cac8:	2202      	movs	r2, #2
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f002 fb09 	bl	800f0e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cad0:	4b3e      	ldr	r3, [pc, #248]	; (800cbcc <USBD_CDC_Init+0x1e4>)
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	f003 020f 	and.w	r2, r3, #15
 800cad8:	6879      	ldr	r1, [r7, #4]
 800cada:	4613      	mov	r3, r2
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	4413      	add	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	440b      	add	r3, r1
 800cae4:	3324      	adds	r3, #36	; 0x24
 800cae6:	2201      	movs	r2, #1
 800cae8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800caea:	4b39      	ldr	r3, [pc, #228]	; (800cbd0 <USBD_CDC_Init+0x1e8>)
 800caec:	7819      	ldrb	r1, [r3, #0]
 800caee:	2340      	movs	r3, #64	; 0x40
 800caf0:	2202      	movs	r2, #2
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f002 faf5 	bl	800f0e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800caf8:	4b35      	ldr	r3, [pc, #212]	; (800cbd0 <USBD_CDC_Init+0x1e8>)
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	f003 020f 	and.w	r2, r3, #15
 800cb00:	6879      	ldr	r1, [r7, #4]
 800cb02:	4613      	mov	r3, r2
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	4413      	add	r3, r2
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	440b      	add	r3, r1
 800cb0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cb10:	2201      	movs	r2, #1
 800cb12:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cb14:	4b2f      	ldr	r3, [pc, #188]	; (800cbd4 <USBD_CDC_Init+0x1ec>)
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	f003 020f 	and.w	r2, r3, #15
 800cb1c:	6879      	ldr	r1, [r7, #4]
 800cb1e:	4613      	mov	r3, r2
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	4413      	add	r3, r2
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	440b      	add	r3, r1
 800cb28:	3326      	adds	r3, #38	; 0x26
 800cb2a:	2210      	movs	r2, #16
 800cb2c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cb2e:	4b29      	ldr	r3, [pc, #164]	; (800cbd4 <USBD_CDC_Init+0x1ec>)
 800cb30:	7819      	ldrb	r1, [r3, #0]
 800cb32:	2308      	movs	r3, #8
 800cb34:	2203      	movs	r2, #3
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f002 fad3 	bl	800f0e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cb3c:	4b25      	ldr	r3, [pc, #148]	; (800cbd4 <USBD_CDC_Init+0x1ec>)
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	f003 020f 	and.w	r2, r3, #15
 800cb44:	6879      	ldr	r1, [r7, #4]
 800cb46:	4613      	mov	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	4413      	add	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	440b      	add	r3, r1
 800cb50:	3324      	adds	r3, #36	; 0x24
 800cb52:	2201      	movs	r2, #1
 800cb54:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	33b0      	adds	r3, #176	; 0xb0
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4413      	add	r3, r2
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d101      	bne.n	800cb90 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	e018      	b.n	800cbc2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	7c1b      	ldrb	r3, [r3, #16]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10a      	bne.n	800cbae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cb98:	4b0d      	ldr	r3, [pc, #52]	; (800cbd0 <USBD_CDC_Init+0x1e8>)
 800cb9a:	7819      	ldrb	r1, [r3, #0]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f002 fb8a 	bl	800f2c0 <USBD_LL_PrepareReceive>
 800cbac:	e008      	b.n	800cbc0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cbae:	4b08      	ldr	r3, [pc, #32]	; (800cbd0 <USBD_CDC_Init+0x1e8>)
 800cbb0:	7819      	ldrb	r1, [r3, #0]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cbb8:	2340      	movs	r3, #64	; 0x40
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f002 fb80 	bl	800f2c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cbc0:	2300      	movs	r3, #0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	20000113 	.word	0x20000113
 800cbd0:	20000114 	.word	0x20000114
 800cbd4:	20000115 	.word	0x20000115

0800cbd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cbe4:	4b3a      	ldr	r3, [pc, #232]	; (800ccd0 <USBD_CDC_DeInit+0xf8>)
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	4619      	mov	r1, r3
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f002 fa9f 	bl	800f12e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cbf0:	4b37      	ldr	r3, [pc, #220]	; (800ccd0 <USBD_CDC_DeInit+0xf8>)
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	f003 020f 	and.w	r2, r3, #15
 800cbf8:	6879      	ldr	r1, [r7, #4]
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	009b      	lsls	r3, r3, #2
 800cbfe:	4413      	add	r3, r2
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	440b      	add	r3, r1
 800cc04:	3324      	adds	r3, #36	; 0x24
 800cc06:	2200      	movs	r2, #0
 800cc08:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cc0a:	4b32      	ldr	r3, [pc, #200]	; (800ccd4 <USBD_CDC_DeInit+0xfc>)
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	4619      	mov	r1, r3
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f002 fa8c 	bl	800f12e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cc16:	4b2f      	ldr	r3, [pc, #188]	; (800ccd4 <USBD_CDC_DeInit+0xfc>)
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	f003 020f 	and.w	r2, r3, #15
 800cc1e:	6879      	ldr	r1, [r7, #4]
 800cc20:	4613      	mov	r3, r2
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	4413      	add	r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	440b      	add	r3, r1
 800cc2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc2e:	2200      	movs	r2, #0
 800cc30:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cc32:	4b29      	ldr	r3, [pc, #164]	; (800ccd8 <USBD_CDC_DeInit+0x100>)
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	4619      	mov	r1, r3
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f002 fa78 	bl	800f12e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cc3e:	4b26      	ldr	r3, [pc, #152]	; (800ccd8 <USBD_CDC_DeInit+0x100>)
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	f003 020f 	and.w	r2, r3, #15
 800cc46:	6879      	ldr	r1, [r7, #4]
 800cc48:	4613      	mov	r3, r2
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	4413      	add	r3, r2
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	440b      	add	r3, r1
 800cc52:	3324      	adds	r3, #36	; 0x24
 800cc54:	2200      	movs	r2, #0
 800cc56:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cc58:	4b1f      	ldr	r3, [pc, #124]	; (800ccd8 <USBD_CDC_DeInit+0x100>)
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	f003 020f 	and.w	r2, r3, #15
 800cc60:	6879      	ldr	r1, [r7, #4]
 800cc62:	4613      	mov	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	4413      	add	r3, r2
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	440b      	add	r3, r1
 800cc6c:	3326      	adds	r3, #38	; 0x26
 800cc6e:	2200      	movs	r2, #0
 800cc70:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	32b0      	adds	r2, #176	; 0xb0
 800cc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d01f      	beq.n	800ccc4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	33b0      	adds	r3, #176	; 0xb0
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	4413      	add	r3, r2
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	32b0      	adds	r2, #176	; 0xb0
 800cca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f002 fb4c 	bl	800f344 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	32b0      	adds	r2, #176	; 0xb0
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3708      	adds	r7, #8
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	20000113 	.word	0x20000113
 800ccd4:	20000114 	.word	0x20000114
 800ccd8:	20000115 	.word	0x20000115

0800ccdc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	32b0      	adds	r2, #176	; 0xb0
 800ccf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d101      	bne.n	800cd0c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cd08:	2303      	movs	r3, #3
 800cd0a:	e0bf      	b.n	800ce8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d050      	beq.n	800cdba <USBD_CDC_Setup+0xde>
 800cd18:	2b20      	cmp	r3, #32
 800cd1a:	f040 80af 	bne.w	800ce7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	88db      	ldrh	r3, [r3, #6]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d03a      	beq.n	800cd9c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	b25b      	sxtb	r3, r3
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	da1b      	bge.n	800cd68 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	33b0      	adds	r3, #176	; 0xb0
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	4413      	add	r3, r2
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cd46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd48:	683a      	ldr	r2, [r7, #0]
 800cd4a:	88d2      	ldrh	r2, [r2, #6]
 800cd4c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	88db      	ldrh	r3, [r3, #6]
 800cd52:	2b07      	cmp	r3, #7
 800cd54:	bf28      	it	cs
 800cd56:	2307      	movcs	r3, #7
 800cd58:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	89fa      	ldrh	r2, [r7, #14]
 800cd5e:	4619      	mov	r1, r3
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f001 fd89 	bl	800e878 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cd66:	e090      	b.n	800ce8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	785a      	ldrb	r2, [r3, #1]
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	88db      	ldrh	r3, [r3, #6]
 800cd76:	2b3f      	cmp	r3, #63	; 0x3f
 800cd78:	d803      	bhi.n	800cd82 <USBD_CDC_Setup+0xa6>
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	88db      	ldrh	r3, [r3, #6]
 800cd7e:	b2da      	uxtb	r2, r3
 800cd80:	e000      	b.n	800cd84 <USBD_CDC_Setup+0xa8>
 800cd82:	2240      	movs	r2, #64	; 0x40
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cd8a:	6939      	ldr	r1, [r7, #16]
 800cd8c:	693b      	ldr	r3, [r7, #16]
 800cd8e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cd92:	461a      	mov	r2, r3
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f001 fd9b 	bl	800e8d0 <USBD_CtlPrepareRx>
      break;
 800cd9a:	e076      	b.n	800ce8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	33b0      	adds	r3, #176	; 0xb0
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4413      	add	r3, r2
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	683a      	ldr	r2, [r7, #0]
 800cdb0:	7850      	ldrb	r0, [r2, #1]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	6839      	ldr	r1, [r7, #0]
 800cdb6:	4798      	blx	r3
      break;
 800cdb8:	e067      	b.n	800ce8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	785b      	ldrb	r3, [r3, #1]
 800cdbe:	2b0b      	cmp	r3, #11
 800cdc0:	d851      	bhi.n	800ce66 <USBD_CDC_Setup+0x18a>
 800cdc2:	a201      	add	r2, pc, #4	; (adr r2, 800cdc8 <USBD_CDC_Setup+0xec>)
 800cdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc8:	0800cdf9 	.word	0x0800cdf9
 800cdcc:	0800ce75 	.word	0x0800ce75
 800cdd0:	0800ce67 	.word	0x0800ce67
 800cdd4:	0800ce67 	.word	0x0800ce67
 800cdd8:	0800ce67 	.word	0x0800ce67
 800cddc:	0800ce67 	.word	0x0800ce67
 800cde0:	0800ce67 	.word	0x0800ce67
 800cde4:	0800ce67 	.word	0x0800ce67
 800cde8:	0800ce67 	.word	0x0800ce67
 800cdec:	0800ce67 	.word	0x0800ce67
 800cdf0:	0800ce23 	.word	0x0800ce23
 800cdf4:	0800ce4d 	.word	0x0800ce4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	2b03      	cmp	r3, #3
 800ce02:	d107      	bne.n	800ce14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ce04:	f107 030a 	add.w	r3, r7, #10
 800ce08:	2202      	movs	r2, #2
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f001 fd33 	bl	800e878 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce12:	e032      	b.n	800ce7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ce14:	6839      	ldr	r1, [r7, #0]
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f001 fcbd 	bl	800e796 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce1c:	2303      	movs	r3, #3
 800ce1e:	75fb      	strb	r3, [r7, #23]
          break;
 800ce20:	e02b      	b.n	800ce7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	2b03      	cmp	r3, #3
 800ce2c:	d107      	bne.n	800ce3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ce2e:	f107 030d 	add.w	r3, r7, #13
 800ce32:	2201      	movs	r2, #1
 800ce34:	4619      	mov	r1, r3
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f001 fd1e 	bl	800e878 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce3c:	e01d      	b.n	800ce7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ce3e:	6839      	ldr	r1, [r7, #0]
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f001 fca8 	bl	800e796 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce46:	2303      	movs	r3, #3
 800ce48:	75fb      	strb	r3, [r7, #23]
          break;
 800ce4a:	e016      	b.n	800ce7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	2b03      	cmp	r3, #3
 800ce56:	d00f      	beq.n	800ce78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ce58:	6839      	ldr	r1, [r7, #0]
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f001 fc9b 	bl	800e796 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce60:	2303      	movs	r3, #3
 800ce62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ce64:	e008      	b.n	800ce78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ce66:	6839      	ldr	r1, [r7, #0]
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f001 fc94 	bl	800e796 <USBD_CtlError>
          ret = USBD_FAIL;
 800ce6e:	2303      	movs	r3, #3
 800ce70:	75fb      	strb	r3, [r7, #23]
          break;
 800ce72:	e002      	b.n	800ce7a <USBD_CDC_Setup+0x19e>
          break;
 800ce74:	bf00      	nop
 800ce76:	e008      	b.n	800ce8a <USBD_CDC_Setup+0x1ae>
          break;
 800ce78:	bf00      	nop
      }
      break;
 800ce7a:	e006      	b.n	800ce8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f001 fc89 	bl	800e796 <USBD_CtlError>
      ret = USBD_FAIL;
 800ce84:	2303      	movs	r3, #3
 800ce86:	75fb      	strb	r3, [r7, #23]
      break;
 800ce88:	bf00      	nop
  }

  return (uint8_t)ret;
 800ce8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3718      	adds	r7, #24
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cea6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	32b0      	adds	r2, #176	; 0xb0
 800ceb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d101      	bne.n	800cebe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ceba:	2303      	movs	r3, #3
 800cebc:	e065      	b.n	800cf8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	32b0      	adds	r2, #176	; 0xb0
 800cec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cecc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cece:	78fb      	ldrb	r3, [r7, #3]
 800ced0:	f003 020f 	and.w	r2, r3, #15
 800ced4:	6879      	ldr	r1, [r7, #4]
 800ced6:	4613      	mov	r3, r2
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	4413      	add	r3, r2
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	440b      	add	r3, r1
 800cee0:	3318      	adds	r3, #24
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d02f      	beq.n	800cf48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cee8:	78fb      	ldrb	r3, [r7, #3]
 800ceea:	f003 020f 	and.w	r2, r3, #15
 800ceee:	6879      	ldr	r1, [r7, #4]
 800cef0:	4613      	mov	r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	4413      	add	r3, r2
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	440b      	add	r3, r1
 800cefa:	3318      	adds	r3, #24
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	78fb      	ldrb	r3, [r7, #3]
 800cf00:	f003 010f 	and.w	r1, r3, #15
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	460b      	mov	r3, r1
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	440b      	add	r3, r1
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	4403      	add	r3, r0
 800cf10:	3348      	adds	r3, #72	; 0x48
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	fbb2 f1f3 	udiv	r1, r2, r3
 800cf18:	fb01 f303 	mul.w	r3, r1, r3
 800cf1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d112      	bne.n	800cf48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cf22:	78fb      	ldrb	r3, [r7, #3]
 800cf24:	f003 020f 	and.w	r2, r3, #15
 800cf28:	6879      	ldr	r1, [r7, #4]
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	4413      	add	r3, r2
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	440b      	add	r3, r1
 800cf34:	3318      	adds	r3, #24
 800cf36:	2200      	movs	r2, #0
 800cf38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cf3a:	78f9      	ldrb	r1, [r7, #3]
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	2200      	movs	r2, #0
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f002 f99c 	bl	800f27e <USBD_LL_Transmit>
 800cf46:	e01f      	b.n	800cf88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	33b0      	adds	r3, #176	; 0xb0
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	4413      	add	r3, r2
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d010      	beq.n	800cf88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	33b0      	adds	r3, #176	; 0xb0
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4413      	add	r3, r2
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	691b      	ldr	r3, [r3, #16]
 800cf78:	68ba      	ldr	r2, [r7, #8]
 800cf7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cf84:	78fa      	ldrb	r2, [r7, #3]
 800cf86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cf88:	2300      	movs	r3, #0
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3710      	adds	r7, #16
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b084      	sub	sp, #16
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	32b0      	adds	r2, #176	; 0xb0
 800cfa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	32b0      	adds	r2, #176	; 0xb0
 800cfb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d101      	bne.n	800cfc4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e01a      	b.n	800cffa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cfc4:	78fb      	ldrb	r3, [r7, #3]
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f002 f99a 	bl	800f302 <USBD_LL_GetRxDataSize>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	33b0      	adds	r3, #176	; 0xb0
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cff4:	4611      	mov	r1, r2
 800cff6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}

0800d002 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b084      	sub	sp, #16
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	32b0      	adds	r2, #176	; 0xb0
 800d014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d018:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d101      	bne.n	800d024 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d020:	2303      	movs	r3, #3
 800d022:	e025      	b.n	800d070 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	33b0      	adds	r3, #176	; 0xb0
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	4413      	add	r3, r2
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d01a      	beq.n	800d06e <USBD_CDC_EP0_RxReady+0x6c>
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d03e:	2bff      	cmp	r3, #255	; 0xff
 800d040:	d015      	beq.n	800d06e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	33b0      	adds	r3, #176	; 0xb0
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	4413      	add	r3, r2
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	689b      	ldr	r3, [r3, #8]
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d05a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d05c:	68fa      	ldr	r2, [r7, #12]
 800d05e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d062:	b292      	uxth	r2, r2
 800d064:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	22ff      	movs	r2, #255	; 0xff
 800d06a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b086      	sub	sp, #24
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d080:	2182      	movs	r1, #130	; 0x82
 800d082:	4818      	ldr	r0, [pc, #96]	; (800d0e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d084:	f000 fd4f 	bl	800db26 <USBD_GetEpDesc>
 800d088:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d08a:	2101      	movs	r1, #1
 800d08c:	4815      	ldr	r0, [pc, #84]	; (800d0e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d08e:	f000 fd4a 	bl	800db26 <USBD_GetEpDesc>
 800d092:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d094:	2181      	movs	r1, #129	; 0x81
 800d096:	4813      	ldr	r0, [pc, #76]	; (800d0e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d098:	f000 fd45 	bl	800db26 <USBD_GetEpDesc>
 800d09c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d002      	beq.n	800d0aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	2210      	movs	r2, #16
 800d0a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d006      	beq.n	800d0be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0b8:	711a      	strb	r2, [r3, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d006      	beq.n	800d0d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0cc:	711a      	strb	r2, [r3, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2243      	movs	r2, #67	; 0x43
 800d0d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d0d8:	4b02      	ldr	r3, [pc, #8]	; (800d0e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3718      	adds	r7, #24
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	200000d0 	.word	0x200000d0

0800d0e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d0f0:	2182      	movs	r1, #130	; 0x82
 800d0f2:	4818      	ldr	r0, [pc, #96]	; (800d154 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d0f4:	f000 fd17 	bl	800db26 <USBD_GetEpDesc>
 800d0f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d0fa:	2101      	movs	r1, #1
 800d0fc:	4815      	ldr	r0, [pc, #84]	; (800d154 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d0fe:	f000 fd12 	bl	800db26 <USBD_GetEpDesc>
 800d102:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d104:	2181      	movs	r1, #129	; 0x81
 800d106:	4813      	ldr	r0, [pc, #76]	; (800d154 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d108:	f000 fd0d 	bl	800db26 <USBD_GetEpDesc>
 800d10c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d002      	beq.n	800d11a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	2210      	movs	r2, #16
 800d118:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d006      	beq.n	800d12e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	2200      	movs	r2, #0
 800d124:	711a      	strb	r2, [r3, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	f042 0202 	orr.w	r2, r2, #2
 800d12c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d006      	beq.n	800d142 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2200      	movs	r2, #0
 800d138:	711a      	strb	r2, [r3, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f042 0202 	orr.w	r2, r2, #2
 800d140:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2243      	movs	r2, #67	; 0x43
 800d146:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d148:	4b02      	ldr	r3, [pc, #8]	; (800d154 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3718      	adds	r7, #24
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	200000d0 	.word	0x200000d0

0800d158 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b086      	sub	sp, #24
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d160:	2182      	movs	r1, #130	; 0x82
 800d162:	4818      	ldr	r0, [pc, #96]	; (800d1c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d164:	f000 fcdf 	bl	800db26 <USBD_GetEpDesc>
 800d168:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d16a:	2101      	movs	r1, #1
 800d16c:	4815      	ldr	r0, [pc, #84]	; (800d1c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d16e:	f000 fcda 	bl	800db26 <USBD_GetEpDesc>
 800d172:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d174:	2181      	movs	r1, #129	; 0x81
 800d176:	4813      	ldr	r0, [pc, #76]	; (800d1c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d178:	f000 fcd5 	bl	800db26 <USBD_GetEpDesc>
 800d17c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d002      	beq.n	800d18a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	2210      	movs	r2, #16
 800d188:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d006      	beq.n	800d19e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	2200      	movs	r2, #0
 800d194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d198:	711a      	strb	r2, [r3, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d006      	beq.n	800d1b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1ac:	711a      	strb	r2, [r3, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2243      	movs	r2, #67	; 0x43
 800d1b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d1b8:	4b02      	ldr	r3, [pc, #8]	; (800d1c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	200000d0 	.word	0x200000d0

0800d1c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	220a      	movs	r2, #10
 800d1d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d1d6:	4b03      	ldr	r3, [pc, #12]	; (800d1e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr
 800d1e4:	2000008c 	.word	0x2000008c

0800d1e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d101      	bne.n	800d1fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d1f8:	2303      	movs	r3, #3
 800d1fa:	e009      	b.n	800d210 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	33b0      	adds	r3, #176	; 0xb0
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	4413      	add	r3, r2
 800d20a:	683a      	ldr	r2, [r7, #0]
 800d20c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	370c      	adds	r7, #12
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr

0800d21c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b087      	sub	sp, #28
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	32b0      	adds	r2, #176	; 0xb0
 800d232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d236:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d101      	bne.n	800d242 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d23e:	2303      	movs	r3, #3
 800d240:	e008      	b.n	800d254 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	68ba      	ldr	r2, [r7, #8]
 800d246:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d252:	2300      	movs	r3, #0
}
 800d254:	4618      	mov	r0, r3
 800d256:	371c      	adds	r7, #28
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d260:	b480      	push	{r7}
 800d262:	b085      	sub	sp, #20
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	32b0      	adds	r2, #176	; 0xb0
 800d274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d278:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d101      	bne.n	800d284 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d280:	2303      	movs	r3, #3
 800d282:	e004      	b.n	800d28e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	683a      	ldr	r2, [r7, #0]
 800d288:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d28c:	2300      	movs	r3, #0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3714      	adds	r7, #20
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
	...

0800d29c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	32b0      	adds	r2, #176	; 0xb0
 800d2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	32b0      	adds	r2, #176	; 0xb0
 800d2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d101      	bne.n	800d2ce <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d2ca:	2303      	movs	r3, #3
 800d2cc:	e025      	b.n	800d31a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d11f      	bne.n	800d318 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d2e0:	4b10      	ldr	r3, [pc, #64]	; (800d324 <USBD_CDC_TransmitPacket+0x88>)
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	f003 020f 	and.w	r2, r3, #15
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	4413      	add	r3, r2
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	4403      	add	r3, r0
 800d2fa:	3318      	adds	r3, #24
 800d2fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d2fe:	4b09      	ldr	r3, [pc, #36]	; (800d324 <USBD_CDC_TransmitPacket+0x88>)
 800d300:	7819      	ldrb	r1, [r3, #0]
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f001 ffb5 	bl	800f27e <USBD_LL_Transmit>

    ret = USBD_OK;
 800d314:	2300      	movs	r3, #0
 800d316:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d318:	7bfb      	ldrb	r3, [r7, #15]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	20000113 	.word	0x20000113

0800d328 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	32b0      	adds	r2, #176	; 0xb0
 800d33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d33e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	32b0      	adds	r2, #176	; 0xb0
 800d34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d101      	bne.n	800d356 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d352:	2303      	movs	r3, #3
 800d354:	e018      	b.n	800d388 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	7c1b      	ldrb	r3, [r3, #16]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d10a      	bne.n	800d374 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d35e:	4b0c      	ldr	r3, [pc, #48]	; (800d390 <USBD_CDC_ReceivePacket+0x68>)
 800d360:	7819      	ldrb	r1, [r3, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d368:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f001 ffa7 	bl	800f2c0 <USBD_LL_PrepareReceive>
 800d372:	e008      	b.n	800d386 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d374:	4b06      	ldr	r3, [pc, #24]	; (800d390 <USBD_CDC_ReceivePacket+0x68>)
 800d376:	7819      	ldrb	r1, [r3, #0]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d37e:	2340      	movs	r3, #64	; 0x40
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f001 ff9d 	bl	800f2c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d386:	2300      	movs	r3, #0
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	20000114 	.word	0x20000114

0800d394 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	4613      	mov	r3, r2
 800d3a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d101      	bne.n	800d3ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	e01f      	b.n	800d3ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d003      	beq.n	800d3d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	68ba      	ldr	r2, [r7, #8]
 800d3ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	79fa      	ldrb	r2, [r7, #7]
 800d3de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f001 fe11 	bl	800f008 <USBD_LL_Init>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3718      	adds	r7, #24
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d3fe:	2300      	movs	r3, #0
 800d400:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d101      	bne.n	800d40c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d408:	2303      	movs	r3, #3
 800d40a:	e025      	b.n	800d458 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	683a      	ldr	r2, [r7, #0]
 800d410:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	32ae      	adds	r2, #174	; 0xae
 800d41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d424:	2b00      	cmp	r3, #0
 800d426:	d00f      	beq.n	800d448 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	32ae      	adds	r2, #174	; 0xae
 800d432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d438:	f107 020e 	add.w	r2, r7, #14
 800d43c:	4610      	mov	r0, r2
 800d43e:	4798      	blx	r3
 800d440:	4602      	mov	r2, r0
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d44e:	1c5a      	adds	r2, r3, #1
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f001 fe1f 	bl	800f0ac <USBD_LL_Start>
 800d46e:	4603      	mov	r3, r0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d480:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d482:	4618      	mov	r0, r3
 800d484:	370c      	adds	r7, #12
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d48e:	b580      	push	{r7, lr}
 800d490:	b084      	sub	sp, #16
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
 800d496:	460b      	mov	r3, r1
 800d498:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d49a:	2300      	movs	r3, #0
 800d49c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d009      	beq.n	800d4bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	78fa      	ldrb	r2, [r7, #3]
 800d4b2:	4611      	mov	r1, r2
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	4798      	blx	r3
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b084      	sub	sp, #16
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	78fa      	ldrb	r2, [r7, #3]
 800d4e0:	4611      	mov	r1, r2
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	4798      	blx	r3
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d001      	beq.n	800d4f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b084      	sub	sp, #16
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
 800d502:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f001 f908 	bl	800e722 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2201      	movs	r2, #1
 800d516:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d520:	461a      	mov	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d52e:	f003 031f 	and.w	r3, r3, #31
 800d532:	2b02      	cmp	r3, #2
 800d534:	d01a      	beq.n	800d56c <USBD_LL_SetupStage+0x72>
 800d536:	2b02      	cmp	r3, #2
 800d538:	d822      	bhi.n	800d580 <USBD_LL_SetupStage+0x86>
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d002      	beq.n	800d544 <USBD_LL_SetupStage+0x4a>
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d00a      	beq.n	800d558 <USBD_LL_SetupStage+0x5e>
 800d542:	e01d      	b.n	800d580 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d54a:	4619      	mov	r1, r3
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 fb5f 	bl	800dc10 <USBD_StdDevReq>
 800d552:	4603      	mov	r3, r0
 800d554:	73fb      	strb	r3, [r7, #15]
      break;
 800d556:	e020      	b.n	800d59a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d55e:	4619      	mov	r1, r3
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 fbc7 	bl	800dcf4 <USBD_StdItfReq>
 800d566:	4603      	mov	r3, r0
 800d568:	73fb      	strb	r3, [r7, #15]
      break;
 800d56a:	e016      	b.n	800d59a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d572:	4619      	mov	r1, r3
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 fc29 	bl	800ddcc <USBD_StdEPReq>
 800d57a:	4603      	mov	r3, r0
 800d57c:	73fb      	strb	r3, [r7, #15]
      break;
 800d57e:	e00c      	b.n	800d59a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d586:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	4619      	mov	r1, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f001 fdec 	bl	800f16c <USBD_LL_StallEP>
 800d594:	4603      	mov	r3, r0
 800d596:	73fb      	strb	r3, [r7, #15]
      break;
 800d598:	bf00      	nop
  }

  return ret;
 800d59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b086      	sub	sp, #24
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	607a      	str	r2, [r7, #4]
 800d5b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d5b6:	7afb      	ldrb	r3, [r7, #11]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d16e      	bne.n	800d69a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d5c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d5ca:	2b03      	cmp	r3, #3
 800d5cc:	f040 8098 	bne.w	800d700 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	689a      	ldr	r2, [r3, #8]
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d913      	bls.n	800d604 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	689a      	ldr	r2, [r3, #8]
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	1ad2      	subs	r2, r2, r3
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	68da      	ldr	r2, [r3, #12]
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	bf28      	it	cs
 800d5f6:	4613      	movcs	r3, r2
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	6879      	ldr	r1, [r7, #4]
 800d5fc:	68f8      	ldr	r0, [r7, #12]
 800d5fe:	f001 f984 	bl	800e90a <USBD_CtlContinueRx>
 800d602:	e07d      	b.n	800d700 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d60a:	f003 031f 	and.w	r3, r3, #31
 800d60e:	2b02      	cmp	r3, #2
 800d610:	d014      	beq.n	800d63c <USBD_LL_DataOutStage+0x98>
 800d612:	2b02      	cmp	r3, #2
 800d614:	d81d      	bhi.n	800d652 <USBD_LL_DataOutStage+0xae>
 800d616:	2b00      	cmp	r3, #0
 800d618:	d002      	beq.n	800d620 <USBD_LL_DataOutStage+0x7c>
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d003      	beq.n	800d626 <USBD_LL_DataOutStage+0x82>
 800d61e:	e018      	b.n	800d652 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d620:	2300      	movs	r3, #0
 800d622:	75bb      	strb	r3, [r7, #22]
            break;
 800d624:	e018      	b.n	800d658 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	4619      	mov	r1, r3
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	f000 fa5e 	bl	800daf2 <USBD_CoreFindIF>
 800d636:	4603      	mov	r3, r0
 800d638:	75bb      	strb	r3, [r7, #22]
            break;
 800d63a:	e00d      	b.n	800d658 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d642:	b2db      	uxtb	r3, r3
 800d644:	4619      	mov	r1, r3
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f000 fa60 	bl	800db0c <USBD_CoreFindEP>
 800d64c:	4603      	mov	r3, r0
 800d64e:	75bb      	strb	r3, [r7, #22]
            break;
 800d650:	e002      	b.n	800d658 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d652:	2300      	movs	r3, #0
 800d654:	75bb      	strb	r3, [r7, #22]
            break;
 800d656:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d658:	7dbb      	ldrb	r3, [r7, #22]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d119      	bne.n	800d692 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d664:	b2db      	uxtb	r3, r3
 800d666:	2b03      	cmp	r3, #3
 800d668:	d113      	bne.n	800d692 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d66a:	7dba      	ldrb	r2, [r7, #22]
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	32ae      	adds	r2, #174	; 0xae
 800d670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d674:	691b      	ldr	r3, [r3, #16]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00b      	beq.n	800d692 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d67a:	7dba      	ldrb	r2, [r7, #22]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d682:	7dba      	ldrb	r2, [r7, #22]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	32ae      	adds	r2, #174	; 0xae
 800d688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d68c:	691b      	ldr	r3, [r3, #16]
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f001 f94a 	bl	800e92c <USBD_CtlSendStatus>
 800d698:	e032      	b.n	800d700 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d69a:	7afb      	ldrb	r3, [r7, #11]
 800d69c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f000 fa31 	bl	800db0c <USBD_CoreFindEP>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6ae:	7dbb      	ldrb	r3, [r7, #22]
 800d6b0:	2bff      	cmp	r3, #255	; 0xff
 800d6b2:	d025      	beq.n	800d700 <USBD_LL_DataOutStage+0x15c>
 800d6b4:	7dbb      	ldrb	r3, [r7, #22]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d122      	bne.n	800d700 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	2b03      	cmp	r3, #3
 800d6c4:	d117      	bne.n	800d6f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d6c6:	7dba      	ldrb	r2, [r7, #22]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	32ae      	adds	r2, #174	; 0xae
 800d6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00f      	beq.n	800d6f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d6d6:	7dba      	ldrb	r2, [r7, #22]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d6de:	7dba      	ldrb	r2, [r7, #22]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	32ae      	adds	r2, #174	; 0xae
 800d6e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e8:	699b      	ldr	r3, [r3, #24]
 800d6ea:	7afa      	ldrb	r2, [r7, #11]
 800d6ec:	4611      	mov	r1, r2
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	4798      	blx	r3
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d6f6:	7dfb      	ldrb	r3, [r7, #23]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d001      	beq.n	800d700 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d6fc:	7dfb      	ldrb	r3, [r7, #23]
 800d6fe:	e000      	b.n	800d702 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3718      	adds	r7, #24
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b086      	sub	sp, #24
 800d70e:	af00      	add	r7, sp, #0
 800d710:	60f8      	str	r0, [r7, #12]
 800d712:	460b      	mov	r3, r1
 800d714:	607a      	str	r2, [r7, #4]
 800d716:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d718:	7afb      	ldrb	r3, [r7, #11]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d16f      	bne.n	800d7fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	3314      	adds	r3, #20
 800d722:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d72a:	2b02      	cmp	r3, #2
 800d72c:	d15a      	bne.n	800d7e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	689a      	ldr	r2, [r3, #8]
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	68db      	ldr	r3, [r3, #12]
 800d736:	429a      	cmp	r2, r3
 800d738:	d914      	bls.n	800d764 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	689a      	ldr	r2, [r3, #8]
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	1ad2      	subs	r2, r2, r3
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	461a      	mov	r2, r3
 800d74e:	6879      	ldr	r1, [r7, #4]
 800d750:	68f8      	ldr	r0, [r7, #12]
 800d752:	f001 f8ac 	bl	800e8ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d756:	2300      	movs	r3, #0
 800d758:	2200      	movs	r2, #0
 800d75a:	2100      	movs	r1, #0
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f001 fdaf 	bl	800f2c0 <USBD_LL_PrepareReceive>
 800d762:	e03f      	b.n	800d7e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	68da      	ldr	r2, [r3, #12]
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d11c      	bne.n	800d7aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	685a      	ldr	r2, [r3, #4]
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d778:	429a      	cmp	r2, r3
 800d77a:	d316      	bcc.n	800d7aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	685a      	ldr	r2, [r3, #4]
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d786:	429a      	cmp	r2, r3
 800d788:	d20f      	bcs.n	800d7aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d78a:	2200      	movs	r2, #0
 800d78c:	2100      	movs	r1, #0
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	f001 f88d 	bl	800e8ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2200      	movs	r2, #0
 800d798:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d79c:	2300      	movs	r3, #0
 800d79e:	2200      	movs	r2, #0
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	68f8      	ldr	r0, [r7, #12]
 800d7a4:	f001 fd8c 	bl	800f2c0 <USBD_LL_PrepareReceive>
 800d7a8:	e01c      	b.n	800d7e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	2b03      	cmp	r3, #3
 800d7b4:	d10f      	bne.n	800d7d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7bc:	68db      	ldr	r3, [r3, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d009      	beq.n	800d7d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7d0:	68db      	ldr	r3, [r3, #12]
 800d7d2:	68f8      	ldr	r0, [r7, #12]
 800d7d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d7d6:	2180      	movs	r1, #128	; 0x80
 800d7d8:	68f8      	ldr	r0, [r7, #12]
 800d7da:	f001 fcc7 	bl	800f16c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d7de:	68f8      	ldr	r0, [r7, #12]
 800d7e0:	f001 f8b7 	bl	800e952 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d03a      	beq.n	800d864 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f7ff fe42 	bl	800d478 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d7fc:	e032      	b.n	800d864 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d7fe:	7afb      	ldrb	r3, [r7, #11]
 800d800:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d804:	b2db      	uxtb	r3, r3
 800d806:	4619      	mov	r1, r3
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f000 f97f 	bl	800db0c <USBD_CoreFindEP>
 800d80e:	4603      	mov	r3, r0
 800d810:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d812:	7dfb      	ldrb	r3, [r7, #23]
 800d814:	2bff      	cmp	r3, #255	; 0xff
 800d816:	d025      	beq.n	800d864 <USBD_LL_DataInStage+0x15a>
 800d818:	7dfb      	ldrb	r3, [r7, #23]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d122      	bne.n	800d864 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d824:	b2db      	uxtb	r3, r3
 800d826:	2b03      	cmp	r3, #3
 800d828:	d11c      	bne.n	800d864 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d82a:	7dfa      	ldrb	r2, [r7, #23]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	32ae      	adds	r2, #174	; 0xae
 800d830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d834:	695b      	ldr	r3, [r3, #20]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d014      	beq.n	800d864 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d83a:	7dfa      	ldrb	r2, [r7, #23]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d842:	7dfa      	ldrb	r2, [r7, #23]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	32ae      	adds	r2, #174	; 0xae
 800d848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d84c:	695b      	ldr	r3, [r3, #20]
 800d84e:	7afa      	ldrb	r2, [r7, #11]
 800d850:	4611      	mov	r1, r2
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	4798      	blx	r3
 800d856:	4603      	mov	r3, r0
 800d858:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d85a:	7dbb      	ldrb	r3, [r7, #22]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d001      	beq.n	800d864 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d860:	7dbb      	ldrb	r3, [r7, #22]
 800d862:	e000      	b.n	800d866 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3718      	adds	r7, #24
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b084      	sub	sp, #16
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d876:	2300      	movs	r3, #0
 800d878:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2201      	movs	r2, #1
 800d87e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2200      	movs	r2, #0
 800d88e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d014      	beq.n	800d8d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d00e      	beq.n	800d8d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	6852      	ldr	r2, [r2, #4]
 800d8c2:	b2d2      	uxtb	r2, r2
 800d8c4:	4611      	mov	r1, r2
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	4798      	blx	r3
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d001      	beq.n	800d8d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d8d0:	2303      	movs	r3, #3
 800d8d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8d4:	2340      	movs	r3, #64	; 0x40
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	2100      	movs	r1, #0
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f001 fc01 	bl	800f0e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2240      	movs	r2, #64	; 0x40
 800d8ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8f0:	2340      	movs	r3, #64	; 0x40
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	2180      	movs	r1, #128	; 0x80
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f001 fbf3 	bl	800f0e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2240      	movs	r2, #64	; 0x40
 800d906:	621a      	str	r2, [r3, #32]

  return ret;
 800d908:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}

0800d912 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d912:	b480      	push	{r7}
 800d914:	b083      	sub	sp, #12
 800d916:	af00      	add	r7, sp, #0
 800d918:	6078      	str	r0, [r7, #4]
 800d91a:	460b      	mov	r3, r1
 800d91c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	78fa      	ldrb	r2, [r7, #3]
 800d922:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d924:	2300      	movs	r3, #0
}
 800d926:	4618      	mov	r0, r3
 800d928:	370c      	adds	r7, #12
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr

0800d932 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d932:	b480      	push	{r7}
 800d934:	b083      	sub	sp, #12
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d940:	b2da      	uxtb	r2, r3
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2204      	movs	r2, #4
 800d94c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d950:	2300      	movs	r3, #0
}
 800d952:	4618      	mov	r0, r3
 800d954:	370c      	adds	r7, #12
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr

0800d95e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d95e:	b480      	push	{r7}
 800d960:	b083      	sub	sp, #12
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	2b04      	cmp	r3, #4
 800d970:	d106      	bne.n	800d980 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d978:	b2da      	uxtb	r2, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d980:	2300      	movs	r3, #0
}
 800d982:	4618      	mov	r0, r3
 800d984:	370c      	adds	r7, #12
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr

0800d98e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d98e:	b580      	push	{r7, lr}
 800d990:	b082      	sub	sp, #8
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	2b03      	cmp	r3, #3
 800d9a0:	d110      	bne.n	800d9c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d00b      	beq.n	800d9c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9b2:	69db      	ldr	r3, [r3, #28]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d005      	beq.n	800d9c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9be:	69db      	ldr	r3, [r3, #28]
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d9c4:	2300      	movs	r3, #0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3708      	adds	r7, #8
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b082      	sub	sp, #8
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	32ae      	adds	r2, #174	; 0xae
 800d9e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d101      	bne.n	800d9f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d9ec:	2303      	movs	r3, #3
 800d9ee:	e01c      	b.n	800da2a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	2b03      	cmp	r3, #3
 800d9fa:	d115      	bne.n	800da28 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	32ae      	adds	r2, #174	; 0xae
 800da06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da0a:	6a1b      	ldr	r3, [r3, #32]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00b      	beq.n	800da28 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	32ae      	adds	r2, #174	; 0xae
 800da1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da1e:	6a1b      	ldr	r3, [r3, #32]
 800da20:	78fa      	ldrb	r2, [r7, #3]
 800da22:	4611      	mov	r1, r2
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da28:	2300      	movs	r3, #0
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3708      	adds	r7, #8
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}

0800da32 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b082      	sub	sp, #8
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
 800da3a:	460b      	mov	r3, r1
 800da3c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	32ae      	adds	r2, #174	; 0xae
 800da48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d101      	bne.n	800da54 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800da50:	2303      	movs	r3, #3
 800da52:	e01c      	b.n	800da8e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	2b03      	cmp	r3, #3
 800da5e:	d115      	bne.n	800da8c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	32ae      	adds	r2, #174	; 0xae
 800da6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00b      	beq.n	800da8c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	32ae      	adds	r2, #174	; 0xae
 800da7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da84:	78fa      	ldrb	r2, [r7, #3]
 800da86:	4611      	mov	r1, r2
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3708      	adds	r7, #8
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800da96:	b480      	push	{r7}
 800da98:	b083      	sub	sp, #12
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dab4:	2300      	movs	r3, #0
 800dab6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00e      	beq.n	800dae8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	6852      	ldr	r2, [r2, #4]
 800dad6:	b2d2      	uxtb	r2, r2
 800dad8:	4611      	mov	r1, r2
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	4798      	blx	r3
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d001      	beq.n	800dae8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dae4:	2303      	movs	r3, #3
 800dae6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}

0800daf2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800daf2:	b480      	push	{r7}
 800daf4:	b083      	sub	sp, #12
 800daf6:	af00      	add	r7, sp, #0
 800daf8:	6078      	str	r0, [r7, #4]
 800dafa:	460b      	mov	r3, r1
 800dafc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dafe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db00:	4618      	mov	r0, r3
 800db02:	370c      	adds	r7, #12
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr

0800db0c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	460b      	mov	r3, r1
 800db16:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db18:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	370c      	adds	r7, #12
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr

0800db26 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800db26:	b580      	push	{r7, lr}
 800db28:	b086      	sub	sp, #24
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
 800db2e:	460b      	mov	r3, r1
 800db30:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800db3a:	2300      	movs	r3, #0
 800db3c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	885b      	ldrh	r3, [r3, #2]
 800db42:	b29a      	uxth	r2, r3
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	b29b      	uxth	r3, r3
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d920      	bls.n	800db90 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	b29b      	uxth	r3, r3
 800db54:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800db56:	e013      	b.n	800db80 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800db58:	f107 030a 	add.w	r3, r7, #10
 800db5c:	4619      	mov	r1, r3
 800db5e:	6978      	ldr	r0, [r7, #20]
 800db60:	f000 f81b 	bl	800db9a <USBD_GetNextDesc>
 800db64:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800db66:	697b      	ldr	r3, [r7, #20]
 800db68:	785b      	ldrb	r3, [r3, #1]
 800db6a:	2b05      	cmp	r3, #5
 800db6c:	d108      	bne.n	800db80 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	789b      	ldrb	r3, [r3, #2]
 800db76:	78fa      	ldrb	r2, [r7, #3]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d008      	beq.n	800db8e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800db7c:	2300      	movs	r3, #0
 800db7e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	885b      	ldrh	r3, [r3, #2]
 800db84:	b29a      	uxth	r2, r3
 800db86:	897b      	ldrh	r3, [r7, #10]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d8e5      	bhi.n	800db58 <USBD_GetEpDesc+0x32>
 800db8c:	e000      	b.n	800db90 <USBD_GetEpDesc+0x6a>
          break;
 800db8e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800db90:	693b      	ldr	r3, [r7, #16]
}
 800db92:	4618      	mov	r0, r3
 800db94:	3718      	adds	r7, #24
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800db9a:	b480      	push	{r7}
 800db9c:	b085      	sub	sp, #20
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
 800dba2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	881a      	ldrh	r2, [r3, #0]
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	4413      	add	r3, r2
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4413      	add	r3, r2
 800dbc4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3714      	adds	r7, #20
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr

0800dbd4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b087      	sub	sp, #28
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dbf2:	8a3b      	ldrh	r3, [r7, #16]
 800dbf4:	021b      	lsls	r3, r3, #8
 800dbf6:	b21a      	sxth	r2, r3
 800dbf8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dbfc:	4313      	orrs	r3, r2
 800dbfe:	b21b      	sxth	r3, r3
 800dc00:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dc02:	89fb      	ldrh	r3, [r7, #14]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	371c      	adds	r7, #28
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc26:	2b40      	cmp	r3, #64	; 0x40
 800dc28:	d005      	beq.n	800dc36 <USBD_StdDevReq+0x26>
 800dc2a:	2b40      	cmp	r3, #64	; 0x40
 800dc2c:	d857      	bhi.n	800dcde <USBD_StdDevReq+0xce>
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d00f      	beq.n	800dc52 <USBD_StdDevReq+0x42>
 800dc32:	2b20      	cmp	r3, #32
 800dc34:	d153      	bne.n	800dcde <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	32ae      	adds	r2, #174	; 0xae
 800dc40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc44:	689b      	ldr	r3, [r3, #8]
 800dc46:	6839      	ldr	r1, [r7, #0]
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	4798      	blx	r3
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	73fb      	strb	r3, [r7, #15]
      break;
 800dc50:	e04a      	b.n	800dce8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	785b      	ldrb	r3, [r3, #1]
 800dc56:	2b09      	cmp	r3, #9
 800dc58:	d83b      	bhi.n	800dcd2 <USBD_StdDevReq+0xc2>
 800dc5a:	a201      	add	r2, pc, #4	; (adr r2, 800dc60 <USBD_StdDevReq+0x50>)
 800dc5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc60:	0800dcb5 	.word	0x0800dcb5
 800dc64:	0800dcc9 	.word	0x0800dcc9
 800dc68:	0800dcd3 	.word	0x0800dcd3
 800dc6c:	0800dcbf 	.word	0x0800dcbf
 800dc70:	0800dcd3 	.word	0x0800dcd3
 800dc74:	0800dc93 	.word	0x0800dc93
 800dc78:	0800dc89 	.word	0x0800dc89
 800dc7c:	0800dcd3 	.word	0x0800dcd3
 800dc80:	0800dcab 	.word	0x0800dcab
 800dc84:	0800dc9d 	.word	0x0800dc9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dc88:	6839      	ldr	r1, [r7, #0]
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 fa3c 	bl	800e108 <USBD_GetDescriptor>
          break;
 800dc90:	e024      	b.n	800dcdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 fba1 	bl	800e3dc <USBD_SetAddress>
          break;
 800dc9a:	e01f      	b.n	800dcdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dc9c:	6839      	ldr	r1, [r7, #0]
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f000 fbe0 	bl	800e464 <USBD_SetConfig>
 800dca4:	4603      	mov	r3, r0
 800dca6:	73fb      	strb	r3, [r7, #15]
          break;
 800dca8:	e018      	b.n	800dcdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dcaa:	6839      	ldr	r1, [r7, #0]
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 fc83 	bl	800e5b8 <USBD_GetConfig>
          break;
 800dcb2:	e013      	b.n	800dcdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dcb4:	6839      	ldr	r1, [r7, #0]
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 fcb4 	bl	800e624 <USBD_GetStatus>
          break;
 800dcbc:	e00e      	b.n	800dcdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dcbe:	6839      	ldr	r1, [r7, #0]
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 fce3 	bl	800e68c <USBD_SetFeature>
          break;
 800dcc6:	e009      	b.n	800dcdc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dcc8:	6839      	ldr	r1, [r7, #0]
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 fd07 	bl	800e6de <USBD_ClrFeature>
          break;
 800dcd0:	e004      	b.n	800dcdc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dcd2:	6839      	ldr	r1, [r7, #0]
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 fd5e 	bl	800e796 <USBD_CtlError>
          break;
 800dcda:	bf00      	nop
      }
      break;
 800dcdc:	e004      	b.n	800dce8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dcde:	6839      	ldr	r1, [r7, #0]
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f000 fd58 	bl	800e796 <USBD_CtlError>
      break;
 800dce6:	bf00      	nop
  }

  return ret;
 800dce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop

0800dcf4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b084      	sub	sp, #16
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd0a:	2b40      	cmp	r3, #64	; 0x40
 800dd0c:	d005      	beq.n	800dd1a <USBD_StdItfReq+0x26>
 800dd0e:	2b40      	cmp	r3, #64	; 0x40
 800dd10:	d852      	bhi.n	800ddb8 <USBD_StdItfReq+0xc4>
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d001      	beq.n	800dd1a <USBD_StdItfReq+0x26>
 800dd16:	2b20      	cmp	r3, #32
 800dd18:	d14e      	bne.n	800ddb8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	3b01      	subs	r3, #1
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	d840      	bhi.n	800ddaa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	889b      	ldrh	r3, [r3, #4]
 800dd2c:	b2db      	uxtb	r3, r3
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d836      	bhi.n	800dda0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	889b      	ldrh	r3, [r3, #4]
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	4619      	mov	r1, r3
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f7ff fed9 	bl	800daf2 <USBD_CoreFindIF>
 800dd40:	4603      	mov	r3, r0
 800dd42:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd44:	7bbb      	ldrb	r3, [r7, #14]
 800dd46:	2bff      	cmp	r3, #255	; 0xff
 800dd48:	d01d      	beq.n	800dd86 <USBD_StdItfReq+0x92>
 800dd4a:	7bbb      	ldrb	r3, [r7, #14]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d11a      	bne.n	800dd86 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dd50:	7bba      	ldrb	r2, [r7, #14]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	32ae      	adds	r2, #174	; 0xae
 800dd56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00f      	beq.n	800dd80 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dd60:	7bba      	ldrb	r2, [r7, #14]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dd68:	7bba      	ldrb	r2, [r7, #14]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	32ae      	adds	r2, #174	; 0xae
 800dd6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd72:	689b      	ldr	r3, [r3, #8]
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	4798      	blx	r3
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd7e:	e004      	b.n	800dd8a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dd80:	2303      	movs	r3, #3
 800dd82:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd84:	e001      	b.n	800dd8a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dd86:	2303      	movs	r3, #3
 800dd88:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	88db      	ldrh	r3, [r3, #6]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d110      	bne.n	800ddb4 <USBD_StdItfReq+0xc0>
 800dd92:	7bfb      	ldrb	r3, [r7, #15]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d10d      	bne.n	800ddb4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f000 fdc7 	bl	800e92c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dd9e:	e009      	b.n	800ddb4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dda0:	6839      	ldr	r1, [r7, #0]
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f000 fcf7 	bl	800e796 <USBD_CtlError>
          break;
 800dda8:	e004      	b.n	800ddb4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ddaa:	6839      	ldr	r1, [r7, #0]
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 fcf2 	bl	800e796 <USBD_CtlError>
          break;
 800ddb2:	e000      	b.n	800ddb6 <USBD_StdItfReq+0xc2>
          break;
 800ddb4:	bf00      	nop
      }
      break;
 800ddb6:	e004      	b.n	800ddc2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ddb8:	6839      	ldr	r1, [r7, #0]
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 fceb 	bl	800e796 <USBD_CtlError>
      break;
 800ddc0:	bf00      	nop
  }

  return ret;
 800ddc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3710      	adds	r7, #16
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	889b      	ldrh	r3, [r3, #4]
 800ddde:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dde8:	2b40      	cmp	r3, #64	; 0x40
 800ddea:	d007      	beq.n	800ddfc <USBD_StdEPReq+0x30>
 800ddec:	2b40      	cmp	r3, #64	; 0x40
 800ddee:	f200 817f 	bhi.w	800e0f0 <USBD_StdEPReq+0x324>
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d02a      	beq.n	800de4c <USBD_StdEPReq+0x80>
 800ddf6:	2b20      	cmp	r3, #32
 800ddf8:	f040 817a 	bne.w	800e0f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ddfc:	7bbb      	ldrb	r3, [r7, #14]
 800ddfe:	4619      	mov	r1, r3
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f7ff fe83 	bl	800db0c <USBD_CoreFindEP>
 800de06:	4603      	mov	r3, r0
 800de08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de0a:	7b7b      	ldrb	r3, [r7, #13]
 800de0c:	2bff      	cmp	r3, #255	; 0xff
 800de0e:	f000 8174 	beq.w	800e0fa <USBD_StdEPReq+0x32e>
 800de12:	7b7b      	ldrb	r3, [r7, #13]
 800de14:	2b00      	cmp	r3, #0
 800de16:	f040 8170 	bne.w	800e0fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800de1a:	7b7a      	ldrb	r2, [r7, #13]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800de22:	7b7a      	ldrb	r2, [r7, #13]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	32ae      	adds	r2, #174	; 0xae
 800de28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f000 8163 	beq.w	800e0fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800de34:	7b7a      	ldrb	r2, [r7, #13]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	32ae      	adds	r2, #174	; 0xae
 800de3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de3e:	689b      	ldr	r3, [r3, #8]
 800de40:	6839      	ldr	r1, [r7, #0]
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	4798      	blx	r3
 800de46:	4603      	mov	r3, r0
 800de48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800de4a:	e156      	b.n	800e0fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	785b      	ldrb	r3, [r3, #1]
 800de50:	2b03      	cmp	r3, #3
 800de52:	d008      	beq.n	800de66 <USBD_StdEPReq+0x9a>
 800de54:	2b03      	cmp	r3, #3
 800de56:	f300 8145 	bgt.w	800e0e4 <USBD_StdEPReq+0x318>
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	f000 809b 	beq.w	800df96 <USBD_StdEPReq+0x1ca>
 800de60:	2b01      	cmp	r3, #1
 800de62:	d03c      	beq.n	800dede <USBD_StdEPReq+0x112>
 800de64:	e13e      	b.n	800e0e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	2b02      	cmp	r3, #2
 800de70:	d002      	beq.n	800de78 <USBD_StdEPReq+0xac>
 800de72:	2b03      	cmp	r3, #3
 800de74:	d016      	beq.n	800dea4 <USBD_StdEPReq+0xd8>
 800de76:	e02c      	b.n	800ded2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de78:	7bbb      	ldrb	r3, [r7, #14]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d00d      	beq.n	800de9a <USBD_StdEPReq+0xce>
 800de7e:	7bbb      	ldrb	r3, [r7, #14]
 800de80:	2b80      	cmp	r3, #128	; 0x80
 800de82:	d00a      	beq.n	800de9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de84:	7bbb      	ldrb	r3, [r7, #14]
 800de86:	4619      	mov	r1, r3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f001 f96f 	bl	800f16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800de8e:	2180      	movs	r1, #128	; 0x80
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f001 f96b 	bl	800f16c <USBD_LL_StallEP>
 800de96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de98:	e020      	b.n	800dedc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800de9a:	6839      	ldr	r1, [r7, #0]
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f000 fc7a 	bl	800e796 <USBD_CtlError>
              break;
 800dea2:	e01b      	b.n	800dedc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	885b      	ldrh	r3, [r3, #2]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10e      	bne.n	800deca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800deac:	7bbb      	ldrb	r3, [r7, #14]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d00b      	beq.n	800deca <USBD_StdEPReq+0xfe>
 800deb2:	7bbb      	ldrb	r3, [r7, #14]
 800deb4:	2b80      	cmp	r3, #128	; 0x80
 800deb6:	d008      	beq.n	800deca <USBD_StdEPReq+0xfe>
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	88db      	ldrh	r3, [r3, #6]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d104      	bne.n	800deca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dec0:	7bbb      	ldrb	r3, [r7, #14]
 800dec2:	4619      	mov	r1, r3
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f001 f951 	bl	800f16c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 fd2e 	bl	800e92c <USBD_CtlSendStatus>

              break;
 800ded0:	e004      	b.n	800dedc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ded2:	6839      	ldr	r1, [r7, #0]
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 fc5e 	bl	800e796 <USBD_CtlError>
              break;
 800deda:	bf00      	nop
          }
          break;
 800dedc:	e107      	b.n	800e0ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	2b02      	cmp	r3, #2
 800dee8:	d002      	beq.n	800def0 <USBD_StdEPReq+0x124>
 800deea:	2b03      	cmp	r3, #3
 800deec:	d016      	beq.n	800df1c <USBD_StdEPReq+0x150>
 800deee:	e04b      	b.n	800df88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800def0:	7bbb      	ldrb	r3, [r7, #14]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00d      	beq.n	800df12 <USBD_StdEPReq+0x146>
 800def6:	7bbb      	ldrb	r3, [r7, #14]
 800def8:	2b80      	cmp	r3, #128	; 0x80
 800defa:	d00a      	beq.n	800df12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800defc:	7bbb      	ldrb	r3, [r7, #14]
 800defe:	4619      	mov	r1, r3
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f001 f933 	bl	800f16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800df06:	2180      	movs	r1, #128	; 0x80
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f001 f92f 	bl	800f16c <USBD_LL_StallEP>
 800df0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df10:	e040      	b.n	800df94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800df12:	6839      	ldr	r1, [r7, #0]
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 fc3e 	bl	800e796 <USBD_CtlError>
              break;
 800df1a:	e03b      	b.n	800df94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	885b      	ldrh	r3, [r3, #2]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d136      	bne.n	800df92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800df24:	7bbb      	ldrb	r3, [r7, #14]
 800df26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d004      	beq.n	800df38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800df2e:	7bbb      	ldrb	r3, [r7, #14]
 800df30:	4619      	mov	r1, r3
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f001 f939 	bl	800f1aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 fcf7 	bl	800e92c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800df3e:	7bbb      	ldrb	r3, [r7, #14]
 800df40:	4619      	mov	r1, r3
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f7ff fde2 	bl	800db0c <USBD_CoreFindEP>
 800df48:	4603      	mov	r3, r0
 800df4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df4c:	7b7b      	ldrb	r3, [r7, #13]
 800df4e:	2bff      	cmp	r3, #255	; 0xff
 800df50:	d01f      	beq.n	800df92 <USBD_StdEPReq+0x1c6>
 800df52:	7b7b      	ldrb	r3, [r7, #13]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d11c      	bne.n	800df92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800df58:	7b7a      	ldrb	r2, [r7, #13]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800df60:	7b7a      	ldrb	r2, [r7, #13]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	32ae      	adds	r2, #174	; 0xae
 800df66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d010      	beq.n	800df92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800df70:	7b7a      	ldrb	r2, [r7, #13]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	32ae      	adds	r2, #174	; 0xae
 800df76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	6839      	ldr	r1, [r7, #0]
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	4798      	blx	r3
 800df82:	4603      	mov	r3, r0
 800df84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800df86:	e004      	b.n	800df92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800df88:	6839      	ldr	r1, [r7, #0]
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f000 fc03 	bl	800e796 <USBD_CtlError>
              break;
 800df90:	e000      	b.n	800df94 <USBD_StdEPReq+0x1c8>
              break;
 800df92:	bf00      	nop
          }
          break;
 800df94:	e0ab      	b.n	800e0ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	2b02      	cmp	r3, #2
 800dfa0:	d002      	beq.n	800dfa8 <USBD_StdEPReq+0x1dc>
 800dfa2:	2b03      	cmp	r3, #3
 800dfa4:	d032      	beq.n	800e00c <USBD_StdEPReq+0x240>
 800dfa6:	e097      	b.n	800e0d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dfa8:	7bbb      	ldrb	r3, [r7, #14]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d007      	beq.n	800dfbe <USBD_StdEPReq+0x1f2>
 800dfae:	7bbb      	ldrb	r3, [r7, #14]
 800dfb0:	2b80      	cmp	r3, #128	; 0x80
 800dfb2:	d004      	beq.n	800dfbe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dfb4:	6839      	ldr	r1, [r7, #0]
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 fbed 	bl	800e796 <USBD_CtlError>
                break;
 800dfbc:	e091      	b.n	800e0e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	da0b      	bge.n	800dfde <USBD_StdEPReq+0x212>
 800dfc6:	7bbb      	ldrb	r3, [r7, #14]
 800dfc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dfcc:	4613      	mov	r3, r2
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	4413      	add	r3, r2
 800dfd2:	009b      	lsls	r3, r3, #2
 800dfd4:	3310      	adds	r3, #16
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	4413      	add	r3, r2
 800dfda:	3304      	adds	r3, #4
 800dfdc:	e00b      	b.n	800dff6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dfde:	7bbb      	ldrb	r3, [r7, #14]
 800dfe0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	4413      	add	r3, r2
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	4413      	add	r3, r2
 800dff4:	3304      	adds	r3, #4
 800dff6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	2200      	movs	r2, #0
 800dffc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	2202      	movs	r2, #2
 800e002:	4619      	mov	r1, r3
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f000 fc37 	bl	800e878 <USBD_CtlSendData>
              break;
 800e00a:	e06a      	b.n	800e0e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e00c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e010:	2b00      	cmp	r3, #0
 800e012:	da11      	bge.n	800e038 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e014:	7bbb      	ldrb	r3, [r7, #14]
 800e016:	f003 020f 	and.w	r2, r3, #15
 800e01a:	6879      	ldr	r1, [r7, #4]
 800e01c:	4613      	mov	r3, r2
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	4413      	add	r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	440b      	add	r3, r1
 800e026:	3324      	adds	r3, #36	; 0x24
 800e028:	881b      	ldrh	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d117      	bne.n	800e05e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e02e:	6839      	ldr	r1, [r7, #0]
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f000 fbb0 	bl	800e796 <USBD_CtlError>
                  break;
 800e036:	e054      	b.n	800e0e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e038:	7bbb      	ldrb	r3, [r7, #14]
 800e03a:	f003 020f 	and.w	r2, r3, #15
 800e03e:	6879      	ldr	r1, [r7, #4]
 800e040:	4613      	mov	r3, r2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	4413      	add	r3, r2
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	440b      	add	r3, r1
 800e04a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e04e:	881b      	ldrh	r3, [r3, #0]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d104      	bne.n	800e05e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e054:	6839      	ldr	r1, [r7, #0]
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 fb9d 	bl	800e796 <USBD_CtlError>
                  break;
 800e05c:	e041      	b.n	800e0e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e05e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e062:	2b00      	cmp	r3, #0
 800e064:	da0b      	bge.n	800e07e <USBD_StdEPReq+0x2b2>
 800e066:	7bbb      	ldrb	r3, [r7, #14]
 800e068:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e06c:	4613      	mov	r3, r2
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	4413      	add	r3, r2
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	3310      	adds	r3, #16
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	4413      	add	r3, r2
 800e07a:	3304      	adds	r3, #4
 800e07c:	e00b      	b.n	800e096 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e07e:	7bbb      	ldrb	r3, [r7, #14]
 800e080:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e084:	4613      	mov	r3, r2
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	4413      	add	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	4413      	add	r3, r2
 800e094:	3304      	adds	r3, #4
 800e096:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e098:	7bbb      	ldrb	r3, [r7, #14]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d002      	beq.n	800e0a4 <USBD_StdEPReq+0x2d8>
 800e09e:	7bbb      	ldrb	r3, [r7, #14]
 800e0a0:	2b80      	cmp	r3, #128	; 0x80
 800e0a2:	d103      	bne.n	800e0ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	601a      	str	r2, [r3, #0]
 800e0aa:	e00e      	b.n	800e0ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e0ac:	7bbb      	ldrb	r3, [r7, #14]
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f001 f899 	bl	800f1e8 <USBD_LL_IsStallEP>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d003      	beq.n	800e0c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	601a      	str	r2, [r3, #0]
 800e0c2:	e002      	b.n	800e0ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	2202      	movs	r2, #2
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f000 fbd1 	bl	800e878 <USBD_CtlSendData>
              break;
 800e0d6:	e004      	b.n	800e0e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e0d8:	6839      	ldr	r1, [r7, #0]
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 fb5b 	bl	800e796 <USBD_CtlError>
              break;
 800e0e0:	bf00      	nop
          }
          break;
 800e0e2:	e004      	b.n	800e0ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e0e4:	6839      	ldr	r1, [r7, #0]
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 fb55 	bl	800e796 <USBD_CtlError>
          break;
 800e0ec:	bf00      	nop
      }
      break;
 800e0ee:	e005      	b.n	800e0fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e0f0:	6839      	ldr	r1, [r7, #0]
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 fb4f 	bl	800e796 <USBD_CtlError>
      break;
 800e0f8:	e000      	b.n	800e0fc <USBD_StdEPReq+0x330>
      break;
 800e0fa:	bf00      	nop
  }

  return ret;
 800e0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e112:	2300      	movs	r3, #0
 800e114:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e116:	2300      	movs	r3, #0
 800e118:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e11a:	2300      	movs	r3, #0
 800e11c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	885b      	ldrh	r3, [r3, #2]
 800e122:	0a1b      	lsrs	r3, r3, #8
 800e124:	b29b      	uxth	r3, r3
 800e126:	3b01      	subs	r3, #1
 800e128:	2b06      	cmp	r3, #6
 800e12a:	f200 8128 	bhi.w	800e37e <USBD_GetDescriptor+0x276>
 800e12e:	a201      	add	r2, pc, #4	; (adr r2, 800e134 <USBD_GetDescriptor+0x2c>)
 800e130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e134:	0800e151 	.word	0x0800e151
 800e138:	0800e169 	.word	0x0800e169
 800e13c:	0800e1a9 	.word	0x0800e1a9
 800e140:	0800e37f 	.word	0x0800e37f
 800e144:	0800e37f 	.word	0x0800e37f
 800e148:	0800e31f 	.word	0x0800e31f
 800e14c:	0800e34b 	.word	0x0800e34b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	7c12      	ldrb	r2, [r2, #16]
 800e15c:	f107 0108 	add.w	r1, r7, #8
 800e160:	4610      	mov	r0, r2
 800e162:	4798      	blx	r3
 800e164:	60f8      	str	r0, [r7, #12]
      break;
 800e166:	e112      	b.n	800e38e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	7c1b      	ldrb	r3, [r3, #16]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10d      	bne.n	800e18c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e178:	f107 0208 	add.w	r2, r7, #8
 800e17c:	4610      	mov	r0, r2
 800e17e:	4798      	blx	r3
 800e180:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	3301      	adds	r3, #1
 800e186:	2202      	movs	r2, #2
 800e188:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e18a:	e100      	b.n	800e38e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e194:	f107 0208 	add.w	r2, r7, #8
 800e198:	4610      	mov	r0, r2
 800e19a:	4798      	blx	r3
 800e19c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	3301      	adds	r3, #1
 800e1a2:	2202      	movs	r2, #2
 800e1a4:	701a      	strb	r2, [r3, #0]
      break;
 800e1a6:	e0f2      	b.n	800e38e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	885b      	ldrh	r3, [r3, #2]
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	2b05      	cmp	r3, #5
 800e1b0:	f200 80ac 	bhi.w	800e30c <USBD_GetDescriptor+0x204>
 800e1b4:	a201      	add	r2, pc, #4	; (adr r2, 800e1bc <USBD_GetDescriptor+0xb4>)
 800e1b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ba:	bf00      	nop
 800e1bc:	0800e1d5 	.word	0x0800e1d5
 800e1c0:	0800e209 	.word	0x0800e209
 800e1c4:	0800e23d 	.word	0x0800e23d
 800e1c8:	0800e271 	.word	0x0800e271
 800e1cc:	0800e2a5 	.word	0x0800e2a5
 800e1d0:	0800e2d9 	.word	0x0800e2d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d00b      	beq.n	800e1f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	7c12      	ldrb	r2, [r2, #16]
 800e1ec:	f107 0108 	add.w	r1, r7, #8
 800e1f0:	4610      	mov	r0, r2
 800e1f2:	4798      	blx	r3
 800e1f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1f6:	e091      	b.n	800e31c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e1f8:	6839      	ldr	r1, [r7, #0]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 facb 	bl	800e796 <USBD_CtlError>
            err++;
 800e200:	7afb      	ldrb	r3, [r7, #11]
 800e202:	3301      	adds	r3, #1
 800e204:	72fb      	strb	r3, [r7, #11]
          break;
 800e206:	e089      	b.n	800e31c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e20e:	689b      	ldr	r3, [r3, #8]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d00b      	beq.n	800e22c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	7c12      	ldrb	r2, [r2, #16]
 800e220:	f107 0108 	add.w	r1, r7, #8
 800e224:	4610      	mov	r0, r2
 800e226:	4798      	blx	r3
 800e228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e22a:	e077      	b.n	800e31c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e22c:	6839      	ldr	r1, [r7, #0]
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 fab1 	bl	800e796 <USBD_CtlError>
            err++;
 800e234:	7afb      	ldrb	r3, [r7, #11]
 800e236:	3301      	adds	r3, #1
 800e238:	72fb      	strb	r3, [r7, #11]
          break;
 800e23a:	e06f      	b.n	800e31c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00b      	beq.n	800e260 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	7c12      	ldrb	r2, [r2, #16]
 800e254:	f107 0108 	add.w	r1, r7, #8
 800e258:	4610      	mov	r0, r2
 800e25a:	4798      	blx	r3
 800e25c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e25e:	e05d      	b.n	800e31c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 fa97 	bl	800e796 <USBD_CtlError>
            err++;
 800e268:	7afb      	ldrb	r3, [r7, #11]
 800e26a:	3301      	adds	r3, #1
 800e26c:	72fb      	strb	r3, [r7, #11]
          break;
 800e26e:	e055      	b.n	800e31c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e276:	691b      	ldr	r3, [r3, #16]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00b      	beq.n	800e294 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e282:	691b      	ldr	r3, [r3, #16]
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	7c12      	ldrb	r2, [r2, #16]
 800e288:	f107 0108 	add.w	r1, r7, #8
 800e28c:	4610      	mov	r0, r2
 800e28e:	4798      	blx	r3
 800e290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e292:	e043      	b.n	800e31c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e294:	6839      	ldr	r1, [r7, #0]
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 fa7d 	bl	800e796 <USBD_CtlError>
            err++;
 800e29c:	7afb      	ldrb	r3, [r7, #11]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	72fb      	strb	r3, [r7, #11]
          break;
 800e2a2:	e03b      	b.n	800e31c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2aa:	695b      	ldr	r3, [r3, #20]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d00b      	beq.n	800e2c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2b6:	695b      	ldr	r3, [r3, #20]
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	7c12      	ldrb	r2, [r2, #16]
 800e2bc:	f107 0108 	add.w	r1, r7, #8
 800e2c0:	4610      	mov	r0, r2
 800e2c2:	4798      	blx	r3
 800e2c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2c6:	e029      	b.n	800e31c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e2c8:	6839      	ldr	r1, [r7, #0]
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 fa63 	bl	800e796 <USBD_CtlError>
            err++;
 800e2d0:	7afb      	ldrb	r3, [r7, #11]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	72fb      	strb	r3, [r7, #11]
          break;
 800e2d6:	e021      	b.n	800e31c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2de:	699b      	ldr	r3, [r3, #24]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d00b      	beq.n	800e2fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2ea:	699b      	ldr	r3, [r3, #24]
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	7c12      	ldrb	r2, [r2, #16]
 800e2f0:	f107 0108 	add.w	r1, r7, #8
 800e2f4:	4610      	mov	r0, r2
 800e2f6:	4798      	blx	r3
 800e2f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2fa:	e00f      	b.n	800e31c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e2fc:	6839      	ldr	r1, [r7, #0]
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f000 fa49 	bl	800e796 <USBD_CtlError>
            err++;
 800e304:	7afb      	ldrb	r3, [r7, #11]
 800e306:	3301      	adds	r3, #1
 800e308:	72fb      	strb	r3, [r7, #11]
          break;
 800e30a:	e007      	b.n	800e31c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e30c:	6839      	ldr	r1, [r7, #0]
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 fa41 	bl	800e796 <USBD_CtlError>
          err++;
 800e314:	7afb      	ldrb	r3, [r7, #11]
 800e316:	3301      	adds	r3, #1
 800e318:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e31a:	bf00      	nop
      }
      break;
 800e31c:	e037      	b.n	800e38e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	7c1b      	ldrb	r3, [r3, #16]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d109      	bne.n	800e33a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e32e:	f107 0208 	add.w	r2, r7, #8
 800e332:	4610      	mov	r0, r2
 800e334:	4798      	blx	r3
 800e336:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e338:	e029      	b.n	800e38e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e33a:	6839      	ldr	r1, [r7, #0]
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 fa2a 	bl	800e796 <USBD_CtlError>
        err++;
 800e342:	7afb      	ldrb	r3, [r7, #11]
 800e344:	3301      	adds	r3, #1
 800e346:	72fb      	strb	r3, [r7, #11]
      break;
 800e348:	e021      	b.n	800e38e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	7c1b      	ldrb	r3, [r3, #16]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d10d      	bne.n	800e36e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e35a:	f107 0208 	add.w	r2, r7, #8
 800e35e:	4610      	mov	r0, r2
 800e360:	4798      	blx	r3
 800e362:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	3301      	adds	r3, #1
 800e368:	2207      	movs	r2, #7
 800e36a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e36c:	e00f      	b.n	800e38e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e36e:	6839      	ldr	r1, [r7, #0]
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 fa10 	bl	800e796 <USBD_CtlError>
        err++;
 800e376:	7afb      	ldrb	r3, [r7, #11]
 800e378:	3301      	adds	r3, #1
 800e37a:	72fb      	strb	r3, [r7, #11]
      break;
 800e37c:	e007      	b.n	800e38e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e37e:	6839      	ldr	r1, [r7, #0]
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 fa08 	bl	800e796 <USBD_CtlError>
      err++;
 800e386:	7afb      	ldrb	r3, [r7, #11]
 800e388:	3301      	adds	r3, #1
 800e38a:	72fb      	strb	r3, [r7, #11]
      break;
 800e38c:	bf00      	nop
  }

  if (err != 0U)
 800e38e:	7afb      	ldrb	r3, [r7, #11]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d11e      	bne.n	800e3d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	88db      	ldrh	r3, [r3, #6]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d016      	beq.n	800e3ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e39c:	893b      	ldrh	r3, [r7, #8]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d00e      	beq.n	800e3c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	88da      	ldrh	r2, [r3, #6]
 800e3a6:	893b      	ldrh	r3, [r7, #8]
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	bf28      	it	cs
 800e3ac:	4613      	movcs	r3, r2
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e3b2:	893b      	ldrh	r3, [r7, #8]
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	68f9      	ldr	r1, [r7, #12]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 fa5d 	bl	800e878 <USBD_CtlSendData>
 800e3be:	e009      	b.n	800e3d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e3c0:	6839      	ldr	r1, [r7, #0]
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f9e7 	bl	800e796 <USBD_CtlError>
 800e3c8:	e004      	b.n	800e3d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 faae 	bl	800e92c <USBD_CtlSendStatus>
 800e3d0:	e000      	b.n	800e3d4 <USBD_GetDescriptor+0x2cc>
    return;
 800e3d2:	bf00      	nop
  }
}
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop

0800e3dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	889b      	ldrh	r3, [r3, #4]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d131      	bne.n	800e452 <USBD_SetAddress+0x76>
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	88db      	ldrh	r3, [r3, #6]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d12d      	bne.n	800e452 <USBD_SetAddress+0x76>
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	885b      	ldrh	r3, [r3, #2]
 800e3fa:	2b7f      	cmp	r3, #127	; 0x7f
 800e3fc:	d829      	bhi.n	800e452 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	885b      	ldrh	r3, [r3, #2]
 800e402:	b2db      	uxtb	r3, r3
 800e404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e408:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e410:	b2db      	uxtb	r3, r3
 800e412:	2b03      	cmp	r3, #3
 800e414:	d104      	bne.n	800e420 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e416:	6839      	ldr	r1, [r7, #0]
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 f9bc 	bl	800e796 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e41e:	e01d      	b.n	800e45c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	7bfa      	ldrb	r2, [r7, #15]
 800e424:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e428:	7bfb      	ldrb	r3, [r7, #15]
 800e42a:	4619      	mov	r1, r3
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 ff07 	bl	800f240 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f000 fa7a 	bl	800e92c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e438:	7bfb      	ldrb	r3, [r7, #15]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d004      	beq.n	800e448 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2202      	movs	r2, #2
 800e442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e446:	e009      	b.n	800e45c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2201      	movs	r2, #1
 800e44c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e450:	e004      	b.n	800e45c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e452:	6839      	ldr	r1, [r7, #0]
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 f99e 	bl	800e796 <USBD_CtlError>
  }
}
 800e45a:	bf00      	nop
 800e45c:	bf00      	nop
 800e45e:	3710      	adds	r7, #16
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}

0800e464 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e46e:	2300      	movs	r3, #0
 800e470:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	885b      	ldrh	r3, [r3, #2]
 800e476:	b2da      	uxtb	r2, r3
 800e478:	4b4e      	ldr	r3, [pc, #312]	; (800e5b4 <USBD_SetConfig+0x150>)
 800e47a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e47c:	4b4d      	ldr	r3, [pc, #308]	; (800e5b4 <USBD_SetConfig+0x150>)
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	2b01      	cmp	r3, #1
 800e482:	d905      	bls.n	800e490 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e484:	6839      	ldr	r1, [r7, #0]
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 f985 	bl	800e796 <USBD_CtlError>
    return USBD_FAIL;
 800e48c:	2303      	movs	r3, #3
 800e48e:	e08c      	b.n	800e5aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e496:	b2db      	uxtb	r3, r3
 800e498:	2b02      	cmp	r3, #2
 800e49a:	d002      	beq.n	800e4a2 <USBD_SetConfig+0x3e>
 800e49c:	2b03      	cmp	r3, #3
 800e49e:	d029      	beq.n	800e4f4 <USBD_SetConfig+0x90>
 800e4a0:	e075      	b.n	800e58e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e4a2:	4b44      	ldr	r3, [pc, #272]	; (800e5b4 <USBD_SetConfig+0x150>)
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d020      	beq.n	800e4ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e4aa:	4b42      	ldr	r3, [pc, #264]	; (800e5b4 <USBD_SetConfig+0x150>)
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e4b4:	4b3f      	ldr	r3, [pc, #252]	; (800e5b4 <USBD_SetConfig+0x150>)
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f7fe ffe7 	bl	800d48e <USBD_SetClassConfig>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e4c4:	7bfb      	ldrb	r3, [r7, #15]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d008      	beq.n	800e4dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e4ca:	6839      	ldr	r1, [r7, #0]
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 f962 	bl	800e796 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2202      	movs	r2, #2
 800e4d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e4da:	e065      	b.n	800e5a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 fa25 	bl	800e92c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2203      	movs	r2, #3
 800e4e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e4ea:	e05d      	b.n	800e5a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 fa1d 	bl	800e92c <USBD_CtlSendStatus>
      break;
 800e4f2:	e059      	b.n	800e5a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e4f4:	4b2f      	ldr	r3, [pc, #188]	; (800e5b4 <USBD_SetConfig+0x150>)
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d112      	bne.n	800e522 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2202      	movs	r2, #2
 800e500:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e504:	4b2b      	ldr	r3, [pc, #172]	; (800e5b4 <USBD_SetConfig+0x150>)
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	461a      	mov	r2, r3
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e50e:	4b29      	ldr	r3, [pc, #164]	; (800e5b4 <USBD_SetConfig+0x150>)
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	4619      	mov	r1, r3
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7fe ffd6 	bl	800d4c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fa06 	bl	800e92c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e520:	e042      	b.n	800e5a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e522:	4b24      	ldr	r3, [pc, #144]	; (800e5b4 <USBD_SetConfig+0x150>)
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	461a      	mov	r2, r3
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d02a      	beq.n	800e586 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	b2db      	uxtb	r3, r3
 800e536:	4619      	mov	r1, r3
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f7fe ffc4 	bl	800d4c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e53e:	4b1d      	ldr	r3, [pc, #116]	; (800e5b4 <USBD_SetConfig+0x150>)
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	461a      	mov	r2, r3
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e548:	4b1a      	ldr	r3, [pc, #104]	; (800e5b4 <USBD_SetConfig+0x150>)
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	4619      	mov	r1, r3
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f7fe ff9d 	bl	800d48e <USBD_SetClassConfig>
 800e554:	4603      	mov	r3, r0
 800e556:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e558:	7bfb      	ldrb	r3, [r7, #15]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00f      	beq.n	800e57e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e55e:	6839      	ldr	r1, [r7, #0]
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f000 f918 	bl	800e796 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	4619      	mov	r1, r3
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7fe ffa9 	bl	800d4c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2202      	movs	r2, #2
 800e578:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e57c:	e014      	b.n	800e5a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f000 f9d4 	bl	800e92c <USBD_CtlSendStatus>
      break;
 800e584:	e010      	b.n	800e5a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f000 f9d0 	bl	800e92c <USBD_CtlSendStatus>
      break;
 800e58c:	e00c      	b.n	800e5a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e58e:	6839      	ldr	r1, [r7, #0]
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f000 f900 	bl	800e796 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e596:	4b07      	ldr	r3, [pc, #28]	; (800e5b4 <USBD_SetConfig+0x150>)
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	4619      	mov	r1, r3
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f7fe ff92 	bl	800d4c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e5a2:	2303      	movs	r3, #3
 800e5a4:	73fb      	strb	r3, [r7, #15]
      break;
 800e5a6:	bf00      	nop
  }

  return ret;
 800e5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3710      	adds	r7, #16
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	20004f90 	.word	0x20004f90

0800e5b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	88db      	ldrh	r3, [r3, #6]
 800e5c6:	2b01      	cmp	r3, #1
 800e5c8:	d004      	beq.n	800e5d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e5ca:	6839      	ldr	r1, [r7, #0]
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f000 f8e2 	bl	800e796 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e5d2:	e023      	b.n	800e61c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5da:	b2db      	uxtb	r3, r3
 800e5dc:	2b02      	cmp	r3, #2
 800e5de:	dc02      	bgt.n	800e5e6 <USBD_GetConfig+0x2e>
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	dc03      	bgt.n	800e5ec <USBD_GetConfig+0x34>
 800e5e4:	e015      	b.n	800e612 <USBD_GetConfig+0x5a>
 800e5e6:	2b03      	cmp	r3, #3
 800e5e8:	d00b      	beq.n	800e602 <USBD_GetConfig+0x4a>
 800e5ea:	e012      	b.n	800e612 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	3308      	adds	r3, #8
 800e5f6:	2201      	movs	r2, #1
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	6878      	ldr	r0, [r7, #4]
 800e5fc:	f000 f93c 	bl	800e878 <USBD_CtlSendData>
        break;
 800e600:	e00c      	b.n	800e61c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	3304      	adds	r3, #4
 800e606:	2201      	movs	r2, #1
 800e608:	4619      	mov	r1, r3
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 f934 	bl	800e878 <USBD_CtlSendData>
        break;
 800e610:	e004      	b.n	800e61c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e612:	6839      	ldr	r1, [r7, #0]
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f000 f8be 	bl	800e796 <USBD_CtlError>
        break;
 800e61a:	bf00      	nop
}
 800e61c:	bf00      	nop
 800e61e:	3708      	adds	r7, #8
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
 800e62c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e634:	b2db      	uxtb	r3, r3
 800e636:	3b01      	subs	r3, #1
 800e638:	2b02      	cmp	r3, #2
 800e63a:	d81e      	bhi.n	800e67a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	88db      	ldrh	r3, [r3, #6]
 800e640:	2b02      	cmp	r3, #2
 800e642:	d004      	beq.n	800e64e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e644:	6839      	ldr	r1, [r7, #0]
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f8a5 	bl	800e796 <USBD_CtlError>
        break;
 800e64c:	e01a      	b.n	800e684 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2201      	movs	r2, #1
 800e652:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d005      	beq.n	800e66a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	f043 0202 	orr.w	r2, r3, #2
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	330c      	adds	r3, #12
 800e66e:	2202      	movs	r2, #2
 800e670:	4619      	mov	r1, r3
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f000 f900 	bl	800e878 <USBD_CtlSendData>
      break;
 800e678:	e004      	b.n	800e684 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e67a:	6839      	ldr	r1, [r7, #0]
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f000 f88a 	bl	800e796 <USBD_CtlError>
      break;
 800e682:	bf00      	nop
  }
}
 800e684:	bf00      	nop
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
 800e694:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	885b      	ldrh	r3, [r3, #2]
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d107      	bne.n	800e6ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 f940 	bl	800e92c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e6ac:	e013      	b.n	800e6d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	885b      	ldrh	r3, [r3, #2]
 800e6b2:	2b02      	cmp	r3, #2
 800e6b4:	d10b      	bne.n	800e6ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	889b      	ldrh	r3, [r3, #4]
 800e6ba:	0a1b      	lsrs	r3, r3, #8
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	b2da      	uxtb	r2, r3
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 f930 	bl	800e92c <USBD_CtlSendStatus>
}
 800e6cc:	e003      	b.n	800e6d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e6ce:	6839      	ldr	r1, [r7, #0]
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f000 f860 	bl	800e796 <USBD_CtlError>
}
 800e6d6:	bf00      	nop
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b082      	sub	sp, #8
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	6078      	str	r0, [r7, #4]
 800e6e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	2b02      	cmp	r3, #2
 800e6f4:	d80b      	bhi.n	800e70e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	885b      	ldrh	r3, [r3, #2]
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d10c      	bne.n	800e718 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 f910 	bl	800e92c <USBD_CtlSendStatus>
      }
      break;
 800e70c:	e004      	b.n	800e718 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e70e:	6839      	ldr	r1, [r7, #0]
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f000 f840 	bl	800e796 <USBD_CtlError>
      break;
 800e716:	e000      	b.n	800e71a <USBD_ClrFeature+0x3c>
      break;
 800e718:	bf00      	nop
  }
}
 800e71a:	bf00      	nop
 800e71c:	3708      	adds	r7, #8
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b084      	sub	sp, #16
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
 800e72a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	781a      	ldrb	r2, [r3, #0]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	3301      	adds	r3, #1
 800e73c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	781a      	ldrb	r2, [r3, #0]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	3301      	adds	r3, #1
 800e74a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f7ff fa41 	bl	800dbd4 <SWAPBYTE>
 800e752:	4603      	mov	r3, r0
 800e754:	461a      	mov	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	3301      	adds	r3, #1
 800e75e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	3301      	adds	r3, #1
 800e764:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f7ff fa34 	bl	800dbd4 <SWAPBYTE>
 800e76c:	4603      	mov	r3, r0
 800e76e:	461a      	mov	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	3301      	adds	r3, #1
 800e778:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	3301      	adds	r3, #1
 800e77e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f7ff fa27 	bl	800dbd4 <SWAPBYTE>
 800e786:	4603      	mov	r3, r0
 800e788:	461a      	mov	r2, r3
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	80da      	strh	r2, [r3, #6]
}
 800e78e:	bf00      	nop
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e796:	b580      	push	{r7, lr}
 800e798:	b082      	sub	sp, #8
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
 800e79e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7a0:	2180      	movs	r1, #128	; 0x80
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 fce2 	bl	800f16c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e7a8:	2100      	movs	r1, #0
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 fcde 	bl	800f16c <USBD_LL_StallEP>
}
 800e7b0:	bf00      	nop
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b086      	sub	sp, #24
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	60f8      	str	r0, [r7, #12]
 800e7c0:	60b9      	str	r1, [r7, #8]
 800e7c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d036      	beq.n	800e83c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e7d2:	6938      	ldr	r0, [r7, #16]
 800e7d4:	f000 f836 	bl	800e844 <USBD_GetLen>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	3301      	adds	r3, #1
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	005b      	lsls	r3, r3, #1
 800e7e0:	b29a      	uxth	r2, r3
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e7e6:	7dfb      	ldrb	r3, [r7, #23]
 800e7e8:	68ba      	ldr	r2, [r7, #8]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	7812      	ldrb	r2, [r2, #0]
 800e7f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e7f2:	7dfb      	ldrb	r3, [r7, #23]
 800e7f4:	3301      	adds	r3, #1
 800e7f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e7f8:	7dfb      	ldrb	r3, [r7, #23]
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	2203      	movs	r2, #3
 800e800:	701a      	strb	r2, [r3, #0]
  idx++;
 800e802:	7dfb      	ldrb	r3, [r7, #23]
 800e804:	3301      	adds	r3, #1
 800e806:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e808:	e013      	b.n	800e832 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e80a:	7dfb      	ldrb	r3, [r7, #23]
 800e80c:	68ba      	ldr	r2, [r7, #8]
 800e80e:	4413      	add	r3, r2
 800e810:	693a      	ldr	r2, [r7, #16]
 800e812:	7812      	ldrb	r2, [r2, #0]
 800e814:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e816:	693b      	ldr	r3, [r7, #16]
 800e818:	3301      	adds	r3, #1
 800e81a:	613b      	str	r3, [r7, #16]
    idx++;
 800e81c:	7dfb      	ldrb	r3, [r7, #23]
 800e81e:	3301      	adds	r3, #1
 800e820:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e822:	7dfb      	ldrb	r3, [r7, #23]
 800e824:	68ba      	ldr	r2, [r7, #8]
 800e826:	4413      	add	r3, r2
 800e828:	2200      	movs	r2, #0
 800e82a:	701a      	strb	r2, [r3, #0]
    idx++;
 800e82c:	7dfb      	ldrb	r3, [r7, #23]
 800e82e:	3301      	adds	r3, #1
 800e830:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	781b      	ldrb	r3, [r3, #0]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d1e7      	bne.n	800e80a <USBD_GetString+0x52>
 800e83a:	e000      	b.n	800e83e <USBD_GetString+0x86>
    return;
 800e83c:	bf00      	nop
  }
}
 800e83e:	3718      	adds	r7, #24
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e844:	b480      	push	{r7}
 800e846:	b085      	sub	sp, #20
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e84c:	2300      	movs	r3, #0
 800e84e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e854:	e005      	b.n	800e862 <USBD_GetLen+0x1e>
  {
    len++;
 800e856:	7bfb      	ldrb	r3, [r7, #15]
 800e858:	3301      	adds	r3, #1
 800e85a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	3301      	adds	r3, #1
 800e860:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d1f5      	bne.n	800e856 <USBD_GetLen+0x12>
  }

  return len;
 800e86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3714      	adds	r7, #20
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2202      	movs	r2, #2
 800e888:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	2100      	movs	r1, #0
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	f000 fced 	bl	800f27e <USBD_LL_Transmit>

  return USBD_OK;
 800e8a4:	2300      	movs	r3, #0
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b084      	sub	sp, #16
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	60f8      	str	r0, [r7, #12]
 800e8b6:	60b9      	str	r1, [r7, #8]
 800e8b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	68ba      	ldr	r2, [r7, #8]
 800e8be:	2100      	movs	r1, #0
 800e8c0:	68f8      	ldr	r0, [r7, #12]
 800e8c2:	f000 fcdc 	bl	800f27e <USBD_LL_Transmit>

  return USBD_OK;
 800e8c6:	2300      	movs	r3, #0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3710      	adds	r7, #16
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b084      	sub	sp, #16
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	2203      	movs	r2, #3
 800e8e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	68ba      	ldr	r2, [r7, #8]
 800e8f8:	2100      	movs	r1, #0
 800e8fa:	68f8      	ldr	r0, [r7, #12]
 800e8fc:	f000 fce0 	bl	800f2c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e900:	2300      	movs	r3, #0
}
 800e902:	4618      	mov	r0, r3
 800e904:	3710      	adds	r7, #16
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b084      	sub	sp, #16
 800e90e:	af00      	add	r7, sp, #0
 800e910:	60f8      	str	r0, [r7, #12]
 800e912:	60b9      	str	r1, [r7, #8]
 800e914:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	68ba      	ldr	r2, [r7, #8]
 800e91a:	2100      	movs	r1, #0
 800e91c:	68f8      	ldr	r0, [r7, #12]
 800e91e:	f000 fccf 	bl	800f2c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e922:	2300      	movs	r3, #0
}
 800e924:	4618      	mov	r0, r3
 800e926:	3710      	adds	r7, #16
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2204      	movs	r2, #4
 800e938:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e93c:	2300      	movs	r3, #0
 800e93e:	2200      	movs	r2, #0
 800e940:	2100      	movs	r1, #0
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f000 fc9b 	bl	800f27e <USBD_LL_Transmit>

  return USBD_OK;
 800e948:	2300      	movs	r3, #0
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3708      	adds	r7, #8
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b082      	sub	sp, #8
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2205      	movs	r2, #5
 800e95e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e962:	2300      	movs	r3, #0
 800e964:	2200      	movs	r2, #0
 800e966:	2100      	movs	r1, #0
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 fca9 	bl	800f2c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3708      	adds	r7, #8
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800e97c:	2201      	movs	r2, #1
 800e97e:	4912      	ldr	r1, [pc, #72]	; (800e9c8 <MX_USB_DEVICE_Init+0x50>)
 800e980:	4812      	ldr	r0, [pc, #72]	; (800e9cc <MX_USB_DEVICE_Init+0x54>)
 800e982:	f7fe fd07 	bl	800d394 <USBD_Init>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d001      	beq.n	800e990 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e98c:	f7f2 fff8 	bl	8001980 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800e990:	490f      	ldr	r1, [pc, #60]	; (800e9d0 <MX_USB_DEVICE_Init+0x58>)
 800e992:	480e      	ldr	r0, [pc, #56]	; (800e9cc <MX_USB_DEVICE_Init+0x54>)
 800e994:	f7fe fd2e 	bl	800d3f4 <USBD_RegisterClass>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d001      	beq.n	800e9a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e99e:	f7f2 ffef 	bl	8001980 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800e9a2:	490c      	ldr	r1, [pc, #48]	; (800e9d4 <MX_USB_DEVICE_Init+0x5c>)
 800e9a4:	4809      	ldr	r0, [pc, #36]	; (800e9cc <MX_USB_DEVICE_Init+0x54>)
 800e9a6:	f7fe fc1f 	bl	800d1e8 <USBD_CDC_RegisterInterface>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d001      	beq.n	800e9b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e9b0:	f7f2 ffe6 	bl	8001980 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800e9b4:	4805      	ldr	r0, [pc, #20]	; (800e9cc <MX_USB_DEVICE_Init+0x54>)
 800e9b6:	f7fe fd53 	bl	800d460 <USBD_Start>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d001      	beq.n	800e9c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e9c0:	f7f2 ffde 	bl	8001980 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e9c4:	bf00      	nop
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	2000012c 	.word	0x2000012c
 800e9cc:	20004f94 	.word	0x20004f94
 800e9d0:	20000098 	.word	0x20000098
 800e9d4:	20000118 	.word	0x20000118

0800e9d8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800e9dc:	2200      	movs	r2, #0
 800e9de:	4905      	ldr	r1, [pc, #20]	; (800e9f4 <CDC_Init_HS+0x1c>)
 800e9e0:	4805      	ldr	r0, [pc, #20]	; (800e9f8 <CDC_Init_HS+0x20>)
 800e9e2:	f7fe fc1b 	bl	800d21c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800e9e6:	4905      	ldr	r1, [pc, #20]	; (800e9fc <CDC_Init_HS+0x24>)
 800e9e8:	4803      	ldr	r0, [pc, #12]	; (800e9f8 <CDC_Init_HS+0x20>)
 800e9ea:	f7fe fc39 	bl	800d260 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e9ee:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	20005a70 	.word	0x20005a70
 800e9f8:	20004f94 	.word	0x20004f94
 800e9fc:	20005270 	.word	0x20005270

0800ea00 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ea00:	b480      	push	{r7}
 800ea02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ea04:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr

0800ea10 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	4603      	mov	r3, r0
 800ea18:	6039      	str	r1, [r7, #0]
 800ea1a:	71fb      	strb	r3, [r7, #7]
 800ea1c:	4613      	mov	r3, r2
 800ea1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ea20:	79fb      	ldrb	r3, [r7, #7]
 800ea22:	2b23      	cmp	r3, #35	; 0x23
 800ea24:	d84a      	bhi.n	800eabc <CDC_Control_HS+0xac>
 800ea26:	a201      	add	r2, pc, #4	; (adr r2, 800ea2c <CDC_Control_HS+0x1c>)
 800ea28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea2c:	0800eabd 	.word	0x0800eabd
 800ea30:	0800eabd 	.word	0x0800eabd
 800ea34:	0800eabd 	.word	0x0800eabd
 800ea38:	0800eabd 	.word	0x0800eabd
 800ea3c:	0800eabd 	.word	0x0800eabd
 800ea40:	0800eabd 	.word	0x0800eabd
 800ea44:	0800eabd 	.word	0x0800eabd
 800ea48:	0800eabd 	.word	0x0800eabd
 800ea4c:	0800eabd 	.word	0x0800eabd
 800ea50:	0800eabd 	.word	0x0800eabd
 800ea54:	0800eabd 	.word	0x0800eabd
 800ea58:	0800eabd 	.word	0x0800eabd
 800ea5c:	0800eabd 	.word	0x0800eabd
 800ea60:	0800eabd 	.word	0x0800eabd
 800ea64:	0800eabd 	.word	0x0800eabd
 800ea68:	0800eabd 	.word	0x0800eabd
 800ea6c:	0800eabd 	.word	0x0800eabd
 800ea70:	0800eabd 	.word	0x0800eabd
 800ea74:	0800eabd 	.word	0x0800eabd
 800ea78:	0800eabd 	.word	0x0800eabd
 800ea7c:	0800eabd 	.word	0x0800eabd
 800ea80:	0800eabd 	.word	0x0800eabd
 800ea84:	0800eabd 	.word	0x0800eabd
 800ea88:	0800eabd 	.word	0x0800eabd
 800ea8c:	0800eabd 	.word	0x0800eabd
 800ea90:	0800eabd 	.word	0x0800eabd
 800ea94:	0800eabd 	.word	0x0800eabd
 800ea98:	0800eabd 	.word	0x0800eabd
 800ea9c:	0800eabd 	.word	0x0800eabd
 800eaa0:	0800eabd 	.word	0x0800eabd
 800eaa4:	0800eabd 	.word	0x0800eabd
 800eaa8:	0800eabd 	.word	0x0800eabd
 800eaac:	0800eabd 	.word	0x0800eabd
 800eab0:	0800eabd 	.word	0x0800eabd
 800eab4:	0800eabd 	.word	0x0800eabd
 800eab8:	0800eabd 	.word	0x0800eabd
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eabc:	bf00      	nop
  }

  return (USBD_OK);
 800eabe:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800ead6:	6879      	ldr	r1, [r7, #4]
 800ead8:	4805      	ldr	r0, [pc, #20]	; (800eaf0 <CDC_Receive_HS+0x24>)
 800eada:	f7fe fbc1 	bl	800d260 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800eade:	4804      	ldr	r0, [pc, #16]	; (800eaf0 <CDC_Receive_HS+0x24>)
 800eae0:	f7fe fc22 	bl	800d328 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eae4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3708      	adds	r7, #8
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	20004f94 	.word	0x20004f94

0800eaf4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	460b      	mov	r3, r1
 800eafe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eb00:	2300      	movs	r3, #0
 800eb02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800eb04:	4b0d      	ldr	r3, [pc, #52]	; (800eb3c <CDC_Transmit_HS+0x48>)
 800eb06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d001      	beq.n	800eb1a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800eb16:	2301      	movs	r3, #1
 800eb18:	e00b      	b.n	800eb32 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800eb1a:	887b      	ldrh	r3, [r7, #2]
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	6879      	ldr	r1, [r7, #4]
 800eb20:	4806      	ldr	r0, [pc, #24]	; (800eb3c <CDC_Transmit_HS+0x48>)
 800eb22:	f7fe fb7b 	bl	800d21c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800eb26:	4805      	ldr	r0, [pc, #20]	; (800eb3c <CDC_Transmit_HS+0x48>)
 800eb28:	f7fe fbb8 	bl	800d29c <USBD_CDC_TransmitPacket>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800eb30:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	20004f94 	.word	0x20004f94

0800eb40 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b087      	sub	sp, #28
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800eb52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	371c      	adds	r7, #28
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr
	...

0800eb64 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb64:	b480      	push	{r7}
 800eb66:	b083      	sub	sp, #12
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	6039      	str	r1, [r7, #0]
 800eb6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2212      	movs	r2, #18
 800eb74:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800eb76:	4b03      	ldr	r3, [pc, #12]	; (800eb84 <USBD_HS_DeviceDescriptor+0x20>)
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr
 800eb84:	20000148 	.word	0x20000148

0800eb88 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	4603      	mov	r3, r0
 800eb90:	6039      	str	r1, [r7, #0]
 800eb92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	2204      	movs	r2, #4
 800eb98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eb9a:	4b03      	ldr	r3, [pc, #12]	; (800eba8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr
 800eba8:	2000015c 	.word	0x2000015c

0800ebac <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	6039      	str	r1, [r7, #0]
 800ebb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ebb8:	79fb      	ldrb	r3, [r7, #7]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d105      	bne.n	800ebca <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ebbe:	683a      	ldr	r2, [r7, #0]
 800ebc0:	4907      	ldr	r1, [pc, #28]	; (800ebe0 <USBD_HS_ProductStrDescriptor+0x34>)
 800ebc2:	4808      	ldr	r0, [pc, #32]	; (800ebe4 <USBD_HS_ProductStrDescriptor+0x38>)
 800ebc4:	f7ff fdf8 	bl	800e7b8 <USBD_GetString>
 800ebc8:	e004      	b.n	800ebd4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ebca:	683a      	ldr	r2, [r7, #0]
 800ebcc:	4904      	ldr	r1, [pc, #16]	; (800ebe0 <USBD_HS_ProductStrDescriptor+0x34>)
 800ebce:	4805      	ldr	r0, [pc, #20]	; (800ebe4 <USBD_HS_ProductStrDescriptor+0x38>)
 800ebd0:	f7ff fdf2 	bl	800e7b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebd4:	4b02      	ldr	r3, [pc, #8]	; (800ebe0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3708      	adds	r7, #8
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	20006270 	.word	0x20006270
 800ebe4:	08013bcc 	.word	0x08013bcc

0800ebe8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b082      	sub	sp, #8
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	4603      	mov	r3, r0
 800ebf0:	6039      	str	r1, [r7, #0]
 800ebf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ebf4:	683a      	ldr	r2, [r7, #0]
 800ebf6:	4904      	ldr	r1, [pc, #16]	; (800ec08 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ebf8:	4804      	ldr	r0, [pc, #16]	; (800ec0c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ebfa:	f7ff fddd 	bl	800e7b8 <USBD_GetString>
  return USBD_StrDesc;
 800ebfe:	4b02      	ldr	r3, [pc, #8]	; (800ec08 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3708      	adds	r7, #8
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	20006270 	.word	0x20006270
 800ec0c:	08013be4 	.word	0x08013be4

0800ec10 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	4603      	mov	r3, r0
 800ec18:	6039      	str	r1, [r7, #0]
 800ec1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	221a      	movs	r2, #26
 800ec20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ec22:	f000 f843 	bl	800ecac <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ec26:	4b02      	ldr	r3, [pc, #8]	; (800ec30 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3708      	adds	r7, #8
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	20000160 	.word	0x20000160

0800ec34 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	6039      	str	r1, [r7, #0]
 800ec3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ec40:	79fb      	ldrb	r3, [r7, #7]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d105      	bne.n	800ec52 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ec46:	683a      	ldr	r2, [r7, #0]
 800ec48:	4907      	ldr	r1, [pc, #28]	; (800ec68 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ec4a:	4808      	ldr	r0, [pc, #32]	; (800ec6c <USBD_HS_ConfigStrDescriptor+0x38>)
 800ec4c:	f7ff fdb4 	bl	800e7b8 <USBD_GetString>
 800ec50:	e004      	b.n	800ec5c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ec52:	683a      	ldr	r2, [r7, #0]
 800ec54:	4904      	ldr	r1, [pc, #16]	; (800ec68 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ec56:	4805      	ldr	r0, [pc, #20]	; (800ec6c <USBD_HS_ConfigStrDescriptor+0x38>)
 800ec58:	f7ff fdae 	bl	800e7b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec5c:	4b02      	ldr	r3, [pc, #8]	; (800ec68 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3708      	adds	r7, #8
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	20006270 	.word	0x20006270
 800ec6c:	08013bf8 	.word	0x08013bf8

0800ec70 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	4603      	mov	r3, r0
 800ec78:	6039      	str	r1, [r7, #0]
 800ec7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec7c:	79fb      	ldrb	r3, [r7, #7]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d105      	bne.n	800ec8e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ec82:	683a      	ldr	r2, [r7, #0]
 800ec84:	4907      	ldr	r1, [pc, #28]	; (800eca4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ec86:	4808      	ldr	r0, [pc, #32]	; (800eca8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ec88:	f7ff fd96 	bl	800e7b8 <USBD_GetString>
 800ec8c:	e004      	b.n	800ec98 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ec8e:	683a      	ldr	r2, [r7, #0]
 800ec90:	4904      	ldr	r1, [pc, #16]	; (800eca4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ec92:	4805      	ldr	r0, [pc, #20]	; (800eca8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ec94:	f7ff fd90 	bl	800e7b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec98:	4b02      	ldr	r3, [pc, #8]	; (800eca4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3708      	adds	r7, #8
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	20006270 	.word	0x20006270
 800eca8:	08013c04 	.word	0x08013c04

0800ecac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ecb2:	4b0f      	ldr	r3, [pc, #60]	; (800ecf0 <Get_SerialNum+0x44>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ecb8:	4b0e      	ldr	r3, [pc, #56]	; (800ecf4 <Get_SerialNum+0x48>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ecbe:	4b0e      	ldr	r3, [pc, #56]	; (800ecf8 <Get_SerialNum+0x4c>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ecc4:	68fa      	ldr	r2, [r7, #12]
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	4413      	add	r3, r2
 800ecca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d009      	beq.n	800ece6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ecd2:	2208      	movs	r2, #8
 800ecd4:	4909      	ldr	r1, [pc, #36]	; (800ecfc <Get_SerialNum+0x50>)
 800ecd6:	68f8      	ldr	r0, [r7, #12]
 800ecd8:	f000 f814 	bl	800ed04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ecdc:	2204      	movs	r2, #4
 800ecde:	4908      	ldr	r1, [pc, #32]	; (800ed00 <Get_SerialNum+0x54>)
 800ece0:	68b8      	ldr	r0, [r7, #8]
 800ece2:	f000 f80f 	bl	800ed04 <IntToUnicode>
  }
}
 800ece6:	bf00      	nop
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	1fff7a10 	.word	0x1fff7a10
 800ecf4:	1fff7a14 	.word	0x1fff7a14
 800ecf8:	1fff7a18 	.word	0x1fff7a18
 800ecfc:	20000162 	.word	0x20000162
 800ed00:	20000172 	.word	0x20000172

0800ed04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b087      	sub	sp, #28
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	4613      	mov	r3, r2
 800ed10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ed12:	2300      	movs	r3, #0
 800ed14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ed16:	2300      	movs	r3, #0
 800ed18:	75fb      	strb	r3, [r7, #23]
 800ed1a:	e027      	b.n	800ed6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	0f1b      	lsrs	r3, r3, #28
 800ed20:	2b09      	cmp	r3, #9
 800ed22:	d80b      	bhi.n	800ed3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	0f1b      	lsrs	r3, r3, #28
 800ed28:	b2da      	uxtb	r2, r3
 800ed2a:	7dfb      	ldrb	r3, [r7, #23]
 800ed2c:	005b      	lsls	r3, r3, #1
 800ed2e:	4619      	mov	r1, r3
 800ed30:	68bb      	ldr	r3, [r7, #8]
 800ed32:	440b      	add	r3, r1
 800ed34:	3230      	adds	r2, #48	; 0x30
 800ed36:	b2d2      	uxtb	r2, r2
 800ed38:	701a      	strb	r2, [r3, #0]
 800ed3a:	e00a      	b.n	800ed52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	0f1b      	lsrs	r3, r3, #28
 800ed40:	b2da      	uxtb	r2, r3
 800ed42:	7dfb      	ldrb	r3, [r7, #23]
 800ed44:	005b      	lsls	r3, r3, #1
 800ed46:	4619      	mov	r1, r3
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	440b      	add	r3, r1
 800ed4c:	3237      	adds	r2, #55	; 0x37
 800ed4e:	b2d2      	uxtb	r2, r2
 800ed50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	011b      	lsls	r3, r3, #4
 800ed56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ed58:	7dfb      	ldrb	r3, [r7, #23]
 800ed5a:	005b      	lsls	r3, r3, #1
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	68ba      	ldr	r2, [r7, #8]
 800ed60:	4413      	add	r3, r2
 800ed62:	2200      	movs	r2, #0
 800ed64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ed66:	7dfb      	ldrb	r3, [r7, #23]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	75fb      	strb	r3, [r7, #23]
 800ed6c:	7dfa      	ldrb	r2, [r7, #23]
 800ed6e:	79fb      	ldrb	r3, [r7, #7]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d3d3      	bcc.n	800ed1c <IntToUnicode+0x18>
  }
}
 800ed74:	bf00      	nop
 800ed76:	bf00      	nop
 800ed78:	371c      	adds	r7, #28
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr
	...

0800ed84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b08a      	sub	sp, #40	; 0x28
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed8c:	f107 0314 	add.w	r3, r7, #20
 800ed90:	2200      	movs	r2, #0
 800ed92:	601a      	str	r2, [r3, #0]
 800ed94:	605a      	str	r2, [r3, #4]
 800ed96:	609a      	str	r2, [r3, #8]
 800ed98:	60da      	str	r2, [r3, #12]
 800ed9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a1d      	ldr	r2, [pc, #116]	; (800ee18 <HAL_PCD_MspInit+0x94>)
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d134      	bne.n	800ee10 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eda6:	2300      	movs	r3, #0
 800eda8:	613b      	str	r3, [r7, #16]
 800edaa:	4b1c      	ldr	r3, [pc, #112]	; (800ee1c <HAL_PCD_MspInit+0x98>)
 800edac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edae:	4a1b      	ldr	r2, [pc, #108]	; (800ee1c <HAL_PCD_MspInit+0x98>)
 800edb0:	f043 0302 	orr.w	r3, r3, #2
 800edb4:	6313      	str	r3, [r2, #48]	; 0x30
 800edb6:	4b19      	ldr	r3, [pc, #100]	; (800ee1c <HAL_PCD_MspInit+0x98>)
 800edb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edba:	f003 0302 	and.w	r3, r3, #2
 800edbe:	613b      	str	r3, [r7, #16]
 800edc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800edc2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800edc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edc8:	2302      	movs	r3, #2
 800edca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edcc:	2300      	movs	r3, #0
 800edce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800edd0:	2303      	movs	r3, #3
 800edd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800edd4:	230c      	movs	r3, #12
 800edd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800edd8:	f107 0314 	add.w	r3, r7, #20
 800eddc:	4619      	mov	r1, r3
 800edde:	4810      	ldr	r0, [pc, #64]	; (800ee20 <HAL_PCD_MspInit+0x9c>)
 800ede0:	f7f5 fc10 	bl	8004604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ede4:	2300      	movs	r3, #0
 800ede6:	60fb      	str	r3, [r7, #12]
 800ede8:	4b0c      	ldr	r3, [pc, #48]	; (800ee1c <HAL_PCD_MspInit+0x98>)
 800edea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edec:	4a0b      	ldr	r2, [pc, #44]	; (800ee1c <HAL_PCD_MspInit+0x98>)
 800edee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800edf2:	6313      	str	r3, [r2, #48]	; 0x30
 800edf4:	4b09      	ldr	r3, [pc, #36]	; (800ee1c <HAL_PCD_MspInit+0x98>)
 800edf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800edfc:	60fb      	str	r3, [r7, #12]
 800edfe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800ee00:	2200      	movs	r2, #0
 800ee02:	2105      	movs	r1, #5
 800ee04:	204d      	movs	r0, #77	; 0x4d
 800ee06:	f7f4 ff7f 	bl	8003d08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ee0a:	204d      	movs	r0, #77	; 0x4d
 800ee0c:	f7f4 ff98 	bl	8003d40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ee10:	bf00      	nop
 800ee12:	3728      	adds	r7, #40	; 0x28
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	40040000 	.word	0x40040000
 800ee1c:	40023800 	.word	0x40023800
 800ee20:	40020400 	.word	0x40020400

0800ee24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ee38:	4619      	mov	r1, r3
 800ee3a:	4610      	mov	r0, r2
 800ee3c:	f7fe fb5d 	bl	800d4fa <USBD_LL_SetupStage>
}
 800ee40:	bf00      	nop
 800ee42:	3708      	adds	r7, #8
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	460b      	mov	r3, r1
 800ee52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ee5a:	78fa      	ldrb	r2, [r7, #3]
 800ee5c:	6879      	ldr	r1, [r7, #4]
 800ee5e:	4613      	mov	r3, r2
 800ee60:	00db      	lsls	r3, r3, #3
 800ee62:	4413      	add	r3, r2
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	440b      	add	r3, r1
 800ee68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	78fb      	ldrb	r3, [r7, #3]
 800ee70:	4619      	mov	r1, r3
 800ee72:	f7fe fb97 	bl	800d5a4 <USBD_LL_DataOutStage>
}
 800ee76:	bf00      	nop
 800ee78:	3708      	adds	r7, #8
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee7e:	b580      	push	{r7, lr}
 800ee80:	b082      	sub	sp, #8
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]
 800ee86:	460b      	mov	r3, r1
 800ee88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ee90:	78fa      	ldrb	r2, [r7, #3]
 800ee92:	6879      	ldr	r1, [r7, #4]
 800ee94:	4613      	mov	r3, r2
 800ee96:	00db      	lsls	r3, r3, #3
 800ee98:	4413      	add	r3, r2
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	440b      	add	r3, r1
 800ee9e:	334c      	adds	r3, #76	; 0x4c
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	78fb      	ldrb	r3, [r7, #3]
 800eea4:	4619      	mov	r1, r3
 800eea6:	f7fe fc30 	bl	800d70a <USBD_LL_DataInStage>
}
 800eeaa:	bf00      	nop
 800eeac:	3708      	adds	r7, #8
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b082      	sub	sp, #8
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fe fd64 	bl	800d98e <USBD_LL_SOF>
}
 800eec6:	bf00      	nop
 800eec8:	3708      	adds	r7, #8
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}

0800eece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eece:	b580      	push	{r7, lr}
 800eed0:	b084      	sub	sp, #16
 800eed2:	af00      	add	r7, sp, #0
 800eed4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eed6:	2301      	movs	r3, #1
 800eed8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d102      	bne.n	800eee8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800eee2:	2300      	movs	r3, #0
 800eee4:	73fb      	strb	r3, [r7, #15]
 800eee6:	e008      	b.n	800eefa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	2b02      	cmp	r3, #2
 800eeee:	d102      	bne.n	800eef6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800eef0:	2301      	movs	r3, #1
 800eef2:	73fb      	strb	r3, [r7, #15]
 800eef4:	e001      	b.n	800eefa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800eef6:	f7f2 fd43 	bl	8001980 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef00:	7bfa      	ldrb	r2, [r7, #15]
 800ef02:	4611      	mov	r1, r2
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7fe fd04 	bl	800d912 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7fe fcac 	bl	800d86e <USBD_LL_Reset>
}
 800ef16:	bf00      	nop
 800ef18:	3710      	adds	r7, #16
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
	...

0800ef20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fe fcff 	bl	800d932 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	6812      	ldr	r2, [r2, #0]
 800ef42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ef46:	f043 0301 	orr.w	r3, r3, #1
 800ef4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	6a1b      	ldr	r3, [r3, #32]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d005      	beq.n	800ef60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef54:	4b04      	ldr	r3, [pc, #16]	; (800ef68 <HAL_PCD_SuspendCallback+0x48>)
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	4a03      	ldr	r2, [pc, #12]	; (800ef68 <HAL_PCD_SuspendCallback+0x48>)
 800ef5a:	f043 0306 	orr.w	r3, r3, #6
 800ef5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ef60:	bf00      	nop
 800ef62:	3708      	adds	r7, #8
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	e000ed00 	.word	0xe000ed00

0800ef6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7fe fcef 	bl	800d95e <USBD_LL_Resume>
}
 800ef80:	bf00      	nop
 800ef82:	3708      	adds	r7, #8
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}

0800ef88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	460b      	mov	r3, r1
 800ef92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef9a:	78fa      	ldrb	r2, [r7, #3]
 800ef9c:	4611      	mov	r1, r2
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fe fd47 	bl	800da32 <USBD_LL_IsoOUTIncomplete>
}
 800efa4:	bf00      	nop
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}

0800efac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	460b      	mov	r3, r1
 800efb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efbe:	78fa      	ldrb	r2, [r7, #3]
 800efc0:	4611      	mov	r1, r2
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fe fd03 	bl	800d9ce <USBD_LL_IsoINIncomplete>
}
 800efc8:	bf00      	nop
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fe fd59 	bl	800da96 <USBD_LL_DevConnected>
}
 800efe4:	bf00      	nop
 800efe6:	3708      	adds	r7, #8
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}

0800efec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800effa:	4618      	mov	r0, r3
 800effc:	f7fe fd56 	bl	800daac <USBD_LL_DevDisconnected>
}
 800f000:	bf00      	nop
 800f002:	3708      	adds	r7, #8
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b082      	sub	sp, #8
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	2b01      	cmp	r3, #1
 800f016:	d140      	bne.n	800f09a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800f018:	4a22      	ldr	r2, [pc, #136]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4a20      	ldr	r2, [pc, #128]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f024:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f028:	4b1e      	ldr	r3, [pc, #120]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f02a:	4a1f      	ldr	r2, [pc, #124]	; (800f0a8 <USBD_LL_Init+0xa0>)
 800f02c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800f02e:	4b1d      	ldr	r3, [pc, #116]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f030:	2206      	movs	r2, #6
 800f032:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800f034:	4b1b      	ldr	r3, [pc, #108]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f036:	2202      	movs	r2, #2
 800f038:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f03a:	4b1a      	ldr	r3, [pc, #104]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f03c:	2200      	movs	r2, #0
 800f03e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800f040:	4b18      	ldr	r3, [pc, #96]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f042:	2202      	movs	r2, #2
 800f044:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f046:	4b17      	ldr	r3, [pc, #92]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f048:	2200      	movs	r2, #0
 800f04a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f04c:	4b15      	ldr	r3, [pc, #84]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f04e:	2200      	movs	r2, #0
 800f050:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800f052:	4b14      	ldr	r3, [pc, #80]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f054:	2200      	movs	r2, #0
 800f056:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800f058:	4b12      	ldr	r3, [pc, #72]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f05a:	2200      	movs	r2, #0
 800f05c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800f05e:	4b11      	ldr	r3, [pc, #68]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f060:	2200      	movs	r2, #0
 800f062:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f064:	4b0f      	ldr	r3, [pc, #60]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f066:	2200      	movs	r2, #0
 800f068:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800f06a:	480e      	ldr	r0, [pc, #56]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f06c:	f7f5 ff69 	bl	8004f42 <HAL_PCD_Init>
 800f070:	4603      	mov	r3, r0
 800f072:	2b00      	cmp	r3, #0
 800f074:	d001      	beq.n	800f07a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f076:	f7f2 fc83 	bl	8001980 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f07a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f07e:	4809      	ldr	r0, [pc, #36]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f080:	f7f7 f9bf 	bl	8006402 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800f084:	2280      	movs	r2, #128	; 0x80
 800f086:	2100      	movs	r1, #0
 800f088:	4806      	ldr	r0, [pc, #24]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f08a:	f7f7 f973 	bl	8006374 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800f08e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800f092:	2101      	movs	r1, #1
 800f094:	4803      	ldr	r0, [pc, #12]	; (800f0a4 <USBD_LL_Init+0x9c>)
 800f096:	f7f7 f96d 	bl	8006374 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f09a:	2300      	movs	r3, #0
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3708      	adds	r7, #8
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	20006470 	.word	0x20006470
 800f0a8:	40040000 	.word	0x40040000

0800f0ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7f6 f85a 	bl	800517c <HAL_PCD_Start>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0cc:	7bfb      	ldrb	r3, [r7, #15]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f000 f942 	bl	800f358 <USBD_Get_USB_Status>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3710      	adds	r7, #16
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}

0800f0e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f0e2:	b580      	push	{r7, lr}
 800f0e4:	b084      	sub	sp, #16
 800f0e6:	af00      	add	r7, sp, #0
 800f0e8:	6078      	str	r0, [r7, #4]
 800f0ea:	4608      	mov	r0, r1
 800f0ec:	4611      	mov	r1, r2
 800f0ee:	461a      	mov	r2, r3
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	70fb      	strb	r3, [r7, #3]
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	70bb      	strb	r3, [r7, #2]
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f100:	2300      	movs	r3, #0
 800f102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f10a:	78bb      	ldrb	r3, [r7, #2]
 800f10c:	883a      	ldrh	r2, [r7, #0]
 800f10e:	78f9      	ldrb	r1, [r7, #3]
 800f110:	f7f6 fd2b 	bl	8005b6a <HAL_PCD_EP_Open>
 800f114:	4603      	mov	r3, r0
 800f116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f118:	7bfb      	ldrb	r3, [r7, #15]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f000 f91c 	bl	800f358 <USBD_Get_USB_Status>
 800f120:	4603      	mov	r3, r0
 800f122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f124:	7bbb      	ldrb	r3, [r7, #14]
}
 800f126:	4618      	mov	r0, r3
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f12e:	b580      	push	{r7, lr}
 800f130:	b084      	sub	sp, #16
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	460b      	mov	r3, r1
 800f138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f13a:	2300      	movs	r3, #0
 800f13c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f13e:	2300      	movs	r3, #0
 800f140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f148:	78fa      	ldrb	r2, [r7, #3]
 800f14a:	4611      	mov	r1, r2
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7f6 fd74 	bl	8005c3a <HAL_PCD_EP_Close>
 800f152:	4603      	mov	r3, r0
 800f154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f156:	7bfb      	ldrb	r3, [r7, #15]
 800f158:	4618      	mov	r0, r3
 800f15a:	f000 f8fd 	bl	800f358 <USBD_Get_USB_Status>
 800f15e:	4603      	mov	r3, r0
 800f160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f162:	7bbb      	ldrb	r3, [r7, #14]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	460b      	mov	r3, r1
 800f176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f178:	2300      	movs	r3, #0
 800f17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f17c:	2300      	movs	r3, #0
 800f17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f186:	78fa      	ldrb	r2, [r7, #3]
 800f188:	4611      	mov	r1, r2
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7f6 fe4c 	bl	8005e28 <HAL_PCD_EP_SetStall>
 800f190:	4603      	mov	r3, r0
 800f192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f194:	7bfb      	ldrb	r3, [r7, #15]
 800f196:	4618      	mov	r0, r3
 800f198:	f000 f8de 	bl	800f358 <USBD_Get_USB_Status>
 800f19c:	4603      	mov	r3, r0
 800f19e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3710      	adds	r7, #16
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b084      	sub	sp, #16
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1c4:	78fa      	ldrb	r2, [r7, #3]
 800f1c6:	4611      	mov	r1, r2
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7f6 fe91 	bl	8005ef0 <HAL_PCD_EP_ClrStall>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1d2:	7bfb      	ldrb	r3, [r7, #15]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f000 f8bf 	bl	800f358 <USBD_Get_USB_Status>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1de:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3710      	adds	r7, #16
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b085      	sub	sp, #20
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f1fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f200:	2b00      	cmp	r3, #0
 800f202:	da0b      	bge.n	800f21c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f204:	78fb      	ldrb	r3, [r7, #3]
 800f206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f20a:	68f9      	ldr	r1, [r7, #12]
 800f20c:	4613      	mov	r3, r2
 800f20e:	00db      	lsls	r3, r3, #3
 800f210:	4413      	add	r3, r2
 800f212:	009b      	lsls	r3, r3, #2
 800f214:	440b      	add	r3, r1
 800f216:	333e      	adds	r3, #62	; 0x3e
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	e00b      	b.n	800f234 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f21c:	78fb      	ldrb	r3, [r7, #3]
 800f21e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f222:	68f9      	ldr	r1, [r7, #12]
 800f224:	4613      	mov	r3, r2
 800f226:	00db      	lsls	r3, r3, #3
 800f228:	4413      	add	r3, r2
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	440b      	add	r3, r1
 800f22e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f232:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f234:	4618      	mov	r0, r3
 800f236:	3714      	adds	r7, #20
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr

0800f240 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	460b      	mov	r3, r1
 800f24a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f24c:	2300      	movs	r3, #0
 800f24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f250:	2300      	movs	r3, #0
 800f252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f25a:	78fa      	ldrb	r2, [r7, #3]
 800f25c:	4611      	mov	r1, r2
 800f25e:	4618      	mov	r0, r3
 800f260:	f7f6 fc5e 	bl	8005b20 <HAL_PCD_SetAddress>
 800f264:	4603      	mov	r3, r0
 800f266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f268:	7bfb      	ldrb	r3, [r7, #15]
 800f26a:	4618      	mov	r0, r3
 800f26c:	f000 f874 	bl	800f358 <USBD_Get_USB_Status>
 800f270:	4603      	mov	r3, r0
 800f272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f274:	7bbb      	ldrb	r3, [r7, #14]
}
 800f276:	4618      	mov	r0, r3
 800f278:	3710      	adds	r7, #16
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b086      	sub	sp, #24
 800f282:	af00      	add	r7, sp, #0
 800f284:	60f8      	str	r0, [r7, #12]
 800f286:	607a      	str	r2, [r7, #4]
 800f288:	603b      	str	r3, [r7, #0]
 800f28a:	460b      	mov	r3, r1
 800f28c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f28e:	2300      	movs	r3, #0
 800f290:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f292:	2300      	movs	r3, #0
 800f294:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f29c:	7af9      	ldrb	r1, [r7, #11]
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	f7f6 fd77 	bl	8005d94 <HAL_PCD_EP_Transmit>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2aa:	7dfb      	ldrb	r3, [r7, #23]
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f000 f853 	bl	800f358 <USBD_Get_USB_Status>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3718      	adds	r7, #24
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b086      	sub	sp, #24
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	607a      	str	r2, [r7, #4]
 800f2ca:	603b      	str	r3, [r7, #0]
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f2de:	7af9      	ldrb	r1, [r7, #11]
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	f7f6 fcf3 	bl	8005cce <HAL_PCD_EP_Receive>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2ec:	7dfb      	ldrb	r3, [r7, #23]
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f000 f832 	bl	800f358 <USBD_Get_USB_Status>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3718      	adds	r7, #24
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f302:	b580      	push	{r7, lr}
 800f304:	b082      	sub	sp, #8
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
 800f30a:	460b      	mov	r3, r1
 800f30c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f314:	78fa      	ldrb	r2, [r7, #3]
 800f316:	4611      	mov	r1, r2
 800f318:	4618      	mov	r0, r3
 800f31a:	f7f6 fd23 	bl	8005d64 <HAL_PCD_EP_GetRxCount>
 800f31e:	4603      	mov	r3, r0
}
 800f320:	4618      	mov	r0, r3
 800f322:	3708      	adds	r7, #8
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f330:	4b03      	ldr	r3, [pc, #12]	; (800f340 <USBD_static_malloc+0x18>)
}
 800f332:	4618      	mov	r0, r3
 800f334:	370c      	adds	r7, #12
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	2000697c 	.word	0x2000697c

0800f344 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]

}
 800f34c:	bf00      	nop
 800f34e:	370c      	adds	r7, #12
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr

0800f358 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f358:	b480      	push	{r7}
 800f35a:	b085      	sub	sp, #20
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	4603      	mov	r3, r0
 800f360:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f362:	2300      	movs	r3, #0
 800f364:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f366:	79fb      	ldrb	r3, [r7, #7]
 800f368:	2b03      	cmp	r3, #3
 800f36a:	d817      	bhi.n	800f39c <USBD_Get_USB_Status+0x44>
 800f36c:	a201      	add	r2, pc, #4	; (adr r2, 800f374 <USBD_Get_USB_Status+0x1c>)
 800f36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f372:	bf00      	nop
 800f374:	0800f385 	.word	0x0800f385
 800f378:	0800f38b 	.word	0x0800f38b
 800f37c:	0800f391 	.word	0x0800f391
 800f380:	0800f397 	.word	0x0800f397
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f384:	2300      	movs	r3, #0
 800f386:	73fb      	strb	r3, [r7, #15]
    break;
 800f388:	e00b      	b.n	800f3a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f38a:	2303      	movs	r3, #3
 800f38c:	73fb      	strb	r3, [r7, #15]
    break;
 800f38e:	e008      	b.n	800f3a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f390:	2301      	movs	r3, #1
 800f392:	73fb      	strb	r3, [r7, #15]
    break;
 800f394:	e005      	b.n	800f3a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f396:	2303      	movs	r3, #3
 800f398:	73fb      	strb	r3, [r7, #15]
    break;
 800f39a:	e002      	b.n	800f3a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f39c:	2303      	movs	r3, #3
 800f39e:	73fb      	strb	r3, [r7, #15]
    break;
 800f3a0:	bf00      	nop
  }
  return usb_status;
 800f3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3714      	adds	r7, #20
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <__cvt>:
 800f3b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3b4:	ec55 4b10 	vmov	r4, r5, d0
 800f3b8:	2d00      	cmp	r5, #0
 800f3ba:	460e      	mov	r6, r1
 800f3bc:	4619      	mov	r1, r3
 800f3be:	462b      	mov	r3, r5
 800f3c0:	bfbb      	ittet	lt
 800f3c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f3c6:	461d      	movlt	r5, r3
 800f3c8:	2300      	movge	r3, #0
 800f3ca:	232d      	movlt	r3, #45	; 0x2d
 800f3cc:	700b      	strb	r3, [r1, #0]
 800f3ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f3d4:	4691      	mov	r9, r2
 800f3d6:	f023 0820 	bic.w	r8, r3, #32
 800f3da:	bfbc      	itt	lt
 800f3dc:	4622      	movlt	r2, r4
 800f3de:	4614      	movlt	r4, r2
 800f3e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f3e4:	d005      	beq.n	800f3f2 <__cvt+0x42>
 800f3e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f3ea:	d100      	bne.n	800f3ee <__cvt+0x3e>
 800f3ec:	3601      	adds	r6, #1
 800f3ee:	2102      	movs	r1, #2
 800f3f0:	e000      	b.n	800f3f4 <__cvt+0x44>
 800f3f2:	2103      	movs	r1, #3
 800f3f4:	ab03      	add	r3, sp, #12
 800f3f6:	9301      	str	r3, [sp, #4]
 800f3f8:	ab02      	add	r3, sp, #8
 800f3fa:	9300      	str	r3, [sp, #0]
 800f3fc:	ec45 4b10 	vmov	d0, r4, r5
 800f400:	4653      	mov	r3, sl
 800f402:	4632      	mov	r2, r6
 800f404:	f001 f878 	bl	80104f8 <_dtoa_r>
 800f408:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f40c:	4607      	mov	r7, r0
 800f40e:	d102      	bne.n	800f416 <__cvt+0x66>
 800f410:	f019 0f01 	tst.w	r9, #1
 800f414:	d022      	beq.n	800f45c <__cvt+0xac>
 800f416:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f41a:	eb07 0906 	add.w	r9, r7, r6
 800f41e:	d110      	bne.n	800f442 <__cvt+0x92>
 800f420:	783b      	ldrb	r3, [r7, #0]
 800f422:	2b30      	cmp	r3, #48	; 0x30
 800f424:	d10a      	bne.n	800f43c <__cvt+0x8c>
 800f426:	2200      	movs	r2, #0
 800f428:	2300      	movs	r3, #0
 800f42a:	4620      	mov	r0, r4
 800f42c:	4629      	mov	r1, r5
 800f42e:	f7f1 fb5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800f432:	b918      	cbnz	r0, 800f43c <__cvt+0x8c>
 800f434:	f1c6 0601 	rsb	r6, r6, #1
 800f438:	f8ca 6000 	str.w	r6, [sl]
 800f43c:	f8da 3000 	ldr.w	r3, [sl]
 800f440:	4499      	add	r9, r3
 800f442:	2200      	movs	r2, #0
 800f444:	2300      	movs	r3, #0
 800f446:	4620      	mov	r0, r4
 800f448:	4629      	mov	r1, r5
 800f44a:	f7f1 fb4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800f44e:	b108      	cbz	r0, 800f454 <__cvt+0xa4>
 800f450:	f8cd 900c 	str.w	r9, [sp, #12]
 800f454:	2230      	movs	r2, #48	; 0x30
 800f456:	9b03      	ldr	r3, [sp, #12]
 800f458:	454b      	cmp	r3, r9
 800f45a:	d307      	bcc.n	800f46c <__cvt+0xbc>
 800f45c:	9b03      	ldr	r3, [sp, #12]
 800f45e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f460:	1bdb      	subs	r3, r3, r7
 800f462:	4638      	mov	r0, r7
 800f464:	6013      	str	r3, [r2, #0]
 800f466:	b004      	add	sp, #16
 800f468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f46c:	1c59      	adds	r1, r3, #1
 800f46e:	9103      	str	r1, [sp, #12]
 800f470:	701a      	strb	r2, [r3, #0]
 800f472:	e7f0      	b.n	800f456 <__cvt+0xa6>

0800f474 <__exponent>:
 800f474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f476:	4603      	mov	r3, r0
 800f478:	2900      	cmp	r1, #0
 800f47a:	bfb8      	it	lt
 800f47c:	4249      	neglt	r1, r1
 800f47e:	f803 2b02 	strb.w	r2, [r3], #2
 800f482:	bfb4      	ite	lt
 800f484:	222d      	movlt	r2, #45	; 0x2d
 800f486:	222b      	movge	r2, #43	; 0x2b
 800f488:	2909      	cmp	r1, #9
 800f48a:	7042      	strb	r2, [r0, #1]
 800f48c:	dd2a      	ble.n	800f4e4 <__exponent+0x70>
 800f48e:	f10d 0207 	add.w	r2, sp, #7
 800f492:	4617      	mov	r7, r2
 800f494:	260a      	movs	r6, #10
 800f496:	4694      	mov	ip, r2
 800f498:	fb91 f5f6 	sdiv	r5, r1, r6
 800f49c:	fb06 1415 	mls	r4, r6, r5, r1
 800f4a0:	3430      	adds	r4, #48	; 0x30
 800f4a2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f4a6:	460c      	mov	r4, r1
 800f4a8:	2c63      	cmp	r4, #99	; 0x63
 800f4aa:	f102 32ff 	add.w	r2, r2, #4294967295
 800f4ae:	4629      	mov	r1, r5
 800f4b0:	dcf1      	bgt.n	800f496 <__exponent+0x22>
 800f4b2:	3130      	adds	r1, #48	; 0x30
 800f4b4:	f1ac 0402 	sub.w	r4, ip, #2
 800f4b8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f4bc:	1c41      	adds	r1, r0, #1
 800f4be:	4622      	mov	r2, r4
 800f4c0:	42ba      	cmp	r2, r7
 800f4c2:	d30a      	bcc.n	800f4da <__exponent+0x66>
 800f4c4:	f10d 0209 	add.w	r2, sp, #9
 800f4c8:	eba2 020c 	sub.w	r2, r2, ip
 800f4cc:	42bc      	cmp	r4, r7
 800f4ce:	bf88      	it	hi
 800f4d0:	2200      	movhi	r2, #0
 800f4d2:	4413      	add	r3, r2
 800f4d4:	1a18      	subs	r0, r3, r0
 800f4d6:	b003      	add	sp, #12
 800f4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4da:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f4de:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f4e2:	e7ed      	b.n	800f4c0 <__exponent+0x4c>
 800f4e4:	2330      	movs	r3, #48	; 0x30
 800f4e6:	3130      	adds	r1, #48	; 0x30
 800f4e8:	7083      	strb	r3, [r0, #2]
 800f4ea:	70c1      	strb	r1, [r0, #3]
 800f4ec:	1d03      	adds	r3, r0, #4
 800f4ee:	e7f1      	b.n	800f4d4 <__exponent+0x60>

0800f4f0 <_printf_float>:
 800f4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f4:	ed2d 8b02 	vpush	{d8}
 800f4f8:	b08d      	sub	sp, #52	; 0x34
 800f4fa:	460c      	mov	r4, r1
 800f4fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f500:	4616      	mov	r6, r2
 800f502:	461f      	mov	r7, r3
 800f504:	4605      	mov	r5, r0
 800f506:	f000 fee5 	bl	80102d4 <_localeconv_r>
 800f50a:	f8d0 a000 	ldr.w	sl, [r0]
 800f50e:	4650      	mov	r0, sl
 800f510:	f7f0 febe 	bl	8000290 <strlen>
 800f514:	2300      	movs	r3, #0
 800f516:	930a      	str	r3, [sp, #40]	; 0x28
 800f518:	6823      	ldr	r3, [r4, #0]
 800f51a:	9305      	str	r3, [sp, #20]
 800f51c:	f8d8 3000 	ldr.w	r3, [r8]
 800f520:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f524:	3307      	adds	r3, #7
 800f526:	f023 0307 	bic.w	r3, r3, #7
 800f52a:	f103 0208 	add.w	r2, r3, #8
 800f52e:	f8c8 2000 	str.w	r2, [r8]
 800f532:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f536:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f53a:	9307      	str	r3, [sp, #28]
 800f53c:	f8cd 8018 	str.w	r8, [sp, #24]
 800f540:	ee08 0a10 	vmov	s16, r0
 800f544:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800f548:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f54c:	4b9e      	ldr	r3, [pc, #632]	; (800f7c8 <_printf_float+0x2d8>)
 800f54e:	f04f 32ff 	mov.w	r2, #4294967295
 800f552:	f7f1 fafb 	bl	8000b4c <__aeabi_dcmpun>
 800f556:	bb88      	cbnz	r0, 800f5bc <_printf_float+0xcc>
 800f558:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f55c:	4b9a      	ldr	r3, [pc, #616]	; (800f7c8 <_printf_float+0x2d8>)
 800f55e:	f04f 32ff 	mov.w	r2, #4294967295
 800f562:	f7f1 fad5 	bl	8000b10 <__aeabi_dcmple>
 800f566:	bb48      	cbnz	r0, 800f5bc <_printf_float+0xcc>
 800f568:	2200      	movs	r2, #0
 800f56a:	2300      	movs	r3, #0
 800f56c:	4640      	mov	r0, r8
 800f56e:	4649      	mov	r1, r9
 800f570:	f7f1 fac4 	bl	8000afc <__aeabi_dcmplt>
 800f574:	b110      	cbz	r0, 800f57c <_printf_float+0x8c>
 800f576:	232d      	movs	r3, #45	; 0x2d
 800f578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f57c:	4a93      	ldr	r2, [pc, #588]	; (800f7cc <_printf_float+0x2dc>)
 800f57e:	4b94      	ldr	r3, [pc, #592]	; (800f7d0 <_printf_float+0x2e0>)
 800f580:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f584:	bf94      	ite	ls
 800f586:	4690      	movls	r8, r2
 800f588:	4698      	movhi	r8, r3
 800f58a:	2303      	movs	r3, #3
 800f58c:	6123      	str	r3, [r4, #16]
 800f58e:	9b05      	ldr	r3, [sp, #20]
 800f590:	f023 0304 	bic.w	r3, r3, #4
 800f594:	6023      	str	r3, [r4, #0]
 800f596:	f04f 0900 	mov.w	r9, #0
 800f59a:	9700      	str	r7, [sp, #0]
 800f59c:	4633      	mov	r3, r6
 800f59e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f5a0:	4621      	mov	r1, r4
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	f000 f9da 	bl	800f95c <_printf_common>
 800f5a8:	3001      	adds	r0, #1
 800f5aa:	f040 8090 	bne.w	800f6ce <_printf_float+0x1de>
 800f5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b2:	b00d      	add	sp, #52	; 0x34
 800f5b4:	ecbd 8b02 	vpop	{d8}
 800f5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5bc:	4642      	mov	r2, r8
 800f5be:	464b      	mov	r3, r9
 800f5c0:	4640      	mov	r0, r8
 800f5c2:	4649      	mov	r1, r9
 800f5c4:	f7f1 fac2 	bl	8000b4c <__aeabi_dcmpun>
 800f5c8:	b140      	cbz	r0, 800f5dc <_printf_float+0xec>
 800f5ca:	464b      	mov	r3, r9
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	bfbc      	itt	lt
 800f5d0:	232d      	movlt	r3, #45	; 0x2d
 800f5d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f5d6:	4a7f      	ldr	r2, [pc, #508]	; (800f7d4 <_printf_float+0x2e4>)
 800f5d8:	4b7f      	ldr	r3, [pc, #508]	; (800f7d8 <_printf_float+0x2e8>)
 800f5da:	e7d1      	b.n	800f580 <_printf_float+0x90>
 800f5dc:	6863      	ldr	r3, [r4, #4]
 800f5de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f5e2:	9206      	str	r2, [sp, #24]
 800f5e4:	1c5a      	adds	r2, r3, #1
 800f5e6:	d13f      	bne.n	800f668 <_printf_float+0x178>
 800f5e8:	2306      	movs	r3, #6
 800f5ea:	6063      	str	r3, [r4, #4]
 800f5ec:	9b05      	ldr	r3, [sp, #20]
 800f5ee:	6861      	ldr	r1, [r4, #4]
 800f5f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	9303      	str	r3, [sp, #12]
 800f5f8:	ab0a      	add	r3, sp, #40	; 0x28
 800f5fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f5fe:	ab09      	add	r3, sp, #36	; 0x24
 800f600:	ec49 8b10 	vmov	d0, r8, r9
 800f604:	9300      	str	r3, [sp, #0]
 800f606:	6022      	str	r2, [r4, #0]
 800f608:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f60c:	4628      	mov	r0, r5
 800f60e:	f7ff fecf 	bl	800f3b0 <__cvt>
 800f612:	9b06      	ldr	r3, [sp, #24]
 800f614:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f616:	2b47      	cmp	r3, #71	; 0x47
 800f618:	4680      	mov	r8, r0
 800f61a:	d108      	bne.n	800f62e <_printf_float+0x13e>
 800f61c:	1cc8      	adds	r0, r1, #3
 800f61e:	db02      	blt.n	800f626 <_printf_float+0x136>
 800f620:	6863      	ldr	r3, [r4, #4]
 800f622:	4299      	cmp	r1, r3
 800f624:	dd41      	ble.n	800f6aa <_printf_float+0x1ba>
 800f626:	f1ab 0302 	sub.w	r3, fp, #2
 800f62a:	fa5f fb83 	uxtb.w	fp, r3
 800f62e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f632:	d820      	bhi.n	800f676 <_printf_float+0x186>
 800f634:	3901      	subs	r1, #1
 800f636:	465a      	mov	r2, fp
 800f638:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f63c:	9109      	str	r1, [sp, #36]	; 0x24
 800f63e:	f7ff ff19 	bl	800f474 <__exponent>
 800f642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f644:	1813      	adds	r3, r2, r0
 800f646:	2a01      	cmp	r2, #1
 800f648:	4681      	mov	r9, r0
 800f64a:	6123      	str	r3, [r4, #16]
 800f64c:	dc02      	bgt.n	800f654 <_printf_float+0x164>
 800f64e:	6822      	ldr	r2, [r4, #0]
 800f650:	07d2      	lsls	r2, r2, #31
 800f652:	d501      	bpl.n	800f658 <_printf_float+0x168>
 800f654:	3301      	adds	r3, #1
 800f656:	6123      	str	r3, [r4, #16]
 800f658:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d09c      	beq.n	800f59a <_printf_float+0xaa>
 800f660:	232d      	movs	r3, #45	; 0x2d
 800f662:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f666:	e798      	b.n	800f59a <_printf_float+0xaa>
 800f668:	9a06      	ldr	r2, [sp, #24]
 800f66a:	2a47      	cmp	r2, #71	; 0x47
 800f66c:	d1be      	bne.n	800f5ec <_printf_float+0xfc>
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d1bc      	bne.n	800f5ec <_printf_float+0xfc>
 800f672:	2301      	movs	r3, #1
 800f674:	e7b9      	b.n	800f5ea <_printf_float+0xfa>
 800f676:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f67a:	d118      	bne.n	800f6ae <_printf_float+0x1be>
 800f67c:	2900      	cmp	r1, #0
 800f67e:	6863      	ldr	r3, [r4, #4]
 800f680:	dd0b      	ble.n	800f69a <_printf_float+0x1aa>
 800f682:	6121      	str	r1, [r4, #16]
 800f684:	b913      	cbnz	r3, 800f68c <_printf_float+0x19c>
 800f686:	6822      	ldr	r2, [r4, #0]
 800f688:	07d0      	lsls	r0, r2, #31
 800f68a:	d502      	bpl.n	800f692 <_printf_float+0x1a2>
 800f68c:	3301      	adds	r3, #1
 800f68e:	440b      	add	r3, r1
 800f690:	6123      	str	r3, [r4, #16]
 800f692:	65a1      	str	r1, [r4, #88]	; 0x58
 800f694:	f04f 0900 	mov.w	r9, #0
 800f698:	e7de      	b.n	800f658 <_printf_float+0x168>
 800f69a:	b913      	cbnz	r3, 800f6a2 <_printf_float+0x1b2>
 800f69c:	6822      	ldr	r2, [r4, #0]
 800f69e:	07d2      	lsls	r2, r2, #31
 800f6a0:	d501      	bpl.n	800f6a6 <_printf_float+0x1b6>
 800f6a2:	3302      	adds	r3, #2
 800f6a4:	e7f4      	b.n	800f690 <_printf_float+0x1a0>
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e7f2      	b.n	800f690 <_printf_float+0x1a0>
 800f6aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6b0:	4299      	cmp	r1, r3
 800f6b2:	db05      	blt.n	800f6c0 <_printf_float+0x1d0>
 800f6b4:	6823      	ldr	r3, [r4, #0]
 800f6b6:	6121      	str	r1, [r4, #16]
 800f6b8:	07d8      	lsls	r0, r3, #31
 800f6ba:	d5ea      	bpl.n	800f692 <_printf_float+0x1a2>
 800f6bc:	1c4b      	adds	r3, r1, #1
 800f6be:	e7e7      	b.n	800f690 <_printf_float+0x1a0>
 800f6c0:	2900      	cmp	r1, #0
 800f6c2:	bfd4      	ite	le
 800f6c4:	f1c1 0202 	rsble	r2, r1, #2
 800f6c8:	2201      	movgt	r2, #1
 800f6ca:	4413      	add	r3, r2
 800f6cc:	e7e0      	b.n	800f690 <_printf_float+0x1a0>
 800f6ce:	6823      	ldr	r3, [r4, #0]
 800f6d0:	055a      	lsls	r2, r3, #21
 800f6d2:	d407      	bmi.n	800f6e4 <_printf_float+0x1f4>
 800f6d4:	6923      	ldr	r3, [r4, #16]
 800f6d6:	4642      	mov	r2, r8
 800f6d8:	4631      	mov	r1, r6
 800f6da:	4628      	mov	r0, r5
 800f6dc:	47b8      	blx	r7
 800f6de:	3001      	adds	r0, #1
 800f6e0:	d12c      	bne.n	800f73c <_printf_float+0x24c>
 800f6e2:	e764      	b.n	800f5ae <_printf_float+0xbe>
 800f6e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f6e8:	f240 80e0 	bls.w	800f8ac <_printf_float+0x3bc>
 800f6ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	f7f1 f9f8 	bl	8000ae8 <__aeabi_dcmpeq>
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d034      	beq.n	800f766 <_printf_float+0x276>
 800f6fc:	4a37      	ldr	r2, [pc, #220]	; (800f7dc <_printf_float+0x2ec>)
 800f6fe:	2301      	movs	r3, #1
 800f700:	4631      	mov	r1, r6
 800f702:	4628      	mov	r0, r5
 800f704:	47b8      	blx	r7
 800f706:	3001      	adds	r0, #1
 800f708:	f43f af51 	beq.w	800f5ae <_printf_float+0xbe>
 800f70c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f710:	429a      	cmp	r2, r3
 800f712:	db02      	blt.n	800f71a <_printf_float+0x22a>
 800f714:	6823      	ldr	r3, [r4, #0]
 800f716:	07d8      	lsls	r0, r3, #31
 800f718:	d510      	bpl.n	800f73c <_printf_float+0x24c>
 800f71a:	ee18 3a10 	vmov	r3, s16
 800f71e:	4652      	mov	r2, sl
 800f720:	4631      	mov	r1, r6
 800f722:	4628      	mov	r0, r5
 800f724:	47b8      	blx	r7
 800f726:	3001      	adds	r0, #1
 800f728:	f43f af41 	beq.w	800f5ae <_printf_float+0xbe>
 800f72c:	f04f 0800 	mov.w	r8, #0
 800f730:	f104 091a 	add.w	r9, r4, #26
 800f734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f736:	3b01      	subs	r3, #1
 800f738:	4543      	cmp	r3, r8
 800f73a:	dc09      	bgt.n	800f750 <_printf_float+0x260>
 800f73c:	6823      	ldr	r3, [r4, #0]
 800f73e:	079b      	lsls	r3, r3, #30
 800f740:	f100 8107 	bmi.w	800f952 <_printf_float+0x462>
 800f744:	68e0      	ldr	r0, [r4, #12]
 800f746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f748:	4298      	cmp	r0, r3
 800f74a:	bfb8      	it	lt
 800f74c:	4618      	movlt	r0, r3
 800f74e:	e730      	b.n	800f5b2 <_printf_float+0xc2>
 800f750:	2301      	movs	r3, #1
 800f752:	464a      	mov	r2, r9
 800f754:	4631      	mov	r1, r6
 800f756:	4628      	mov	r0, r5
 800f758:	47b8      	blx	r7
 800f75a:	3001      	adds	r0, #1
 800f75c:	f43f af27 	beq.w	800f5ae <_printf_float+0xbe>
 800f760:	f108 0801 	add.w	r8, r8, #1
 800f764:	e7e6      	b.n	800f734 <_printf_float+0x244>
 800f766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f768:	2b00      	cmp	r3, #0
 800f76a:	dc39      	bgt.n	800f7e0 <_printf_float+0x2f0>
 800f76c:	4a1b      	ldr	r2, [pc, #108]	; (800f7dc <_printf_float+0x2ec>)
 800f76e:	2301      	movs	r3, #1
 800f770:	4631      	mov	r1, r6
 800f772:	4628      	mov	r0, r5
 800f774:	47b8      	blx	r7
 800f776:	3001      	adds	r0, #1
 800f778:	f43f af19 	beq.w	800f5ae <_printf_float+0xbe>
 800f77c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f780:	4313      	orrs	r3, r2
 800f782:	d102      	bne.n	800f78a <_printf_float+0x29a>
 800f784:	6823      	ldr	r3, [r4, #0]
 800f786:	07d9      	lsls	r1, r3, #31
 800f788:	d5d8      	bpl.n	800f73c <_printf_float+0x24c>
 800f78a:	ee18 3a10 	vmov	r3, s16
 800f78e:	4652      	mov	r2, sl
 800f790:	4631      	mov	r1, r6
 800f792:	4628      	mov	r0, r5
 800f794:	47b8      	blx	r7
 800f796:	3001      	adds	r0, #1
 800f798:	f43f af09 	beq.w	800f5ae <_printf_float+0xbe>
 800f79c:	f04f 0900 	mov.w	r9, #0
 800f7a0:	f104 0a1a 	add.w	sl, r4, #26
 800f7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7a6:	425b      	negs	r3, r3
 800f7a8:	454b      	cmp	r3, r9
 800f7aa:	dc01      	bgt.n	800f7b0 <_printf_float+0x2c0>
 800f7ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7ae:	e792      	b.n	800f6d6 <_printf_float+0x1e6>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	4652      	mov	r2, sl
 800f7b4:	4631      	mov	r1, r6
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	47b8      	blx	r7
 800f7ba:	3001      	adds	r0, #1
 800f7bc:	f43f aef7 	beq.w	800f5ae <_printf_float+0xbe>
 800f7c0:	f109 0901 	add.w	r9, r9, #1
 800f7c4:	e7ee      	b.n	800f7a4 <_printf_float+0x2b4>
 800f7c6:	bf00      	nop
 800f7c8:	7fefffff 	.word	0x7fefffff
 800f7cc:	08015758 	.word	0x08015758
 800f7d0:	0801575c 	.word	0x0801575c
 800f7d4:	08015760 	.word	0x08015760
 800f7d8:	08015764 	.word	0x08015764
 800f7dc:	08015768 	.word	0x08015768
 800f7e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	bfa8      	it	ge
 800f7e8:	461a      	movge	r2, r3
 800f7ea:	2a00      	cmp	r2, #0
 800f7ec:	4691      	mov	r9, r2
 800f7ee:	dc37      	bgt.n	800f860 <_printf_float+0x370>
 800f7f0:	f04f 0b00 	mov.w	fp, #0
 800f7f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f7f8:	f104 021a 	add.w	r2, r4, #26
 800f7fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f7fe:	9305      	str	r3, [sp, #20]
 800f800:	eba3 0309 	sub.w	r3, r3, r9
 800f804:	455b      	cmp	r3, fp
 800f806:	dc33      	bgt.n	800f870 <_printf_float+0x380>
 800f808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f80c:	429a      	cmp	r2, r3
 800f80e:	db3b      	blt.n	800f888 <_printf_float+0x398>
 800f810:	6823      	ldr	r3, [r4, #0]
 800f812:	07da      	lsls	r2, r3, #31
 800f814:	d438      	bmi.n	800f888 <_printf_float+0x398>
 800f816:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f81a:	eba2 0903 	sub.w	r9, r2, r3
 800f81e:	9b05      	ldr	r3, [sp, #20]
 800f820:	1ad2      	subs	r2, r2, r3
 800f822:	4591      	cmp	r9, r2
 800f824:	bfa8      	it	ge
 800f826:	4691      	movge	r9, r2
 800f828:	f1b9 0f00 	cmp.w	r9, #0
 800f82c:	dc35      	bgt.n	800f89a <_printf_float+0x3aa>
 800f82e:	f04f 0800 	mov.w	r8, #0
 800f832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f836:	f104 0a1a 	add.w	sl, r4, #26
 800f83a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f83e:	1a9b      	subs	r3, r3, r2
 800f840:	eba3 0309 	sub.w	r3, r3, r9
 800f844:	4543      	cmp	r3, r8
 800f846:	f77f af79 	ble.w	800f73c <_printf_float+0x24c>
 800f84a:	2301      	movs	r3, #1
 800f84c:	4652      	mov	r2, sl
 800f84e:	4631      	mov	r1, r6
 800f850:	4628      	mov	r0, r5
 800f852:	47b8      	blx	r7
 800f854:	3001      	adds	r0, #1
 800f856:	f43f aeaa 	beq.w	800f5ae <_printf_float+0xbe>
 800f85a:	f108 0801 	add.w	r8, r8, #1
 800f85e:	e7ec      	b.n	800f83a <_printf_float+0x34a>
 800f860:	4613      	mov	r3, r2
 800f862:	4631      	mov	r1, r6
 800f864:	4642      	mov	r2, r8
 800f866:	4628      	mov	r0, r5
 800f868:	47b8      	blx	r7
 800f86a:	3001      	adds	r0, #1
 800f86c:	d1c0      	bne.n	800f7f0 <_printf_float+0x300>
 800f86e:	e69e      	b.n	800f5ae <_printf_float+0xbe>
 800f870:	2301      	movs	r3, #1
 800f872:	4631      	mov	r1, r6
 800f874:	4628      	mov	r0, r5
 800f876:	9205      	str	r2, [sp, #20]
 800f878:	47b8      	blx	r7
 800f87a:	3001      	adds	r0, #1
 800f87c:	f43f ae97 	beq.w	800f5ae <_printf_float+0xbe>
 800f880:	9a05      	ldr	r2, [sp, #20]
 800f882:	f10b 0b01 	add.w	fp, fp, #1
 800f886:	e7b9      	b.n	800f7fc <_printf_float+0x30c>
 800f888:	ee18 3a10 	vmov	r3, s16
 800f88c:	4652      	mov	r2, sl
 800f88e:	4631      	mov	r1, r6
 800f890:	4628      	mov	r0, r5
 800f892:	47b8      	blx	r7
 800f894:	3001      	adds	r0, #1
 800f896:	d1be      	bne.n	800f816 <_printf_float+0x326>
 800f898:	e689      	b.n	800f5ae <_printf_float+0xbe>
 800f89a:	9a05      	ldr	r2, [sp, #20]
 800f89c:	464b      	mov	r3, r9
 800f89e:	4442      	add	r2, r8
 800f8a0:	4631      	mov	r1, r6
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	47b8      	blx	r7
 800f8a6:	3001      	adds	r0, #1
 800f8a8:	d1c1      	bne.n	800f82e <_printf_float+0x33e>
 800f8aa:	e680      	b.n	800f5ae <_printf_float+0xbe>
 800f8ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8ae:	2a01      	cmp	r2, #1
 800f8b0:	dc01      	bgt.n	800f8b6 <_printf_float+0x3c6>
 800f8b2:	07db      	lsls	r3, r3, #31
 800f8b4:	d53a      	bpl.n	800f92c <_printf_float+0x43c>
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	4642      	mov	r2, r8
 800f8ba:	4631      	mov	r1, r6
 800f8bc:	4628      	mov	r0, r5
 800f8be:	47b8      	blx	r7
 800f8c0:	3001      	adds	r0, #1
 800f8c2:	f43f ae74 	beq.w	800f5ae <_printf_float+0xbe>
 800f8c6:	ee18 3a10 	vmov	r3, s16
 800f8ca:	4652      	mov	r2, sl
 800f8cc:	4631      	mov	r1, r6
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	47b8      	blx	r7
 800f8d2:	3001      	adds	r0, #1
 800f8d4:	f43f ae6b 	beq.w	800f5ae <_printf_float+0xbe>
 800f8d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f8dc:	2200      	movs	r2, #0
 800f8de:	2300      	movs	r3, #0
 800f8e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f8e4:	f7f1 f900 	bl	8000ae8 <__aeabi_dcmpeq>
 800f8e8:	b9d8      	cbnz	r0, 800f922 <_printf_float+0x432>
 800f8ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f8ee:	f108 0201 	add.w	r2, r8, #1
 800f8f2:	4631      	mov	r1, r6
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	47b8      	blx	r7
 800f8f8:	3001      	adds	r0, #1
 800f8fa:	d10e      	bne.n	800f91a <_printf_float+0x42a>
 800f8fc:	e657      	b.n	800f5ae <_printf_float+0xbe>
 800f8fe:	2301      	movs	r3, #1
 800f900:	4652      	mov	r2, sl
 800f902:	4631      	mov	r1, r6
 800f904:	4628      	mov	r0, r5
 800f906:	47b8      	blx	r7
 800f908:	3001      	adds	r0, #1
 800f90a:	f43f ae50 	beq.w	800f5ae <_printf_float+0xbe>
 800f90e:	f108 0801 	add.w	r8, r8, #1
 800f912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f914:	3b01      	subs	r3, #1
 800f916:	4543      	cmp	r3, r8
 800f918:	dcf1      	bgt.n	800f8fe <_printf_float+0x40e>
 800f91a:	464b      	mov	r3, r9
 800f91c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f920:	e6da      	b.n	800f6d8 <_printf_float+0x1e8>
 800f922:	f04f 0800 	mov.w	r8, #0
 800f926:	f104 0a1a 	add.w	sl, r4, #26
 800f92a:	e7f2      	b.n	800f912 <_printf_float+0x422>
 800f92c:	2301      	movs	r3, #1
 800f92e:	4642      	mov	r2, r8
 800f930:	e7df      	b.n	800f8f2 <_printf_float+0x402>
 800f932:	2301      	movs	r3, #1
 800f934:	464a      	mov	r2, r9
 800f936:	4631      	mov	r1, r6
 800f938:	4628      	mov	r0, r5
 800f93a:	47b8      	blx	r7
 800f93c:	3001      	adds	r0, #1
 800f93e:	f43f ae36 	beq.w	800f5ae <_printf_float+0xbe>
 800f942:	f108 0801 	add.w	r8, r8, #1
 800f946:	68e3      	ldr	r3, [r4, #12]
 800f948:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f94a:	1a5b      	subs	r3, r3, r1
 800f94c:	4543      	cmp	r3, r8
 800f94e:	dcf0      	bgt.n	800f932 <_printf_float+0x442>
 800f950:	e6f8      	b.n	800f744 <_printf_float+0x254>
 800f952:	f04f 0800 	mov.w	r8, #0
 800f956:	f104 0919 	add.w	r9, r4, #25
 800f95a:	e7f4      	b.n	800f946 <_printf_float+0x456>

0800f95c <_printf_common>:
 800f95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f960:	4616      	mov	r6, r2
 800f962:	4699      	mov	r9, r3
 800f964:	688a      	ldr	r2, [r1, #8]
 800f966:	690b      	ldr	r3, [r1, #16]
 800f968:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f96c:	4293      	cmp	r3, r2
 800f96e:	bfb8      	it	lt
 800f970:	4613      	movlt	r3, r2
 800f972:	6033      	str	r3, [r6, #0]
 800f974:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f978:	4607      	mov	r7, r0
 800f97a:	460c      	mov	r4, r1
 800f97c:	b10a      	cbz	r2, 800f982 <_printf_common+0x26>
 800f97e:	3301      	adds	r3, #1
 800f980:	6033      	str	r3, [r6, #0]
 800f982:	6823      	ldr	r3, [r4, #0]
 800f984:	0699      	lsls	r1, r3, #26
 800f986:	bf42      	ittt	mi
 800f988:	6833      	ldrmi	r3, [r6, #0]
 800f98a:	3302      	addmi	r3, #2
 800f98c:	6033      	strmi	r3, [r6, #0]
 800f98e:	6825      	ldr	r5, [r4, #0]
 800f990:	f015 0506 	ands.w	r5, r5, #6
 800f994:	d106      	bne.n	800f9a4 <_printf_common+0x48>
 800f996:	f104 0a19 	add.w	sl, r4, #25
 800f99a:	68e3      	ldr	r3, [r4, #12]
 800f99c:	6832      	ldr	r2, [r6, #0]
 800f99e:	1a9b      	subs	r3, r3, r2
 800f9a0:	42ab      	cmp	r3, r5
 800f9a2:	dc26      	bgt.n	800f9f2 <_printf_common+0x96>
 800f9a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f9a8:	1e13      	subs	r3, r2, #0
 800f9aa:	6822      	ldr	r2, [r4, #0]
 800f9ac:	bf18      	it	ne
 800f9ae:	2301      	movne	r3, #1
 800f9b0:	0692      	lsls	r2, r2, #26
 800f9b2:	d42b      	bmi.n	800fa0c <_printf_common+0xb0>
 800f9b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9b8:	4649      	mov	r1, r9
 800f9ba:	4638      	mov	r0, r7
 800f9bc:	47c0      	blx	r8
 800f9be:	3001      	adds	r0, #1
 800f9c0:	d01e      	beq.n	800fa00 <_printf_common+0xa4>
 800f9c2:	6823      	ldr	r3, [r4, #0]
 800f9c4:	6922      	ldr	r2, [r4, #16]
 800f9c6:	f003 0306 	and.w	r3, r3, #6
 800f9ca:	2b04      	cmp	r3, #4
 800f9cc:	bf02      	ittt	eq
 800f9ce:	68e5      	ldreq	r5, [r4, #12]
 800f9d0:	6833      	ldreq	r3, [r6, #0]
 800f9d2:	1aed      	subeq	r5, r5, r3
 800f9d4:	68a3      	ldr	r3, [r4, #8]
 800f9d6:	bf0c      	ite	eq
 800f9d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9dc:	2500      	movne	r5, #0
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	bfc4      	itt	gt
 800f9e2:	1a9b      	subgt	r3, r3, r2
 800f9e4:	18ed      	addgt	r5, r5, r3
 800f9e6:	2600      	movs	r6, #0
 800f9e8:	341a      	adds	r4, #26
 800f9ea:	42b5      	cmp	r5, r6
 800f9ec:	d11a      	bne.n	800fa24 <_printf_common+0xc8>
 800f9ee:	2000      	movs	r0, #0
 800f9f0:	e008      	b.n	800fa04 <_printf_common+0xa8>
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	4652      	mov	r2, sl
 800f9f6:	4649      	mov	r1, r9
 800f9f8:	4638      	mov	r0, r7
 800f9fa:	47c0      	blx	r8
 800f9fc:	3001      	adds	r0, #1
 800f9fe:	d103      	bne.n	800fa08 <_printf_common+0xac>
 800fa00:	f04f 30ff 	mov.w	r0, #4294967295
 800fa04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa08:	3501      	adds	r5, #1
 800fa0a:	e7c6      	b.n	800f99a <_printf_common+0x3e>
 800fa0c:	18e1      	adds	r1, r4, r3
 800fa0e:	1c5a      	adds	r2, r3, #1
 800fa10:	2030      	movs	r0, #48	; 0x30
 800fa12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa16:	4422      	add	r2, r4
 800fa18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa20:	3302      	adds	r3, #2
 800fa22:	e7c7      	b.n	800f9b4 <_printf_common+0x58>
 800fa24:	2301      	movs	r3, #1
 800fa26:	4622      	mov	r2, r4
 800fa28:	4649      	mov	r1, r9
 800fa2a:	4638      	mov	r0, r7
 800fa2c:	47c0      	blx	r8
 800fa2e:	3001      	adds	r0, #1
 800fa30:	d0e6      	beq.n	800fa00 <_printf_common+0xa4>
 800fa32:	3601      	adds	r6, #1
 800fa34:	e7d9      	b.n	800f9ea <_printf_common+0x8e>
	...

0800fa38 <_printf_i>:
 800fa38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa3c:	7e0f      	ldrb	r7, [r1, #24]
 800fa3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa40:	2f78      	cmp	r7, #120	; 0x78
 800fa42:	4691      	mov	r9, r2
 800fa44:	4680      	mov	r8, r0
 800fa46:	460c      	mov	r4, r1
 800fa48:	469a      	mov	sl, r3
 800fa4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa4e:	d807      	bhi.n	800fa60 <_printf_i+0x28>
 800fa50:	2f62      	cmp	r7, #98	; 0x62
 800fa52:	d80a      	bhi.n	800fa6a <_printf_i+0x32>
 800fa54:	2f00      	cmp	r7, #0
 800fa56:	f000 80d4 	beq.w	800fc02 <_printf_i+0x1ca>
 800fa5a:	2f58      	cmp	r7, #88	; 0x58
 800fa5c:	f000 80c0 	beq.w	800fbe0 <_printf_i+0x1a8>
 800fa60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa68:	e03a      	b.n	800fae0 <_printf_i+0xa8>
 800fa6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa6e:	2b15      	cmp	r3, #21
 800fa70:	d8f6      	bhi.n	800fa60 <_printf_i+0x28>
 800fa72:	a101      	add	r1, pc, #4	; (adr r1, 800fa78 <_printf_i+0x40>)
 800fa74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa78:	0800fad1 	.word	0x0800fad1
 800fa7c:	0800fae5 	.word	0x0800fae5
 800fa80:	0800fa61 	.word	0x0800fa61
 800fa84:	0800fa61 	.word	0x0800fa61
 800fa88:	0800fa61 	.word	0x0800fa61
 800fa8c:	0800fa61 	.word	0x0800fa61
 800fa90:	0800fae5 	.word	0x0800fae5
 800fa94:	0800fa61 	.word	0x0800fa61
 800fa98:	0800fa61 	.word	0x0800fa61
 800fa9c:	0800fa61 	.word	0x0800fa61
 800faa0:	0800fa61 	.word	0x0800fa61
 800faa4:	0800fbe9 	.word	0x0800fbe9
 800faa8:	0800fb11 	.word	0x0800fb11
 800faac:	0800fba3 	.word	0x0800fba3
 800fab0:	0800fa61 	.word	0x0800fa61
 800fab4:	0800fa61 	.word	0x0800fa61
 800fab8:	0800fc0b 	.word	0x0800fc0b
 800fabc:	0800fa61 	.word	0x0800fa61
 800fac0:	0800fb11 	.word	0x0800fb11
 800fac4:	0800fa61 	.word	0x0800fa61
 800fac8:	0800fa61 	.word	0x0800fa61
 800facc:	0800fbab 	.word	0x0800fbab
 800fad0:	682b      	ldr	r3, [r5, #0]
 800fad2:	1d1a      	adds	r2, r3, #4
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	602a      	str	r2, [r5, #0]
 800fad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fadc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fae0:	2301      	movs	r3, #1
 800fae2:	e09f      	b.n	800fc24 <_printf_i+0x1ec>
 800fae4:	6820      	ldr	r0, [r4, #0]
 800fae6:	682b      	ldr	r3, [r5, #0]
 800fae8:	0607      	lsls	r7, r0, #24
 800faea:	f103 0104 	add.w	r1, r3, #4
 800faee:	6029      	str	r1, [r5, #0]
 800faf0:	d501      	bpl.n	800faf6 <_printf_i+0xbe>
 800faf2:	681e      	ldr	r6, [r3, #0]
 800faf4:	e003      	b.n	800fafe <_printf_i+0xc6>
 800faf6:	0646      	lsls	r6, r0, #25
 800faf8:	d5fb      	bpl.n	800faf2 <_printf_i+0xba>
 800fafa:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fafe:	2e00      	cmp	r6, #0
 800fb00:	da03      	bge.n	800fb0a <_printf_i+0xd2>
 800fb02:	232d      	movs	r3, #45	; 0x2d
 800fb04:	4276      	negs	r6, r6
 800fb06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb0a:	485a      	ldr	r0, [pc, #360]	; (800fc74 <_printf_i+0x23c>)
 800fb0c:	230a      	movs	r3, #10
 800fb0e:	e012      	b.n	800fb36 <_printf_i+0xfe>
 800fb10:	682b      	ldr	r3, [r5, #0]
 800fb12:	6820      	ldr	r0, [r4, #0]
 800fb14:	1d19      	adds	r1, r3, #4
 800fb16:	6029      	str	r1, [r5, #0]
 800fb18:	0605      	lsls	r5, r0, #24
 800fb1a:	d501      	bpl.n	800fb20 <_printf_i+0xe8>
 800fb1c:	681e      	ldr	r6, [r3, #0]
 800fb1e:	e002      	b.n	800fb26 <_printf_i+0xee>
 800fb20:	0641      	lsls	r1, r0, #25
 800fb22:	d5fb      	bpl.n	800fb1c <_printf_i+0xe4>
 800fb24:	881e      	ldrh	r6, [r3, #0]
 800fb26:	4853      	ldr	r0, [pc, #332]	; (800fc74 <_printf_i+0x23c>)
 800fb28:	2f6f      	cmp	r7, #111	; 0x6f
 800fb2a:	bf0c      	ite	eq
 800fb2c:	2308      	moveq	r3, #8
 800fb2e:	230a      	movne	r3, #10
 800fb30:	2100      	movs	r1, #0
 800fb32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb36:	6865      	ldr	r5, [r4, #4]
 800fb38:	60a5      	str	r5, [r4, #8]
 800fb3a:	2d00      	cmp	r5, #0
 800fb3c:	bfa2      	ittt	ge
 800fb3e:	6821      	ldrge	r1, [r4, #0]
 800fb40:	f021 0104 	bicge.w	r1, r1, #4
 800fb44:	6021      	strge	r1, [r4, #0]
 800fb46:	b90e      	cbnz	r6, 800fb4c <_printf_i+0x114>
 800fb48:	2d00      	cmp	r5, #0
 800fb4a:	d04b      	beq.n	800fbe4 <_printf_i+0x1ac>
 800fb4c:	4615      	mov	r5, r2
 800fb4e:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb52:	fb03 6711 	mls	r7, r3, r1, r6
 800fb56:	5dc7      	ldrb	r7, [r0, r7]
 800fb58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb5c:	4637      	mov	r7, r6
 800fb5e:	42bb      	cmp	r3, r7
 800fb60:	460e      	mov	r6, r1
 800fb62:	d9f4      	bls.n	800fb4e <_printf_i+0x116>
 800fb64:	2b08      	cmp	r3, #8
 800fb66:	d10b      	bne.n	800fb80 <_printf_i+0x148>
 800fb68:	6823      	ldr	r3, [r4, #0]
 800fb6a:	07de      	lsls	r6, r3, #31
 800fb6c:	d508      	bpl.n	800fb80 <_printf_i+0x148>
 800fb6e:	6923      	ldr	r3, [r4, #16]
 800fb70:	6861      	ldr	r1, [r4, #4]
 800fb72:	4299      	cmp	r1, r3
 800fb74:	bfde      	ittt	le
 800fb76:	2330      	movle	r3, #48	; 0x30
 800fb78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb80:	1b52      	subs	r2, r2, r5
 800fb82:	6122      	str	r2, [r4, #16]
 800fb84:	f8cd a000 	str.w	sl, [sp]
 800fb88:	464b      	mov	r3, r9
 800fb8a:	aa03      	add	r2, sp, #12
 800fb8c:	4621      	mov	r1, r4
 800fb8e:	4640      	mov	r0, r8
 800fb90:	f7ff fee4 	bl	800f95c <_printf_common>
 800fb94:	3001      	adds	r0, #1
 800fb96:	d14a      	bne.n	800fc2e <_printf_i+0x1f6>
 800fb98:	f04f 30ff 	mov.w	r0, #4294967295
 800fb9c:	b004      	add	sp, #16
 800fb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fba2:	6823      	ldr	r3, [r4, #0]
 800fba4:	f043 0320 	orr.w	r3, r3, #32
 800fba8:	6023      	str	r3, [r4, #0]
 800fbaa:	4833      	ldr	r0, [pc, #204]	; (800fc78 <_printf_i+0x240>)
 800fbac:	2778      	movs	r7, #120	; 0x78
 800fbae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fbb2:	6823      	ldr	r3, [r4, #0]
 800fbb4:	6829      	ldr	r1, [r5, #0]
 800fbb6:	061f      	lsls	r7, r3, #24
 800fbb8:	f851 6b04 	ldr.w	r6, [r1], #4
 800fbbc:	d402      	bmi.n	800fbc4 <_printf_i+0x18c>
 800fbbe:	065f      	lsls	r7, r3, #25
 800fbc0:	bf48      	it	mi
 800fbc2:	b2b6      	uxthmi	r6, r6
 800fbc4:	07df      	lsls	r7, r3, #31
 800fbc6:	bf48      	it	mi
 800fbc8:	f043 0320 	orrmi.w	r3, r3, #32
 800fbcc:	6029      	str	r1, [r5, #0]
 800fbce:	bf48      	it	mi
 800fbd0:	6023      	strmi	r3, [r4, #0]
 800fbd2:	b91e      	cbnz	r6, 800fbdc <_printf_i+0x1a4>
 800fbd4:	6823      	ldr	r3, [r4, #0]
 800fbd6:	f023 0320 	bic.w	r3, r3, #32
 800fbda:	6023      	str	r3, [r4, #0]
 800fbdc:	2310      	movs	r3, #16
 800fbde:	e7a7      	b.n	800fb30 <_printf_i+0xf8>
 800fbe0:	4824      	ldr	r0, [pc, #144]	; (800fc74 <_printf_i+0x23c>)
 800fbe2:	e7e4      	b.n	800fbae <_printf_i+0x176>
 800fbe4:	4615      	mov	r5, r2
 800fbe6:	e7bd      	b.n	800fb64 <_printf_i+0x12c>
 800fbe8:	682b      	ldr	r3, [r5, #0]
 800fbea:	6826      	ldr	r6, [r4, #0]
 800fbec:	6961      	ldr	r1, [r4, #20]
 800fbee:	1d18      	adds	r0, r3, #4
 800fbf0:	6028      	str	r0, [r5, #0]
 800fbf2:	0635      	lsls	r5, r6, #24
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	d501      	bpl.n	800fbfc <_printf_i+0x1c4>
 800fbf8:	6019      	str	r1, [r3, #0]
 800fbfa:	e002      	b.n	800fc02 <_printf_i+0x1ca>
 800fbfc:	0670      	lsls	r0, r6, #25
 800fbfe:	d5fb      	bpl.n	800fbf8 <_printf_i+0x1c0>
 800fc00:	8019      	strh	r1, [r3, #0]
 800fc02:	2300      	movs	r3, #0
 800fc04:	6123      	str	r3, [r4, #16]
 800fc06:	4615      	mov	r5, r2
 800fc08:	e7bc      	b.n	800fb84 <_printf_i+0x14c>
 800fc0a:	682b      	ldr	r3, [r5, #0]
 800fc0c:	1d1a      	adds	r2, r3, #4
 800fc0e:	602a      	str	r2, [r5, #0]
 800fc10:	681d      	ldr	r5, [r3, #0]
 800fc12:	6862      	ldr	r2, [r4, #4]
 800fc14:	2100      	movs	r1, #0
 800fc16:	4628      	mov	r0, r5
 800fc18:	f7f0 faea 	bl	80001f0 <memchr>
 800fc1c:	b108      	cbz	r0, 800fc22 <_printf_i+0x1ea>
 800fc1e:	1b40      	subs	r0, r0, r5
 800fc20:	6060      	str	r0, [r4, #4]
 800fc22:	6863      	ldr	r3, [r4, #4]
 800fc24:	6123      	str	r3, [r4, #16]
 800fc26:	2300      	movs	r3, #0
 800fc28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc2c:	e7aa      	b.n	800fb84 <_printf_i+0x14c>
 800fc2e:	6923      	ldr	r3, [r4, #16]
 800fc30:	462a      	mov	r2, r5
 800fc32:	4649      	mov	r1, r9
 800fc34:	4640      	mov	r0, r8
 800fc36:	47d0      	blx	sl
 800fc38:	3001      	adds	r0, #1
 800fc3a:	d0ad      	beq.n	800fb98 <_printf_i+0x160>
 800fc3c:	6823      	ldr	r3, [r4, #0]
 800fc3e:	079b      	lsls	r3, r3, #30
 800fc40:	d413      	bmi.n	800fc6a <_printf_i+0x232>
 800fc42:	68e0      	ldr	r0, [r4, #12]
 800fc44:	9b03      	ldr	r3, [sp, #12]
 800fc46:	4298      	cmp	r0, r3
 800fc48:	bfb8      	it	lt
 800fc4a:	4618      	movlt	r0, r3
 800fc4c:	e7a6      	b.n	800fb9c <_printf_i+0x164>
 800fc4e:	2301      	movs	r3, #1
 800fc50:	4632      	mov	r2, r6
 800fc52:	4649      	mov	r1, r9
 800fc54:	4640      	mov	r0, r8
 800fc56:	47d0      	blx	sl
 800fc58:	3001      	adds	r0, #1
 800fc5a:	d09d      	beq.n	800fb98 <_printf_i+0x160>
 800fc5c:	3501      	adds	r5, #1
 800fc5e:	68e3      	ldr	r3, [r4, #12]
 800fc60:	9903      	ldr	r1, [sp, #12]
 800fc62:	1a5b      	subs	r3, r3, r1
 800fc64:	42ab      	cmp	r3, r5
 800fc66:	dcf2      	bgt.n	800fc4e <_printf_i+0x216>
 800fc68:	e7eb      	b.n	800fc42 <_printf_i+0x20a>
 800fc6a:	2500      	movs	r5, #0
 800fc6c:	f104 0619 	add.w	r6, r4, #25
 800fc70:	e7f5      	b.n	800fc5e <_printf_i+0x226>
 800fc72:	bf00      	nop
 800fc74:	0801576a 	.word	0x0801576a
 800fc78:	0801577b 	.word	0x0801577b

0800fc7c <_scanf_float>:
 800fc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc80:	b087      	sub	sp, #28
 800fc82:	4617      	mov	r7, r2
 800fc84:	9303      	str	r3, [sp, #12]
 800fc86:	688b      	ldr	r3, [r1, #8]
 800fc88:	1e5a      	subs	r2, r3, #1
 800fc8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fc8e:	bf83      	ittte	hi
 800fc90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fc94:	195b      	addhi	r3, r3, r5
 800fc96:	9302      	strhi	r3, [sp, #8]
 800fc98:	2300      	movls	r3, #0
 800fc9a:	bf86      	itte	hi
 800fc9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fca0:	608b      	strhi	r3, [r1, #8]
 800fca2:	9302      	strls	r3, [sp, #8]
 800fca4:	680b      	ldr	r3, [r1, #0]
 800fca6:	468b      	mov	fp, r1
 800fca8:	2500      	movs	r5, #0
 800fcaa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fcae:	f84b 3b1c 	str.w	r3, [fp], #28
 800fcb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fcb6:	4680      	mov	r8, r0
 800fcb8:	460c      	mov	r4, r1
 800fcba:	465e      	mov	r6, fp
 800fcbc:	46aa      	mov	sl, r5
 800fcbe:	46a9      	mov	r9, r5
 800fcc0:	9501      	str	r5, [sp, #4]
 800fcc2:	68a2      	ldr	r2, [r4, #8]
 800fcc4:	b152      	cbz	r2, 800fcdc <_scanf_float+0x60>
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	781b      	ldrb	r3, [r3, #0]
 800fcca:	2b4e      	cmp	r3, #78	; 0x4e
 800fccc:	d864      	bhi.n	800fd98 <_scanf_float+0x11c>
 800fcce:	2b40      	cmp	r3, #64	; 0x40
 800fcd0:	d83c      	bhi.n	800fd4c <_scanf_float+0xd0>
 800fcd2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fcd6:	b2c8      	uxtb	r0, r1
 800fcd8:	280e      	cmp	r0, #14
 800fcda:	d93a      	bls.n	800fd52 <_scanf_float+0xd6>
 800fcdc:	f1b9 0f00 	cmp.w	r9, #0
 800fce0:	d003      	beq.n	800fcea <_scanf_float+0x6e>
 800fce2:	6823      	ldr	r3, [r4, #0]
 800fce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fce8:	6023      	str	r3, [r4, #0]
 800fcea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcee:	f1ba 0f01 	cmp.w	sl, #1
 800fcf2:	f200 8113 	bhi.w	800ff1c <_scanf_float+0x2a0>
 800fcf6:	455e      	cmp	r6, fp
 800fcf8:	f200 8105 	bhi.w	800ff06 <_scanf_float+0x28a>
 800fcfc:	2501      	movs	r5, #1
 800fcfe:	4628      	mov	r0, r5
 800fd00:	b007      	add	sp, #28
 800fd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd06:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fd0a:	2a0d      	cmp	r2, #13
 800fd0c:	d8e6      	bhi.n	800fcdc <_scanf_float+0x60>
 800fd0e:	a101      	add	r1, pc, #4	; (adr r1, 800fd14 <_scanf_float+0x98>)
 800fd10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fd14:	0800fe53 	.word	0x0800fe53
 800fd18:	0800fcdd 	.word	0x0800fcdd
 800fd1c:	0800fcdd 	.word	0x0800fcdd
 800fd20:	0800fcdd 	.word	0x0800fcdd
 800fd24:	0800feb3 	.word	0x0800feb3
 800fd28:	0800fe8b 	.word	0x0800fe8b
 800fd2c:	0800fcdd 	.word	0x0800fcdd
 800fd30:	0800fcdd 	.word	0x0800fcdd
 800fd34:	0800fe61 	.word	0x0800fe61
 800fd38:	0800fcdd 	.word	0x0800fcdd
 800fd3c:	0800fcdd 	.word	0x0800fcdd
 800fd40:	0800fcdd 	.word	0x0800fcdd
 800fd44:	0800fcdd 	.word	0x0800fcdd
 800fd48:	0800fe19 	.word	0x0800fe19
 800fd4c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fd50:	e7db      	b.n	800fd0a <_scanf_float+0x8e>
 800fd52:	290e      	cmp	r1, #14
 800fd54:	d8c2      	bhi.n	800fcdc <_scanf_float+0x60>
 800fd56:	a001      	add	r0, pc, #4	; (adr r0, 800fd5c <_scanf_float+0xe0>)
 800fd58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fd5c:	0800fe0b 	.word	0x0800fe0b
 800fd60:	0800fcdd 	.word	0x0800fcdd
 800fd64:	0800fe0b 	.word	0x0800fe0b
 800fd68:	0800fe9f 	.word	0x0800fe9f
 800fd6c:	0800fcdd 	.word	0x0800fcdd
 800fd70:	0800fdb9 	.word	0x0800fdb9
 800fd74:	0800fdf5 	.word	0x0800fdf5
 800fd78:	0800fdf5 	.word	0x0800fdf5
 800fd7c:	0800fdf5 	.word	0x0800fdf5
 800fd80:	0800fdf5 	.word	0x0800fdf5
 800fd84:	0800fdf5 	.word	0x0800fdf5
 800fd88:	0800fdf5 	.word	0x0800fdf5
 800fd8c:	0800fdf5 	.word	0x0800fdf5
 800fd90:	0800fdf5 	.word	0x0800fdf5
 800fd94:	0800fdf5 	.word	0x0800fdf5
 800fd98:	2b6e      	cmp	r3, #110	; 0x6e
 800fd9a:	d809      	bhi.n	800fdb0 <_scanf_float+0x134>
 800fd9c:	2b60      	cmp	r3, #96	; 0x60
 800fd9e:	d8b2      	bhi.n	800fd06 <_scanf_float+0x8a>
 800fda0:	2b54      	cmp	r3, #84	; 0x54
 800fda2:	d077      	beq.n	800fe94 <_scanf_float+0x218>
 800fda4:	2b59      	cmp	r3, #89	; 0x59
 800fda6:	d199      	bne.n	800fcdc <_scanf_float+0x60>
 800fda8:	2d07      	cmp	r5, #7
 800fdaa:	d197      	bne.n	800fcdc <_scanf_float+0x60>
 800fdac:	2508      	movs	r5, #8
 800fdae:	e029      	b.n	800fe04 <_scanf_float+0x188>
 800fdb0:	2b74      	cmp	r3, #116	; 0x74
 800fdb2:	d06f      	beq.n	800fe94 <_scanf_float+0x218>
 800fdb4:	2b79      	cmp	r3, #121	; 0x79
 800fdb6:	e7f6      	b.n	800fda6 <_scanf_float+0x12a>
 800fdb8:	6821      	ldr	r1, [r4, #0]
 800fdba:	05c8      	lsls	r0, r1, #23
 800fdbc:	d51a      	bpl.n	800fdf4 <_scanf_float+0x178>
 800fdbe:	9b02      	ldr	r3, [sp, #8]
 800fdc0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fdc4:	6021      	str	r1, [r4, #0]
 800fdc6:	f109 0901 	add.w	r9, r9, #1
 800fdca:	b11b      	cbz	r3, 800fdd4 <_scanf_float+0x158>
 800fdcc:	3b01      	subs	r3, #1
 800fdce:	3201      	adds	r2, #1
 800fdd0:	9302      	str	r3, [sp, #8]
 800fdd2:	60a2      	str	r2, [r4, #8]
 800fdd4:	68a3      	ldr	r3, [r4, #8]
 800fdd6:	3b01      	subs	r3, #1
 800fdd8:	60a3      	str	r3, [r4, #8]
 800fdda:	6923      	ldr	r3, [r4, #16]
 800fddc:	3301      	adds	r3, #1
 800fdde:	6123      	str	r3, [r4, #16]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	3b01      	subs	r3, #1
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	607b      	str	r3, [r7, #4]
 800fde8:	f340 8084 	ble.w	800fef4 <_scanf_float+0x278>
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	3301      	adds	r3, #1
 800fdf0:	603b      	str	r3, [r7, #0]
 800fdf2:	e766      	b.n	800fcc2 <_scanf_float+0x46>
 800fdf4:	eb1a 0f05 	cmn.w	sl, r5
 800fdf8:	f47f af70 	bne.w	800fcdc <_scanf_float+0x60>
 800fdfc:	6822      	ldr	r2, [r4, #0]
 800fdfe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fe02:	6022      	str	r2, [r4, #0]
 800fe04:	f806 3b01 	strb.w	r3, [r6], #1
 800fe08:	e7e4      	b.n	800fdd4 <_scanf_float+0x158>
 800fe0a:	6822      	ldr	r2, [r4, #0]
 800fe0c:	0610      	lsls	r0, r2, #24
 800fe0e:	f57f af65 	bpl.w	800fcdc <_scanf_float+0x60>
 800fe12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fe16:	e7f4      	b.n	800fe02 <_scanf_float+0x186>
 800fe18:	f1ba 0f00 	cmp.w	sl, #0
 800fe1c:	d10e      	bne.n	800fe3c <_scanf_float+0x1c0>
 800fe1e:	f1b9 0f00 	cmp.w	r9, #0
 800fe22:	d10e      	bne.n	800fe42 <_scanf_float+0x1c6>
 800fe24:	6822      	ldr	r2, [r4, #0]
 800fe26:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fe2a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fe2e:	d108      	bne.n	800fe42 <_scanf_float+0x1c6>
 800fe30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fe34:	6022      	str	r2, [r4, #0]
 800fe36:	f04f 0a01 	mov.w	sl, #1
 800fe3a:	e7e3      	b.n	800fe04 <_scanf_float+0x188>
 800fe3c:	f1ba 0f02 	cmp.w	sl, #2
 800fe40:	d055      	beq.n	800feee <_scanf_float+0x272>
 800fe42:	2d01      	cmp	r5, #1
 800fe44:	d002      	beq.n	800fe4c <_scanf_float+0x1d0>
 800fe46:	2d04      	cmp	r5, #4
 800fe48:	f47f af48 	bne.w	800fcdc <_scanf_float+0x60>
 800fe4c:	3501      	adds	r5, #1
 800fe4e:	b2ed      	uxtb	r5, r5
 800fe50:	e7d8      	b.n	800fe04 <_scanf_float+0x188>
 800fe52:	f1ba 0f01 	cmp.w	sl, #1
 800fe56:	f47f af41 	bne.w	800fcdc <_scanf_float+0x60>
 800fe5a:	f04f 0a02 	mov.w	sl, #2
 800fe5e:	e7d1      	b.n	800fe04 <_scanf_float+0x188>
 800fe60:	b97d      	cbnz	r5, 800fe82 <_scanf_float+0x206>
 800fe62:	f1b9 0f00 	cmp.w	r9, #0
 800fe66:	f47f af3c 	bne.w	800fce2 <_scanf_float+0x66>
 800fe6a:	6822      	ldr	r2, [r4, #0]
 800fe6c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fe70:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fe74:	f47f af39 	bne.w	800fcea <_scanf_float+0x6e>
 800fe78:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fe7c:	6022      	str	r2, [r4, #0]
 800fe7e:	2501      	movs	r5, #1
 800fe80:	e7c0      	b.n	800fe04 <_scanf_float+0x188>
 800fe82:	2d03      	cmp	r5, #3
 800fe84:	d0e2      	beq.n	800fe4c <_scanf_float+0x1d0>
 800fe86:	2d05      	cmp	r5, #5
 800fe88:	e7de      	b.n	800fe48 <_scanf_float+0x1cc>
 800fe8a:	2d02      	cmp	r5, #2
 800fe8c:	f47f af26 	bne.w	800fcdc <_scanf_float+0x60>
 800fe90:	2503      	movs	r5, #3
 800fe92:	e7b7      	b.n	800fe04 <_scanf_float+0x188>
 800fe94:	2d06      	cmp	r5, #6
 800fe96:	f47f af21 	bne.w	800fcdc <_scanf_float+0x60>
 800fe9a:	2507      	movs	r5, #7
 800fe9c:	e7b2      	b.n	800fe04 <_scanf_float+0x188>
 800fe9e:	6822      	ldr	r2, [r4, #0]
 800fea0:	0591      	lsls	r1, r2, #22
 800fea2:	f57f af1b 	bpl.w	800fcdc <_scanf_float+0x60>
 800fea6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800feaa:	6022      	str	r2, [r4, #0]
 800feac:	f8cd 9004 	str.w	r9, [sp, #4]
 800feb0:	e7a8      	b.n	800fe04 <_scanf_float+0x188>
 800feb2:	6822      	ldr	r2, [r4, #0]
 800feb4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800feb8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800febc:	d006      	beq.n	800fecc <_scanf_float+0x250>
 800febe:	0550      	lsls	r0, r2, #21
 800fec0:	f57f af0c 	bpl.w	800fcdc <_scanf_float+0x60>
 800fec4:	f1b9 0f00 	cmp.w	r9, #0
 800fec8:	f43f af0f 	beq.w	800fcea <_scanf_float+0x6e>
 800fecc:	0591      	lsls	r1, r2, #22
 800fece:	bf58      	it	pl
 800fed0:	9901      	ldrpl	r1, [sp, #4]
 800fed2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fed6:	bf58      	it	pl
 800fed8:	eba9 0101 	subpl.w	r1, r9, r1
 800fedc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800fee0:	bf58      	it	pl
 800fee2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fee6:	6022      	str	r2, [r4, #0]
 800fee8:	f04f 0900 	mov.w	r9, #0
 800feec:	e78a      	b.n	800fe04 <_scanf_float+0x188>
 800feee:	f04f 0a03 	mov.w	sl, #3
 800fef2:	e787      	b.n	800fe04 <_scanf_float+0x188>
 800fef4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fef8:	4639      	mov	r1, r7
 800fefa:	4640      	mov	r0, r8
 800fefc:	4798      	blx	r3
 800fefe:	2800      	cmp	r0, #0
 800ff00:	f43f aedf 	beq.w	800fcc2 <_scanf_float+0x46>
 800ff04:	e6ea      	b.n	800fcdc <_scanf_float+0x60>
 800ff06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ff0e:	463a      	mov	r2, r7
 800ff10:	4640      	mov	r0, r8
 800ff12:	4798      	blx	r3
 800ff14:	6923      	ldr	r3, [r4, #16]
 800ff16:	3b01      	subs	r3, #1
 800ff18:	6123      	str	r3, [r4, #16]
 800ff1a:	e6ec      	b.n	800fcf6 <_scanf_float+0x7a>
 800ff1c:	1e6b      	subs	r3, r5, #1
 800ff1e:	2b06      	cmp	r3, #6
 800ff20:	d825      	bhi.n	800ff6e <_scanf_float+0x2f2>
 800ff22:	2d02      	cmp	r5, #2
 800ff24:	d836      	bhi.n	800ff94 <_scanf_float+0x318>
 800ff26:	455e      	cmp	r6, fp
 800ff28:	f67f aee8 	bls.w	800fcfc <_scanf_float+0x80>
 800ff2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff30:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ff34:	463a      	mov	r2, r7
 800ff36:	4640      	mov	r0, r8
 800ff38:	4798      	blx	r3
 800ff3a:	6923      	ldr	r3, [r4, #16]
 800ff3c:	3b01      	subs	r3, #1
 800ff3e:	6123      	str	r3, [r4, #16]
 800ff40:	e7f1      	b.n	800ff26 <_scanf_float+0x2aa>
 800ff42:	9802      	ldr	r0, [sp, #8]
 800ff44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff48:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ff4c:	9002      	str	r0, [sp, #8]
 800ff4e:	463a      	mov	r2, r7
 800ff50:	4640      	mov	r0, r8
 800ff52:	4798      	blx	r3
 800ff54:	6923      	ldr	r3, [r4, #16]
 800ff56:	3b01      	subs	r3, #1
 800ff58:	6123      	str	r3, [r4, #16]
 800ff5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff5e:	fa5f fa8a 	uxtb.w	sl, sl
 800ff62:	f1ba 0f02 	cmp.w	sl, #2
 800ff66:	d1ec      	bne.n	800ff42 <_scanf_float+0x2c6>
 800ff68:	3d03      	subs	r5, #3
 800ff6a:	b2ed      	uxtb	r5, r5
 800ff6c:	1b76      	subs	r6, r6, r5
 800ff6e:	6823      	ldr	r3, [r4, #0]
 800ff70:	05da      	lsls	r2, r3, #23
 800ff72:	d52f      	bpl.n	800ffd4 <_scanf_float+0x358>
 800ff74:	055b      	lsls	r3, r3, #21
 800ff76:	d510      	bpl.n	800ff9a <_scanf_float+0x31e>
 800ff78:	455e      	cmp	r6, fp
 800ff7a:	f67f aebf 	bls.w	800fcfc <_scanf_float+0x80>
 800ff7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ff86:	463a      	mov	r2, r7
 800ff88:	4640      	mov	r0, r8
 800ff8a:	4798      	blx	r3
 800ff8c:	6923      	ldr	r3, [r4, #16]
 800ff8e:	3b01      	subs	r3, #1
 800ff90:	6123      	str	r3, [r4, #16]
 800ff92:	e7f1      	b.n	800ff78 <_scanf_float+0x2fc>
 800ff94:	46aa      	mov	sl, r5
 800ff96:	9602      	str	r6, [sp, #8]
 800ff98:	e7df      	b.n	800ff5a <_scanf_float+0x2de>
 800ff9a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ff9e:	6923      	ldr	r3, [r4, #16]
 800ffa0:	2965      	cmp	r1, #101	; 0x65
 800ffa2:	f103 33ff 	add.w	r3, r3, #4294967295
 800ffa6:	f106 35ff 	add.w	r5, r6, #4294967295
 800ffaa:	6123      	str	r3, [r4, #16]
 800ffac:	d00c      	beq.n	800ffc8 <_scanf_float+0x34c>
 800ffae:	2945      	cmp	r1, #69	; 0x45
 800ffb0:	d00a      	beq.n	800ffc8 <_scanf_float+0x34c>
 800ffb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffb6:	463a      	mov	r2, r7
 800ffb8:	4640      	mov	r0, r8
 800ffba:	4798      	blx	r3
 800ffbc:	6923      	ldr	r3, [r4, #16]
 800ffbe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ffc2:	3b01      	subs	r3, #1
 800ffc4:	1eb5      	subs	r5, r6, #2
 800ffc6:	6123      	str	r3, [r4, #16]
 800ffc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffcc:	463a      	mov	r2, r7
 800ffce:	4640      	mov	r0, r8
 800ffd0:	4798      	blx	r3
 800ffd2:	462e      	mov	r6, r5
 800ffd4:	6825      	ldr	r5, [r4, #0]
 800ffd6:	f015 0510 	ands.w	r5, r5, #16
 800ffda:	d158      	bne.n	801008e <_scanf_float+0x412>
 800ffdc:	7035      	strb	r5, [r6, #0]
 800ffde:	6823      	ldr	r3, [r4, #0]
 800ffe0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ffe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ffe8:	d11c      	bne.n	8010024 <_scanf_float+0x3a8>
 800ffea:	9b01      	ldr	r3, [sp, #4]
 800ffec:	454b      	cmp	r3, r9
 800ffee:	eba3 0209 	sub.w	r2, r3, r9
 800fff2:	d124      	bne.n	801003e <_scanf_float+0x3c2>
 800fff4:	2200      	movs	r2, #0
 800fff6:	4659      	mov	r1, fp
 800fff8:	4640      	mov	r0, r8
 800fffa:	f002 fc29 	bl	8012850 <_strtod_r>
 800fffe:	9b03      	ldr	r3, [sp, #12]
 8010000:	6821      	ldr	r1, [r4, #0]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f011 0f02 	tst.w	r1, #2
 8010008:	ec57 6b10 	vmov	r6, r7, d0
 801000c:	f103 0204 	add.w	r2, r3, #4
 8010010:	d020      	beq.n	8010054 <_scanf_float+0x3d8>
 8010012:	9903      	ldr	r1, [sp, #12]
 8010014:	600a      	str	r2, [r1, #0]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	e9c3 6700 	strd	r6, r7, [r3]
 801001c:	68e3      	ldr	r3, [r4, #12]
 801001e:	3301      	adds	r3, #1
 8010020:	60e3      	str	r3, [r4, #12]
 8010022:	e66c      	b.n	800fcfe <_scanf_float+0x82>
 8010024:	9b04      	ldr	r3, [sp, #16]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d0e4      	beq.n	800fff4 <_scanf_float+0x378>
 801002a:	9905      	ldr	r1, [sp, #20]
 801002c:	230a      	movs	r3, #10
 801002e:	462a      	mov	r2, r5
 8010030:	3101      	adds	r1, #1
 8010032:	4640      	mov	r0, r8
 8010034:	f002 fc94 	bl	8012960 <_strtol_r>
 8010038:	9b04      	ldr	r3, [sp, #16]
 801003a:	9e05      	ldr	r6, [sp, #20]
 801003c:	1ac2      	subs	r2, r0, r3
 801003e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010042:	429e      	cmp	r6, r3
 8010044:	bf28      	it	cs
 8010046:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801004a:	4912      	ldr	r1, [pc, #72]	; (8010094 <_scanf_float+0x418>)
 801004c:	4630      	mov	r0, r6
 801004e:	f000 f8d5 	bl	80101fc <siprintf>
 8010052:	e7cf      	b.n	800fff4 <_scanf_float+0x378>
 8010054:	f011 0f04 	tst.w	r1, #4
 8010058:	9903      	ldr	r1, [sp, #12]
 801005a:	600a      	str	r2, [r1, #0]
 801005c:	d1db      	bne.n	8010016 <_scanf_float+0x39a>
 801005e:	f8d3 8000 	ldr.w	r8, [r3]
 8010062:	ee10 2a10 	vmov	r2, s0
 8010066:	ee10 0a10 	vmov	r0, s0
 801006a:	463b      	mov	r3, r7
 801006c:	4639      	mov	r1, r7
 801006e:	f7f0 fd6d 	bl	8000b4c <__aeabi_dcmpun>
 8010072:	b128      	cbz	r0, 8010080 <_scanf_float+0x404>
 8010074:	4808      	ldr	r0, [pc, #32]	; (8010098 <_scanf_float+0x41c>)
 8010076:	f000 f9b1 	bl	80103dc <nanf>
 801007a:	ed88 0a00 	vstr	s0, [r8]
 801007e:	e7cd      	b.n	801001c <_scanf_float+0x3a0>
 8010080:	4630      	mov	r0, r6
 8010082:	4639      	mov	r1, r7
 8010084:	f7f0 fdc0 	bl	8000c08 <__aeabi_d2f>
 8010088:	f8c8 0000 	str.w	r0, [r8]
 801008c:	e7c6      	b.n	801001c <_scanf_float+0x3a0>
 801008e:	2500      	movs	r5, #0
 8010090:	e635      	b.n	800fcfe <_scanf_float+0x82>
 8010092:	bf00      	nop
 8010094:	0801578c 	.word	0x0801578c
 8010098:	08015b1d 	.word	0x08015b1d

0801009c <std>:
 801009c:	2300      	movs	r3, #0
 801009e:	b510      	push	{r4, lr}
 80100a0:	4604      	mov	r4, r0
 80100a2:	e9c0 3300 	strd	r3, r3, [r0]
 80100a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80100aa:	6083      	str	r3, [r0, #8]
 80100ac:	8181      	strh	r1, [r0, #12]
 80100ae:	6643      	str	r3, [r0, #100]	; 0x64
 80100b0:	81c2      	strh	r2, [r0, #14]
 80100b2:	6183      	str	r3, [r0, #24]
 80100b4:	4619      	mov	r1, r3
 80100b6:	2208      	movs	r2, #8
 80100b8:	305c      	adds	r0, #92	; 0x5c
 80100ba:	f000 f902 	bl	80102c2 <memset>
 80100be:	4b05      	ldr	r3, [pc, #20]	; (80100d4 <std+0x38>)
 80100c0:	6263      	str	r3, [r4, #36]	; 0x24
 80100c2:	4b05      	ldr	r3, [pc, #20]	; (80100d8 <std+0x3c>)
 80100c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80100c6:	4b05      	ldr	r3, [pc, #20]	; (80100dc <std+0x40>)
 80100c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80100ca:	4b05      	ldr	r3, [pc, #20]	; (80100e0 <std+0x44>)
 80100cc:	6224      	str	r4, [r4, #32]
 80100ce:	6323      	str	r3, [r4, #48]	; 0x30
 80100d0:	bd10      	pop	{r4, pc}
 80100d2:	bf00      	nop
 80100d4:	0801023d 	.word	0x0801023d
 80100d8:	0801025f 	.word	0x0801025f
 80100dc:	08010297 	.word	0x08010297
 80100e0:	080102bb 	.word	0x080102bb

080100e4 <stdio_exit_handler>:
 80100e4:	4a02      	ldr	r2, [pc, #8]	; (80100f0 <stdio_exit_handler+0xc>)
 80100e6:	4903      	ldr	r1, [pc, #12]	; (80100f4 <stdio_exit_handler+0x10>)
 80100e8:	4803      	ldr	r0, [pc, #12]	; (80100f8 <stdio_exit_handler+0x14>)
 80100ea:	f000 b869 	b.w	80101c0 <_fwalk_sglue>
 80100ee:	bf00      	nop
 80100f0:	2000017c 	.word	0x2000017c
 80100f4:	08012d21 	.word	0x08012d21
 80100f8:	20000188 	.word	0x20000188

080100fc <cleanup_stdio>:
 80100fc:	6841      	ldr	r1, [r0, #4]
 80100fe:	4b0c      	ldr	r3, [pc, #48]	; (8010130 <cleanup_stdio+0x34>)
 8010100:	4299      	cmp	r1, r3
 8010102:	b510      	push	{r4, lr}
 8010104:	4604      	mov	r4, r0
 8010106:	d001      	beq.n	801010c <cleanup_stdio+0x10>
 8010108:	f002 fe0a 	bl	8012d20 <_fflush_r>
 801010c:	68a1      	ldr	r1, [r4, #8]
 801010e:	4b09      	ldr	r3, [pc, #36]	; (8010134 <cleanup_stdio+0x38>)
 8010110:	4299      	cmp	r1, r3
 8010112:	d002      	beq.n	801011a <cleanup_stdio+0x1e>
 8010114:	4620      	mov	r0, r4
 8010116:	f002 fe03 	bl	8012d20 <_fflush_r>
 801011a:	68e1      	ldr	r1, [r4, #12]
 801011c:	4b06      	ldr	r3, [pc, #24]	; (8010138 <cleanup_stdio+0x3c>)
 801011e:	4299      	cmp	r1, r3
 8010120:	d004      	beq.n	801012c <cleanup_stdio+0x30>
 8010122:	4620      	mov	r0, r4
 8010124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010128:	f002 bdfa 	b.w	8012d20 <_fflush_r>
 801012c:	bd10      	pop	{r4, pc}
 801012e:	bf00      	nop
 8010130:	20006b9c 	.word	0x20006b9c
 8010134:	20006c04 	.word	0x20006c04
 8010138:	20006c6c 	.word	0x20006c6c

0801013c <global_stdio_init.part.0>:
 801013c:	b510      	push	{r4, lr}
 801013e:	4b0b      	ldr	r3, [pc, #44]	; (801016c <global_stdio_init.part.0+0x30>)
 8010140:	4c0b      	ldr	r4, [pc, #44]	; (8010170 <global_stdio_init.part.0+0x34>)
 8010142:	4a0c      	ldr	r2, [pc, #48]	; (8010174 <global_stdio_init.part.0+0x38>)
 8010144:	601a      	str	r2, [r3, #0]
 8010146:	4620      	mov	r0, r4
 8010148:	2200      	movs	r2, #0
 801014a:	2104      	movs	r1, #4
 801014c:	f7ff ffa6 	bl	801009c <std>
 8010150:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010154:	2201      	movs	r2, #1
 8010156:	2109      	movs	r1, #9
 8010158:	f7ff ffa0 	bl	801009c <std>
 801015c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010160:	2202      	movs	r2, #2
 8010162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010166:	2112      	movs	r1, #18
 8010168:	f7ff bf98 	b.w	801009c <std>
 801016c:	20006cd4 	.word	0x20006cd4
 8010170:	20006b9c 	.word	0x20006b9c
 8010174:	080100e5 	.word	0x080100e5

08010178 <__sfp_lock_acquire>:
 8010178:	4801      	ldr	r0, [pc, #4]	; (8010180 <__sfp_lock_acquire+0x8>)
 801017a:	f000 b91f 	b.w	80103bc <__retarget_lock_acquire_recursive>
 801017e:	bf00      	nop
 8010180:	20006cdd 	.word	0x20006cdd

08010184 <__sfp_lock_release>:
 8010184:	4801      	ldr	r0, [pc, #4]	; (801018c <__sfp_lock_release+0x8>)
 8010186:	f000 b91a 	b.w	80103be <__retarget_lock_release_recursive>
 801018a:	bf00      	nop
 801018c:	20006cdd 	.word	0x20006cdd

08010190 <__sinit>:
 8010190:	b510      	push	{r4, lr}
 8010192:	4604      	mov	r4, r0
 8010194:	f7ff fff0 	bl	8010178 <__sfp_lock_acquire>
 8010198:	6a23      	ldr	r3, [r4, #32]
 801019a:	b11b      	cbz	r3, 80101a4 <__sinit+0x14>
 801019c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101a0:	f7ff bff0 	b.w	8010184 <__sfp_lock_release>
 80101a4:	4b04      	ldr	r3, [pc, #16]	; (80101b8 <__sinit+0x28>)
 80101a6:	6223      	str	r3, [r4, #32]
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <__sinit+0x2c>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d1f5      	bne.n	801019c <__sinit+0xc>
 80101b0:	f7ff ffc4 	bl	801013c <global_stdio_init.part.0>
 80101b4:	e7f2      	b.n	801019c <__sinit+0xc>
 80101b6:	bf00      	nop
 80101b8:	080100fd 	.word	0x080100fd
 80101bc:	20006cd4 	.word	0x20006cd4

080101c0 <_fwalk_sglue>:
 80101c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101c4:	4607      	mov	r7, r0
 80101c6:	4688      	mov	r8, r1
 80101c8:	4614      	mov	r4, r2
 80101ca:	2600      	movs	r6, #0
 80101cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80101d0:	f1b9 0901 	subs.w	r9, r9, #1
 80101d4:	d505      	bpl.n	80101e2 <_fwalk_sglue+0x22>
 80101d6:	6824      	ldr	r4, [r4, #0]
 80101d8:	2c00      	cmp	r4, #0
 80101da:	d1f7      	bne.n	80101cc <_fwalk_sglue+0xc>
 80101dc:	4630      	mov	r0, r6
 80101de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80101e2:	89ab      	ldrh	r3, [r5, #12]
 80101e4:	2b01      	cmp	r3, #1
 80101e6:	d907      	bls.n	80101f8 <_fwalk_sglue+0x38>
 80101e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80101ec:	3301      	adds	r3, #1
 80101ee:	d003      	beq.n	80101f8 <_fwalk_sglue+0x38>
 80101f0:	4629      	mov	r1, r5
 80101f2:	4638      	mov	r0, r7
 80101f4:	47c0      	blx	r8
 80101f6:	4306      	orrs	r6, r0
 80101f8:	3568      	adds	r5, #104	; 0x68
 80101fa:	e7e9      	b.n	80101d0 <_fwalk_sglue+0x10>

080101fc <siprintf>:
 80101fc:	b40e      	push	{r1, r2, r3}
 80101fe:	b500      	push	{lr}
 8010200:	b09c      	sub	sp, #112	; 0x70
 8010202:	ab1d      	add	r3, sp, #116	; 0x74
 8010204:	9002      	str	r0, [sp, #8]
 8010206:	9006      	str	r0, [sp, #24]
 8010208:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801020c:	4809      	ldr	r0, [pc, #36]	; (8010234 <siprintf+0x38>)
 801020e:	9107      	str	r1, [sp, #28]
 8010210:	9104      	str	r1, [sp, #16]
 8010212:	4909      	ldr	r1, [pc, #36]	; (8010238 <siprintf+0x3c>)
 8010214:	f853 2b04 	ldr.w	r2, [r3], #4
 8010218:	9105      	str	r1, [sp, #20]
 801021a:	6800      	ldr	r0, [r0, #0]
 801021c:	9301      	str	r3, [sp, #4]
 801021e:	a902      	add	r1, sp, #8
 8010220:	f002 fbfa 	bl	8012a18 <_svfiprintf_r>
 8010224:	9b02      	ldr	r3, [sp, #8]
 8010226:	2200      	movs	r2, #0
 8010228:	701a      	strb	r2, [r3, #0]
 801022a:	b01c      	add	sp, #112	; 0x70
 801022c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010230:	b003      	add	sp, #12
 8010232:	4770      	bx	lr
 8010234:	200001d4 	.word	0x200001d4
 8010238:	ffff0208 	.word	0xffff0208

0801023c <__sread>:
 801023c:	b510      	push	{r4, lr}
 801023e:	460c      	mov	r4, r1
 8010240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010244:	f000 f86c 	bl	8010320 <_read_r>
 8010248:	2800      	cmp	r0, #0
 801024a:	bfab      	itete	ge
 801024c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801024e:	89a3      	ldrhlt	r3, [r4, #12]
 8010250:	181b      	addge	r3, r3, r0
 8010252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010256:	bfac      	ite	ge
 8010258:	6563      	strge	r3, [r4, #84]	; 0x54
 801025a:	81a3      	strhlt	r3, [r4, #12]
 801025c:	bd10      	pop	{r4, pc}

0801025e <__swrite>:
 801025e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010262:	461f      	mov	r7, r3
 8010264:	898b      	ldrh	r3, [r1, #12]
 8010266:	05db      	lsls	r3, r3, #23
 8010268:	4605      	mov	r5, r0
 801026a:	460c      	mov	r4, r1
 801026c:	4616      	mov	r6, r2
 801026e:	d505      	bpl.n	801027c <__swrite+0x1e>
 8010270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010274:	2302      	movs	r3, #2
 8010276:	2200      	movs	r2, #0
 8010278:	f000 f840 	bl	80102fc <_lseek_r>
 801027c:	89a3      	ldrh	r3, [r4, #12]
 801027e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010286:	81a3      	strh	r3, [r4, #12]
 8010288:	4632      	mov	r2, r6
 801028a:	463b      	mov	r3, r7
 801028c:	4628      	mov	r0, r5
 801028e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010292:	f000 b857 	b.w	8010344 <_write_r>

08010296 <__sseek>:
 8010296:	b510      	push	{r4, lr}
 8010298:	460c      	mov	r4, r1
 801029a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801029e:	f000 f82d 	bl	80102fc <_lseek_r>
 80102a2:	1c43      	adds	r3, r0, #1
 80102a4:	89a3      	ldrh	r3, [r4, #12]
 80102a6:	bf15      	itete	ne
 80102a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80102aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80102ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80102b2:	81a3      	strheq	r3, [r4, #12]
 80102b4:	bf18      	it	ne
 80102b6:	81a3      	strhne	r3, [r4, #12]
 80102b8:	bd10      	pop	{r4, pc}

080102ba <__sclose>:
 80102ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102be:	f000 b80d 	b.w	80102dc <_close_r>

080102c2 <memset>:
 80102c2:	4402      	add	r2, r0
 80102c4:	4603      	mov	r3, r0
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d100      	bne.n	80102cc <memset+0xa>
 80102ca:	4770      	bx	lr
 80102cc:	f803 1b01 	strb.w	r1, [r3], #1
 80102d0:	e7f9      	b.n	80102c6 <memset+0x4>
	...

080102d4 <_localeconv_r>:
 80102d4:	4800      	ldr	r0, [pc, #0]	; (80102d8 <_localeconv_r+0x4>)
 80102d6:	4770      	bx	lr
 80102d8:	200002c8 	.word	0x200002c8

080102dc <_close_r>:
 80102dc:	b538      	push	{r3, r4, r5, lr}
 80102de:	4d06      	ldr	r5, [pc, #24]	; (80102f8 <_close_r+0x1c>)
 80102e0:	2300      	movs	r3, #0
 80102e2:	4604      	mov	r4, r0
 80102e4:	4608      	mov	r0, r1
 80102e6:	602b      	str	r3, [r5, #0]
 80102e8:	f7f1 fc7f 	bl	8001bea <_close>
 80102ec:	1c43      	adds	r3, r0, #1
 80102ee:	d102      	bne.n	80102f6 <_close_r+0x1a>
 80102f0:	682b      	ldr	r3, [r5, #0]
 80102f2:	b103      	cbz	r3, 80102f6 <_close_r+0x1a>
 80102f4:	6023      	str	r3, [r4, #0]
 80102f6:	bd38      	pop	{r3, r4, r5, pc}
 80102f8:	20006cd8 	.word	0x20006cd8

080102fc <_lseek_r>:
 80102fc:	b538      	push	{r3, r4, r5, lr}
 80102fe:	4d07      	ldr	r5, [pc, #28]	; (801031c <_lseek_r+0x20>)
 8010300:	4604      	mov	r4, r0
 8010302:	4608      	mov	r0, r1
 8010304:	4611      	mov	r1, r2
 8010306:	2200      	movs	r2, #0
 8010308:	602a      	str	r2, [r5, #0]
 801030a:	461a      	mov	r2, r3
 801030c:	f7f1 fc94 	bl	8001c38 <_lseek>
 8010310:	1c43      	adds	r3, r0, #1
 8010312:	d102      	bne.n	801031a <_lseek_r+0x1e>
 8010314:	682b      	ldr	r3, [r5, #0]
 8010316:	b103      	cbz	r3, 801031a <_lseek_r+0x1e>
 8010318:	6023      	str	r3, [r4, #0]
 801031a:	bd38      	pop	{r3, r4, r5, pc}
 801031c:	20006cd8 	.word	0x20006cd8

08010320 <_read_r>:
 8010320:	b538      	push	{r3, r4, r5, lr}
 8010322:	4d07      	ldr	r5, [pc, #28]	; (8010340 <_read_r+0x20>)
 8010324:	4604      	mov	r4, r0
 8010326:	4608      	mov	r0, r1
 8010328:	4611      	mov	r1, r2
 801032a:	2200      	movs	r2, #0
 801032c:	602a      	str	r2, [r5, #0]
 801032e:	461a      	mov	r2, r3
 8010330:	f7f1 fc22 	bl	8001b78 <_read>
 8010334:	1c43      	adds	r3, r0, #1
 8010336:	d102      	bne.n	801033e <_read_r+0x1e>
 8010338:	682b      	ldr	r3, [r5, #0]
 801033a:	b103      	cbz	r3, 801033e <_read_r+0x1e>
 801033c:	6023      	str	r3, [r4, #0]
 801033e:	bd38      	pop	{r3, r4, r5, pc}
 8010340:	20006cd8 	.word	0x20006cd8

08010344 <_write_r>:
 8010344:	b538      	push	{r3, r4, r5, lr}
 8010346:	4d07      	ldr	r5, [pc, #28]	; (8010364 <_write_r+0x20>)
 8010348:	4604      	mov	r4, r0
 801034a:	4608      	mov	r0, r1
 801034c:	4611      	mov	r1, r2
 801034e:	2200      	movs	r2, #0
 8010350:	602a      	str	r2, [r5, #0]
 8010352:	461a      	mov	r2, r3
 8010354:	f7f1 fc2d 	bl	8001bb2 <_write>
 8010358:	1c43      	adds	r3, r0, #1
 801035a:	d102      	bne.n	8010362 <_write_r+0x1e>
 801035c:	682b      	ldr	r3, [r5, #0]
 801035e:	b103      	cbz	r3, 8010362 <_write_r+0x1e>
 8010360:	6023      	str	r3, [r4, #0]
 8010362:	bd38      	pop	{r3, r4, r5, pc}
 8010364:	20006cd8 	.word	0x20006cd8

08010368 <__errno>:
 8010368:	4b01      	ldr	r3, [pc, #4]	; (8010370 <__errno+0x8>)
 801036a:	6818      	ldr	r0, [r3, #0]
 801036c:	4770      	bx	lr
 801036e:	bf00      	nop
 8010370:	200001d4 	.word	0x200001d4

08010374 <__libc_init_array>:
 8010374:	b570      	push	{r4, r5, r6, lr}
 8010376:	4d0d      	ldr	r5, [pc, #52]	; (80103ac <__libc_init_array+0x38>)
 8010378:	4c0d      	ldr	r4, [pc, #52]	; (80103b0 <__libc_init_array+0x3c>)
 801037a:	1b64      	subs	r4, r4, r5
 801037c:	10a4      	asrs	r4, r4, #2
 801037e:	2600      	movs	r6, #0
 8010380:	42a6      	cmp	r6, r4
 8010382:	d109      	bne.n	8010398 <__libc_init_array+0x24>
 8010384:	4d0b      	ldr	r5, [pc, #44]	; (80103b4 <__libc_init_array+0x40>)
 8010386:	4c0c      	ldr	r4, [pc, #48]	; (80103b8 <__libc_init_array+0x44>)
 8010388:	f003 fbd2 	bl	8013b30 <_init>
 801038c:	1b64      	subs	r4, r4, r5
 801038e:	10a4      	asrs	r4, r4, #2
 8010390:	2600      	movs	r6, #0
 8010392:	42a6      	cmp	r6, r4
 8010394:	d105      	bne.n	80103a2 <__libc_init_array+0x2e>
 8010396:	bd70      	pop	{r4, r5, r6, pc}
 8010398:	f855 3b04 	ldr.w	r3, [r5], #4
 801039c:	4798      	blx	r3
 801039e:	3601      	adds	r6, #1
 80103a0:	e7ee      	b.n	8010380 <__libc_init_array+0xc>
 80103a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80103a6:	4798      	blx	r3
 80103a8:	3601      	adds	r6, #1
 80103aa:	e7f2      	b.n	8010392 <__libc_init_array+0x1e>
 80103ac:	08015b88 	.word	0x08015b88
 80103b0:	08015b88 	.word	0x08015b88
 80103b4:	08015b88 	.word	0x08015b88
 80103b8:	08015b8c 	.word	0x08015b8c

080103bc <__retarget_lock_acquire_recursive>:
 80103bc:	4770      	bx	lr

080103be <__retarget_lock_release_recursive>:
 80103be:	4770      	bx	lr

080103c0 <memcpy>:
 80103c0:	440a      	add	r2, r1
 80103c2:	4291      	cmp	r1, r2
 80103c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80103c8:	d100      	bne.n	80103cc <memcpy+0xc>
 80103ca:	4770      	bx	lr
 80103cc:	b510      	push	{r4, lr}
 80103ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80103d6:	4291      	cmp	r1, r2
 80103d8:	d1f9      	bne.n	80103ce <memcpy+0xe>
 80103da:	bd10      	pop	{r4, pc}

080103dc <nanf>:
 80103dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80103e4 <nanf+0x8>
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop
 80103e4:	7fc00000 	.word	0x7fc00000

080103e8 <quorem>:
 80103e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ec:	6903      	ldr	r3, [r0, #16]
 80103ee:	690c      	ldr	r4, [r1, #16]
 80103f0:	42a3      	cmp	r3, r4
 80103f2:	4607      	mov	r7, r0
 80103f4:	db7e      	blt.n	80104f4 <quorem+0x10c>
 80103f6:	3c01      	subs	r4, #1
 80103f8:	f101 0814 	add.w	r8, r1, #20
 80103fc:	f100 0514 	add.w	r5, r0, #20
 8010400:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010404:	9301      	str	r3, [sp, #4]
 8010406:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801040a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801040e:	3301      	adds	r3, #1
 8010410:	429a      	cmp	r2, r3
 8010412:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010416:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801041a:	fbb2 f6f3 	udiv	r6, r2, r3
 801041e:	d331      	bcc.n	8010484 <quorem+0x9c>
 8010420:	f04f 0e00 	mov.w	lr, #0
 8010424:	4640      	mov	r0, r8
 8010426:	46ac      	mov	ip, r5
 8010428:	46f2      	mov	sl, lr
 801042a:	f850 2b04 	ldr.w	r2, [r0], #4
 801042e:	b293      	uxth	r3, r2
 8010430:	fb06 e303 	mla	r3, r6, r3, lr
 8010434:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010438:	0c1a      	lsrs	r2, r3, #16
 801043a:	b29b      	uxth	r3, r3
 801043c:	ebaa 0303 	sub.w	r3, sl, r3
 8010440:	f8dc a000 	ldr.w	sl, [ip]
 8010444:	fa13 f38a 	uxtah	r3, r3, sl
 8010448:	fb06 220e 	mla	r2, r6, lr, r2
 801044c:	9300      	str	r3, [sp, #0]
 801044e:	9b00      	ldr	r3, [sp, #0]
 8010450:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010454:	b292      	uxth	r2, r2
 8010456:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801045a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801045e:	f8bd 3000 	ldrh.w	r3, [sp]
 8010462:	4581      	cmp	r9, r0
 8010464:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010468:	f84c 3b04 	str.w	r3, [ip], #4
 801046c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010470:	d2db      	bcs.n	801042a <quorem+0x42>
 8010472:	f855 300b 	ldr.w	r3, [r5, fp]
 8010476:	b92b      	cbnz	r3, 8010484 <quorem+0x9c>
 8010478:	9b01      	ldr	r3, [sp, #4]
 801047a:	3b04      	subs	r3, #4
 801047c:	429d      	cmp	r5, r3
 801047e:	461a      	mov	r2, r3
 8010480:	d32c      	bcc.n	80104dc <quorem+0xf4>
 8010482:	613c      	str	r4, [r7, #16]
 8010484:	4638      	mov	r0, r7
 8010486:	f001 f9ef 	bl	8011868 <__mcmp>
 801048a:	2800      	cmp	r0, #0
 801048c:	db22      	blt.n	80104d4 <quorem+0xec>
 801048e:	3601      	adds	r6, #1
 8010490:	4629      	mov	r1, r5
 8010492:	2000      	movs	r0, #0
 8010494:	f858 2b04 	ldr.w	r2, [r8], #4
 8010498:	f8d1 c000 	ldr.w	ip, [r1]
 801049c:	b293      	uxth	r3, r2
 801049e:	1ac3      	subs	r3, r0, r3
 80104a0:	0c12      	lsrs	r2, r2, #16
 80104a2:	fa13 f38c 	uxtah	r3, r3, ip
 80104a6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80104aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104b4:	45c1      	cmp	r9, r8
 80104b6:	f841 3b04 	str.w	r3, [r1], #4
 80104ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80104be:	d2e9      	bcs.n	8010494 <quorem+0xac>
 80104c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80104c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80104c8:	b922      	cbnz	r2, 80104d4 <quorem+0xec>
 80104ca:	3b04      	subs	r3, #4
 80104cc:	429d      	cmp	r5, r3
 80104ce:	461a      	mov	r2, r3
 80104d0:	d30a      	bcc.n	80104e8 <quorem+0x100>
 80104d2:	613c      	str	r4, [r7, #16]
 80104d4:	4630      	mov	r0, r6
 80104d6:	b003      	add	sp, #12
 80104d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104dc:	6812      	ldr	r2, [r2, #0]
 80104de:	3b04      	subs	r3, #4
 80104e0:	2a00      	cmp	r2, #0
 80104e2:	d1ce      	bne.n	8010482 <quorem+0x9a>
 80104e4:	3c01      	subs	r4, #1
 80104e6:	e7c9      	b.n	801047c <quorem+0x94>
 80104e8:	6812      	ldr	r2, [r2, #0]
 80104ea:	3b04      	subs	r3, #4
 80104ec:	2a00      	cmp	r2, #0
 80104ee:	d1f0      	bne.n	80104d2 <quorem+0xea>
 80104f0:	3c01      	subs	r4, #1
 80104f2:	e7eb      	b.n	80104cc <quorem+0xe4>
 80104f4:	2000      	movs	r0, #0
 80104f6:	e7ee      	b.n	80104d6 <quorem+0xee>

080104f8 <_dtoa_r>:
 80104f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104fc:	ed2d 8b04 	vpush	{d8-d9}
 8010500:	69c5      	ldr	r5, [r0, #28]
 8010502:	b093      	sub	sp, #76	; 0x4c
 8010504:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010508:	ec57 6b10 	vmov	r6, r7, d0
 801050c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010510:	9107      	str	r1, [sp, #28]
 8010512:	4604      	mov	r4, r0
 8010514:	920a      	str	r2, [sp, #40]	; 0x28
 8010516:	930d      	str	r3, [sp, #52]	; 0x34
 8010518:	b975      	cbnz	r5, 8010538 <_dtoa_r+0x40>
 801051a:	2010      	movs	r0, #16
 801051c:	f000 fe2a 	bl	8011174 <malloc>
 8010520:	4602      	mov	r2, r0
 8010522:	61e0      	str	r0, [r4, #28]
 8010524:	b920      	cbnz	r0, 8010530 <_dtoa_r+0x38>
 8010526:	4bae      	ldr	r3, [pc, #696]	; (80107e0 <_dtoa_r+0x2e8>)
 8010528:	21ef      	movs	r1, #239	; 0xef
 801052a:	48ae      	ldr	r0, [pc, #696]	; (80107e4 <_dtoa_r+0x2ec>)
 801052c:	f002 fc64 	bl	8012df8 <__assert_func>
 8010530:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010534:	6005      	str	r5, [r0, #0]
 8010536:	60c5      	str	r5, [r0, #12]
 8010538:	69e3      	ldr	r3, [r4, #28]
 801053a:	6819      	ldr	r1, [r3, #0]
 801053c:	b151      	cbz	r1, 8010554 <_dtoa_r+0x5c>
 801053e:	685a      	ldr	r2, [r3, #4]
 8010540:	604a      	str	r2, [r1, #4]
 8010542:	2301      	movs	r3, #1
 8010544:	4093      	lsls	r3, r2
 8010546:	608b      	str	r3, [r1, #8]
 8010548:	4620      	mov	r0, r4
 801054a:	f000 ff07 	bl	801135c <_Bfree>
 801054e:	69e3      	ldr	r3, [r4, #28]
 8010550:	2200      	movs	r2, #0
 8010552:	601a      	str	r2, [r3, #0]
 8010554:	1e3b      	subs	r3, r7, #0
 8010556:	bfbb      	ittet	lt
 8010558:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801055c:	9303      	strlt	r3, [sp, #12]
 801055e:	2300      	movge	r3, #0
 8010560:	2201      	movlt	r2, #1
 8010562:	bfac      	ite	ge
 8010564:	f8c8 3000 	strge.w	r3, [r8]
 8010568:	f8c8 2000 	strlt.w	r2, [r8]
 801056c:	4b9e      	ldr	r3, [pc, #632]	; (80107e8 <_dtoa_r+0x2f0>)
 801056e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8010572:	ea33 0308 	bics.w	r3, r3, r8
 8010576:	d11b      	bne.n	80105b0 <_dtoa_r+0xb8>
 8010578:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801057a:	f242 730f 	movw	r3, #9999	; 0x270f
 801057e:	6013      	str	r3, [r2, #0]
 8010580:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8010584:	4333      	orrs	r3, r6
 8010586:	f000 8593 	beq.w	80110b0 <_dtoa_r+0xbb8>
 801058a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801058c:	b963      	cbnz	r3, 80105a8 <_dtoa_r+0xb0>
 801058e:	4b97      	ldr	r3, [pc, #604]	; (80107ec <_dtoa_r+0x2f4>)
 8010590:	e027      	b.n	80105e2 <_dtoa_r+0xea>
 8010592:	4b97      	ldr	r3, [pc, #604]	; (80107f0 <_dtoa_r+0x2f8>)
 8010594:	9300      	str	r3, [sp, #0]
 8010596:	3308      	adds	r3, #8
 8010598:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801059a:	6013      	str	r3, [r2, #0]
 801059c:	9800      	ldr	r0, [sp, #0]
 801059e:	b013      	add	sp, #76	; 0x4c
 80105a0:	ecbd 8b04 	vpop	{d8-d9}
 80105a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a8:	4b90      	ldr	r3, [pc, #576]	; (80107ec <_dtoa_r+0x2f4>)
 80105aa:	9300      	str	r3, [sp, #0]
 80105ac:	3303      	adds	r3, #3
 80105ae:	e7f3      	b.n	8010598 <_dtoa_r+0xa0>
 80105b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105b4:	2200      	movs	r2, #0
 80105b6:	ec51 0b17 	vmov	r0, r1, d7
 80105ba:	eeb0 8a47 	vmov.f32	s16, s14
 80105be:	eef0 8a67 	vmov.f32	s17, s15
 80105c2:	2300      	movs	r3, #0
 80105c4:	f7f0 fa90 	bl	8000ae8 <__aeabi_dcmpeq>
 80105c8:	4681      	mov	r9, r0
 80105ca:	b160      	cbz	r0, 80105e6 <_dtoa_r+0xee>
 80105cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80105ce:	2301      	movs	r3, #1
 80105d0:	6013      	str	r3, [r2, #0]
 80105d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	f000 8568 	beq.w	80110aa <_dtoa_r+0xbb2>
 80105da:	4b86      	ldr	r3, [pc, #536]	; (80107f4 <_dtoa_r+0x2fc>)
 80105dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80105de:	6013      	str	r3, [r2, #0]
 80105e0:	3b01      	subs	r3, #1
 80105e2:	9300      	str	r3, [sp, #0]
 80105e4:	e7da      	b.n	801059c <_dtoa_r+0xa4>
 80105e6:	aa10      	add	r2, sp, #64	; 0x40
 80105e8:	a911      	add	r1, sp, #68	; 0x44
 80105ea:	4620      	mov	r0, r4
 80105ec:	eeb0 0a48 	vmov.f32	s0, s16
 80105f0:	eef0 0a68 	vmov.f32	s1, s17
 80105f4:	f001 fa4e 	bl	8011a94 <__d2b>
 80105f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80105fc:	4682      	mov	sl, r0
 80105fe:	2d00      	cmp	r5, #0
 8010600:	d07f      	beq.n	8010702 <_dtoa_r+0x20a>
 8010602:	ee18 3a90 	vmov	r3, s17
 8010606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801060a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801060e:	ec51 0b18 	vmov	r0, r1, d8
 8010612:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801061a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801061e:	4619      	mov	r1, r3
 8010620:	2200      	movs	r2, #0
 8010622:	4b75      	ldr	r3, [pc, #468]	; (80107f8 <_dtoa_r+0x300>)
 8010624:	f7ef fe40 	bl	80002a8 <__aeabi_dsub>
 8010628:	a367      	add	r3, pc, #412	; (adr r3, 80107c8 <_dtoa_r+0x2d0>)
 801062a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062e:	f7ef fff3 	bl	8000618 <__aeabi_dmul>
 8010632:	a367      	add	r3, pc, #412	; (adr r3, 80107d0 <_dtoa_r+0x2d8>)
 8010634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010638:	f7ef fe38 	bl	80002ac <__adddf3>
 801063c:	4606      	mov	r6, r0
 801063e:	4628      	mov	r0, r5
 8010640:	460f      	mov	r7, r1
 8010642:	f7ef ff7f 	bl	8000544 <__aeabi_i2d>
 8010646:	a364      	add	r3, pc, #400	; (adr r3, 80107d8 <_dtoa_r+0x2e0>)
 8010648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801064c:	f7ef ffe4 	bl	8000618 <__aeabi_dmul>
 8010650:	4602      	mov	r2, r0
 8010652:	460b      	mov	r3, r1
 8010654:	4630      	mov	r0, r6
 8010656:	4639      	mov	r1, r7
 8010658:	f7ef fe28 	bl	80002ac <__adddf3>
 801065c:	4606      	mov	r6, r0
 801065e:	460f      	mov	r7, r1
 8010660:	f7f0 fa8a 	bl	8000b78 <__aeabi_d2iz>
 8010664:	2200      	movs	r2, #0
 8010666:	4683      	mov	fp, r0
 8010668:	2300      	movs	r3, #0
 801066a:	4630      	mov	r0, r6
 801066c:	4639      	mov	r1, r7
 801066e:	f7f0 fa45 	bl	8000afc <__aeabi_dcmplt>
 8010672:	b148      	cbz	r0, 8010688 <_dtoa_r+0x190>
 8010674:	4658      	mov	r0, fp
 8010676:	f7ef ff65 	bl	8000544 <__aeabi_i2d>
 801067a:	4632      	mov	r2, r6
 801067c:	463b      	mov	r3, r7
 801067e:	f7f0 fa33 	bl	8000ae8 <__aeabi_dcmpeq>
 8010682:	b908      	cbnz	r0, 8010688 <_dtoa_r+0x190>
 8010684:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010688:	f1bb 0f16 	cmp.w	fp, #22
 801068c:	d857      	bhi.n	801073e <_dtoa_r+0x246>
 801068e:	4b5b      	ldr	r3, [pc, #364]	; (80107fc <_dtoa_r+0x304>)
 8010690:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010698:	ec51 0b18 	vmov	r0, r1, d8
 801069c:	f7f0 fa2e 	bl	8000afc <__aeabi_dcmplt>
 80106a0:	2800      	cmp	r0, #0
 80106a2:	d04e      	beq.n	8010742 <_dtoa_r+0x24a>
 80106a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80106a8:	2300      	movs	r3, #0
 80106aa:	930c      	str	r3, [sp, #48]	; 0x30
 80106ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80106ae:	1b5b      	subs	r3, r3, r5
 80106b0:	1e5a      	subs	r2, r3, #1
 80106b2:	bf45      	ittet	mi
 80106b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80106b8:	9305      	strmi	r3, [sp, #20]
 80106ba:	2300      	movpl	r3, #0
 80106bc:	2300      	movmi	r3, #0
 80106be:	9206      	str	r2, [sp, #24]
 80106c0:	bf54      	ite	pl
 80106c2:	9305      	strpl	r3, [sp, #20]
 80106c4:	9306      	strmi	r3, [sp, #24]
 80106c6:	f1bb 0f00 	cmp.w	fp, #0
 80106ca:	db3c      	blt.n	8010746 <_dtoa_r+0x24e>
 80106cc:	9b06      	ldr	r3, [sp, #24]
 80106ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80106d2:	445b      	add	r3, fp
 80106d4:	9306      	str	r3, [sp, #24]
 80106d6:	2300      	movs	r3, #0
 80106d8:	9308      	str	r3, [sp, #32]
 80106da:	9b07      	ldr	r3, [sp, #28]
 80106dc:	2b09      	cmp	r3, #9
 80106de:	d868      	bhi.n	80107b2 <_dtoa_r+0x2ba>
 80106e0:	2b05      	cmp	r3, #5
 80106e2:	bfc4      	itt	gt
 80106e4:	3b04      	subgt	r3, #4
 80106e6:	9307      	strgt	r3, [sp, #28]
 80106e8:	9b07      	ldr	r3, [sp, #28]
 80106ea:	f1a3 0302 	sub.w	r3, r3, #2
 80106ee:	bfcc      	ite	gt
 80106f0:	2500      	movgt	r5, #0
 80106f2:	2501      	movle	r5, #1
 80106f4:	2b03      	cmp	r3, #3
 80106f6:	f200 8085 	bhi.w	8010804 <_dtoa_r+0x30c>
 80106fa:	e8df f003 	tbb	[pc, r3]
 80106fe:	3b2e      	.short	0x3b2e
 8010700:	5839      	.short	0x5839
 8010702:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010706:	441d      	add	r5, r3
 8010708:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801070c:	2b20      	cmp	r3, #32
 801070e:	bfc1      	itttt	gt
 8010710:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010714:	fa08 f803 	lslgt.w	r8, r8, r3
 8010718:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801071c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8010720:	bfd6      	itet	le
 8010722:	f1c3 0320 	rsble	r3, r3, #32
 8010726:	ea48 0003 	orrgt.w	r0, r8, r3
 801072a:	fa06 f003 	lslle.w	r0, r6, r3
 801072e:	f7ef fef9 	bl	8000524 <__aeabi_ui2d>
 8010732:	2201      	movs	r2, #1
 8010734:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8010738:	3d01      	subs	r5, #1
 801073a:	920e      	str	r2, [sp, #56]	; 0x38
 801073c:	e76f      	b.n	801061e <_dtoa_r+0x126>
 801073e:	2301      	movs	r3, #1
 8010740:	e7b3      	b.n	80106aa <_dtoa_r+0x1b2>
 8010742:	900c      	str	r0, [sp, #48]	; 0x30
 8010744:	e7b2      	b.n	80106ac <_dtoa_r+0x1b4>
 8010746:	9b05      	ldr	r3, [sp, #20]
 8010748:	eba3 030b 	sub.w	r3, r3, fp
 801074c:	9305      	str	r3, [sp, #20]
 801074e:	f1cb 0300 	rsb	r3, fp, #0
 8010752:	9308      	str	r3, [sp, #32]
 8010754:	2300      	movs	r3, #0
 8010756:	930b      	str	r3, [sp, #44]	; 0x2c
 8010758:	e7bf      	b.n	80106da <_dtoa_r+0x1e2>
 801075a:	2300      	movs	r3, #0
 801075c:	9309      	str	r3, [sp, #36]	; 0x24
 801075e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010760:	2b00      	cmp	r3, #0
 8010762:	dc52      	bgt.n	801080a <_dtoa_r+0x312>
 8010764:	2301      	movs	r3, #1
 8010766:	9301      	str	r3, [sp, #4]
 8010768:	9304      	str	r3, [sp, #16]
 801076a:	461a      	mov	r2, r3
 801076c:	920a      	str	r2, [sp, #40]	; 0x28
 801076e:	e00b      	b.n	8010788 <_dtoa_r+0x290>
 8010770:	2301      	movs	r3, #1
 8010772:	e7f3      	b.n	801075c <_dtoa_r+0x264>
 8010774:	2300      	movs	r3, #0
 8010776:	9309      	str	r3, [sp, #36]	; 0x24
 8010778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801077a:	445b      	add	r3, fp
 801077c:	9301      	str	r3, [sp, #4]
 801077e:	3301      	adds	r3, #1
 8010780:	2b01      	cmp	r3, #1
 8010782:	9304      	str	r3, [sp, #16]
 8010784:	bfb8      	it	lt
 8010786:	2301      	movlt	r3, #1
 8010788:	69e0      	ldr	r0, [r4, #28]
 801078a:	2100      	movs	r1, #0
 801078c:	2204      	movs	r2, #4
 801078e:	f102 0614 	add.w	r6, r2, #20
 8010792:	429e      	cmp	r6, r3
 8010794:	d93d      	bls.n	8010812 <_dtoa_r+0x31a>
 8010796:	6041      	str	r1, [r0, #4]
 8010798:	4620      	mov	r0, r4
 801079a:	f000 fd9f 	bl	80112dc <_Balloc>
 801079e:	9000      	str	r0, [sp, #0]
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d139      	bne.n	8010818 <_dtoa_r+0x320>
 80107a4:	4b16      	ldr	r3, [pc, #88]	; (8010800 <_dtoa_r+0x308>)
 80107a6:	4602      	mov	r2, r0
 80107a8:	f240 11af 	movw	r1, #431	; 0x1af
 80107ac:	e6bd      	b.n	801052a <_dtoa_r+0x32>
 80107ae:	2301      	movs	r3, #1
 80107b0:	e7e1      	b.n	8010776 <_dtoa_r+0x27e>
 80107b2:	2501      	movs	r5, #1
 80107b4:	2300      	movs	r3, #0
 80107b6:	9307      	str	r3, [sp, #28]
 80107b8:	9509      	str	r5, [sp, #36]	; 0x24
 80107ba:	f04f 33ff 	mov.w	r3, #4294967295
 80107be:	9301      	str	r3, [sp, #4]
 80107c0:	9304      	str	r3, [sp, #16]
 80107c2:	2200      	movs	r2, #0
 80107c4:	2312      	movs	r3, #18
 80107c6:	e7d1      	b.n	801076c <_dtoa_r+0x274>
 80107c8:	636f4361 	.word	0x636f4361
 80107cc:	3fd287a7 	.word	0x3fd287a7
 80107d0:	8b60c8b3 	.word	0x8b60c8b3
 80107d4:	3fc68a28 	.word	0x3fc68a28
 80107d8:	509f79fb 	.word	0x509f79fb
 80107dc:	3fd34413 	.word	0x3fd34413
 80107e0:	0801579e 	.word	0x0801579e
 80107e4:	080157b5 	.word	0x080157b5
 80107e8:	7ff00000 	.word	0x7ff00000
 80107ec:	0801579a 	.word	0x0801579a
 80107f0:	08015791 	.word	0x08015791
 80107f4:	08015769 	.word	0x08015769
 80107f8:	3ff80000 	.word	0x3ff80000
 80107fc:	080158a0 	.word	0x080158a0
 8010800:	0801580d 	.word	0x0801580d
 8010804:	2301      	movs	r3, #1
 8010806:	9309      	str	r3, [sp, #36]	; 0x24
 8010808:	e7d7      	b.n	80107ba <_dtoa_r+0x2c2>
 801080a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801080c:	9301      	str	r3, [sp, #4]
 801080e:	9304      	str	r3, [sp, #16]
 8010810:	e7ba      	b.n	8010788 <_dtoa_r+0x290>
 8010812:	3101      	adds	r1, #1
 8010814:	0052      	lsls	r2, r2, #1
 8010816:	e7ba      	b.n	801078e <_dtoa_r+0x296>
 8010818:	69e3      	ldr	r3, [r4, #28]
 801081a:	9a00      	ldr	r2, [sp, #0]
 801081c:	601a      	str	r2, [r3, #0]
 801081e:	9b04      	ldr	r3, [sp, #16]
 8010820:	2b0e      	cmp	r3, #14
 8010822:	f200 80a8 	bhi.w	8010976 <_dtoa_r+0x47e>
 8010826:	2d00      	cmp	r5, #0
 8010828:	f000 80a5 	beq.w	8010976 <_dtoa_r+0x47e>
 801082c:	f1bb 0f00 	cmp.w	fp, #0
 8010830:	dd38      	ble.n	80108a4 <_dtoa_r+0x3ac>
 8010832:	4bc0      	ldr	r3, [pc, #768]	; (8010b34 <_dtoa_r+0x63c>)
 8010834:	f00b 020f 	and.w	r2, fp, #15
 8010838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801083c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010840:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010844:	ea4f 182b 	mov.w	r8, fp, asr #4
 8010848:	d019      	beq.n	801087e <_dtoa_r+0x386>
 801084a:	4bbb      	ldr	r3, [pc, #748]	; (8010b38 <_dtoa_r+0x640>)
 801084c:	ec51 0b18 	vmov	r0, r1, d8
 8010850:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010854:	f7f0 f80a 	bl	800086c <__aeabi_ddiv>
 8010858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801085c:	f008 080f 	and.w	r8, r8, #15
 8010860:	2503      	movs	r5, #3
 8010862:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010b38 <_dtoa_r+0x640>
 8010866:	f1b8 0f00 	cmp.w	r8, #0
 801086a:	d10a      	bne.n	8010882 <_dtoa_r+0x38a>
 801086c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010870:	4632      	mov	r2, r6
 8010872:	463b      	mov	r3, r7
 8010874:	f7ef fffa 	bl	800086c <__aeabi_ddiv>
 8010878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801087c:	e02b      	b.n	80108d6 <_dtoa_r+0x3de>
 801087e:	2502      	movs	r5, #2
 8010880:	e7ef      	b.n	8010862 <_dtoa_r+0x36a>
 8010882:	f018 0f01 	tst.w	r8, #1
 8010886:	d008      	beq.n	801089a <_dtoa_r+0x3a2>
 8010888:	4630      	mov	r0, r6
 801088a:	4639      	mov	r1, r7
 801088c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010890:	f7ef fec2 	bl	8000618 <__aeabi_dmul>
 8010894:	3501      	adds	r5, #1
 8010896:	4606      	mov	r6, r0
 8010898:	460f      	mov	r7, r1
 801089a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801089e:	f109 0908 	add.w	r9, r9, #8
 80108a2:	e7e0      	b.n	8010866 <_dtoa_r+0x36e>
 80108a4:	f000 809f 	beq.w	80109e6 <_dtoa_r+0x4ee>
 80108a8:	f1cb 0600 	rsb	r6, fp, #0
 80108ac:	4ba1      	ldr	r3, [pc, #644]	; (8010b34 <_dtoa_r+0x63c>)
 80108ae:	4fa2      	ldr	r7, [pc, #648]	; (8010b38 <_dtoa_r+0x640>)
 80108b0:	f006 020f 	and.w	r2, r6, #15
 80108b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80108b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108bc:	ec51 0b18 	vmov	r0, r1, d8
 80108c0:	f7ef feaa 	bl	8000618 <__aeabi_dmul>
 80108c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108c8:	1136      	asrs	r6, r6, #4
 80108ca:	2300      	movs	r3, #0
 80108cc:	2502      	movs	r5, #2
 80108ce:	2e00      	cmp	r6, #0
 80108d0:	d17e      	bne.n	80109d0 <_dtoa_r+0x4d8>
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d1d0      	bne.n	8010878 <_dtoa_r+0x380>
 80108d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	f000 8084 	beq.w	80109ea <_dtoa_r+0x4f2>
 80108e2:	4b96      	ldr	r3, [pc, #600]	; (8010b3c <_dtoa_r+0x644>)
 80108e4:	2200      	movs	r2, #0
 80108e6:	4640      	mov	r0, r8
 80108e8:	4649      	mov	r1, r9
 80108ea:	f7f0 f907 	bl	8000afc <__aeabi_dcmplt>
 80108ee:	2800      	cmp	r0, #0
 80108f0:	d07b      	beq.n	80109ea <_dtoa_r+0x4f2>
 80108f2:	9b04      	ldr	r3, [sp, #16]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d078      	beq.n	80109ea <_dtoa_r+0x4f2>
 80108f8:	9b01      	ldr	r3, [sp, #4]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	dd39      	ble.n	8010972 <_dtoa_r+0x47a>
 80108fe:	4b90      	ldr	r3, [pc, #576]	; (8010b40 <_dtoa_r+0x648>)
 8010900:	2200      	movs	r2, #0
 8010902:	4640      	mov	r0, r8
 8010904:	4649      	mov	r1, r9
 8010906:	f7ef fe87 	bl	8000618 <__aeabi_dmul>
 801090a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801090e:	9e01      	ldr	r6, [sp, #4]
 8010910:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010914:	3501      	adds	r5, #1
 8010916:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801091a:	4628      	mov	r0, r5
 801091c:	f7ef fe12 	bl	8000544 <__aeabi_i2d>
 8010920:	4642      	mov	r2, r8
 8010922:	464b      	mov	r3, r9
 8010924:	f7ef fe78 	bl	8000618 <__aeabi_dmul>
 8010928:	4b86      	ldr	r3, [pc, #536]	; (8010b44 <_dtoa_r+0x64c>)
 801092a:	2200      	movs	r2, #0
 801092c:	f7ef fcbe 	bl	80002ac <__adddf3>
 8010930:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010938:	9303      	str	r3, [sp, #12]
 801093a:	2e00      	cmp	r6, #0
 801093c:	d158      	bne.n	80109f0 <_dtoa_r+0x4f8>
 801093e:	4b82      	ldr	r3, [pc, #520]	; (8010b48 <_dtoa_r+0x650>)
 8010940:	2200      	movs	r2, #0
 8010942:	4640      	mov	r0, r8
 8010944:	4649      	mov	r1, r9
 8010946:	f7ef fcaf 	bl	80002a8 <__aeabi_dsub>
 801094a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801094e:	4680      	mov	r8, r0
 8010950:	4689      	mov	r9, r1
 8010952:	f7f0 f8f1 	bl	8000b38 <__aeabi_dcmpgt>
 8010956:	2800      	cmp	r0, #0
 8010958:	f040 8296 	bne.w	8010e88 <_dtoa_r+0x990>
 801095c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010960:	4640      	mov	r0, r8
 8010962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010966:	4649      	mov	r1, r9
 8010968:	f7f0 f8c8 	bl	8000afc <__aeabi_dcmplt>
 801096c:	2800      	cmp	r0, #0
 801096e:	f040 8289 	bne.w	8010e84 <_dtoa_r+0x98c>
 8010972:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010976:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010978:	2b00      	cmp	r3, #0
 801097a:	f2c0 814e 	blt.w	8010c1a <_dtoa_r+0x722>
 801097e:	f1bb 0f0e 	cmp.w	fp, #14
 8010982:	f300 814a 	bgt.w	8010c1a <_dtoa_r+0x722>
 8010986:	4b6b      	ldr	r3, [pc, #428]	; (8010b34 <_dtoa_r+0x63c>)
 8010988:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801098c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010992:	2b00      	cmp	r3, #0
 8010994:	f280 80dc 	bge.w	8010b50 <_dtoa_r+0x658>
 8010998:	9b04      	ldr	r3, [sp, #16]
 801099a:	2b00      	cmp	r3, #0
 801099c:	f300 80d8 	bgt.w	8010b50 <_dtoa_r+0x658>
 80109a0:	f040 826f 	bne.w	8010e82 <_dtoa_r+0x98a>
 80109a4:	4b68      	ldr	r3, [pc, #416]	; (8010b48 <_dtoa_r+0x650>)
 80109a6:	2200      	movs	r2, #0
 80109a8:	4640      	mov	r0, r8
 80109aa:	4649      	mov	r1, r9
 80109ac:	f7ef fe34 	bl	8000618 <__aeabi_dmul>
 80109b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80109b4:	f7f0 f8b6 	bl	8000b24 <__aeabi_dcmpge>
 80109b8:	9e04      	ldr	r6, [sp, #16]
 80109ba:	4637      	mov	r7, r6
 80109bc:	2800      	cmp	r0, #0
 80109be:	f040 8245 	bne.w	8010e4c <_dtoa_r+0x954>
 80109c2:	9d00      	ldr	r5, [sp, #0]
 80109c4:	2331      	movs	r3, #49	; 0x31
 80109c6:	f805 3b01 	strb.w	r3, [r5], #1
 80109ca:	f10b 0b01 	add.w	fp, fp, #1
 80109ce:	e241      	b.n	8010e54 <_dtoa_r+0x95c>
 80109d0:	07f2      	lsls	r2, r6, #31
 80109d2:	d505      	bpl.n	80109e0 <_dtoa_r+0x4e8>
 80109d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109d8:	f7ef fe1e 	bl	8000618 <__aeabi_dmul>
 80109dc:	3501      	adds	r5, #1
 80109de:	2301      	movs	r3, #1
 80109e0:	1076      	asrs	r6, r6, #1
 80109e2:	3708      	adds	r7, #8
 80109e4:	e773      	b.n	80108ce <_dtoa_r+0x3d6>
 80109e6:	2502      	movs	r5, #2
 80109e8:	e775      	b.n	80108d6 <_dtoa_r+0x3de>
 80109ea:	9e04      	ldr	r6, [sp, #16]
 80109ec:	465f      	mov	r7, fp
 80109ee:	e792      	b.n	8010916 <_dtoa_r+0x41e>
 80109f0:	9900      	ldr	r1, [sp, #0]
 80109f2:	4b50      	ldr	r3, [pc, #320]	; (8010b34 <_dtoa_r+0x63c>)
 80109f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80109f8:	4431      	add	r1, r6
 80109fa:	9102      	str	r1, [sp, #8]
 80109fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109fe:	eeb0 9a47 	vmov.f32	s18, s14
 8010a02:	eef0 9a67 	vmov.f32	s19, s15
 8010a06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010a0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010a0e:	2900      	cmp	r1, #0
 8010a10:	d044      	beq.n	8010a9c <_dtoa_r+0x5a4>
 8010a12:	494e      	ldr	r1, [pc, #312]	; (8010b4c <_dtoa_r+0x654>)
 8010a14:	2000      	movs	r0, #0
 8010a16:	f7ef ff29 	bl	800086c <__aeabi_ddiv>
 8010a1a:	ec53 2b19 	vmov	r2, r3, d9
 8010a1e:	f7ef fc43 	bl	80002a8 <__aeabi_dsub>
 8010a22:	9d00      	ldr	r5, [sp, #0]
 8010a24:	ec41 0b19 	vmov	d9, r0, r1
 8010a28:	4649      	mov	r1, r9
 8010a2a:	4640      	mov	r0, r8
 8010a2c:	f7f0 f8a4 	bl	8000b78 <__aeabi_d2iz>
 8010a30:	4606      	mov	r6, r0
 8010a32:	f7ef fd87 	bl	8000544 <__aeabi_i2d>
 8010a36:	4602      	mov	r2, r0
 8010a38:	460b      	mov	r3, r1
 8010a3a:	4640      	mov	r0, r8
 8010a3c:	4649      	mov	r1, r9
 8010a3e:	f7ef fc33 	bl	80002a8 <__aeabi_dsub>
 8010a42:	3630      	adds	r6, #48	; 0x30
 8010a44:	f805 6b01 	strb.w	r6, [r5], #1
 8010a48:	ec53 2b19 	vmov	r2, r3, d9
 8010a4c:	4680      	mov	r8, r0
 8010a4e:	4689      	mov	r9, r1
 8010a50:	f7f0 f854 	bl	8000afc <__aeabi_dcmplt>
 8010a54:	2800      	cmp	r0, #0
 8010a56:	d164      	bne.n	8010b22 <_dtoa_r+0x62a>
 8010a58:	4642      	mov	r2, r8
 8010a5a:	464b      	mov	r3, r9
 8010a5c:	4937      	ldr	r1, [pc, #220]	; (8010b3c <_dtoa_r+0x644>)
 8010a5e:	2000      	movs	r0, #0
 8010a60:	f7ef fc22 	bl	80002a8 <__aeabi_dsub>
 8010a64:	ec53 2b19 	vmov	r2, r3, d9
 8010a68:	f7f0 f848 	bl	8000afc <__aeabi_dcmplt>
 8010a6c:	2800      	cmp	r0, #0
 8010a6e:	f040 80b6 	bne.w	8010bde <_dtoa_r+0x6e6>
 8010a72:	9b02      	ldr	r3, [sp, #8]
 8010a74:	429d      	cmp	r5, r3
 8010a76:	f43f af7c 	beq.w	8010972 <_dtoa_r+0x47a>
 8010a7a:	4b31      	ldr	r3, [pc, #196]	; (8010b40 <_dtoa_r+0x648>)
 8010a7c:	ec51 0b19 	vmov	r0, r1, d9
 8010a80:	2200      	movs	r2, #0
 8010a82:	f7ef fdc9 	bl	8000618 <__aeabi_dmul>
 8010a86:	4b2e      	ldr	r3, [pc, #184]	; (8010b40 <_dtoa_r+0x648>)
 8010a88:	ec41 0b19 	vmov	d9, r0, r1
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	4640      	mov	r0, r8
 8010a90:	4649      	mov	r1, r9
 8010a92:	f7ef fdc1 	bl	8000618 <__aeabi_dmul>
 8010a96:	4680      	mov	r8, r0
 8010a98:	4689      	mov	r9, r1
 8010a9a:	e7c5      	b.n	8010a28 <_dtoa_r+0x530>
 8010a9c:	ec51 0b17 	vmov	r0, r1, d7
 8010aa0:	f7ef fdba 	bl	8000618 <__aeabi_dmul>
 8010aa4:	9b02      	ldr	r3, [sp, #8]
 8010aa6:	9d00      	ldr	r5, [sp, #0]
 8010aa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8010aaa:	ec41 0b19 	vmov	d9, r0, r1
 8010aae:	4649      	mov	r1, r9
 8010ab0:	4640      	mov	r0, r8
 8010ab2:	f7f0 f861 	bl	8000b78 <__aeabi_d2iz>
 8010ab6:	4606      	mov	r6, r0
 8010ab8:	f7ef fd44 	bl	8000544 <__aeabi_i2d>
 8010abc:	3630      	adds	r6, #48	; 0x30
 8010abe:	4602      	mov	r2, r0
 8010ac0:	460b      	mov	r3, r1
 8010ac2:	4640      	mov	r0, r8
 8010ac4:	4649      	mov	r1, r9
 8010ac6:	f7ef fbef 	bl	80002a8 <__aeabi_dsub>
 8010aca:	f805 6b01 	strb.w	r6, [r5], #1
 8010ace:	9b02      	ldr	r3, [sp, #8]
 8010ad0:	429d      	cmp	r5, r3
 8010ad2:	4680      	mov	r8, r0
 8010ad4:	4689      	mov	r9, r1
 8010ad6:	f04f 0200 	mov.w	r2, #0
 8010ada:	d124      	bne.n	8010b26 <_dtoa_r+0x62e>
 8010adc:	4b1b      	ldr	r3, [pc, #108]	; (8010b4c <_dtoa_r+0x654>)
 8010ade:	ec51 0b19 	vmov	r0, r1, d9
 8010ae2:	f7ef fbe3 	bl	80002ac <__adddf3>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	460b      	mov	r3, r1
 8010aea:	4640      	mov	r0, r8
 8010aec:	4649      	mov	r1, r9
 8010aee:	f7f0 f823 	bl	8000b38 <__aeabi_dcmpgt>
 8010af2:	2800      	cmp	r0, #0
 8010af4:	d173      	bne.n	8010bde <_dtoa_r+0x6e6>
 8010af6:	ec53 2b19 	vmov	r2, r3, d9
 8010afa:	4914      	ldr	r1, [pc, #80]	; (8010b4c <_dtoa_r+0x654>)
 8010afc:	2000      	movs	r0, #0
 8010afe:	f7ef fbd3 	bl	80002a8 <__aeabi_dsub>
 8010b02:	4602      	mov	r2, r0
 8010b04:	460b      	mov	r3, r1
 8010b06:	4640      	mov	r0, r8
 8010b08:	4649      	mov	r1, r9
 8010b0a:	f7ef fff7 	bl	8000afc <__aeabi_dcmplt>
 8010b0e:	2800      	cmp	r0, #0
 8010b10:	f43f af2f 	beq.w	8010972 <_dtoa_r+0x47a>
 8010b14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010b16:	1e6b      	subs	r3, r5, #1
 8010b18:	930f      	str	r3, [sp, #60]	; 0x3c
 8010b1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010b1e:	2b30      	cmp	r3, #48	; 0x30
 8010b20:	d0f8      	beq.n	8010b14 <_dtoa_r+0x61c>
 8010b22:	46bb      	mov	fp, r7
 8010b24:	e04a      	b.n	8010bbc <_dtoa_r+0x6c4>
 8010b26:	4b06      	ldr	r3, [pc, #24]	; (8010b40 <_dtoa_r+0x648>)
 8010b28:	f7ef fd76 	bl	8000618 <__aeabi_dmul>
 8010b2c:	4680      	mov	r8, r0
 8010b2e:	4689      	mov	r9, r1
 8010b30:	e7bd      	b.n	8010aae <_dtoa_r+0x5b6>
 8010b32:	bf00      	nop
 8010b34:	080158a0 	.word	0x080158a0
 8010b38:	08015878 	.word	0x08015878
 8010b3c:	3ff00000 	.word	0x3ff00000
 8010b40:	40240000 	.word	0x40240000
 8010b44:	401c0000 	.word	0x401c0000
 8010b48:	40140000 	.word	0x40140000
 8010b4c:	3fe00000 	.word	0x3fe00000
 8010b50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010b54:	9d00      	ldr	r5, [sp, #0]
 8010b56:	4642      	mov	r2, r8
 8010b58:	464b      	mov	r3, r9
 8010b5a:	4630      	mov	r0, r6
 8010b5c:	4639      	mov	r1, r7
 8010b5e:	f7ef fe85 	bl	800086c <__aeabi_ddiv>
 8010b62:	f7f0 f809 	bl	8000b78 <__aeabi_d2iz>
 8010b66:	9001      	str	r0, [sp, #4]
 8010b68:	f7ef fcec 	bl	8000544 <__aeabi_i2d>
 8010b6c:	4642      	mov	r2, r8
 8010b6e:	464b      	mov	r3, r9
 8010b70:	f7ef fd52 	bl	8000618 <__aeabi_dmul>
 8010b74:	4602      	mov	r2, r0
 8010b76:	460b      	mov	r3, r1
 8010b78:	4630      	mov	r0, r6
 8010b7a:	4639      	mov	r1, r7
 8010b7c:	f7ef fb94 	bl	80002a8 <__aeabi_dsub>
 8010b80:	9e01      	ldr	r6, [sp, #4]
 8010b82:	9f04      	ldr	r7, [sp, #16]
 8010b84:	3630      	adds	r6, #48	; 0x30
 8010b86:	f805 6b01 	strb.w	r6, [r5], #1
 8010b8a:	9e00      	ldr	r6, [sp, #0]
 8010b8c:	1bae      	subs	r6, r5, r6
 8010b8e:	42b7      	cmp	r7, r6
 8010b90:	4602      	mov	r2, r0
 8010b92:	460b      	mov	r3, r1
 8010b94:	d134      	bne.n	8010c00 <_dtoa_r+0x708>
 8010b96:	f7ef fb89 	bl	80002ac <__adddf3>
 8010b9a:	4642      	mov	r2, r8
 8010b9c:	464b      	mov	r3, r9
 8010b9e:	4606      	mov	r6, r0
 8010ba0:	460f      	mov	r7, r1
 8010ba2:	f7ef ffc9 	bl	8000b38 <__aeabi_dcmpgt>
 8010ba6:	b9c8      	cbnz	r0, 8010bdc <_dtoa_r+0x6e4>
 8010ba8:	4642      	mov	r2, r8
 8010baa:	464b      	mov	r3, r9
 8010bac:	4630      	mov	r0, r6
 8010bae:	4639      	mov	r1, r7
 8010bb0:	f7ef ff9a 	bl	8000ae8 <__aeabi_dcmpeq>
 8010bb4:	b110      	cbz	r0, 8010bbc <_dtoa_r+0x6c4>
 8010bb6:	9b01      	ldr	r3, [sp, #4]
 8010bb8:	07db      	lsls	r3, r3, #31
 8010bba:	d40f      	bmi.n	8010bdc <_dtoa_r+0x6e4>
 8010bbc:	4651      	mov	r1, sl
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	f000 fbcc 	bl	801135c <_Bfree>
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010bc8:	702b      	strb	r3, [r5, #0]
 8010bca:	f10b 0301 	add.w	r3, fp, #1
 8010bce:	6013      	str	r3, [r2, #0]
 8010bd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	f43f ace2 	beq.w	801059c <_dtoa_r+0xa4>
 8010bd8:	601d      	str	r5, [r3, #0]
 8010bda:	e4df      	b.n	801059c <_dtoa_r+0xa4>
 8010bdc:	465f      	mov	r7, fp
 8010bde:	462b      	mov	r3, r5
 8010be0:	461d      	mov	r5, r3
 8010be2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010be6:	2a39      	cmp	r2, #57	; 0x39
 8010be8:	d106      	bne.n	8010bf8 <_dtoa_r+0x700>
 8010bea:	9a00      	ldr	r2, [sp, #0]
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d1f7      	bne.n	8010be0 <_dtoa_r+0x6e8>
 8010bf0:	9900      	ldr	r1, [sp, #0]
 8010bf2:	2230      	movs	r2, #48	; 0x30
 8010bf4:	3701      	adds	r7, #1
 8010bf6:	700a      	strb	r2, [r1, #0]
 8010bf8:	781a      	ldrb	r2, [r3, #0]
 8010bfa:	3201      	adds	r2, #1
 8010bfc:	701a      	strb	r2, [r3, #0]
 8010bfe:	e790      	b.n	8010b22 <_dtoa_r+0x62a>
 8010c00:	4ba3      	ldr	r3, [pc, #652]	; (8010e90 <_dtoa_r+0x998>)
 8010c02:	2200      	movs	r2, #0
 8010c04:	f7ef fd08 	bl	8000618 <__aeabi_dmul>
 8010c08:	2200      	movs	r2, #0
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	4606      	mov	r6, r0
 8010c0e:	460f      	mov	r7, r1
 8010c10:	f7ef ff6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8010c14:	2800      	cmp	r0, #0
 8010c16:	d09e      	beq.n	8010b56 <_dtoa_r+0x65e>
 8010c18:	e7d0      	b.n	8010bbc <_dtoa_r+0x6c4>
 8010c1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c1c:	2a00      	cmp	r2, #0
 8010c1e:	f000 80ca 	beq.w	8010db6 <_dtoa_r+0x8be>
 8010c22:	9a07      	ldr	r2, [sp, #28]
 8010c24:	2a01      	cmp	r2, #1
 8010c26:	f300 80ad 	bgt.w	8010d84 <_dtoa_r+0x88c>
 8010c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c2c:	2a00      	cmp	r2, #0
 8010c2e:	f000 80a5 	beq.w	8010d7c <_dtoa_r+0x884>
 8010c32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010c36:	9e08      	ldr	r6, [sp, #32]
 8010c38:	9d05      	ldr	r5, [sp, #20]
 8010c3a:	9a05      	ldr	r2, [sp, #20]
 8010c3c:	441a      	add	r2, r3
 8010c3e:	9205      	str	r2, [sp, #20]
 8010c40:	9a06      	ldr	r2, [sp, #24]
 8010c42:	2101      	movs	r1, #1
 8010c44:	441a      	add	r2, r3
 8010c46:	4620      	mov	r0, r4
 8010c48:	9206      	str	r2, [sp, #24]
 8010c4a:	f000 fc87 	bl	801155c <__i2b>
 8010c4e:	4607      	mov	r7, r0
 8010c50:	b165      	cbz	r5, 8010c6c <_dtoa_r+0x774>
 8010c52:	9b06      	ldr	r3, [sp, #24]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	dd09      	ble.n	8010c6c <_dtoa_r+0x774>
 8010c58:	42ab      	cmp	r3, r5
 8010c5a:	9a05      	ldr	r2, [sp, #20]
 8010c5c:	bfa8      	it	ge
 8010c5e:	462b      	movge	r3, r5
 8010c60:	1ad2      	subs	r2, r2, r3
 8010c62:	9205      	str	r2, [sp, #20]
 8010c64:	9a06      	ldr	r2, [sp, #24]
 8010c66:	1aed      	subs	r5, r5, r3
 8010c68:	1ad3      	subs	r3, r2, r3
 8010c6a:	9306      	str	r3, [sp, #24]
 8010c6c:	9b08      	ldr	r3, [sp, #32]
 8010c6e:	b1f3      	cbz	r3, 8010cae <_dtoa_r+0x7b6>
 8010c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	f000 80a3 	beq.w	8010dbe <_dtoa_r+0x8c6>
 8010c78:	2e00      	cmp	r6, #0
 8010c7a:	dd10      	ble.n	8010c9e <_dtoa_r+0x7a6>
 8010c7c:	4639      	mov	r1, r7
 8010c7e:	4632      	mov	r2, r6
 8010c80:	4620      	mov	r0, r4
 8010c82:	f000 fd2b 	bl	80116dc <__pow5mult>
 8010c86:	4652      	mov	r2, sl
 8010c88:	4601      	mov	r1, r0
 8010c8a:	4607      	mov	r7, r0
 8010c8c:	4620      	mov	r0, r4
 8010c8e:	f000 fc7b 	bl	8011588 <__multiply>
 8010c92:	4651      	mov	r1, sl
 8010c94:	4680      	mov	r8, r0
 8010c96:	4620      	mov	r0, r4
 8010c98:	f000 fb60 	bl	801135c <_Bfree>
 8010c9c:	46c2      	mov	sl, r8
 8010c9e:	9b08      	ldr	r3, [sp, #32]
 8010ca0:	1b9a      	subs	r2, r3, r6
 8010ca2:	d004      	beq.n	8010cae <_dtoa_r+0x7b6>
 8010ca4:	4651      	mov	r1, sl
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	f000 fd18 	bl	80116dc <__pow5mult>
 8010cac:	4682      	mov	sl, r0
 8010cae:	2101      	movs	r1, #1
 8010cb0:	4620      	mov	r0, r4
 8010cb2:	f000 fc53 	bl	801155c <__i2b>
 8010cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	4606      	mov	r6, r0
 8010cbc:	f340 8081 	ble.w	8010dc2 <_dtoa_r+0x8ca>
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	4601      	mov	r1, r0
 8010cc4:	4620      	mov	r0, r4
 8010cc6:	f000 fd09 	bl	80116dc <__pow5mult>
 8010cca:	9b07      	ldr	r3, [sp, #28]
 8010ccc:	2b01      	cmp	r3, #1
 8010cce:	4606      	mov	r6, r0
 8010cd0:	dd7a      	ble.n	8010dc8 <_dtoa_r+0x8d0>
 8010cd2:	f04f 0800 	mov.w	r8, #0
 8010cd6:	6933      	ldr	r3, [r6, #16]
 8010cd8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010cdc:	6918      	ldr	r0, [r3, #16]
 8010cde:	f000 fbef 	bl	80114c0 <__hi0bits>
 8010ce2:	f1c0 0020 	rsb	r0, r0, #32
 8010ce6:	9b06      	ldr	r3, [sp, #24]
 8010ce8:	4418      	add	r0, r3
 8010cea:	f010 001f 	ands.w	r0, r0, #31
 8010cee:	f000 8094 	beq.w	8010e1a <_dtoa_r+0x922>
 8010cf2:	f1c0 0320 	rsb	r3, r0, #32
 8010cf6:	2b04      	cmp	r3, #4
 8010cf8:	f340 8085 	ble.w	8010e06 <_dtoa_r+0x90e>
 8010cfc:	9b05      	ldr	r3, [sp, #20]
 8010cfe:	f1c0 001c 	rsb	r0, r0, #28
 8010d02:	4403      	add	r3, r0
 8010d04:	9305      	str	r3, [sp, #20]
 8010d06:	9b06      	ldr	r3, [sp, #24]
 8010d08:	4403      	add	r3, r0
 8010d0a:	4405      	add	r5, r0
 8010d0c:	9306      	str	r3, [sp, #24]
 8010d0e:	9b05      	ldr	r3, [sp, #20]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	dd05      	ble.n	8010d20 <_dtoa_r+0x828>
 8010d14:	4651      	mov	r1, sl
 8010d16:	461a      	mov	r2, r3
 8010d18:	4620      	mov	r0, r4
 8010d1a:	f000 fd39 	bl	8011790 <__lshift>
 8010d1e:	4682      	mov	sl, r0
 8010d20:	9b06      	ldr	r3, [sp, #24]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	dd05      	ble.n	8010d32 <_dtoa_r+0x83a>
 8010d26:	4631      	mov	r1, r6
 8010d28:	461a      	mov	r2, r3
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	f000 fd30 	bl	8011790 <__lshift>
 8010d30:	4606      	mov	r6, r0
 8010d32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d072      	beq.n	8010e1e <_dtoa_r+0x926>
 8010d38:	4631      	mov	r1, r6
 8010d3a:	4650      	mov	r0, sl
 8010d3c:	f000 fd94 	bl	8011868 <__mcmp>
 8010d40:	2800      	cmp	r0, #0
 8010d42:	da6c      	bge.n	8010e1e <_dtoa_r+0x926>
 8010d44:	2300      	movs	r3, #0
 8010d46:	4651      	mov	r1, sl
 8010d48:	220a      	movs	r2, #10
 8010d4a:	4620      	mov	r0, r4
 8010d4c:	f000 fb28 	bl	80113a0 <__multadd>
 8010d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010d56:	4682      	mov	sl, r0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	f000 81b0 	beq.w	80110be <_dtoa_r+0xbc6>
 8010d5e:	2300      	movs	r3, #0
 8010d60:	4639      	mov	r1, r7
 8010d62:	220a      	movs	r2, #10
 8010d64:	4620      	mov	r0, r4
 8010d66:	f000 fb1b 	bl	80113a0 <__multadd>
 8010d6a:	9b01      	ldr	r3, [sp, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	4607      	mov	r7, r0
 8010d70:	f300 8096 	bgt.w	8010ea0 <_dtoa_r+0x9a8>
 8010d74:	9b07      	ldr	r3, [sp, #28]
 8010d76:	2b02      	cmp	r3, #2
 8010d78:	dc59      	bgt.n	8010e2e <_dtoa_r+0x936>
 8010d7a:	e091      	b.n	8010ea0 <_dtoa_r+0x9a8>
 8010d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010d7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010d82:	e758      	b.n	8010c36 <_dtoa_r+0x73e>
 8010d84:	9b04      	ldr	r3, [sp, #16]
 8010d86:	1e5e      	subs	r6, r3, #1
 8010d88:	9b08      	ldr	r3, [sp, #32]
 8010d8a:	42b3      	cmp	r3, r6
 8010d8c:	bfbf      	itttt	lt
 8010d8e:	9b08      	ldrlt	r3, [sp, #32]
 8010d90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8010d92:	9608      	strlt	r6, [sp, #32]
 8010d94:	1af3      	sublt	r3, r6, r3
 8010d96:	bfb4      	ite	lt
 8010d98:	18d2      	addlt	r2, r2, r3
 8010d9a:	1b9e      	subge	r6, r3, r6
 8010d9c:	9b04      	ldr	r3, [sp, #16]
 8010d9e:	bfbc      	itt	lt
 8010da0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8010da2:	2600      	movlt	r6, #0
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	bfb7      	itett	lt
 8010da8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010dac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010db0:	1a9d      	sublt	r5, r3, r2
 8010db2:	2300      	movlt	r3, #0
 8010db4:	e741      	b.n	8010c3a <_dtoa_r+0x742>
 8010db6:	9e08      	ldr	r6, [sp, #32]
 8010db8:	9d05      	ldr	r5, [sp, #20]
 8010dba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010dbc:	e748      	b.n	8010c50 <_dtoa_r+0x758>
 8010dbe:	9a08      	ldr	r2, [sp, #32]
 8010dc0:	e770      	b.n	8010ca4 <_dtoa_r+0x7ac>
 8010dc2:	9b07      	ldr	r3, [sp, #28]
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	dc19      	bgt.n	8010dfc <_dtoa_r+0x904>
 8010dc8:	9b02      	ldr	r3, [sp, #8]
 8010dca:	b9bb      	cbnz	r3, 8010dfc <_dtoa_r+0x904>
 8010dcc:	9b03      	ldr	r3, [sp, #12]
 8010dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010dd2:	b99b      	cbnz	r3, 8010dfc <_dtoa_r+0x904>
 8010dd4:	9b03      	ldr	r3, [sp, #12]
 8010dd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010dda:	0d1b      	lsrs	r3, r3, #20
 8010ddc:	051b      	lsls	r3, r3, #20
 8010dde:	b183      	cbz	r3, 8010e02 <_dtoa_r+0x90a>
 8010de0:	9b05      	ldr	r3, [sp, #20]
 8010de2:	3301      	adds	r3, #1
 8010de4:	9305      	str	r3, [sp, #20]
 8010de6:	9b06      	ldr	r3, [sp, #24]
 8010de8:	3301      	adds	r3, #1
 8010dea:	9306      	str	r3, [sp, #24]
 8010dec:	f04f 0801 	mov.w	r8, #1
 8010df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f47f af6f 	bne.w	8010cd6 <_dtoa_r+0x7de>
 8010df8:	2001      	movs	r0, #1
 8010dfa:	e774      	b.n	8010ce6 <_dtoa_r+0x7ee>
 8010dfc:	f04f 0800 	mov.w	r8, #0
 8010e00:	e7f6      	b.n	8010df0 <_dtoa_r+0x8f8>
 8010e02:	4698      	mov	r8, r3
 8010e04:	e7f4      	b.n	8010df0 <_dtoa_r+0x8f8>
 8010e06:	d082      	beq.n	8010d0e <_dtoa_r+0x816>
 8010e08:	9a05      	ldr	r2, [sp, #20]
 8010e0a:	331c      	adds	r3, #28
 8010e0c:	441a      	add	r2, r3
 8010e0e:	9205      	str	r2, [sp, #20]
 8010e10:	9a06      	ldr	r2, [sp, #24]
 8010e12:	441a      	add	r2, r3
 8010e14:	441d      	add	r5, r3
 8010e16:	9206      	str	r2, [sp, #24]
 8010e18:	e779      	b.n	8010d0e <_dtoa_r+0x816>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	e7f4      	b.n	8010e08 <_dtoa_r+0x910>
 8010e1e:	9b04      	ldr	r3, [sp, #16]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	dc37      	bgt.n	8010e94 <_dtoa_r+0x99c>
 8010e24:	9b07      	ldr	r3, [sp, #28]
 8010e26:	2b02      	cmp	r3, #2
 8010e28:	dd34      	ble.n	8010e94 <_dtoa_r+0x99c>
 8010e2a:	9b04      	ldr	r3, [sp, #16]
 8010e2c:	9301      	str	r3, [sp, #4]
 8010e2e:	9b01      	ldr	r3, [sp, #4]
 8010e30:	b963      	cbnz	r3, 8010e4c <_dtoa_r+0x954>
 8010e32:	4631      	mov	r1, r6
 8010e34:	2205      	movs	r2, #5
 8010e36:	4620      	mov	r0, r4
 8010e38:	f000 fab2 	bl	80113a0 <__multadd>
 8010e3c:	4601      	mov	r1, r0
 8010e3e:	4606      	mov	r6, r0
 8010e40:	4650      	mov	r0, sl
 8010e42:	f000 fd11 	bl	8011868 <__mcmp>
 8010e46:	2800      	cmp	r0, #0
 8010e48:	f73f adbb 	bgt.w	80109c2 <_dtoa_r+0x4ca>
 8010e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e4e:	9d00      	ldr	r5, [sp, #0]
 8010e50:	ea6f 0b03 	mvn.w	fp, r3
 8010e54:	f04f 0800 	mov.w	r8, #0
 8010e58:	4631      	mov	r1, r6
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	f000 fa7e 	bl	801135c <_Bfree>
 8010e60:	2f00      	cmp	r7, #0
 8010e62:	f43f aeab 	beq.w	8010bbc <_dtoa_r+0x6c4>
 8010e66:	f1b8 0f00 	cmp.w	r8, #0
 8010e6a:	d005      	beq.n	8010e78 <_dtoa_r+0x980>
 8010e6c:	45b8      	cmp	r8, r7
 8010e6e:	d003      	beq.n	8010e78 <_dtoa_r+0x980>
 8010e70:	4641      	mov	r1, r8
 8010e72:	4620      	mov	r0, r4
 8010e74:	f000 fa72 	bl	801135c <_Bfree>
 8010e78:	4639      	mov	r1, r7
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	f000 fa6e 	bl	801135c <_Bfree>
 8010e80:	e69c      	b.n	8010bbc <_dtoa_r+0x6c4>
 8010e82:	2600      	movs	r6, #0
 8010e84:	4637      	mov	r7, r6
 8010e86:	e7e1      	b.n	8010e4c <_dtoa_r+0x954>
 8010e88:	46bb      	mov	fp, r7
 8010e8a:	4637      	mov	r7, r6
 8010e8c:	e599      	b.n	80109c2 <_dtoa_r+0x4ca>
 8010e8e:	bf00      	nop
 8010e90:	40240000 	.word	0x40240000
 8010e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	f000 80c8 	beq.w	801102c <_dtoa_r+0xb34>
 8010e9c:	9b04      	ldr	r3, [sp, #16]
 8010e9e:	9301      	str	r3, [sp, #4]
 8010ea0:	2d00      	cmp	r5, #0
 8010ea2:	dd05      	ble.n	8010eb0 <_dtoa_r+0x9b8>
 8010ea4:	4639      	mov	r1, r7
 8010ea6:	462a      	mov	r2, r5
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	f000 fc71 	bl	8011790 <__lshift>
 8010eae:	4607      	mov	r7, r0
 8010eb0:	f1b8 0f00 	cmp.w	r8, #0
 8010eb4:	d05b      	beq.n	8010f6e <_dtoa_r+0xa76>
 8010eb6:	6879      	ldr	r1, [r7, #4]
 8010eb8:	4620      	mov	r0, r4
 8010eba:	f000 fa0f 	bl	80112dc <_Balloc>
 8010ebe:	4605      	mov	r5, r0
 8010ec0:	b928      	cbnz	r0, 8010ece <_dtoa_r+0x9d6>
 8010ec2:	4b83      	ldr	r3, [pc, #524]	; (80110d0 <_dtoa_r+0xbd8>)
 8010ec4:	4602      	mov	r2, r0
 8010ec6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010eca:	f7ff bb2e 	b.w	801052a <_dtoa_r+0x32>
 8010ece:	693a      	ldr	r2, [r7, #16]
 8010ed0:	3202      	adds	r2, #2
 8010ed2:	0092      	lsls	r2, r2, #2
 8010ed4:	f107 010c 	add.w	r1, r7, #12
 8010ed8:	300c      	adds	r0, #12
 8010eda:	f7ff fa71 	bl	80103c0 <memcpy>
 8010ede:	2201      	movs	r2, #1
 8010ee0:	4629      	mov	r1, r5
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f000 fc54 	bl	8011790 <__lshift>
 8010ee8:	9b00      	ldr	r3, [sp, #0]
 8010eea:	3301      	adds	r3, #1
 8010eec:	9304      	str	r3, [sp, #16]
 8010eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ef2:	4413      	add	r3, r2
 8010ef4:	9308      	str	r3, [sp, #32]
 8010ef6:	9b02      	ldr	r3, [sp, #8]
 8010ef8:	f003 0301 	and.w	r3, r3, #1
 8010efc:	46b8      	mov	r8, r7
 8010efe:	9306      	str	r3, [sp, #24]
 8010f00:	4607      	mov	r7, r0
 8010f02:	9b04      	ldr	r3, [sp, #16]
 8010f04:	4631      	mov	r1, r6
 8010f06:	3b01      	subs	r3, #1
 8010f08:	4650      	mov	r0, sl
 8010f0a:	9301      	str	r3, [sp, #4]
 8010f0c:	f7ff fa6c 	bl	80103e8 <quorem>
 8010f10:	4641      	mov	r1, r8
 8010f12:	9002      	str	r0, [sp, #8]
 8010f14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010f18:	4650      	mov	r0, sl
 8010f1a:	f000 fca5 	bl	8011868 <__mcmp>
 8010f1e:	463a      	mov	r2, r7
 8010f20:	9005      	str	r0, [sp, #20]
 8010f22:	4631      	mov	r1, r6
 8010f24:	4620      	mov	r0, r4
 8010f26:	f000 fcbb 	bl	80118a0 <__mdiff>
 8010f2a:	68c2      	ldr	r2, [r0, #12]
 8010f2c:	4605      	mov	r5, r0
 8010f2e:	bb02      	cbnz	r2, 8010f72 <_dtoa_r+0xa7a>
 8010f30:	4601      	mov	r1, r0
 8010f32:	4650      	mov	r0, sl
 8010f34:	f000 fc98 	bl	8011868 <__mcmp>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	4629      	mov	r1, r5
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8010f40:	f000 fa0c 	bl	801135c <_Bfree>
 8010f44:	9b07      	ldr	r3, [sp, #28]
 8010f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f48:	9d04      	ldr	r5, [sp, #16]
 8010f4a:	ea43 0102 	orr.w	r1, r3, r2
 8010f4e:	9b06      	ldr	r3, [sp, #24]
 8010f50:	4319      	orrs	r1, r3
 8010f52:	d110      	bne.n	8010f76 <_dtoa_r+0xa7e>
 8010f54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010f58:	d029      	beq.n	8010fae <_dtoa_r+0xab6>
 8010f5a:	9b05      	ldr	r3, [sp, #20]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	dd02      	ble.n	8010f66 <_dtoa_r+0xa6e>
 8010f60:	9b02      	ldr	r3, [sp, #8]
 8010f62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8010f66:	9b01      	ldr	r3, [sp, #4]
 8010f68:	f883 9000 	strb.w	r9, [r3]
 8010f6c:	e774      	b.n	8010e58 <_dtoa_r+0x960>
 8010f6e:	4638      	mov	r0, r7
 8010f70:	e7ba      	b.n	8010ee8 <_dtoa_r+0x9f0>
 8010f72:	2201      	movs	r2, #1
 8010f74:	e7e1      	b.n	8010f3a <_dtoa_r+0xa42>
 8010f76:	9b05      	ldr	r3, [sp, #20]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	db04      	blt.n	8010f86 <_dtoa_r+0xa8e>
 8010f7c:	9907      	ldr	r1, [sp, #28]
 8010f7e:	430b      	orrs	r3, r1
 8010f80:	9906      	ldr	r1, [sp, #24]
 8010f82:	430b      	orrs	r3, r1
 8010f84:	d120      	bne.n	8010fc8 <_dtoa_r+0xad0>
 8010f86:	2a00      	cmp	r2, #0
 8010f88:	dded      	ble.n	8010f66 <_dtoa_r+0xa6e>
 8010f8a:	4651      	mov	r1, sl
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	4620      	mov	r0, r4
 8010f90:	f000 fbfe 	bl	8011790 <__lshift>
 8010f94:	4631      	mov	r1, r6
 8010f96:	4682      	mov	sl, r0
 8010f98:	f000 fc66 	bl	8011868 <__mcmp>
 8010f9c:	2800      	cmp	r0, #0
 8010f9e:	dc03      	bgt.n	8010fa8 <_dtoa_r+0xab0>
 8010fa0:	d1e1      	bne.n	8010f66 <_dtoa_r+0xa6e>
 8010fa2:	f019 0f01 	tst.w	r9, #1
 8010fa6:	d0de      	beq.n	8010f66 <_dtoa_r+0xa6e>
 8010fa8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010fac:	d1d8      	bne.n	8010f60 <_dtoa_r+0xa68>
 8010fae:	9a01      	ldr	r2, [sp, #4]
 8010fb0:	2339      	movs	r3, #57	; 0x39
 8010fb2:	7013      	strb	r3, [r2, #0]
 8010fb4:	462b      	mov	r3, r5
 8010fb6:	461d      	mov	r5, r3
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010fbe:	2a39      	cmp	r2, #57	; 0x39
 8010fc0:	d06c      	beq.n	801109c <_dtoa_r+0xba4>
 8010fc2:	3201      	adds	r2, #1
 8010fc4:	701a      	strb	r2, [r3, #0]
 8010fc6:	e747      	b.n	8010e58 <_dtoa_r+0x960>
 8010fc8:	2a00      	cmp	r2, #0
 8010fca:	dd07      	ble.n	8010fdc <_dtoa_r+0xae4>
 8010fcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010fd0:	d0ed      	beq.n	8010fae <_dtoa_r+0xab6>
 8010fd2:	9a01      	ldr	r2, [sp, #4]
 8010fd4:	f109 0301 	add.w	r3, r9, #1
 8010fd8:	7013      	strb	r3, [r2, #0]
 8010fda:	e73d      	b.n	8010e58 <_dtoa_r+0x960>
 8010fdc:	9b04      	ldr	r3, [sp, #16]
 8010fde:	9a08      	ldr	r2, [sp, #32]
 8010fe0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d043      	beq.n	8011070 <_dtoa_r+0xb78>
 8010fe8:	4651      	mov	r1, sl
 8010fea:	2300      	movs	r3, #0
 8010fec:	220a      	movs	r2, #10
 8010fee:	4620      	mov	r0, r4
 8010ff0:	f000 f9d6 	bl	80113a0 <__multadd>
 8010ff4:	45b8      	cmp	r8, r7
 8010ff6:	4682      	mov	sl, r0
 8010ff8:	f04f 0300 	mov.w	r3, #0
 8010ffc:	f04f 020a 	mov.w	r2, #10
 8011000:	4641      	mov	r1, r8
 8011002:	4620      	mov	r0, r4
 8011004:	d107      	bne.n	8011016 <_dtoa_r+0xb1e>
 8011006:	f000 f9cb 	bl	80113a0 <__multadd>
 801100a:	4680      	mov	r8, r0
 801100c:	4607      	mov	r7, r0
 801100e:	9b04      	ldr	r3, [sp, #16]
 8011010:	3301      	adds	r3, #1
 8011012:	9304      	str	r3, [sp, #16]
 8011014:	e775      	b.n	8010f02 <_dtoa_r+0xa0a>
 8011016:	f000 f9c3 	bl	80113a0 <__multadd>
 801101a:	4639      	mov	r1, r7
 801101c:	4680      	mov	r8, r0
 801101e:	2300      	movs	r3, #0
 8011020:	220a      	movs	r2, #10
 8011022:	4620      	mov	r0, r4
 8011024:	f000 f9bc 	bl	80113a0 <__multadd>
 8011028:	4607      	mov	r7, r0
 801102a:	e7f0      	b.n	801100e <_dtoa_r+0xb16>
 801102c:	9b04      	ldr	r3, [sp, #16]
 801102e:	9301      	str	r3, [sp, #4]
 8011030:	9d00      	ldr	r5, [sp, #0]
 8011032:	4631      	mov	r1, r6
 8011034:	4650      	mov	r0, sl
 8011036:	f7ff f9d7 	bl	80103e8 <quorem>
 801103a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801103e:	9b00      	ldr	r3, [sp, #0]
 8011040:	f805 9b01 	strb.w	r9, [r5], #1
 8011044:	1aea      	subs	r2, r5, r3
 8011046:	9b01      	ldr	r3, [sp, #4]
 8011048:	4293      	cmp	r3, r2
 801104a:	dd07      	ble.n	801105c <_dtoa_r+0xb64>
 801104c:	4651      	mov	r1, sl
 801104e:	2300      	movs	r3, #0
 8011050:	220a      	movs	r2, #10
 8011052:	4620      	mov	r0, r4
 8011054:	f000 f9a4 	bl	80113a0 <__multadd>
 8011058:	4682      	mov	sl, r0
 801105a:	e7ea      	b.n	8011032 <_dtoa_r+0xb3a>
 801105c:	9b01      	ldr	r3, [sp, #4]
 801105e:	2b00      	cmp	r3, #0
 8011060:	bfc8      	it	gt
 8011062:	461d      	movgt	r5, r3
 8011064:	9b00      	ldr	r3, [sp, #0]
 8011066:	bfd8      	it	le
 8011068:	2501      	movle	r5, #1
 801106a:	441d      	add	r5, r3
 801106c:	f04f 0800 	mov.w	r8, #0
 8011070:	4651      	mov	r1, sl
 8011072:	2201      	movs	r2, #1
 8011074:	4620      	mov	r0, r4
 8011076:	f000 fb8b 	bl	8011790 <__lshift>
 801107a:	4631      	mov	r1, r6
 801107c:	4682      	mov	sl, r0
 801107e:	f000 fbf3 	bl	8011868 <__mcmp>
 8011082:	2800      	cmp	r0, #0
 8011084:	dc96      	bgt.n	8010fb4 <_dtoa_r+0xabc>
 8011086:	d102      	bne.n	801108e <_dtoa_r+0xb96>
 8011088:	f019 0f01 	tst.w	r9, #1
 801108c:	d192      	bne.n	8010fb4 <_dtoa_r+0xabc>
 801108e:	462b      	mov	r3, r5
 8011090:	461d      	mov	r5, r3
 8011092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011096:	2a30      	cmp	r2, #48	; 0x30
 8011098:	d0fa      	beq.n	8011090 <_dtoa_r+0xb98>
 801109a:	e6dd      	b.n	8010e58 <_dtoa_r+0x960>
 801109c:	9a00      	ldr	r2, [sp, #0]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d189      	bne.n	8010fb6 <_dtoa_r+0xabe>
 80110a2:	f10b 0b01 	add.w	fp, fp, #1
 80110a6:	2331      	movs	r3, #49	; 0x31
 80110a8:	e796      	b.n	8010fd8 <_dtoa_r+0xae0>
 80110aa:	4b0a      	ldr	r3, [pc, #40]	; (80110d4 <_dtoa_r+0xbdc>)
 80110ac:	f7ff ba99 	b.w	80105e2 <_dtoa_r+0xea>
 80110b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	f47f aa6d 	bne.w	8010592 <_dtoa_r+0x9a>
 80110b8:	4b07      	ldr	r3, [pc, #28]	; (80110d8 <_dtoa_r+0xbe0>)
 80110ba:	f7ff ba92 	b.w	80105e2 <_dtoa_r+0xea>
 80110be:	9b01      	ldr	r3, [sp, #4]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	dcb5      	bgt.n	8011030 <_dtoa_r+0xb38>
 80110c4:	9b07      	ldr	r3, [sp, #28]
 80110c6:	2b02      	cmp	r3, #2
 80110c8:	f73f aeb1 	bgt.w	8010e2e <_dtoa_r+0x936>
 80110cc:	e7b0      	b.n	8011030 <_dtoa_r+0xb38>
 80110ce:	bf00      	nop
 80110d0:	0801580d 	.word	0x0801580d
 80110d4:	08015768 	.word	0x08015768
 80110d8:	08015791 	.word	0x08015791

080110dc <_free_r>:
 80110dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80110de:	2900      	cmp	r1, #0
 80110e0:	d044      	beq.n	801116c <_free_r+0x90>
 80110e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110e6:	9001      	str	r0, [sp, #4]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	f1a1 0404 	sub.w	r4, r1, #4
 80110ee:	bfb8      	it	lt
 80110f0:	18e4      	addlt	r4, r4, r3
 80110f2:	f000 f8e7 	bl	80112c4 <__malloc_lock>
 80110f6:	4a1e      	ldr	r2, [pc, #120]	; (8011170 <_free_r+0x94>)
 80110f8:	9801      	ldr	r0, [sp, #4]
 80110fa:	6813      	ldr	r3, [r2, #0]
 80110fc:	b933      	cbnz	r3, 801110c <_free_r+0x30>
 80110fe:	6063      	str	r3, [r4, #4]
 8011100:	6014      	str	r4, [r2, #0]
 8011102:	b003      	add	sp, #12
 8011104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011108:	f000 b8e2 	b.w	80112d0 <__malloc_unlock>
 801110c:	42a3      	cmp	r3, r4
 801110e:	d908      	bls.n	8011122 <_free_r+0x46>
 8011110:	6825      	ldr	r5, [r4, #0]
 8011112:	1961      	adds	r1, r4, r5
 8011114:	428b      	cmp	r3, r1
 8011116:	bf01      	itttt	eq
 8011118:	6819      	ldreq	r1, [r3, #0]
 801111a:	685b      	ldreq	r3, [r3, #4]
 801111c:	1949      	addeq	r1, r1, r5
 801111e:	6021      	streq	r1, [r4, #0]
 8011120:	e7ed      	b.n	80110fe <_free_r+0x22>
 8011122:	461a      	mov	r2, r3
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	b10b      	cbz	r3, 801112c <_free_r+0x50>
 8011128:	42a3      	cmp	r3, r4
 801112a:	d9fa      	bls.n	8011122 <_free_r+0x46>
 801112c:	6811      	ldr	r1, [r2, #0]
 801112e:	1855      	adds	r5, r2, r1
 8011130:	42a5      	cmp	r5, r4
 8011132:	d10b      	bne.n	801114c <_free_r+0x70>
 8011134:	6824      	ldr	r4, [r4, #0]
 8011136:	4421      	add	r1, r4
 8011138:	1854      	adds	r4, r2, r1
 801113a:	42a3      	cmp	r3, r4
 801113c:	6011      	str	r1, [r2, #0]
 801113e:	d1e0      	bne.n	8011102 <_free_r+0x26>
 8011140:	681c      	ldr	r4, [r3, #0]
 8011142:	685b      	ldr	r3, [r3, #4]
 8011144:	6053      	str	r3, [r2, #4]
 8011146:	440c      	add	r4, r1
 8011148:	6014      	str	r4, [r2, #0]
 801114a:	e7da      	b.n	8011102 <_free_r+0x26>
 801114c:	d902      	bls.n	8011154 <_free_r+0x78>
 801114e:	230c      	movs	r3, #12
 8011150:	6003      	str	r3, [r0, #0]
 8011152:	e7d6      	b.n	8011102 <_free_r+0x26>
 8011154:	6825      	ldr	r5, [r4, #0]
 8011156:	1961      	adds	r1, r4, r5
 8011158:	428b      	cmp	r3, r1
 801115a:	bf04      	itt	eq
 801115c:	6819      	ldreq	r1, [r3, #0]
 801115e:	685b      	ldreq	r3, [r3, #4]
 8011160:	6063      	str	r3, [r4, #4]
 8011162:	bf04      	itt	eq
 8011164:	1949      	addeq	r1, r1, r5
 8011166:	6021      	streq	r1, [r4, #0]
 8011168:	6054      	str	r4, [r2, #4]
 801116a:	e7ca      	b.n	8011102 <_free_r+0x26>
 801116c:	b003      	add	sp, #12
 801116e:	bd30      	pop	{r4, r5, pc}
 8011170:	20006ce0 	.word	0x20006ce0

08011174 <malloc>:
 8011174:	4b02      	ldr	r3, [pc, #8]	; (8011180 <malloc+0xc>)
 8011176:	4601      	mov	r1, r0
 8011178:	6818      	ldr	r0, [r3, #0]
 801117a:	f000 b823 	b.w	80111c4 <_malloc_r>
 801117e:	bf00      	nop
 8011180:	200001d4 	.word	0x200001d4

08011184 <sbrk_aligned>:
 8011184:	b570      	push	{r4, r5, r6, lr}
 8011186:	4e0e      	ldr	r6, [pc, #56]	; (80111c0 <sbrk_aligned+0x3c>)
 8011188:	460c      	mov	r4, r1
 801118a:	6831      	ldr	r1, [r6, #0]
 801118c:	4605      	mov	r5, r0
 801118e:	b911      	cbnz	r1, 8011196 <sbrk_aligned+0x12>
 8011190:	f001 fe1a 	bl	8012dc8 <_sbrk_r>
 8011194:	6030      	str	r0, [r6, #0]
 8011196:	4621      	mov	r1, r4
 8011198:	4628      	mov	r0, r5
 801119a:	f001 fe15 	bl	8012dc8 <_sbrk_r>
 801119e:	1c43      	adds	r3, r0, #1
 80111a0:	d00a      	beq.n	80111b8 <sbrk_aligned+0x34>
 80111a2:	1cc4      	adds	r4, r0, #3
 80111a4:	f024 0403 	bic.w	r4, r4, #3
 80111a8:	42a0      	cmp	r0, r4
 80111aa:	d007      	beq.n	80111bc <sbrk_aligned+0x38>
 80111ac:	1a21      	subs	r1, r4, r0
 80111ae:	4628      	mov	r0, r5
 80111b0:	f001 fe0a 	bl	8012dc8 <_sbrk_r>
 80111b4:	3001      	adds	r0, #1
 80111b6:	d101      	bne.n	80111bc <sbrk_aligned+0x38>
 80111b8:	f04f 34ff 	mov.w	r4, #4294967295
 80111bc:	4620      	mov	r0, r4
 80111be:	bd70      	pop	{r4, r5, r6, pc}
 80111c0:	20006ce4 	.word	0x20006ce4

080111c4 <_malloc_r>:
 80111c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111c8:	1ccd      	adds	r5, r1, #3
 80111ca:	f025 0503 	bic.w	r5, r5, #3
 80111ce:	3508      	adds	r5, #8
 80111d0:	2d0c      	cmp	r5, #12
 80111d2:	bf38      	it	cc
 80111d4:	250c      	movcc	r5, #12
 80111d6:	2d00      	cmp	r5, #0
 80111d8:	4607      	mov	r7, r0
 80111da:	db01      	blt.n	80111e0 <_malloc_r+0x1c>
 80111dc:	42a9      	cmp	r1, r5
 80111de:	d905      	bls.n	80111ec <_malloc_r+0x28>
 80111e0:	230c      	movs	r3, #12
 80111e2:	603b      	str	r3, [r7, #0]
 80111e4:	2600      	movs	r6, #0
 80111e6:	4630      	mov	r0, r6
 80111e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80112c0 <_malloc_r+0xfc>
 80111f0:	f000 f868 	bl	80112c4 <__malloc_lock>
 80111f4:	f8d8 3000 	ldr.w	r3, [r8]
 80111f8:	461c      	mov	r4, r3
 80111fa:	bb5c      	cbnz	r4, 8011254 <_malloc_r+0x90>
 80111fc:	4629      	mov	r1, r5
 80111fe:	4638      	mov	r0, r7
 8011200:	f7ff ffc0 	bl	8011184 <sbrk_aligned>
 8011204:	1c43      	adds	r3, r0, #1
 8011206:	4604      	mov	r4, r0
 8011208:	d155      	bne.n	80112b6 <_malloc_r+0xf2>
 801120a:	f8d8 4000 	ldr.w	r4, [r8]
 801120e:	4626      	mov	r6, r4
 8011210:	2e00      	cmp	r6, #0
 8011212:	d145      	bne.n	80112a0 <_malloc_r+0xdc>
 8011214:	2c00      	cmp	r4, #0
 8011216:	d048      	beq.n	80112aa <_malloc_r+0xe6>
 8011218:	6823      	ldr	r3, [r4, #0]
 801121a:	4631      	mov	r1, r6
 801121c:	4638      	mov	r0, r7
 801121e:	eb04 0903 	add.w	r9, r4, r3
 8011222:	f001 fdd1 	bl	8012dc8 <_sbrk_r>
 8011226:	4581      	cmp	r9, r0
 8011228:	d13f      	bne.n	80112aa <_malloc_r+0xe6>
 801122a:	6821      	ldr	r1, [r4, #0]
 801122c:	1a6d      	subs	r5, r5, r1
 801122e:	4629      	mov	r1, r5
 8011230:	4638      	mov	r0, r7
 8011232:	f7ff ffa7 	bl	8011184 <sbrk_aligned>
 8011236:	3001      	adds	r0, #1
 8011238:	d037      	beq.n	80112aa <_malloc_r+0xe6>
 801123a:	6823      	ldr	r3, [r4, #0]
 801123c:	442b      	add	r3, r5
 801123e:	6023      	str	r3, [r4, #0]
 8011240:	f8d8 3000 	ldr.w	r3, [r8]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d038      	beq.n	80112ba <_malloc_r+0xf6>
 8011248:	685a      	ldr	r2, [r3, #4]
 801124a:	42a2      	cmp	r2, r4
 801124c:	d12b      	bne.n	80112a6 <_malloc_r+0xe2>
 801124e:	2200      	movs	r2, #0
 8011250:	605a      	str	r2, [r3, #4]
 8011252:	e00f      	b.n	8011274 <_malloc_r+0xb0>
 8011254:	6822      	ldr	r2, [r4, #0]
 8011256:	1b52      	subs	r2, r2, r5
 8011258:	d41f      	bmi.n	801129a <_malloc_r+0xd6>
 801125a:	2a0b      	cmp	r2, #11
 801125c:	d917      	bls.n	801128e <_malloc_r+0xca>
 801125e:	1961      	adds	r1, r4, r5
 8011260:	42a3      	cmp	r3, r4
 8011262:	6025      	str	r5, [r4, #0]
 8011264:	bf18      	it	ne
 8011266:	6059      	strne	r1, [r3, #4]
 8011268:	6863      	ldr	r3, [r4, #4]
 801126a:	bf08      	it	eq
 801126c:	f8c8 1000 	streq.w	r1, [r8]
 8011270:	5162      	str	r2, [r4, r5]
 8011272:	604b      	str	r3, [r1, #4]
 8011274:	4638      	mov	r0, r7
 8011276:	f104 060b 	add.w	r6, r4, #11
 801127a:	f000 f829 	bl	80112d0 <__malloc_unlock>
 801127e:	f026 0607 	bic.w	r6, r6, #7
 8011282:	1d23      	adds	r3, r4, #4
 8011284:	1af2      	subs	r2, r6, r3
 8011286:	d0ae      	beq.n	80111e6 <_malloc_r+0x22>
 8011288:	1b9b      	subs	r3, r3, r6
 801128a:	50a3      	str	r3, [r4, r2]
 801128c:	e7ab      	b.n	80111e6 <_malloc_r+0x22>
 801128e:	42a3      	cmp	r3, r4
 8011290:	6862      	ldr	r2, [r4, #4]
 8011292:	d1dd      	bne.n	8011250 <_malloc_r+0x8c>
 8011294:	f8c8 2000 	str.w	r2, [r8]
 8011298:	e7ec      	b.n	8011274 <_malloc_r+0xb0>
 801129a:	4623      	mov	r3, r4
 801129c:	6864      	ldr	r4, [r4, #4]
 801129e:	e7ac      	b.n	80111fa <_malloc_r+0x36>
 80112a0:	4634      	mov	r4, r6
 80112a2:	6876      	ldr	r6, [r6, #4]
 80112a4:	e7b4      	b.n	8011210 <_malloc_r+0x4c>
 80112a6:	4613      	mov	r3, r2
 80112a8:	e7cc      	b.n	8011244 <_malloc_r+0x80>
 80112aa:	230c      	movs	r3, #12
 80112ac:	603b      	str	r3, [r7, #0]
 80112ae:	4638      	mov	r0, r7
 80112b0:	f000 f80e 	bl	80112d0 <__malloc_unlock>
 80112b4:	e797      	b.n	80111e6 <_malloc_r+0x22>
 80112b6:	6025      	str	r5, [r4, #0]
 80112b8:	e7dc      	b.n	8011274 <_malloc_r+0xb0>
 80112ba:	605b      	str	r3, [r3, #4]
 80112bc:	deff      	udf	#255	; 0xff
 80112be:	bf00      	nop
 80112c0:	20006ce0 	.word	0x20006ce0

080112c4 <__malloc_lock>:
 80112c4:	4801      	ldr	r0, [pc, #4]	; (80112cc <__malloc_lock+0x8>)
 80112c6:	f7ff b879 	b.w	80103bc <__retarget_lock_acquire_recursive>
 80112ca:	bf00      	nop
 80112cc:	20006cdc 	.word	0x20006cdc

080112d0 <__malloc_unlock>:
 80112d0:	4801      	ldr	r0, [pc, #4]	; (80112d8 <__malloc_unlock+0x8>)
 80112d2:	f7ff b874 	b.w	80103be <__retarget_lock_release_recursive>
 80112d6:	bf00      	nop
 80112d8:	20006cdc 	.word	0x20006cdc

080112dc <_Balloc>:
 80112dc:	b570      	push	{r4, r5, r6, lr}
 80112de:	69c6      	ldr	r6, [r0, #28]
 80112e0:	4604      	mov	r4, r0
 80112e2:	460d      	mov	r5, r1
 80112e4:	b976      	cbnz	r6, 8011304 <_Balloc+0x28>
 80112e6:	2010      	movs	r0, #16
 80112e8:	f7ff ff44 	bl	8011174 <malloc>
 80112ec:	4602      	mov	r2, r0
 80112ee:	61e0      	str	r0, [r4, #28]
 80112f0:	b920      	cbnz	r0, 80112fc <_Balloc+0x20>
 80112f2:	4b18      	ldr	r3, [pc, #96]	; (8011354 <_Balloc+0x78>)
 80112f4:	4818      	ldr	r0, [pc, #96]	; (8011358 <_Balloc+0x7c>)
 80112f6:	216b      	movs	r1, #107	; 0x6b
 80112f8:	f001 fd7e 	bl	8012df8 <__assert_func>
 80112fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011300:	6006      	str	r6, [r0, #0]
 8011302:	60c6      	str	r6, [r0, #12]
 8011304:	69e6      	ldr	r6, [r4, #28]
 8011306:	68f3      	ldr	r3, [r6, #12]
 8011308:	b183      	cbz	r3, 801132c <_Balloc+0x50>
 801130a:	69e3      	ldr	r3, [r4, #28]
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011312:	b9b8      	cbnz	r0, 8011344 <_Balloc+0x68>
 8011314:	2101      	movs	r1, #1
 8011316:	fa01 f605 	lsl.w	r6, r1, r5
 801131a:	1d72      	adds	r2, r6, #5
 801131c:	0092      	lsls	r2, r2, #2
 801131e:	4620      	mov	r0, r4
 8011320:	f001 fd88 	bl	8012e34 <_calloc_r>
 8011324:	b160      	cbz	r0, 8011340 <_Balloc+0x64>
 8011326:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801132a:	e00e      	b.n	801134a <_Balloc+0x6e>
 801132c:	2221      	movs	r2, #33	; 0x21
 801132e:	2104      	movs	r1, #4
 8011330:	4620      	mov	r0, r4
 8011332:	f001 fd7f 	bl	8012e34 <_calloc_r>
 8011336:	69e3      	ldr	r3, [r4, #28]
 8011338:	60f0      	str	r0, [r6, #12]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d1e4      	bne.n	801130a <_Balloc+0x2e>
 8011340:	2000      	movs	r0, #0
 8011342:	bd70      	pop	{r4, r5, r6, pc}
 8011344:	6802      	ldr	r2, [r0, #0]
 8011346:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801134a:	2300      	movs	r3, #0
 801134c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011350:	e7f7      	b.n	8011342 <_Balloc+0x66>
 8011352:	bf00      	nop
 8011354:	0801579e 	.word	0x0801579e
 8011358:	0801581e 	.word	0x0801581e

0801135c <_Bfree>:
 801135c:	b570      	push	{r4, r5, r6, lr}
 801135e:	69c6      	ldr	r6, [r0, #28]
 8011360:	4605      	mov	r5, r0
 8011362:	460c      	mov	r4, r1
 8011364:	b976      	cbnz	r6, 8011384 <_Bfree+0x28>
 8011366:	2010      	movs	r0, #16
 8011368:	f7ff ff04 	bl	8011174 <malloc>
 801136c:	4602      	mov	r2, r0
 801136e:	61e8      	str	r0, [r5, #28]
 8011370:	b920      	cbnz	r0, 801137c <_Bfree+0x20>
 8011372:	4b09      	ldr	r3, [pc, #36]	; (8011398 <_Bfree+0x3c>)
 8011374:	4809      	ldr	r0, [pc, #36]	; (801139c <_Bfree+0x40>)
 8011376:	218f      	movs	r1, #143	; 0x8f
 8011378:	f001 fd3e 	bl	8012df8 <__assert_func>
 801137c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011380:	6006      	str	r6, [r0, #0]
 8011382:	60c6      	str	r6, [r0, #12]
 8011384:	b13c      	cbz	r4, 8011396 <_Bfree+0x3a>
 8011386:	69eb      	ldr	r3, [r5, #28]
 8011388:	6862      	ldr	r2, [r4, #4]
 801138a:	68db      	ldr	r3, [r3, #12]
 801138c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011390:	6021      	str	r1, [r4, #0]
 8011392:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011396:	bd70      	pop	{r4, r5, r6, pc}
 8011398:	0801579e 	.word	0x0801579e
 801139c:	0801581e 	.word	0x0801581e

080113a0 <__multadd>:
 80113a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a4:	690d      	ldr	r5, [r1, #16]
 80113a6:	4607      	mov	r7, r0
 80113a8:	460c      	mov	r4, r1
 80113aa:	461e      	mov	r6, r3
 80113ac:	f101 0c14 	add.w	ip, r1, #20
 80113b0:	2000      	movs	r0, #0
 80113b2:	f8dc 3000 	ldr.w	r3, [ip]
 80113b6:	b299      	uxth	r1, r3
 80113b8:	fb02 6101 	mla	r1, r2, r1, r6
 80113bc:	0c1e      	lsrs	r6, r3, #16
 80113be:	0c0b      	lsrs	r3, r1, #16
 80113c0:	fb02 3306 	mla	r3, r2, r6, r3
 80113c4:	b289      	uxth	r1, r1
 80113c6:	3001      	adds	r0, #1
 80113c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80113cc:	4285      	cmp	r5, r0
 80113ce:	f84c 1b04 	str.w	r1, [ip], #4
 80113d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80113d6:	dcec      	bgt.n	80113b2 <__multadd+0x12>
 80113d8:	b30e      	cbz	r6, 801141e <__multadd+0x7e>
 80113da:	68a3      	ldr	r3, [r4, #8]
 80113dc:	42ab      	cmp	r3, r5
 80113de:	dc19      	bgt.n	8011414 <__multadd+0x74>
 80113e0:	6861      	ldr	r1, [r4, #4]
 80113e2:	4638      	mov	r0, r7
 80113e4:	3101      	adds	r1, #1
 80113e6:	f7ff ff79 	bl	80112dc <_Balloc>
 80113ea:	4680      	mov	r8, r0
 80113ec:	b928      	cbnz	r0, 80113fa <__multadd+0x5a>
 80113ee:	4602      	mov	r2, r0
 80113f0:	4b0c      	ldr	r3, [pc, #48]	; (8011424 <__multadd+0x84>)
 80113f2:	480d      	ldr	r0, [pc, #52]	; (8011428 <__multadd+0x88>)
 80113f4:	21ba      	movs	r1, #186	; 0xba
 80113f6:	f001 fcff 	bl	8012df8 <__assert_func>
 80113fa:	6922      	ldr	r2, [r4, #16]
 80113fc:	3202      	adds	r2, #2
 80113fe:	f104 010c 	add.w	r1, r4, #12
 8011402:	0092      	lsls	r2, r2, #2
 8011404:	300c      	adds	r0, #12
 8011406:	f7fe ffdb 	bl	80103c0 <memcpy>
 801140a:	4621      	mov	r1, r4
 801140c:	4638      	mov	r0, r7
 801140e:	f7ff ffa5 	bl	801135c <_Bfree>
 8011412:	4644      	mov	r4, r8
 8011414:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011418:	3501      	adds	r5, #1
 801141a:	615e      	str	r6, [r3, #20]
 801141c:	6125      	str	r5, [r4, #16]
 801141e:	4620      	mov	r0, r4
 8011420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011424:	0801580d 	.word	0x0801580d
 8011428:	0801581e 	.word	0x0801581e

0801142c <__s2b>:
 801142c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011430:	460c      	mov	r4, r1
 8011432:	4615      	mov	r5, r2
 8011434:	461f      	mov	r7, r3
 8011436:	2209      	movs	r2, #9
 8011438:	3308      	adds	r3, #8
 801143a:	4606      	mov	r6, r0
 801143c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011440:	2100      	movs	r1, #0
 8011442:	2201      	movs	r2, #1
 8011444:	429a      	cmp	r2, r3
 8011446:	db09      	blt.n	801145c <__s2b+0x30>
 8011448:	4630      	mov	r0, r6
 801144a:	f7ff ff47 	bl	80112dc <_Balloc>
 801144e:	b940      	cbnz	r0, 8011462 <__s2b+0x36>
 8011450:	4602      	mov	r2, r0
 8011452:	4b19      	ldr	r3, [pc, #100]	; (80114b8 <__s2b+0x8c>)
 8011454:	4819      	ldr	r0, [pc, #100]	; (80114bc <__s2b+0x90>)
 8011456:	21d3      	movs	r1, #211	; 0xd3
 8011458:	f001 fcce 	bl	8012df8 <__assert_func>
 801145c:	0052      	lsls	r2, r2, #1
 801145e:	3101      	adds	r1, #1
 8011460:	e7f0      	b.n	8011444 <__s2b+0x18>
 8011462:	9b08      	ldr	r3, [sp, #32]
 8011464:	6143      	str	r3, [r0, #20]
 8011466:	2d09      	cmp	r5, #9
 8011468:	f04f 0301 	mov.w	r3, #1
 801146c:	6103      	str	r3, [r0, #16]
 801146e:	dd16      	ble.n	801149e <__s2b+0x72>
 8011470:	f104 0909 	add.w	r9, r4, #9
 8011474:	46c8      	mov	r8, r9
 8011476:	442c      	add	r4, r5
 8011478:	f818 3b01 	ldrb.w	r3, [r8], #1
 801147c:	4601      	mov	r1, r0
 801147e:	3b30      	subs	r3, #48	; 0x30
 8011480:	220a      	movs	r2, #10
 8011482:	4630      	mov	r0, r6
 8011484:	f7ff ff8c 	bl	80113a0 <__multadd>
 8011488:	45a0      	cmp	r8, r4
 801148a:	d1f5      	bne.n	8011478 <__s2b+0x4c>
 801148c:	f1a5 0408 	sub.w	r4, r5, #8
 8011490:	444c      	add	r4, r9
 8011492:	1b2d      	subs	r5, r5, r4
 8011494:	1963      	adds	r3, r4, r5
 8011496:	42bb      	cmp	r3, r7
 8011498:	db04      	blt.n	80114a4 <__s2b+0x78>
 801149a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801149e:	340a      	adds	r4, #10
 80114a0:	2509      	movs	r5, #9
 80114a2:	e7f6      	b.n	8011492 <__s2b+0x66>
 80114a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80114a8:	4601      	mov	r1, r0
 80114aa:	3b30      	subs	r3, #48	; 0x30
 80114ac:	220a      	movs	r2, #10
 80114ae:	4630      	mov	r0, r6
 80114b0:	f7ff ff76 	bl	80113a0 <__multadd>
 80114b4:	e7ee      	b.n	8011494 <__s2b+0x68>
 80114b6:	bf00      	nop
 80114b8:	0801580d 	.word	0x0801580d
 80114bc:	0801581e 	.word	0x0801581e

080114c0 <__hi0bits>:
 80114c0:	0c03      	lsrs	r3, r0, #16
 80114c2:	041b      	lsls	r3, r3, #16
 80114c4:	b9d3      	cbnz	r3, 80114fc <__hi0bits+0x3c>
 80114c6:	0400      	lsls	r0, r0, #16
 80114c8:	2310      	movs	r3, #16
 80114ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80114ce:	bf04      	itt	eq
 80114d0:	0200      	lsleq	r0, r0, #8
 80114d2:	3308      	addeq	r3, #8
 80114d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80114d8:	bf04      	itt	eq
 80114da:	0100      	lsleq	r0, r0, #4
 80114dc:	3304      	addeq	r3, #4
 80114de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80114e2:	bf04      	itt	eq
 80114e4:	0080      	lsleq	r0, r0, #2
 80114e6:	3302      	addeq	r3, #2
 80114e8:	2800      	cmp	r0, #0
 80114ea:	db05      	blt.n	80114f8 <__hi0bits+0x38>
 80114ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80114f0:	f103 0301 	add.w	r3, r3, #1
 80114f4:	bf08      	it	eq
 80114f6:	2320      	moveq	r3, #32
 80114f8:	4618      	mov	r0, r3
 80114fa:	4770      	bx	lr
 80114fc:	2300      	movs	r3, #0
 80114fe:	e7e4      	b.n	80114ca <__hi0bits+0xa>

08011500 <__lo0bits>:
 8011500:	6803      	ldr	r3, [r0, #0]
 8011502:	f013 0207 	ands.w	r2, r3, #7
 8011506:	d00c      	beq.n	8011522 <__lo0bits+0x22>
 8011508:	07d9      	lsls	r1, r3, #31
 801150a:	d422      	bmi.n	8011552 <__lo0bits+0x52>
 801150c:	079a      	lsls	r2, r3, #30
 801150e:	bf49      	itett	mi
 8011510:	085b      	lsrmi	r3, r3, #1
 8011512:	089b      	lsrpl	r3, r3, #2
 8011514:	6003      	strmi	r3, [r0, #0]
 8011516:	2201      	movmi	r2, #1
 8011518:	bf5c      	itt	pl
 801151a:	6003      	strpl	r3, [r0, #0]
 801151c:	2202      	movpl	r2, #2
 801151e:	4610      	mov	r0, r2
 8011520:	4770      	bx	lr
 8011522:	b299      	uxth	r1, r3
 8011524:	b909      	cbnz	r1, 801152a <__lo0bits+0x2a>
 8011526:	0c1b      	lsrs	r3, r3, #16
 8011528:	2210      	movs	r2, #16
 801152a:	b2d9      	uxtb	r1, r3
 801152c:	b909      	cbnz	r1, 8011532 <__lo0bits+0x32>
 801152e:	3208      	adds	r2, #8
 8011530:	0a1b      	lsrs	r3, r3, #8
 8011532:	0719      	lsls	r1, r3, #28
 8011534:	bf04      	itt	eq
 8011536:	091b      	lsreq	r3, r3, #4
 8011538:	3204      	addeq	r2, #4
 801153a:	0799      	lsls	r1, r3, #30
 801153c:	bf04      	itt	eq
 801153e:	089b      	lsreq	r3, r3, #2
 8011540:	3202      	addeq	r2, #2
 8011542:	07d9      	lsls	r1, r3, #31
 8011544:	d403      	bmi.n	801154e <__lo0bits+0x4e>
 8011546:	085b      	lsrs	r3, r3, #1
 8011548:	f102 0201 	add.w	r2, r2, #1
 801154c:	d003      	beq.n	8011556 <__lo0bits+0x56>
 801154e:	6003      	str	r3, [r0, #0]
 8011550:	e7e5      	b.n	801151e <__lo0bits+0x1e>
 8011552:	2200      	movs	r2, #0
 8011554:	e7e3      	b.n	801151e <__lo0bits+0x1e>
 8011556:	2220      	movs	r2, #32
 8011558:	e7e1      	b.n	801151e <__lo0bits+0x1e>
	...

0801155c <__i2b>:
 801155c:	b510      	push	{r4, lr}
 801155e:	460c      	mov	r4, r1
 8011560:	2101      	movs	r1, #1
 8011562:	f7ff febb 	bl	80112dc <_Balloc>
 8011566:	4602      	mov	r2, r0
 8011568:	b928      	cbnz	r0, 8011576 <__i2b+0x1a>
 801156a:	4b05      	ldr	r3, [pc, #20]	; (8011580 <__i2b+0x24>)
 801156c:	4805      	ldr	r0, [pc, #20]	; (8011584 <__i2b+0x28>)
 801156e:	f240 1145 	movw	r1, #325	; 0x145
 8011572:	f001 fc41 	bl	8012df8 <__assert_func>
 8011576:	2301      	movs	r3, #1
 8011578:	6144      	str	r4, [r0, #20]
 801157a:	6103      	str	r3, [r0, #16]
 801157c:	bd10      	pop	{r4, pc}
 801157e:	bf00      	nop
 8011580:	0801580d 	.word	0x0801580d
 8011584:	0801581e 	.word	0x0801581e

08011588 <__multiply>:
 8011588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801158c:	4691      	mov	r9, r2
 801158e:	690a      	ldr	r2, [r1, #16]
 8011590:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011594:	429a      	cmp	r2, r3
 8011596:	bfb8      	it	lt
 8011598:	460b      	movlt	r3, r1
 801159a:	460c      	mov	r4, r1
 801159c:	bfbc      	itt	lt
 801159e:	464c      	movlt	r4, r9
 80115a0:	4699      	movlt	r9, r3
 80115a2:	6927      	ldr	r7, [r4, #16]
 80115a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80115a8:	68a3      	ldr	r3, [r4, #8]
 80115aa:	6861      	ldr	r1, [r4, #4]
 80115ac:	eb07 060a 	add.w	r6, r7, sl
 80115b0:	42b3      	cmp	r3, r6
 80115b2:	b085      	sub	sp, #20
 80115b4:	bfb8      	it	lt
 80115b6:	3101      	addlt	r1, #1
 80115b8:	f7ff fe90 	bl	80112dc <_Balloc>
 80115bc:	b930      	cbnz	r0, 80115cc <__multiply+0x44>
 80115be:	4602      	mov	r2, r0
 80115c0:	4b44      	ldr	r3, [pc, #272]	; (80116d4 <__multiply+0x14c>)
 80115c2:	4845      	ldr	r0, [pc, #276]	; (80116d8 <__multiply+0x150>)
 80115c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80115c8:	f001 fc16 	bl	8012df8 <__assert_func>
 80115cc:	f100 0514 	add.w	r5, r0, #20
 80115d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80115d4:	462b      	mov	r3, r5
 80115d6:	2200      	movs	r2, #0
 80115d8:	4543      	cmp	r3, r8
 80115da:	d321      	bcc.n	8011620 <__multiply+0x98>
 80115dc:	f104 0314 	add.w	r3, r4, #20
 80115e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80115e4:	f109 0314 	add.w	r3, r9, #20
 80115e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80115ec:	9202      	str	r2, [sp, #8]
 80115ee:	1b3a      	subs	r2, r7, r4
 80115f0:	3a15      	subs	r2, #21
 80115f2:	f022 0203 	bic.w	r2, r2, #3
 80115f6:	3204      	adds	r2, #4
 80115f8:	f104 0115 	add.w	r1, r4, #21
 80115fc:	428f      	cmp	r7, r1
 80115fe:	bf38      	it	cc
 8011600:	2204      	movcc	r2, #4
 8011602:	9201      	str	r2, [sp, #4]
 8011604:	9a02      	ldr	r2, [sp, #8]
 8011606:	9303      	str	r3, [sp, #12]
 8011608:	429a      	cmp	r2, r3
 801160a:	d80c      	bhi.n	8011626 <__multiply+0x9e>
 801160c:	2e00      	cmp	r6, #0
 801160e:	dd03      	ble.n	8011618 <__multiply+0x90>
 8011610:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011614:	2b00      	cmp	r3, #0
 8011616:	d05b      	beq.n	80116d0 <__multiply+0x148>
 8011618:	6106      	str	r6, [r0, #16]
 801161a:	b005      	add	sp, #20
 801161c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011620:	f843 2b04 	str.w	r2, [r3], #4
 8011624:	e7d8      	b.n	80115d8 <__multiply+0x50>
 8011626:	f8b3 a000 	ldrh.w	sl, [r3]
 801162a:	f1ba 0f00 	cmp.w	sl, #0
 801162e:	d024      	beq.n	801167a <__multiply+0xf2>
 8011630:	f104 0e14 	add.w	lr, r4, #20
 8011634:	46a9      	mov	r9, r5
 8011636:	f04f 0c00 	mov.w	ip, #0
 801163a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801163e:	f8d9 1000 	ldr.w	r1, [r9]
 8011642:	fa1f fb82 	uxth.w	fp, r2
 8011646:	b289      	uxth	r1, r1
 8011648:	fb0a 110b 	mla	r1, sl, fp, r1
 801164c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011650:	f8d9 2000 	ldr.w	r2, [r9]
 8011654:	4461      	add	r1, ip
 8011656:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801165a:	fb0a c20b 	mla	r2, sl, fp, ip
 801165e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011662:	b289      	uxth	r1, r1
 8011664:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011668:	4577      	cmp	r7, lr
 801166a:	f849 1b04 	str.w	r1, [r9], #4
 801166e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011672:	d8e2      	bhi.n	801163a <__multiply+0xb2>
 8011674:	9a01      	ldr	r2, [sp, #4]
 8011676:	f845 c002 	str.w	ip, [r5, r2]
 801167a:	9a03      	ldr	r2, [sp, #12]
 801167c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011680:	3304      	adds	r3, #4
 8011682:	f1b9 0f00 	cmp.w	r9, #0
 8011686:	d021      	beq.n	80116cc <__multiply+0x144>
 8011688:	6829      	ldr	r1, [r5, #0]
 801168a:	f104 0c14 	add.w	ip, r4, #20
 801168e:	46ae      	mov	lr, r5
 8011690:	f04f 0a00 	mov.w	sl, #0
 8011694:	f8bc b000 	ldrh.w	fp, [ip]
 8011698:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801169c:	fb09 220b 	mla	r2, r9, fp, r2
 80116a0:	4452      	add	r2, sl
 80116a2:	b289      	uxth	r1, r1
 80116a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80116a8:	f84e 1b04 	str.w	r1, [lr], #4
 80116ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80116b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80116b4:	f8be 1000 	ldrh.w	r1, [lr]
 80116b8:	fb09 110a 	mla	r1, r9, sl, r1
 80116bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80116c0:	4567      	cmp	r7, ip
 80116c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80116c6:	d8e5      	bhi.n	8011694 <__multiply+0x10c>
 80116c8:	9a01      	ldr	r2, [sp, #4]
 80116ca:	50a9      	str	r1, [r5, r2]
 80116cc:	3504      	adds	r5, #4
 80116ce:	e799      	b.n	8011604 <__multiply+0x7c>
 80116d0:	3e01      	subs	r6, #1
 80116d2:	e79b      	b.n	801160c <__multiply+0x84>
 80116d4:	0801580d 	.word	0x0801580d
 80116d8:	0801581e 	.word	0x0801581e

080116dc <__pow5mult>:
 80116dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116e0:	4615      	mov	r5, r2
 80116e2:	f012 0203 	ands.w	r2, r2, #3
 80116e6:	4606      	mov	r6, r0
 80116e8:	460f      	mov	r7, r1
 80116ea:	d007      	beq.n	80116fc <__pow5mult+0x20>
 80116ec:	4c25      	ldr	r4, [pc, #148]	; (8011784 <__pow5mult+0xa8>)
 80116ee:	3a01      	subs	r2, #1
 80116f0:	2300      	movs	r3, #0
 80116f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80116f6:	f7ff fe53 	bl	80113a0 <__multadd>
 80116fa:	4607      	mov	r7, r0
 80116fc:	10ad      	asrs	r5, r5, #2
 80116fe:	d03d      	beq.n	801177c <__pow5mult+0xa0>
 8011700:	69f4      	ldr	r4, [r6, #28]
 8011702:	b97c      	cbnz	r4, 8011724 <__pow5mult+0x48>
 8011704:	2010      	movs	r0, #16
 8011706:	f7ff fd35 	bl	8011174 <malloc>
 801170a:	4602      	mov	r2, r0
 801170c:	61f0      	str	r0, [r6, #28]
 801170e:	b928      	cbnz	r0, 801171c <__pow5mult+0x40>
 8011710:	4b1d      	ldr	r3, [pc, #116]	; (8011788 <__pow5mult+0xac>)
 8011712:	481e      	ldr	r0, [pc, #120]	; (801178c <__pow5mult+0xb0>)
 8011714:	f240 11b3 	movw	r1, #435	; 0x1b3
 8011718:	f001 fb6e 	bl	8012df8 <__assert_func>
 801171c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011720:	6004      	str	r4, [r0, #0]
 8011722:	60c4      	str	r4, [r0, #12]
 8011724:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8011728:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801172c:	b94c      	cbnz	r4, 8011742 <__pow5mult+0x66>
 801172e:	f240 2171 	movw	r1, #625	; 0x271
 8011732:	4630      	mov	r0, r6
 8011734:	f7ff ff12 	bl	801155c <__i2b>
 8011738:	2300      	movs	r3, #0
 801173a:	f8c8 0008 	str.w	r0, [r8, #8]
 801173e:	4604      	mov	r4, r0
 8011740:	6003      	str	r3, [r0, #0]
 8011742:	f04f 0900 	mov.w	r9, #0
 8011746:	07eb      	lsls	r3, r5, #31
 8011748:	d50a      	bpl.n	8011760 <__pow5mult+0x84>
 801174a:	4639      	mov	r1, r7
 801174c:	4622      	mov	r2, r4
 801174e:	4630      	mov	r0, r6
 8011750:	f7ff ff1a 	bl	8011588 <__multiply>
 8011754:	4639      	mov	r1, r7
 8011756:	4680      	mov	r8, r0
 8011758:	4630      	mov	r0, r6
 801175a:	f7ff fdff 	bl	801135c <_Bfree>
 801175e:	4647      	mov	r7, r8
 8011760:	106d      	asrs	r5, r5, #1
 8011762:	d00b      	beq.n	801177c <__pow5mult+0xa0>
 8011764:	6820      	ldr	r0, [r4, #0]
 8011766:	b938      	cbnz	r0, 8011778 <__pow5mult+0x9c>
 8011768:	4622      	mov	r2, r4
 801176a:	4621      	mov	r1, r4
 801176c:	4630      	mov	r0, r6
 801176e:	f7ff ff0b 	bl	8011588 <__multiply>
 8011772:	6020      	str	r0, [r4, #0]
 8011774:	f8c0 9000 	str.w	r9, [r0]
 8011778:	4604      	mov	r4, r0
 801177a:	e7e4      	b.n	8011746 <__pow5mult+0x6a>
 801177c:	4638      	mov	r0, r7
 801177e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011782:	bf00      	nop
 8011784:	08015968 	.word	0x08015968
 8011788:	0801579e 	.word	0x0801579e
 801178c:	0801581e 	.word	0x0801581e

08011790 <__lshift>:
 8011790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011794:	460c      	mov	r4, r1
 8011796:	6849      	ldr	r1, [r1, #4]
 8011798:	6923      	ldr	r3, [r4, #16]
 801179a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801179e:	68a3      	ldr	r3, [r4, #8]
 80117a0:	4607      	mov	r7, r0
 80117a2:	4691      	mov	r9, r2
 80117a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80117a8:	f108 0601 	add.w	r6, r8, #1
 80117ac:	42b3      	cmp	r3, r6
 80117ae:	db0b      	blt.n	80117c8 <__lshift+0x38>
 80117b0:	4638      	mov	r0, r7
 80117b2:	f7ff fd93 	bl	80112dc <_Balloc>
 80117b6:	4605      	mov	r5, r0
 80117b8:	b948      	cbnz	r0, 80117ce <__lshift+0x3e>
 80117ba:	4602      	mov	r2, r0
 80117bc:	4b28      	ldr	r3, [pc, #160]	; (8011860 <__lshift+0xd0>)
 80117be:	4829      	ldr	r0, [pc, #164]	; (8011864 <__lshift+0xd4>)
 80117c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80117c4:	f001 fb18 	bl	8012df8 <__assert_func>
 80117c8:	3101      	adds	r1, #1
 80117ca:	005b      	lsls	r3, r3, #1
 80117cc:	e7ee      	b.n	80117ac <__lshift+0x1c>
 80117ce:	2300      	movs	r3, #0
 80117d0:	f100 0114 	add.w	r1, r0, #20
 80117d4:	f100 0210 	add.w	r2, r0, #16
 80117d8:	4618      	mov	r0, r3
 80117da:	4553      	cmp	r3, sl
 80117dc:	db33      	blt.n	8011846 <__lshift+0xb6>
 80117de:	6920      	ldr	r0, [r4, #16]
 80117e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80117e4:	f104 0314 	add.w	r3, r4, #20
 80117e8:	f019 091f 	ands.w	r9, r9, #31
 80117ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80117f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80117f4:	d02b      	beq.n	801184e <__lshift+0xbe>
 80117f6:	f1c9 0e20 	rsb	lr, r9, #32
 80117fa:	468a      	mov	sl, r1
 80117fc:	2200      	movs	r2, #0
 80117fe:	6818      	ldr	r0, [r3, #0]
 8011800:	fa00 f009 	lsl.w	r0, r0, r9
 8011804:	4310      	orrs	r0, r2
 8011806:	f84a 0b04 	str.w	r0, [sl], #4
 801180a:	f853 2b04 	ldr.w	r2, [r3], #4
 801180e:	459c      	cmp	ip, r3
 8011810:	fa22 f20e 	lsr.w	r2, r2, lr
 8011814:	d8f3      	bhi.n	80117fe <__lshift+0x6e>
 8011816:	ebac 0304 	sub.w	r3, ip, r4
 801181a:	3b15      	subs	r3, #21
 801181c:	f023 0303 	bic.w	r3, r3, #3
 8011820:	3304      	adds	r3, #4
 8011822:	f104 0015 	add.w	r0, r4, #21
 8011826:	4584      	cmp	ip, r0
 8011828:	bf38      	it	cc
 801182a:	2304      	movcc	r3, #4
 801182c:	50ca      	str	r2, [r1, r3]
 801182e:	b10a      	cbz	r2, 8011834 <__lshift+0xa4>
 8011830:	f108 0602 	add.w	r6, r8, #2
 8011834:	3e01      	subs	r6, #1
 8011836:	4638      	mov	r0, r7
 8011838:	612e      	str	r6, [r5, #16]
 801183a:	4621      	mov	r1, r4
 801183c:	f7ff fd8e 	bl	801135c <_Bfree>
 8011840:	4628      	mov	r0, r5
 8011842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011846:	f842 0f04 	str.w	r0, [r2, #4]!
 801184a:	3301      	adds	r3, #1
 801184c:	e7c5      	b.n	80117da <__lshift+0x4a>
 801184e:	3904      	subs	r1, #4
 8011850:	f853 2b04 	ldr.w	r2, [r3], #4
 8011854:	f841 2f04 	str.w	r2, [r1, #4]!
 8011858:	459c      	cmp	ip, r3
 801185a:	d8f9      	bhi.n	8011850 <__lshift+0xc0>
 801185c:	e7ea      	b.n	8011834 <__lshift+0xa4>
 801185e:	bf00      	nop
 8011860:	0801580d 	.word	0x0801580d
 8011864:	0801581e 	.word	0x0801581e

08011868 <__mcmp>:
 8011868:	b530      	push	{r4, r5, lr}
 801186a:	6902      	ldr	r2, [r0, #16]
 801186c:	690c      	ldr	r4, [r1, #16]
 801186e:	1b12      	subs	r2, r2, r4
 8011870:	d10e      	bne.n	8011890 <__mcmp+0x28>
 8011872:	f100 0314 	add.w	r3, r0, #20
 8011876:	3114      	adds	r1, #20
 8011878:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801187c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011880:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011884:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011888:	42a5      	cmp	r5, r4
 801188a:	d003      	beq.n	8011894 <__mcmp+0x2c>
 801188c:	d305      	bcc.n	801189a <__mcmp+0x32>
 801188e:	2201      	movs	r2, #1
 8011890:	4610      	mov	r0, r2
 8011892:	bd30      	pop	{r4, r5, pc}
 8011894:	4283      	cmp	r3, r0
 8011896:	d3f3      	bcc.n	8011880 <__mcmp+0x18>
 8011898:	e7fa      	b.n	8011890 <__mcmp+0x28>
 801189a:	f04f 32ff 	mov.w	r2, #4294967295
 801189e:	e7f7      	b.n	8011890 <__mcmp+0x28>

080118a0 <__mdiff>:
 80118a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a4:	460c      	mov	r4, r1
 80118a6:	4606      	mov	r6, r0
 80118a8:	4611      	mov	r1, r2
 80118aa:	4620      	mov	r0, r4
 80118ac:	4690      	mov	r8, r2
 80118ae:	f7ff ffdb 	bl	8011868 <__mcmp>
 80118b2:	1e05      	subs	r5, r0, #0
 80118b4:	d110      	bne.n	80118d8 <__mdiff+0x38>
 80118b6:	4629      	mov	r1, r5
 80118b8:	4630      	mov	r0, r6
 80118ba:	f7ff fd0f 	bl	80112dc <_Balloc>
 80118be:	b930      	cbnz	r0, 80118ce <__mdiff+0x2e>
 80118c0:	4b3a      	ldr	r3, [pc, #232]	; (80119ac <__mdiff+0x10c>)
 80118c2:	4602      	mov	r2, r0
 80118c4:	f240 2137 	movw	r1, #567	; 0x237
 80118c8:	4839      	ldr	r0, [pc, #228]	; (80119b0 <__mdiff+0x110>)
 80118ca:	f001 fa95 	bl	8012df8 <__assert_func>
 80118ce:	2301      	movs	r3, #1
 80118d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80118d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d8:	bfa4      	itt	ge
 80118da:	4643      	movge	r3, r8
 80118dc:	46a0      	movge	r8, r4
 80118de:	4630      	mov	r0, r6
 80118e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80118e4:	bfa6      	itte	ge
 80118e6:	461c      	movge	r4, r3
 80118e8:	2500      	movge	r5, #0
 80118ea:	2501      	movlt	r5, #1
 80118ec:	f7ff fcf6 	bl	80112dc <_Balloc>
 80118f0:	b920      	cbnz	r0, 80118fc <__mdiff+0x5c>
 80118f2:	4b2e      	ldr	r3, [pc, #184]	; (80119ac <__mdiff+0x10c>)
 80118f4:	4602      	mov	r2, r0
 80118f6:	f240 2145 	movw	r1, #581	; 0x245
 80118fa:	e7e5      	b.n	80118c8 <__mdiff+0x28>
 80118fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011900:	6926      	ldr	r6, [r4, #16]
 8011902:	60c5      	str	r5, [r0, #12]
 8011904:	f104 0914 	add.w	r9, r4, #20
 8011908:	f108 0514 	add.w	r5, r8, #20
 801190c:	f100 0e14 	add.w	lr, r0, #20
 8011910:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011914:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011918:	f108 0210 	add.w	r2, r8, #16
 801191c:	46f2      	mov	sl, lr
 801191e:	2100      	movs	r1, #0
 8011920:	f859 3b04 	ldr.w	r3, [r9], #4
 8011924:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011928:	fa11 f88b 	uxtah	r8, r1, fp
 801192c:	b299      	uxth	r1, r3
 801192e:	0c1b      	lsrs	r3, r3, #16
 8011930:	eba8 0801 	sub.w	r8, r8, r1
 8011934:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011938:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801193c:	fa1f f888 	uxth.w	r8, r8
 8011940:	1419      	asrs	r1, r3, #16
 8011942:	454e      	cmp	r6, r9
 8011944:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011948:	f84a 3b04 	str.w	r3, [sl], #4
 801194c:	d8e8      	bhi.n	8011920 <__mdiff+0x80>
 801194e:	1b33      	subs	r3, r6, r4
 8011950:	3b15      	subs	r3, #21
 8011952:	f023 0303 	bic.w	r3, r3, #3
 8011956:	3304      	adds	r3, #4
 8011958:	3415      	adds	r4, #21
 801195a:	42a6      	cmp	r6, r4
 801195c:	bf38      	it	cc
 801195e:	2304      	movcc	r3, #4
 8011960:	441d      	add	r5, r3
 8011962:	4473      	add	r3, lr
 8011964:	469e      	mov	lr, r3
 8011966:	462e      	mov	r6, r5
 8011968:	4566      	cmp	r6, ip
 801196a:	d30e      	bcc.n	801198a <__mdiff+0xea>
 801196c:	f10c 0203 	add.w	r2, ip, #3
 8011970:	1b52      	subs	r2, r2, r5
 8011972:	f022 0203 	bic.w	r2, r2, #3
 8011976:	3d03      	subs	r5, #3
 8011978:	45ac      	cmp	ip, r5
 801197a:	bf38      	it	cc
 801197c:	2200      	movcc	r2, #0
 801197e:	4413      	add	r3, r2
 8011980:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011984:	b17a      	cbz	r2, 80119a6 <__mdiff+0x106>
 8011986:	6107      	str	r7, [r0, #16]
 8011988:	e7a4      	b.n	80118d4 <__mdiff+0x34>
 801198a:	f856 8b04 	ldr.w	r8, [r6], #4
 801198e:	fa11 f288 	uxtah	r2, r1, r8
 8011992:	1414      	asrs	r4, r2, #16
 8011994:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011998:	b292      	uxth	r2, r2
 801199a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801199e:	f84e 2b04 	str.w	r2, [lr], #4
 80119a2:	1421      	asrs	r1, r4, #16
 80119a4:	e7e0      	b.n	8011968 <__mdiff+0xc8>
 80119a6:	3f01      	subs	r7, #1
 80119a8:	e7ea      	b.n	8011980 <__mdiff+0xe0>
 80119aa:	bf00      	nop
 80119ac:	0801580d 	.word	0x0801580d
 80119b0:	0801581e 	.word	0x0801581e

080119b4 <__ulp>:
 80119b4:	b082      	sub	sp, #8
 80119b6:	ed8d 0b00 	vstr	d0, [sp]
 80119ba:	9a01      	ldr	r2, [sp, #4]
 80119bc:	4b0f      	ldr	r3, [pc, #60]	; (80119fc <__ulp+0x48>)
 80119be:	4013      	ands	r3, r2
 80119c0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	dc08      	bgt.n	80119da <__ulp+0x26>
 80119c8:	425b      	negs	r3, r3
 80119ca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80119ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 80119d2:	da04      	bge.n	80119de <__ulp+0x2a>
 80119d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80119d8:	4113      	asrs	r3, r2
 80119da:	2200      	movs	r2, #0
 80119dc:	e008      	b.n	80119f0 <__ulp+0x3c>
 80119de:	f1a2 0314 	sub.w	r3, r2, #20
 80119e2:	2b1e      	cmp	r3, #30
 80119e4:	bfda      	itte	le
 80119e6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80119ea:	40da      	lsrle	r2, r3
 80119ec:	2201      	movgt	r2, #1
 80119ee:	2300      	movs	r3, #0
 80119f0:	4619      	mov	r1, r3
 80119f2:	4610      	mov	r0, r2
 80119f4:	ec41 0b10 	vmov	d0, r0, r1
 80119f8:	b002      	add	sp, #8
 80119fa:	4770      	bx	lr
 80119fc:	7ff00000 	.word	0x7ff00000

08011a00 <__b2d>:
 8011a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a04:	6906      	ldr	r6, [r0, #16]
 8011a06:	f100 0814 	add.w	r8, r0, #20
 8011a0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011a0e:	1f37      	subs	r7, r6, #4
 8011a10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011a14:	4610      	mov	r0, r2
 8011a16:	f7ff fd53 	bl	80114c0 <__hi0bits>
 8011a1a:	f1c0 0320 	rsb	r3, r0, #32
 8011a1e:	280a      	cmp	r0, #10
 8011a20:	600b      	str	r3, [r1, #0]
 8011a22:	491b      	ldr	r1, [pc, #108]	; (8011a90 <__b2d+0x90>)
 8011a24:	dc15      	bgt.n	8011a52 <__b2d+0x52>
 8011a26:	f1c0 0c0b 	rsb	ip, r0, #11
 8011a2a:	fa22 f30c 	lsr.w	r3, r2, ip
 8011a2e:	45b8      	cmp	r8, r7
 8011a30:	ea43 0501 	orr.w	r5, r3, r1
 8011a34:	bf34      	ite	cc
 8011a36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011a3a:	2300      	movcs	r3, #0
 8011a3c:	3015      	adds	r0, #21
 8011a3e:	fa02 f000 	lsl.w	r0, r2, r0
 8011a42:	fa23 f30c 	lsr.w	r3, r3, ip
 8011a46:	4303      	orrs	r3, r0
 8011a48:	461c      	mov	r4, r3
 8011a4a:	ec45 4b10 	vmov	d0, r4, r5
 8011a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a52:	45b8      	cmp	r8, r7
 8011a54:	bf3a      	itte	cc
 8011a56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011a5a:	f1a6 0708 	subcc.w	r7, r6, #8
 8011a5e:	2300      	movcs	r3, #0
 8011a60:	380b      	subs	r0, #11
 8011a62:	d012      	beq.n	8011a8a <__b2d+0x8a>
 8011a64:	f1c0 0120 	rsb	r1, r0, #32
 8011a68:	fa23 f401 	lsr.w	r4, r3, r1
 8011a6c:	4082      	lsls	r2, r0
 8011a6e:	4322      	orrs	r2, r4
 8011a70:	4547      	cmp	r7, r8
 8011a72:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011a76:	bf8c      	ite	hi
 8011a78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011a7c:	2200      	movls	r2, #0
 8011a7e:	4083      	lsls	r3, r0
 8011a80:	40ca      	lsrs	r2, r1
 8011a82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011a86:	4313      	orrs	r3, r2
 8011a88:	e7de      	b.n	8011a48 <__b2d+0x48>
 8011a8a:	ea42 0501 	orr.w	r5, r2, r1
 8011a8e:	e7db      	b.n	8011a48 <__b2d+0x48>
 8011a90:	3ff00000 	.word	0x3ff00000

08011a94 <__d2b>:
 8011a94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a98:	460f      	mov	r7, r1
 8011a9a:	2101      	movs	r1, #1
 8011a9c:	ec59 8b10 	vmov	r8, r9, d0
 8011aa0:	4616      	mov	r6, r2
 8011aa2:	f7ff fc1b 	bl	80112dc <_Balloc>
 8011aa6:	4604      	mov	r4, r0
 8011aa8:	b930      	cbnz	r0, 8011ab8 <__d2b+0x24>
 8011aaa:	4602      	mov	r2, r0
 8011aac:	4b24      	ldr	r3, [pc, #144]	; (8011b40 <__d2b+0xac>)
 8011aae:	4825      	ldr	r0, [pc, #148]	; (8011b44 <__d2b+0xb0>)
 8011ab0:	f240 310f 	movw	r1, #783	; 0x30f
 8011ab4:	f001 f9a0 	bl	8012df8 <__assert_func>
 8011ab8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011abc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ac0:	bb2d      	cbnz	r5, 8011b0e <__d2b+0x7a>
 8011ac2:	9301      	str	r3, [sp, #4]
 8011ac4:	f1b8 0300 	subs.w	r3, r8, #0
 8011ac8:	d026      	beq.n	8011b18 <__d2b+0x84>
 8011aca:	4668      	mov	r0, sp
 8011acc:	9300      	str	r3, [sp, #0]
 8011ace:	f7ff fd17 	bl	8011500 <__lo0bits>
 8011ad2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011ad6:	b1e8      	cbz	r0, 8011b14 <__d2b+0x80>
 8011ad8:	f1c0 0320 	rsb	r3, r0, #32
 8011adc:	fa02 f303 	lsl.w	r3, r2, r3
 8011ae0:	430b      	orrs	r3, r1
 8011ae2:	40c2      	lsrs	r2, r0
 8011ae4:	6163      	str	r3, [r4, #20]
 8011ae6:	9201      	str	r2, [sp, #4]
 8011ae8:	9b01      	ldr	r3, [sp, #4]
 8011aea:	61a3      	str	r3, [r4, #24]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	bf14      	ite	ne
 8011af0:	2202      	movne	r2, #2
 8011af2:	2201      	moveq	r2, #1
 8011af4:	6122      	str	r2, [r4, #16]
 8011af6:	b1bd      	cbz	r5, 8011b28 <__d2b+0x94>
 8011af8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011afc:	4405      	add	r5, r0
 8011afe:	603d      	str	r5, [r7, #0]
 8011b00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011b04:	6030      	str	r0, [r6, #0]
 8011b06:	4620      	mov	r0, r4
 8011b08:	b003      	add	sp, #12
 8011b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011b12:	e7d6      	b.n	8011ac2 <__d2b+0x2e>
 8011b14:	6161      	str	r1, [r4, #20]
 8011b16:	e7e7      	b.n	8011ae8 <__d2b+0x54>
 8011b18:	a801      	add	r0, sp, #4
 8011b1a:	f7ff fcf1 	bl	8011500 <__lo0bits>
 8011b1e:	9b01      	ldr	r3, [sp, #4]
 8011b20:	6163      	str	r3, [r4, #20]
 8011b22:	3020      	adds	r0, #32
 8011b24:	2201      	movs	r2, #1
 8011b26:	e7e5      	b.n	8011af4 <__d2b+0x60>
 8011b28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011b2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011b30:	6038      	str	r0, [r7, #0]
 8011b32:	6918      	ldr	r0, [r3, #16]
 8011b34:	f7ff fcc4 	bl	80114c0 <__hi0bits>
 8011b38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011b3c:	e7e2      	b.n	8011b04 <__d2b+0x70>
 8011b3e:	bf00      	nop
 8011b40:	0801580d 	.word	0x0801580d
 8011b44:	0801581e 	.word	0x0801581e

08011b48 <__ratio>:
 8011b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b4c:	4688      	mov	r8, r1
 8011b4e:	4669      	mov	r1, sp
 8011b50:	4681      	mov	r9, r0
 8011b52:	f7ff ff55 	bl	8011a00 <__b2d>
 8011b56:	a901      	add	r1, sp, #4
 8011b58:	4640      	mov	r0, r8
 8011b5a:	ec55 4b10 	vmov	r4, r5, d0
 8011b5e:	f7ff ff4f 	bl	8011a00 <__b2d>
 8011b62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011b66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011b6a:	eba3 0c02 	sub.w	ip, r3, r2
 8011b6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011b72:	1a9b      	subs	r3, r3, r2
 8011b74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011b78:	ec51 0b10 	vmov	r0, r1, d0
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	bfd6      	itet	le
 8011b80:	460a      	movle	r2, r1
 8011b82:	462a      	movgt	r2, r5
 8011b84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011b88:	468b      	mov	fp, r1
 8011b8a:	462f      	mov	r7, r5
 8011b8c:	bfd4      	ite	le
 8011b8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011b92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011b96:	4620      	mov	r0, r4
 8011b98:	ee10 2a10 	vmov	r2, s0
 8011b9c:	465b      	mov	r3, fp
 8011b9e:	4639      	mov	r1, r7
 8011ba0:	f7ee fe64 	bl	800086c <__aeabi_ddiv>
 8011ba4:	ec41 0b10 	vmov	d0, r0, r1
 8011ba8:	b003      	add	sp, #12
 8011baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011bae <__copybits>:
 8011bae:	3901      	subs	r1, #1
 8011bb0:	b570      	push	{r4, r5, r6, lr}
 8011bb2:	1149      	asrs	r1, r1, #5
 8011bb4:	6914      	ldr	r4, [r2, #16]
 8011bb6:	3101      	adds	r1, #1
 8011bb8:	f102 0314 	add.w	r3, r2, #20
 8011bbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011bc0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011bc4:	1f05      	subs	r5, r0, #4
 8011bc6:	42a3      	cmp	r3, r4
 8011bc8:	d30c      	bcc.n	8011be4 <__copybits+0x36>
 8011bca:	1aa3      	subs	r3, r4, r2
 8011bcc:	3b11      	subs	r3, #17
 8011bce:	f023 0303 	bic.w	r3, r3, #3
 8011bd2:	3211      	adds	r2, #17
 8011bd4:	42a2      	cmp	r2, r4
 8011bd6:	bf88      	it	hi
 8011bd8:	2300      	movhi	r3, #0
 8011bda:	4418      	add	r0, r3
 8011bdc:	2300      	movs	r3, #0
 8011bde:	4288      	cmp	r0, r1
 8011be0:	d305      	bcc.n	8011bee <__copybits+0x40>
 8011be2:	bd70      	pop	{r4, r5, r6, pc}
 8011be4:	f853 6b04 	ldr.w	r6, [r3], #4
 8011be8:	f845 6f04 	str.w	r6, [r5, #4]!
 8011bec:	e7eb      	b.n	8011bc6 <__copybits+0x18>
 8011bee:	f840 3b04 	str.w	r3, [r0], #4
 8011bf2:	e7f4      	b.n	8011bde <__copybits+0x30>

08011bf4 <__any_on>:
 8011bf4:	f100 0214 	add.w	r2, r0, #20
 8011bf8:	6900      	ldr	r0, [r0, #16]
 8011bfa:	114b      	asrs	r3, r1, #5
 8011bfc:	4298      	cmp	r0, r3
 8011bfe:	b510      	push	{r4, lr}
 8011c00:	db11      	blt.n	8011c26 <__any_on+0x32>
 8011c02:	dd0a      	ble.n	8011c1a <__any_on+0x26>
 8011c04:	f011 011f 	ands.w	r1, r1, #31
 8011c08:	d007      	beq.n	8011c1a <__any_on+0x26>
 8011c0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011c0e:	fa24 f001 	lsr.w	r0, r4, r1
 8011c12:	fa00 f101 	lsl.w	r1, r0, r1
 8011c16:	428c      	cmp	r4, r1
 8011c18:	d10b      	bne.n	8011c32 <__any_on+0x3e>
 8011c1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011c1e:	4293      	cmp	r3, r2
 8011c20:	d803      	bhi.n	8011c2a <__any_on+0x36>
 8011c22:	2000      	movs	r0, #0
 8011c24:	bd10      	pop	{r4, pc}
 8011c26:	4603      	mov	r3, r0
 8011c28:	e7f7      	b.n	8011c1a <__any_on+0x26>
 8011c2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011c2e:	2900      	cmp	r1, #0
 8011c30:	d0f5      	beq.n	8011c1e <__any_on+0x2a>
 8011c32:	2001      	movs	r0, #1
 8011c34:	e7f6      	b.n	8011c24 <__any_on+0x30>

08011c36 <sulp>:
 8011c36:	b570      	push	{r4, r5, r6, lr}
 8011c38:	4604      	mov	r4, r0
 8011c3a:	460d      	mov	r5, r1
 8011c3c:	ec45 4b10 	vmov	d0, r4, r5
 8011c40:	4616      	mov	r6, r2
 8011c42:	f7ff feb7 	bl	80119b4 <__ulp>
 8011c46:	ec51 0b10 	vmov	r0, r1, d0
 8011c4a:	b17e      	cbz	r6, 8011c6c <sulp+0x36>
 8011c4c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011c50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	dd09      	ble.n	8011c6c <sulp+0x36>
 8011c58:	051b      	lsls	r3, r3, #20
 8011c5a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011c5e:	2400      	movs	r4, #0
 8011c60:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011c64:	4622      	mov	r2, r4
 8011c66:	462b      	mov	r3, r5
 8011c68:	f7ee fcd6 	bl	8000618 <__aeabi_dmul>
 8011c6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011c70 <_strtod_l>:
 8011c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c74:	ed2d 8b02 	vpush	{d8}
 8011c78:	b09b      	sub	sp, #108	; 0x6c
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	9213      	str	r2, [sp, #76]	; 0x4c
 8011c7e:	2200      	movs	r2, #0
 8011c80:	9216      	str	r2, [sp, #88]	; 0x58
 8011c82:	460d      	mov	r5, r1
 8011c84:	f04f 0800 	mov.w	r8, #0
 8011c88:	f04f 0900 	mov.w	r9, #0
 8011c8c:	460a      	mov	r2, r1
 8011c8e:	9215      	str	r2, [sp, #84]	; 0x54
 8011c90:	7811      	ldrb	r1, [r2, #0]
 8011c92:	292b      	cmp	r1, #43	; 0x2b
 8011c94:	d04c      	beq.n	8011d30 <_strtod_l+0xc0>
 8011c96:	d83a      	bhi.n	8011d0e <_strtod_l+0x9e>
 8011c98:	290d      	cmp	r1, #13
 8011c9a:	d834      	bhi.n	8011d06 <_strtod_l+0x96>
 8011c9c:	2908      	cmp	r1, #8
 8011c9e:	d834      	bhi.n	8011d0a <_strtod_l+0x9a>
 8011ca0:	2900      	cmp	r1, #0
 8011ca2:	d03d      	beq.n	8011d20 <_strtod_l+0xb0>
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	920a      	str	r2, [sp, #40]	; 0x28
 8011ca8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8011caa:	7832      	ldrb	r2, [r6, #0]
 8011cac:	2a30      	cmp	r2, #48	; 0x30
 8011cae:	f040 80b4 	bne.w	8011e1a <_strtod_l+0x1aa>
 8011cb2:	7872      	ldrb	r2, [r6, #1]
 8011cb4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8011cb8:	2a58      	cmp	r2, #88	; 0x58
 8011cba:	d170      	bne.n	8011d9e <_strtod_l+0x12e>
 8011cbc:	9302      	str	r3, [sp, #8]
 8011cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cc0:	9301      	str	r3, [sp, #4]
 8011cc2:	ab16      	add	r3, sp, #88	; 0x58
 8011cc4:	9300      	str	r3, [sp, #0]
 8011cc6:	4a8e      	ldr	r2, [pc, #568]	; (8011f00 <_strtod_l+0x290>)
 8011cc8:	ab17      	add	r3, sp, #92	; 0x5c
 8011cca:	a915      	add	r1, sp, #84	; 0x54
 8011ccc:	4620      	mov	r0, r4
 8011cce:	f001 f92f 	bl	8012f30 <__gethex>
 8011cd2:	f010 070f 	ands.w	r7, r0, #15
 8011cd6:	4605      	mov	r5, r0
 8011cd8:	d005      	beq.n	8011ce6 <_strtod_l+0x76>
 8011cda:	2f06      	cmp	r7, #6
 8011cdc:	d12a      	bne.n	8011d34 <_strtod_l+0xc4>
 8011cde:	3601      	adds	r6, #1
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	9615      	str	r6, [sp, #84]	; 0x54
 8011ce4:	930a      	str	r3, [sp, #40]	; 0x28
 8011ce6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	f040 857f 	bne.w	80127ec <_strtod_l+0xb7c>
 8011cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cf0:	b1db      	cbz	r3, 8011d2a <_strtod_l+0xba>
 8011cf2:	4642      	mov	r2, r8
 8011cf4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011cf8:	ec43 2b10 	vmov	d0, r2, r3
 8011cfc:	b01b      	add	sp, #108	; 0x6c
 8011cfe:	ecbd 8b02 	vpop	{d8}
 8011d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d06:	2920      	cmp	r1, #32
 8011d08:	d1cc      	bne.n	8011ca4 <_strtod_l+0x34>
 8011d0a:	3201      	adds	r2, #1
 8011d0c:	e7bf      	b.n	8011c8e <_strtod_l+0x1e>
 8011d0e:	292d      	cmp	r1, #45	; 0x2d
 8011d10:	d1c8      	bne.n	8011ca4 <_strtod_l+0x34>
 8011d12:	2101      	movs	r1, #1
 8011d14:	910a      	str	r1, [sp, #40]	; 0x28
 8011d16:	1c51      	adds	r1, r2, #1
 8011d18:	9115      	str	r1, [sp, #84]	; 0x54
 8011d1a:	7852      	ldrb	r2, [r2, #1]
 8011d1c:	2a00      	cmp	r2, #0
 8011d1e:	d1c3      	bne.n	8011ca8 <_strtod_l+0x38>
 8011d20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011d22:	9515      	str	r5, [sp, #84]	; 0x54
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	f040 855f 	bne.w	80127e8 <_strtod_l+0xb78>
 8011d2a:	4642      	mov	r2, r8
 8011d2c:	464b      	mov	r3, r9
 8011d2e:	e7e3      	b.n	8011cf8 <_strtod_l+0x88>
 8011d30:	2100      	movs	r1, #0
 8011d32:	e7ef      	b.n	8011d14 <_strtod_l+0xa4>
 8011d34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011d36:	b13a      	cbz	r2, 8011d48 <_strtod_l+0xd8>
 8011d38:	2135      	movs	r1, #53	; 0x35
 8011d3a:	a818      	add	r0, sp, #96	; 0x60
 8011d3c:	f7ff ff37 	bl	8011bae <__copybits>
 8011d40:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011d42:	4620      	mov	r0, r4
 8011d44:	f7ff fb0a 	bl	801135c <_Bfree>
 8011d48:	3f01      	subs	r7, #1
 8011d4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011d4c:	2f04      	cmp	r7, #4
 8011d4e:	d806      	bhi.n	8011d5e <_strtod_l+0xee>
 8011d50:	e8df f007 	tbb	[pc, r7]
 8011d54:	201d0314 	.word	0x201d0314
 8011d58:	14          	.byte	0x14
 8011d59:	00          	.byte	0x00
 8011d5a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8011d5e:	05e9      	lsls	r1, r5, #23
 8011d60:	bf48      	it	mi
 8011d62:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8011d66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011d6a:	0d1b      	lsrs	r3, r3, #20
 8011d6c:	051b      	lsls	r3, r3, #20
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d1b9      	bne.n	8011ce6 <_strtod_l+0x76>
 8011d72:	f7fe faf9 	bl	8010368 <__errno>
 8011d76:	2322      	movs	r3, #34	; 0x22
 8011d78:	6003      	str	r3, [r0, #0]
 8011d7a:	e7b4      	b.n	8011ce6 <_strtod_l+0x76>
 8011d7c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8011d80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011d84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011d88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011d8c:	e7e7      	b.n	8011d5e <_strtod_l+0xee>
 8011d8e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011f08 <_strtod_l+0x298>
 8011d92:	e7e4      	b.n	8011d5e <_strtod_l+0xee>
 8011d94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011d98:	f04f 38ff 	mov.w	r8, #4294967295
 8011d9c:	e7df      	b.n	8011d5e <_strtod_l+0xee>
 8011d9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011da0:	1c5a      	adds	r2, r3, #1
 8011da2:	9215      	str	r2, [sp, #84]	; 0x54
 8011da4:	785b      	ldrb	r3, [r3, #1]
 8011da6:	2b30      	cmp	r3, #48	; 0x30
 8011da8:	d0f9      	beq.n	8011d9e <_strtod_l+0x12e>
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d09b      	beq.n	8011ce6 <_strtod_l+0x76>
 8011dae:	2301      	movs	r3, #1
 8011db0:	f04f 0a00 	mov.w	sl, #0
 8011db4:	9304      	str	r3, [sp, #16]
 8011db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011db8:	930b      	str	r3, [sp, #44]	; 0x2c
 8011dba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8011dbe:	46d3      	mov	fp, sl
 8011dc0:	220a      	movs	r2, #10
 8011dc2:	9815      	ldr	r0, [sp, #84]	; 0x54
 8011dc4:	7806      	ldrb	r6, [r0, #0]
 8011dc6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011dca:	b2d9      	uxtb	r1, r3
 8011dcc:	2909      	cmp	r1, #9
 8011dce:	d926      	bls.n	8011e1e <_strtod_l+0x1ae>
 8011dd0:	494c      	ldr	r1, [pc, #304]	; (8011f04 <_strtod_l+0x294>)
 8011dd2:	2201      	movs	r2, #1
 8011dd4:	f000 ffe6 	bl	8012da4 <strncmp>
 8011dd8:	2800      	cmp	r0, #0
 8011dda:	d030      	beq.n	8011e3e <_strtod_l+0x1ce>
 8011ddc:	2000      	movs	r0, #0
 8011dde:	4632      	mov	r2, r6
 8011de0:	9005      	str	r0, [sp, #20]
 8011de2:	465e      	mov	r6, fp
 8011de4:	4603      	mov	r3, r0
 8011de6:	2a65      	cmp	r2, #101	; 0x65
 8011de8:	d001      	beq.n	8011dee <_strtod_l+0x17e>
 8011dea:	2a45      	cmp	r2, #69	; 0x45
 8011dec:	d113      	bne.n	8011e16 <_strtod_l+0x1a6>
 8011dee:	b91e      	cbnz	r6, 8011df8 <_strtod_l+0x188>
 8011df0:	9a04      	ldr	r2, [sp, #16]
 8011df2:	4302      	orrs	r2, r0
 8011df4:	d094      	beq.n	8011d20 <_strtod_l+0xb0>
 8011df6:	2600      	movs	r6, #0
 8011df8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8011dfa:	1c6a      	adds	r2, r5, #1
 8011dfc:	9215      	str	r2, [sp, #84]	; 0x54
 8011dfe:	786a      	ldrb	r2, [r5, #1]
 8011e00:	2a2b      	cmp	r2, #43	; 0x2b
 8011e02:	d074      	beq.n	8011eee <_strtod_l+0x27e>
 8011e04:	2a2d      	cmp	r2, #45	; 0x2d
 8011e06:	d078      	beq.n	8011efa <_strtod_l+0x28a>
 8011e08:	f04f 0c00 	mov.w	ip, #0
 8011e0c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8011e10:	2909      	cmp	r1, #9
 8011e12:	d97f      	bls.n	8011f14 <_strtod_l+0x2a4>
 8011e14:	9515      	str	r5, [sp, #84]	; 0x54
 8011e16:	2700      	movs	r7, #0
 8011e18:	e09e      	b.n	8011f58 <_strtod_l+0x2e8>
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	e7c8      	b.n	8011db0 <_strtod_l+0x140>
 8011e1e:	f1bb 0f08 	cmp.w	fp, #8
 8011e22:	bfd8      	it	le
 8011e24:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8011e26:	f100 0001 	add.w	r0, r0, #1
 8011e2a:	bfda      	itte	le
 8011e2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8011e30:	9309      	strle	r3, [sp, #36]	; 0x24
 8011e32:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8011e36:	f10b 0b01 	add.w	fp, fp, #1
 8011e3a:	9015      	str	r0, [sp, #84]	; 0x54
 8011e3c:	e7c1      	b.n	8011dc2 <_strtod_l+0x152>
 8011e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e40:	1c5a      	adds	r2, r3, #1
 8011e42:	9215      	str	r2, [sp, #84]	; 0x54
 8011e44:	785a      	ldrb	r2, [r3, #1]
 8011e46:	f1bb 0f00 	cmp.w	fp, #0
 8011e4a:	d037      	beq.n	8011ebc <_strtod_l+0x24c>
 8011e4c:	9005      	str	r0, [sp, #20]
 8011e4e:	465e      	mov	r6, fp
 8011e50:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8011e54:	2b09      	cmp	r3, #9
 8011e56:	d912      	bls.n	8011e7e <_strtod_l+0x20e>
 8011e58:	2301      	movs	r3, #1
 8011e5a:	e7c4      	b.n	8011de6 <_strtod_l+0x176>
 8011e5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e5e:	1c5a      	adds	r2, r3, #1
 8011e60:	9215      	str	r2, [sp, #84]	; 0x54
 8011e62:	785a      	ldrb	r2, [r3, #1]
 8011e64:	3001      	adds	r0, #1
 8011e66:	2a30      	cmp	r2, #48	; 0x30
 8011e68:	d0f8      	beq.n	8011e5c <_strtod_l+0x1ec>
 8011e6a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011e6e:	2b08      	cmp	r3, #8
 8011e70:	f200 84c1 	bhi.w	80127f6 <_strtod_l+0xb86>
 8011e74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011e76:	9005      	str	r0, [sp, #20]
 8011e78:	2000      	movs	r0, #0
 8011e7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e7c:	4606      	mov	r6, r0
 8011e7e:	3a30      	subs	r2, #48	; 0x30
 8011e80:	f100 0301 	add.w	r3, r0, #1
 8011e84:	d014      	beq.n	8011eb0 <_strtod_l+0x240>
 8011e86:	9905      	ldr	r1, [sp, #20]
 8011e88:	4419      	add	r1, r3
 8011e8a:	9105      	str	r1, [sp, #20]
 8011e8c:	4633      	mov	r3, r6
 8011e8e:	eb00 0c06 	add.w	ip, r0, r6
 8011e92:	210a      	movs	r1, #10
 8011e94:	4563      	cmp	r3, ip
 8011e96:	d113      	bne.n	8011ec0 <_strtod_l+0x250>
 8011e98:	1833      	adds	r3, r6, r0
 8011e9a:	2b08      	cmp	r3, #8
 8011e9c:	f106 0601 	add.w	r6, r6, #1
 8011ea0:	4406      	add	r6, r0
 8011ea2:	dc1a      	bgt.n	8011eda <_strtod_l+0x26a>
 8011ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ea6:	230a      	movs	r3, #10
 8011ea8:	fb03 2301 	mla	r3, r3, r1, r2
 8011eac:	9309      	str	r3, [sp, #36]	; 0x24
 8011eae:	2300      	movs	r3, #0
 8011eb0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011eb2:	1c51      	adds	r1, r2, #1
 8011eb4:	9115      	str	r1, [sp, #84]	; 0x54
 8011eb6:	7852      	ldrb	r2, [r2, #1]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	e7c9      	b.n	8011e50 <_strtod_l+0x1e0>
 8011ebc:	4658      	mov	r0, fp
 8011ebe:	e7d2      	b.n	8011e66 <_strtod_l+0x1f6>
 8011ec0:	2b08      	cmp	r3, #8
 8011ec2:	f103 0301 	add.w	r3, r3, #1
 8011ec6:	dc03      	bgt.n	8011ed0 <_strtod_l+0x260>
 8011ec8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011eca:	434f      	muls	r7, r1
 8011ecc:	9709      	str	r7, [sp, #36]	; 0x24
 8011ece:	e7e1      	b.n	8011e94 <_strtod_l+0x224>
 8011ed0:	2b10      	cmp	r3, #16
 8011ed2:	bfd8      	it	le
 8011ed4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8011ed8:	e7dc      	b.n	8011e94 <_strtod_l+0x224>
 8011eda:	2e10      	cmp	r6, #16
 8011edc:	bfdc      	itt	le
 8011ede:	230a      	movle	r3, #10
 8011ee0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8011ee4:	e7e3      	b.n	8011eae <_strtod_l+0x23e>
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	9305      	str	r3, [sp, #20]
 8011eea:	2301      	movs	r3, #1
 8011eec:	e780      	b.n	8011df0 <_strtod_l+0x180>
 8011eee:	f04f 0c00 	mov.w	ip, #0
 8011ef2:	1caa      	adds	r2, r5, #2
 8011ef4:	9215      	str	r2, [sp, #84]	; 0x54
 8011ef6:	78aa      	ldrb	r2, [r5, #2]
 8011ef8:	e788      	b.n	8011e0c <_strtod_l+0x19c>
 8011efa:	f04f 0c01 	mov.w	ip, #1
 8011efe:	e7f8      	b.n	8011ef2 <_strtod_l+0x282>
 8011f00:	08015978 	.word	0x08015978
 8011f04:	08015974 	.word	0x08015974
 8011f08:	7ff00000 	.word	0x7ff00000
 8011f0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011f0e:	1c51      	adds	r1, r2, #1
 8011f10:	9115      	str	r1, [sp, #84]	; 0x54
 8011f12:	7852      	ldrb	r2, [r2, #1]
 8011f14:	2a30      	cmp	r2, #48	; 0x30
 8011f16:	d0f9      	beq.n	8011f0c <_strtod_l+0x29c>
 8011f18:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8011f1c:	2908      	cmp	r1, #8
 8011f1e:	f63f af7a 	bhi.w	8011e16 <_strtod_l+0x1a6>
 8011f22:	3a30      	subs	r2, #48	; 0x30
 8011f24:	9208      	str	r2, [sp, #32]
 8011f26:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011f28:	920c      	str	r2, [sp, #48]	; 0x30
 8011f2a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011f2c:	1c57      	adds	r7, r2, #1
 8011f2e:	9715      	str	r7, [sp, #84]	; 0x54
 8011f30:	7852      	ldrb	r2, [r2, #1]
 8011f32:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8011f36:	f1be 0f09 	cmp.w	lr, #9
 8011f3a:	d938      	bls.n	8011fae <_strtod_l+0x33e>
 8011f3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011f3e:	1a7f      	subs	r7, r7, r1
 8011f40:	2f08      	cmp	r7, #8
 8011f42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011f46:	dc03      	bgt.n	8011f50 <_strtod_l+0x2e0>
 8011f48:	9908      	ldr	r1, [sp, #32]
 8011f4a:	428f      	cmp	r7, r1
 8011f4c:	bfa8      	it	ge
 8011f4e:	460f      	movge	r7, r1
 8011f50:	f1bc 0f00 	cmp.w	ip, #0
 8011f54:	d000      	beq.n	8011f58 <_strtod_l+0x2e8>
 8011f56:	427f      	negs	r7, r7
 8011f58:	2e00      	cmp	r6, #0
 8011f5a:	d14f      	bne.n	8011ffc <_strtod_l+0x38c>
 8011f5c:	9904      	ldr	r1, [sp, #16]
 8011f5e:	4301      	orrs	r1, r0
 8011f60:	f47f aec1 	bne.w	8011ce6 <_strtod_l+0x76>
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	f47f aedb 	bne.w	8011d20 <_strtod_l+0xb0>
 8011f6a:	2a69      	cmp	r2, #105	; 0x69
 8011f6c:	d029      	beq.n	8011fc2 <_strtod_l+0x352>
 8011f6e:	dc26      	bgt.n	8011fbe <_strtod_l+0x34e>
 8011f70:	2a49      	cmp	r2, #73	; 0x49
 8011f72:	d026      	beq.n	8011fc2 <_strtod_l+0x352>
 8011f74:	2a4e      	cmp	r2, #78	; 0x4e
 8011f76:	f47f aed3 	bne.w	8011d20 <_strtod_l+0xb0>
 8011f7a:	499b      	ldr	r1, [pc, #620]	; (80121e8 <_strtod_l+0x578>)
 8011f7c:	a815      	add	r0, sp, #84	; 0x54
 8011f7e:	f001 fa17 	bl	80133b0 <__match>
 8011f82:	2800      	cmp	r0, #0
 8011f84:	f43f aecc 	beq.w	8011d20 <_strtod_l+0xb0>
 8011f88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f8a:	781b      	ldrb	r3, [r3, #0]
 8011f8c:	2b28      	cmp	r3, #40	; 0x28
 8011f8e:	d12f      	bne.n	8011ff0 <_strtod_l+0x380>
 8011f90:	4996      	ldr	r1, [pc, #600]	; (80121ec <_strtod_l+0x57c>)
 8011f92:	aa18      	add	r2, sp, #96	; 0x60
 8011f94:	a815      	add	r0, sp, #84	; 0x54
 8011f96:	f001 fa1f 	bl	80133d8 <__hexnan>
 8011f9a:	2805      	cmp	r0, #5
 8011f9c:	d128      	bne.n	8011ff0 <_strtod_l+0x380>
 8011f9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011fa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011fa4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011fa8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011fac:	e69b      	b.n	8011ce6 <_strtod_l+0x76>
 8011fae:	9f08      	ldr	r7, [sp, #32]
 8011fb0:	210a      	movs	r1, #10
 8011fb2:	fb01 2107 	mla	r1, r1, r7, r2
 8011fb6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8011fba:	9208      	str	r2, [sp, #32]
 8011fbc:	e7b5      	b.n	8011f2a <_strtod_l+0x2ba>
 8011fbe:	2a6e      	cmp	r2, #110	; 0x6e
 8011fc0:	e7d9      	b.n	8011f76 <_strtod_l+0x306>
 8011fc2:	498b      	ldr	r1, [pc, #556]	; (80121f0 <_strtod_l+0x580>)
 8011fc4:	a815      	add	r0, sp, #84	; 0x54
 8011fc6:	f001 f9f3 	bl	80133b0 <__match>
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	f43f aea8 	beq.w	8011d20 <_strtod_l+0xb0>
 8011fd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fd2:	4988      	ldr	r1, [pc, #544]	; (80121f4 <_strtod_l+0x584>)
 8011fd4:	3b01      	subs	r3, #1
 8011fd6:	a815      	add	r0, sp, #84	; 0x54
 8011fd8:	9315      	str	r3, [sp, #84]	; 0x54
 8011fda:	f001 f9e9 	bl	80133b0 <__match>
 8011fde:	b910      	cbnz	r0, 8011fe6 <_strtod_l+0x376>
 8011fe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fe2:	3301      	adds	r3, #1
 8011fe4:	9315      	str	r3, [sp, #84]	; 0x54
 8011fe6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8012204 <_strtod_l+0x594>
 8011fea:	f04f 0800 	mov.w	r8, #0
 8011fee:	e67a      	b.n	8011ce6 <_strtod_l+0x76>
 8011ff0:	4881      	ldr	r0, [pc, #516]	; (80121f8 <_strtod_l+0x588>)
 8011ff2:	f000 fef9 	bl	8012de8 <nan>
 8011ff6:	ec59 8b10 	vmov	r8, r9, d0
 8011ffa:	e674      	b.n	8011ce6 <_strtod_l+0x76>
 8011ffc:	9b05      	ldr	r3, [sp, #20]
 8011ffe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012000:	1afb      	subs	r3, r7, r3
 8012002:	f1bb 0f00 	cmp.w	fp, #0
 8012006:	bf08      	it	eq
 8012008:	46b3      	moveq	fp, r6
 801200a:	2e10      	cmp	r6, #16
 801200c:	9308      	str	r3, [sp, #32]
 801200e:	4635      	mov	r5, r6
 8012010:	bfa8      	it	ge
 8012012:	2510      	movge	r5, #16
 8012014:	f7ee fa86 	bl	8000524 <__aeabi_ui2d>
 8012018:	2e09      	cmp	r6, #9
 801201a:	4680      	mov	r8, r0
 801201c:	4689      	mov	r9, r1
 801201e:	dd13      	ble.n	8012048 <_strtod_l+0x3d8>
 8012020:	4b76      	ldr	r3, [pc, #472]	; (80121fc <_strtod_l+0x58c>)
 8012022:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012026:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801202a:	f7ee faf5 	bl	8000618 <__aeabi_dmul>
 801202e:	4680      	mov	r8, r0
 8012030:	4650      	mov	r0, sl
 8012032:	4689      	mov	r9, r1
 8012034:	f7ee fa76 	bl	8000524 <__aeabi_ui2d>
 8012038:	4602      	mov	r2, r0
 801203a:	460b      	mov	r3, r1
 801203c:	4640      	mov	r0, r8
 801203e:	4649      	mov	r1, r9
 8012040:	f7ee f934 	bl	80002ac <__adddf3>
 8012044:	4680      	mov	r8, r0
 8012046:	4689      	mov	r9, r1
 8012048:	2e0f      	cmp	r6, #15
 801204a:	dc38      	bgt.n	80120be <_strtod_l+0x44e>
 801204c:	9b08      	ldr	r3, [sp, #32]
 801204e:	2b00      	cmp	r3, #0
 8012050:	f43f ae49 	beq.w	8011ce6 <_strtod_l+0x76>
 8012054:	dd24      	ble.n	80120a0 <_strtod_l+0x430>
 8012056:	2b16      	cmp	r3, #22
 8012058:	dc0b      	bgt.n	8012072 <_strtod_l+0x402>
 801205a:	4968      	ldr	r1, [pc, #416]	; (80121fc <_strtod_l+0x58c>)
 801205c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012064:	4642      	mov	r2, r8
 8012066:	464b      	mov	r3, r9
 8012068:	f7ee fad6 	bl	8000618 <__aeabi_dmul>
 801206c:	4680      	mov	r8, r0
 801206e:	4689      	mov	r9, r1
 8012070:	e639      	b.n	8011ce6 <_strtod_l+0x76>
 8012072:	9a08      	ldr	r2, [sp, #32]
 8012074:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8012078:	4293      	cmp	r3, r2
 801207a:	db20      	blt.n	80120be <_strtod_l+0x44e>
 801207c:	4c5f      	ldr	r4, [pc, #380]	; (80121fc <_strtod_l+0x58c>)
 801207e:	f1c6 060f 	rsb	r6, r6, #15
 8012082:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8012086:	4642      	mov	r2, r8
 8012088:	464b      	mov	r3, r9
 801208a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801208e:	f7ee fac3 	bl	8000618 <__aeabi_dmul>
 8012092:	9b08      	ldr	r3, [sp, #32]
 8012094:	1b9e      	subs	r6, r3, r6
 8012096:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801209a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801209e:	e7e3      	b.n	8012068 <_strtod_l+0x3f8>
 80120a0:	9b08      	ldr	r3, [sp, #32]
 80120a2:	3316      	adds	r3, #22
 80120a4:	db0b      	blt.n	80120be <_strtod_l+0x44e>
 80120a6:	9b05      	ldr	r3, [sp, #20]
 80120a8:	1bdf      	subs	r7, r3, r7
 80120aa:	4b54      	ldr	r3, [pc, #336]	; (80121fc <_strtod_l+0x58c>)
 80120ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80120b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80120b4:	4640      	mov	r0, r8
 80120b6:	4649      	mov	r1, r9
 80120b8:	f7ee fbd8 	bl	800086c <__aeabi_ddiv>
 80120bc:	e7d6      	b.n	801206c <_strtod_l+0x3fc>
 80120be:	9b08      	ldr	r3, [sp, #32]
 80120c0:	1b75      	subs	r5, r6, r5
 80120c2:	441d      	add	r5, r3
 80120c4:	2d00      	cmp	r5, #0
 80120c6:	dd70      	ble.n	80121aa <_strtod_l+0x53a>
 80120c8:	f015 030f 	ands.w	r3, r5, #15
 80120cc:	d00a      	beq.n	80120e4 <_strtod_l+0x474>
 80120ce:	494b      	ldr	r1, [pc, #300]	; (80121fc <_strtod_l+0x58c>)
 80120d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80120d4:	4642      	mov	r2, r8
 80120d6:	464b      	mov	r3, r9
 80120d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80120dc:	f7ee fa9c 	bl	8000618 <__aeabi_dmul>
 80120e0:	4680      	mov	r8, r0
 80120e2:	4689      	mov	r9, r1
 80120e4:	f035 050f 	bics.w	r5, r5, #15
 80120e8:	d04d      	beq.n	8012186 <_strtod_l+0x516>
 80120ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80120ee:	dd22      	ble.n	8012136 <_strtod_l+0x4c6>
 80120f0:	2500      	movs	r5, #0
 80120f2:	46ab      	mov	fp, r5
 80120f4:	9509      	str	r5, [sp, #36]	; 0x24
 80120f6:	9505      	str	r5, [sp, #20]
 80120f8:	2322      	movs	r3, #34	; 0x22
 80120fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8012204 <_strtod_l+0x594>
 80120fe:	6023      	str	r3, [r4, #0]
 8012100:	f04f 0800 	mov.w	r8, #0
 8012104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012106:	2b00      	cmp	r3, #0
 8012108:	f43f aded 	beq.w	8011ce6 <_strtod_l+0x76>
 801210c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801210e:	4620      	mov	r0, r4
 8012110:	f7ff f924 	bl	801135c <_Bfree>
 8012114:	9905      	ldr	r1, [sp, #20]
 8012116:	4620      	mov	r0, r4
 8012118:	f7ff f920 	bl	801135c <_Bfree>
 801211c:	4659      	mov	r1, fp
 801211e:	4620      	mov	r0, r4
 8012120:	f7ff f91c 	bl	801135c <_Bfree>
 8012124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012126:	4620      	mov	r0, r4
 8012128:	f7ff f918 	bl	801135c <_Bfree>
 801212c:	4629      	mov	r1, r5
 801212e:	4620      	mov	r0, r4
 8012130:	f7ff f914 	bl	801135c <_Bfree>
 8012134:	e5d7      	b.n	8011ce6 <_strtod_l+0x76>
 8012136:	4b32      	ldr	r3, [pc, #200]	; (8012200 <_strtod_l+0x590>)
 8012138:	9304      	str	r3, [sp, #16]
 801213a:	2300      	movs	r3, #0
 801213c:	112d      	asrs	r5, r5, #4
 801213e:	4640      	mov	r0, r8
 8012140:	4649      	mov	r1, r9
 8012142:	469a      	mov	sl, r3
 8012144:	2d01      	cmp	r5, #1
 8012146:	dc21      	bgt.n	801218c <_strtod_l+0x51c>
 8012148:	b10b      	cbz	r3, 801214e <_strtod_l+0x4de>
 801214a:	4680      	mov	r8, r0
 801214c:	4689      	mov	r9, r1
 801214e:	492c      	ldr	r1, [pc, #176]	; (8012200 <_strtod_l+0x590>)
 8012150:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012154:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012158:	4642      	mov	r2, r8
 801215a:	464b      	mov	r3, r9
 801215c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012160:	f7ee fa5a 	bl	8000618 <__aeabi_dmul>
 8012164:	4b27      	ldr	r3, [pc, #156]	; (8012204 <_strtod_l+0x594>)
 8012166:	460a      	mov	r2, r1
 8012168:	400b      	ands	r3, r1
 801216a:	4927      	ldr	r1, [pc, #156]	; (8012208 <_strtod_l+0x598>)
 801216c:	428b      	cmp	r3, r1
 801216e:	4680      	mov	r8, r0
 8012170:	d8be      	bhi.n	80120f0 <_strtod_l+0x480>
 8012172:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012176:	428b      	cmp	r3, r1
 8012178:	bf86      	itte	hi
 801217a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801220c <_strtod_l+0x59c>
 801217e:	f04f 38ff 	movhi.w	r8, #4294967295
 8012182:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012186:	2300      	movs	r3, #0
 8012188:	9304      	str	r3, [sp, #16]
 801218a:	e07b      	b.n	8012284 <_strtod_l+0x614>
 801218c:	07ea      	lsls	r2, r5, #31
 801218e:	d505      	bpl.n	801219c <_strtod_l+0x52c>
 8012190:	9b04      	ldr	r3, [sp, #16]
 8012192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012196:	f7ee fa3f 	bl	8000618 <__aeabi_dmul>
 801219a:	2301      	movs	r3, #1
 801219c:	9a04      	ldr	r2, [sp, #16]
 801219e:	3208      	adds	r2, #8
 80121a0:	f10a 0a01 	add.w	sl, sl, #1
 80121a4:	106d      	asrs	r5, r5, #1
 80121a6:	9204      	str	r2, [sp, #16]
 80121a8:	e7cc      	b.n	8012144 <_strtod_l+0x4d4>
 80121aa:	d0ec      	beq.n	8012186 <_strtod_l+0x516>
 80121ac:	426d      	negs	r5, r5
 80121ae:	f015 020f 	ands.w	r2, r5, #15
 80121b2:	d00a      	beq.n	80121ca <_strtod_l+0x55a>
 80121b4:	4b11      	ldr	r3, [pc, #68]	; (80121fc <_strtod_l+0x58c>)
 80121b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80121ba:	4640      	mov	r0, r8
 80121bc:	4649      	mov	r1, r9
 80121be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c2:	f7ee fb53 	bl	800086c <__aeabi_ddiv>
 80121c6:	4680      	mov	r8, r0
 80121c8:	4689      	mov	r9, r1
 80121ca:	112d      	asrs	r5, r5, #4
 80121cc:	d0db      	beq.n	8012186 <_strtod_l+0x516>
 80121ce:	2d1f      	cmp	r5, #31
 80121d0:	dd1e      	ble.n	8012210 <_strtod_l+0x5a0>
 80121d2:	2500      	movs	r5, #0
 80121d4:	46ab      	mov	fp, r5
 80121d6:	9509      	str	r5, [sp, #36]	; 0x24
 80121d8:	9505      	str	r5, [sp, #20]
 80121da:	2322      	movs	r3, #34	; 0x22
 80121dc:	f04f 0800 	mov.w	r8, #0
 80121e0:	f04f 0900 	mov.w	r9, #0
 80121e4:	6023      	str	r3, [r4, #0]
 80121e6:	e78d      	b.n	8012104 <_strtod_l+0x494>
 80121e8:	08015765 	.word	0x08015765
 80121ec:	0801598c 	.word	0x0801598c
 80121f0:	0801575d 	.word	0x0801575d
 80121f4:	08015794 	.word	0x08015794
 80121f8:	08015b1d 	.word	0x08015b1d
 80121fc:	080158a0 	.word	0x080158a0
 8012200:	08015878 	.word	0x08015878
 8012204:	7ff00000 	.word	0x7ff00000
 8012208:	7ca00000 	.word	0x7ca00000
 801220c:	7fefffff 	.word	0x7fefffff
 8012210:	f015 0310 	ands.w	r3, r5, #16
 8012214:	bf18      	it	ne
 8012216:	236a      	movne	r3, #106	; 0x6a
 8012218:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80125bc <_strtod_l+0x94c>
 801221c:	9304      	str	r3, [sp, #16]
 801221e:	4640      	mov	r0, r8
 8012220:	4649      	mov	r1, r9
 8012222:	2300      	movs	r3, #0
 8012224:	07ea      	lsls	r2, r5, #31
 8012226:	d504      	bpl.n	8012232 <_strtod_l+0x5c2>
 8012228:	e9da 2300 	ldrd	r2, r3, [sl]
 801222c:	f7ee f9f4 	bl	8000618 <__aeabi_dmul>
 8012230:	2301      	movs	r3, #1
 8012232:	106d      	asrs	r5, r5, #1
 8012234:	f10a 0a08 	add.w	sl, sl, #8
 8012238:	d1f4      	bne.n	8012224 <_strtod_l+0x5b4>
 801223a:	b10b      	cbz	r3, 8012240 <_strtod_l+0x5d0>
 801223c:	4680      	mov	r8, r0
 801223e:	4689      	mov	r9, r1
 8012240:	9b04      	ldr	r3, [sp, #16]
 8012242:	b1bb      	cbz	r3, 8012274 <_strtod_l+0x604>
 8012244:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012248:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801224c:	2b00      	cmp	r3, #0
 801224e:	4649      	mov	r1, r9
 8012250:	dd10      	ble.n	8012274 <_strtod_l+0x604>
 8012252:	2b1f      	cmp	r3, #31
 8012254:	f340 811e 	ble.w	8012494 <_strtod_l+0x824>
 8012258:	2b34      	cmp	r3, #52	; 0x34
 801225a:	bfde      	ittt	le
 801225c:	f04f 33ff 	movle.w	r3, #4294967295
 8012260:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012264:	4093      	lslle	r3, r2
 8012266:	f04f 0800 	mov.w	r8, #0
 801226a:	bfcc      	ite	gt
 801226c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012270:	ea03 0901 	andle.w	r9, r3, r1
 8012274:	2200      	movs	r2, #0
 8012276:	2300      	movs	r3, #0
 8012278:	4640      	mov	r0, r8
 801227a:	4649      	mov	r1, r9
 801227c:	f7ee fc34 	bl	8000ae8 <__aeabi_dcmpeq>
 8012280:	2800      	cmp	r0, #0
 8012282:	d1a6      	bne.n	80121d2 <_strtod_l+0x562>
 8012284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012286:	9300      	str	r3, [sp, #0]
 8012288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801228a:	4633      	mov	r3, r6
 801228c:	465a      	mov	r2, fp
 801228e:	4620      	mov	r0, r4
 8012290:	f7ff f8cc 	bl	801142c <__s2b>
 8012294:	9009      	str	r0, [sp, #36]	; 0x24
 8012296:	2800      	cmp	r0, #0
 8012298:	f43f af2a 	beq.w	80120f0 <_strtod_l+0x480>
 801229c:	9a08      	ldr	r2, [sp, #32]
 801229e:	9b05      	ldr	r3, [sp, #20]
 80122a0:	2a00      	cmp	r2, #0
 80122a2:	eba3 0307 	sub.w	r3, r3, r7
 80122a6:	bfa8      	it	ge
 80122a8:	2300      	movge	r3, #0
 80122aa:	930c      	str	r3, [sp, #48]	; 0x30
 80122ac:	2500      	movs	r5, #0
 80122ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80122b2:	9312      	str	r3, [sp, #72]	; 0x48
 80122b4:	46ab      	mov	fp, r5
 80122b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122b8:	4620      	mov	r0, r4
 80122ba:	6859      	ldr	r1, [r3, #4]
 80122bc:	f7ff f80e 	bl	80112dc <_Balloc>
 80122c0:	9005      	str	r0, [sp, #20]
 80122c2:	2800      	cmp	r0, #0
 80122c4:	f43f af18 	beq.w	80120f8 <_strtod_l+0x488>
 80122c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122ca:	691a      	ldr	r2, [r3, #16]
 80122cc:	3202      	adds	r2, #2
 80122ce:	f103 010c 	add.w	r1, r3, #12
 80122d2:	0092      	lsls	r2, r2, #2
 80122d4:	300c      	adds	r0, #12
 80122d6:	f7fe f873 	bl	80103c0 <memcpy>
 80122da:	ec49 8b10 	vmov	d0, r8, r9
 80122de:	aa18      	add	r2, sp, #96	; 0x60
 80122e0:	a917      	add	r1, sp, #92	; 0x5c
 80122e2:	4620      	mov	r0, r4
 80122e4:	f7ff fbd6 	bl	8011a94 <__d2b>
 80122e8:	ec49 8b18 	vmov	d8, r8, r9
 80122ec:	9016      	str	r0, [sp, #88]	; 0x58
 80122ee:	2800      	cmp	r0, #0
 80122f0:	f43f af02 	beq.w	80120f8 <_strtod_l+0x488>
 80122f4:	2101      	movs	r1, #1
 80122f6:	4620      	mov	r0, r4
 80122f8:	f7ff f930 	bl	801155c <__i2b>
 80122fc:	4683      	mov	fp, r0
 80122fe:	2800      	cmp	r0, #0
 8012300:	f43f aefa 	beq.w	80120f8 <_strtod_l+0x488>
 8012304:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012306:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012308:	2e00      	cmp	r6, #0
 801230a:	bfab      	itete	ge
 801230c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801230e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8012310:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012312:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8012316:	bfac      	ite	ge
 8012318:	eb06 0a03 	addge.w	sl, r6, r3
 801231c:	1b9f      	sublt	r7, r3, r6
 801231e:	9b04      	ldr	r3, [sp, #16]
 8012320:	1af6      	subs	r6, r6, r3
 8012322:	4416      	add	r6, r2
 8012324:	4ba0      	ldr	r3, [pc, #640]	; (80125a8 <_strtod_l+0x938>)
 8012326:	3e01      	subs	r6, #1
 8012328:	429e      	cmp	r6, r3
 801232a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801232e:	f280 80c4 	bge.w	80124ba <_strtod_l+0x84a>
 8012332:	1b9b      	subs	r3, r3, r6
 8012334:	2b1f      	cmp	r3, #31
 8012336:	eba2 0203 	sub.w	r2, r2, r3
 801233a:	f04f 0101 	mov.w	r1, #1
 801233e:	f300 80b0 	bgt.w	80124a2 <_strtod_l+0x832>
 8012342:	fa01 f303 	lsl.w	r3, r1, r3
 8012346:	930e      	str	r3, [sp, #56]	; 0x38
 8012348:	2300      	movs	r3, #0
 801234a:	930d      	str	r3, [sp, #52]	; 0x34
 801234c:	eb0a 0602 	add.w	r6, sl, r2
 8012350:	9b04      	ldr	r3, [sp, #16]
 8012352:	45b2      	cmp	sl, r6
 8012354:	4417      	add	r7, r2
 8012356:	441f      	add	r7, r3
 8012358:	4653      	mov	r3, sl
 801235a:	bfa8      	it	ge
 801235c:	4633      	movge	r3, r6
 801235e:	42bb      	cmp	r3, r7
 8012360:	bfa8      	it	ge
 8012362:	463b      	movge	r3, r7
 8012364:	2b00      	cmp	r3, #0
 8012366:	bfc2      	ittt	gt
 8012368:	1af6      	subgt	r6, r6, r3
 801236a:	1aff      	subgt	r7, r7, r3
 801236c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8012370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012372:	2b00      	cmp	r3, #0
 8012374:	dd17      	ble.n	80123a6 <_strtod_l+0x736>
 8012376:	4659      	mov	r1, fp
 8012378:	461a      	mov	r2, r3
 801237a:	4620      	mov	r0, r4
 801237c:	f7ff f9ae 	bl	80116dc <__pow5mult>
 8012380:	4683      	mov	fp, r0
 8012382:	2800      	cmp	r0, #0
 8012384:	f43f aeb8 	beq.w	80120f8 <_strtod_l+0x488>
 8012388:	4601      	mov	r1, r0
 801238a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801238c:	4620      	mov	r0, r4
 801238e:	f7ff f8fb 	bl	8011588 <__multiply>
 8012392:	900b      	str	r0, [sp, #44]	; 0x2c
 8012394:	2800      	cmp	r0, #0
 8012396:	f43f aeaf 	beq.w	80120f8 <_strtod_l+0x488>
 801239a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801239c:	4620      	mov	r0, r4
 801239e:	f7fe ffdd 	bl	801135c <_Bfree>
 80123a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123a4:	9316      	str	r3, [sp, #88]	; 0x58
 80123a6:	2e00      	cmp	r6, #0
 80123a8:	f300 808c 	bgt.w	80124c4 <_strtod_l+0x854>
 80123ac:	9b08      	ldr	r3, [sp, #32]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	dd08      	ble.n	80123c4 <_strtod_l+0x754>
 80123b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80123b4:	9905      	ldr	r1, [sp, #20]
 80123b6:	4620      	mov	r0, r4
 80123b8:	f7ff f990 	bl	80116dc <__pow5mult>
 80123bc:	9005      	str	r0, [sp, #20]
 80123be:	2800      	cmp	r0, #0
 80123c0:	f43f ae9a 	beq.w	80120f8 <_strtod_l+0x488>
 80123c4:	2f00      	cmp	r7, #0
 80123c6:	dd08      	ble.n	80123da <_strtod_l+0x76a>
 80123c8:	9905      	ldr	r1, [sp, #20]
 80123ca:	463a      	mov	r2, r7
 80123cc:	4620      	mov	r0, r4
 80123ce:	f7ff f9df 	bl	8011790 <__lshift>
 80123d2:	9005      	str	r0, [sp, #20]
 80123d4:	2800      	cmp	r0, #0
 80123d6:	f43f ae8f 	beq.w	80120f8 <_strtod_l+0x488>
 80123da:	f1ba 0f00 	cmp.w	sl, #0
 80123de:	dd08      	ble.n	80123f2 <_strtod_l+0x782>
 80123e0:	4659      	mov	r1, fp
 80123e2:	4652      	mov	r2, sl
 80123e4:	4620      	mov	r0, r4
 80123e6:	f7ff f9d3 	bl	8011790 <__lshift>
 80123ea:	4683      	mov	fp, r0
 80123ec:	2800      	cmp	r0, #0
 80123ee:	f43f ae83 	beq.w	80120f8 <_strtod_l+0x488>
 80123f2:	9a05      	ldr	r2, [sp, #20]
 80123f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80123f6:	4620      	mov	r0, r4
 80123f8:	f7ff fa52 	bl	80118a0 <__mdiff>
 80123fc:	4605      	mov	r5, r0
 80123fe:	2800      	cmp	r0, #0
 8012400:	f43f ae7a 	beq.w	80120f8 <_strtod_l+0x488>
 8012404:	68c3      	ldr	r3, [r0, #12]
 8012406:	930b      	str	r3, [sp, #44]	; 0x2c
 8012408:	2300      	movs	r3, #0
 801240a:	60c3      	str	r3, [r0, #12]
 801240c:	4659      	mov	r1, fp
 801240e:	f7ff fa2b 	bl	8011868 <__mcmp>
 8012412:	2800      	cmp	r0, #0
 8012414:	da60      	bge.n	80124d8 <_strtod_l+0x868>
 8012416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012418:	ea53 0308 	orrs.w	r3, r3, r8
 801241c:	f040 8084 	bne.w	8012528 <_strtod_l+0x8b8>
 8012420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012424:	2b00      	cmp	r3, #0
 8012426:	d17f      	bne.n	8012528 <_strtod_l+0x8b8>
 8012428:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801242c:	0d1b      	lsrs	r3, r3, #20
 801242e:	051b      	lsls	r3, r3, #20
 8012430:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012434:	d978      	bls.n	8012528 <_strtod_l+0x8b8>
 8012436:	696b      	ldr	r3, [r5, #20]
 8012438:	b913      	cbnz	r3, 8012440 <_strtod_l+0x7d0>
 801243a:	692b      	ldr	r3, [r5, #16]
 801243c:	2b01      	cmp	r3, #1
 801243e:	dd73      	ble.n	8012528 <_strtod_l+0x8b8>
 8012440:	4629      	mov	r1, r5
 8012442:	2201      	movs	r2, #1
 8012444:	4620      	mov	r0, r4
 8012446:	f7ff f9a3 	bl	8011790 <__lshift>
 801244a:	4659      	mov	r1, fp
 801244c:	4605      	mov	r5, r0
 801244e:	f7ff fa0b 	bl	8011868 <__mcmp>
 8012452:	2800      	cmp	r0, #0
 8012454:	dd68      	ble.n	8012528 <_strtod_l+0x8b8>
 8012456:	9904      	ldr	r1, [sp, #16]
 8012458:	4a54      	ldr	r2, [pc, #336]	; (80125ac <_strtod_l+0x93c>)
 801245a:	464b      	mov	r3, r9
 801245c:	2900      	cmp	r1, #0
 801245e:	f000 8084 	beq.w	801256a <_strtod_l+0x8fa>
 8012462:	ea02 0109 	and.w	r1, r2, r9
 8012466:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801246a:	dc7e      	bgt.n	801256a <_strtod_l+0x8fa>
 801246c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012470:	f77f aeb3 	ble.w	80121da <_strtod_l+0x56a>
 8012474:	4b4e      	ldr	r3, [pc, #312]	; (80125b0 <_strtod_l+0x940>)
 8012476:	4640      	mov	r0, r8
 8012478:	4649      	mov	r1, r9
 801247a:	2200      	movs	r2, #0
 801247c:	f7ee f8cc 	bl	8000618 <__aeabi_dmul>
 8012480:	4b4a      	ldr	r3, [pc, #296]	; (80125ac <_strtod_l+0x93c>)
 8012482:	400b      	ands	r3, r1
 8012484:	4680      	mov	r8, r0
 8012486:	4689      	mov	r9, r1
 8012488:	2b00      	cmp	r3, #0
 801248a:	f47f ae3f 	bne.w	801210c <_strtod_l+0x49c>
 801248e:	2322      	movs	r3, #34	; 0x22
 8012490:	6023      	str	r3, [r4, #0]
 8012492:	e63b      	b.n	801210c <_strtod_l+0x49c>
 8012494:	f04f 32ff 	mov.w	r2, #4294967295
 8012498:	fa02 f303 	lsl.w	r3, r2, r3
 801249c:	ea03 0808 	and.w	r8, r3, r8
 80124a0:	e6e8      	b.n	8012274 <_strtod_l+0x604>
 80124a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80124a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80124aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80124ae:	36e2      	adds	r6, #226	; 0xe2
 80124b0:	fa01 f306 	lsl.w	r3, r1, r6
 80124b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80124b8:	e748      	b.n	801234c <_strtod_l+0x6dc>
 80124ba:	2100      	movs	r1, #0
 80124bc:	2301      	movs	r3, #1
 80124be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80124c2:	e743      	b.n	801234c <_strtod_l+0x6dc>
 80124c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80124c6:	4632      	mov	r2, r6
 80124c8:	4620      	mov	r0, r4
 80124ca:	f7ff f961 	bl	8011790 <__lshift>
 80124ce:	9016      	str	r0, [sp, #88]	; 0x58
 80124d0:	2800      	cmp	r0, #0
 80124d2:	f47f af6b 	bne.w	80123ac <_strtod_l+0x73c>
 80124d6:	e60f      	b.n	80120f8 <_strtod_l+0x488>
 80124d8:	46ca      	mov	sl, r9
 80124da:	d171      	bne.n	80125c0 <_strtod_l+0x950>
 80124dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80124de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80124e2:	b352      	cbz	r2, 801253a <_strtod_l+0x8ca>
 80124e4:	4a33      	ldr	r2, [pc, #204]	; (80125b4 <_strtod_l+0x944>)
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d12a      	bne.n	8012540 <_strtod_l+0x8d0>
 80124ea:	9b04      	ldr	r3, [sp, #16]
 80124ec:	4641      	mov	r1, r8
 80124ee:	b1fb      	cbz	r3, 8012530 <_strtod_l+0x8c0>
 80124f0:	4b2e      	ldr	r3, [pc, #184]	; (80125ac <_strtod_l+0x93c>)
 80124f2:	ea09 0303 	and.w	r3, r9, r3
 80124f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80124fa:	f04f 32ff 	mov.w	r2, #4294967295
 80124fe:	d81a      	bhi.n	8012536 <_strtod_l+0x8c6>
 8012500:	0d1b      	lsrs	r3, r3, #20
 8012502:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012506:	fa02 f303 	lsl.w	r3, r2, r3
 801250a:	4299      	cmp	r1, r3
 801250c:	d118      	bne.n	8012540 <_strtod_l+0x8d0>
 801250e:	4b2a      	ldr	r3, [pc, #168]	; (80125b8 <_strtod_l+0x948>)
 8012510:	459a      	cmp	sl, r3
 8012512:	d102      	bne.n	801251a <_strtod_l+0x8aa>
 8012514:	3101      	adds	r1, #1
 8012516:	f43f adef 	beq.w	80120f8 <_strtod_l+0x488>
 801251a:	4b24      	ldr	r3, [pc, #144]	; (80125ac <_strtod_l+0x93c>)
 801251c:	ea0a 0303 	and.w	r3, sl, r3
 8012520:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8012524:	f04f 0800 	mov.w	r8, #0
 8012528:	9b04      	ldr	r3, [sp, #16]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d1a2      	bne.n	8012474 <_strtod_l+0x804>
 801252e:	e5ed      	b.n	801210c <_strtod_l+0x49c>
 8012530:	f04f 33ff 	mov.w	r3, #4294967295
 8012534:	e7e9      	b.n	801250a <_strtod_l+0x89a>
 8012536:	4613      	mov	r3, r2
 8012538:	e7e7      	b.n	801250a <_strtod_l+0x89a>
 801253a:	ea53 0308 	orrs.w	r3, r3, r8
 801253e:	d08a      	beq.n	8012456 <_strtod_l+0x7e6>
 8012540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012542:	b1e3      	cbz	r3, 801257e <_strtod_l+0x90e>
 8012544:	ea13 0f0a 	tst.w	r3, sl
 8012548:	d0ee      	beq.n	8012528 <_strtod_l+0x8b8>
 801254a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801254c:	9a04      	ldr	r2, [sp, #16]
 801254e:	4640      	mov	r0, r8
 8012550:	4649      	mov	r1, r9
 8012552:	b1c3      	cbz	r3, 8012586 <_strtod_l+0x916>
 8012554:	f7ff fb6f 	bl	8011c36 <sulp>
 8012558:	4602      	mov	r2, r0
 801255a:	460b      	mov	r3, r1
 801255c:	ec51 0b18 	vmov	r0, r1, d8
 8012560:	f7ed fea4 	bl	80002ac <__adddf3>
 8012564:	4680      	mov	r8, r0
 8012566:	4689      	mov	r9, r1
 8012568:	e7de      	b.n	8012528 <_strtod_l+0x8b8>
 801256a:	4013      	ands	r3, r2
 801256c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012570:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012574:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012578:	f04f 38ff 	mov.w	r8, #4294967295
 801257c:	e7d4      	b.n	8012528 <_strtod_l+0x8b8>
 801257e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012580:	ea13 0f08 	tst.w	r3, r8
 8012584:	e7e0      	b.n	8012548 <_strtod_l+0x8d8>
 8012586:	f7ff fb56 	bl	8011c36 <sulp>
 801258a:	4602      	mov	r2, r0
 801258c:	460b      	mov	r3, r1
 801258e:	ec51 0b18 	vmov	r0, r1, d8
 8012592:	f7ed fe89 	bl	80002a8 <__aeabi_dsub>
 8012596:	2200      	movs	r2, #0
 8012598:	2300      	movs	r3, #0
 801259a:	4680      	mov	r8, r0
 801259c:	4689      	mov	r9, r1
 801259e:	f7ee faa3 	bl	8000ae8 <__aeabi_dcmpeq>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	d0c0      	beq.n	8012528 <_strtod_l+0x8b8>
 80125a6:	e618      	b.n	80121da <_strtod_l+0x56a>
 80125a8:	fffffc02 	.word	0xfffffc02
 80125ac:	7ff00000 	.word	0x7ff00000
 80125b0:	39500000 	.word	0x39500000
 80125b4:	000fffff 	.word	0x000fffff
 80125b8:	7fefffff 	.word	0x7fefffff
 80125bc:	080159a0 	.word	0x080159a0
 80125c0:	4659      	mov	r1, fp
 80125c2:	4628      	mov	r0, r5
 80125c4:	f7ff fac0 	bl	8011b48 <__ratio>
 80125c8:	ec57 6b10 	vmov	r6, r7, d0
 80125cc:	ee10 0a10 	vmov	r0, s0
 80125d0:	2200      	movs	r2, #0
 80125d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80125d6:	4639      	mov	r1, r7
 80125d8:	f7ee fa9a 	bl	8000b10 <__aeabi_dcmple>
 80125dc:	2800      	cmp	r0, #0
 80125de:	d071      	beq.n	80126c4 <_strtod_l+0xa54>
 80125e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d17c      	bne.n	80126e0 <_strtod_l+0xa70>
 80125e6:	f1b8 0f00 	cmp.w	r8, #0
 80125ea:	d15a      	bne.n	80126a2 <_strtod_l+0xa32>
 80125ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d15d      	bne.n	80126b0 <_strtod_l+0xa40>
 80125f4:	4b90      	ldr	r3, [pc, #576]	; (8012838 <_strtod_l+0xbc8>)
 80125f6:	2200      	movs	r2, #0
 80125f8:	4630      	mov	r0, r6
 80125fa:	4639      	mov	r1, r7
 80125fc:	f7ee fa7e 	bl	8000afc <__aeabi_dcmplt>
 8012600:	2800      	cmp	r0, #0
 8012602:	d15c      	bne.n	80126be <_strtod_l+0xa4e>
 8012604:	4630      	mov	r0, r6
 8012606:	4639      	mov	r1, r7
 8012608:	4b8c      	ldr	r3, [pc, #560]	; (801283c <_strtod_l+0xbcc>)
 801260a:	2200      	movs	r2, #0
 801260c:	f7ee f804 	bl	8000618 <__aeabi_dmul>
 8012610:	4606      	mov	r6, r0
 8012612:	460f      	mov	r7, r1
 8012614:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012618:	9606      	str	r6, [sp, #24]
 801261a:	9307      	str	r3, [sp, #28]
 801261c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012620:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012624:	4b86      	ldr	r3, [pc, #536]	; (8012840 <_strtod_l+0xbd0>)
 8012626:	ea0a 0303 	and.w	r3, sl, r3
 801262a:	930d      	str	r3, [sp, #52]	; 0x34
 801262c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801262e:	4b85      	ldr	r3, [pc, #532]	; (8012844 <_strtod_l+0xbd4>)
 8012630:	429a      	cmp	r2, r3
 8012632:	f040 8090 	bne.w	8012756 <_strtod_l+0xae6>
 8012636:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801263a:	ec49 8b10 	vmov	d0, r8, r9
 801263e:	f7ff f9b9 	bl	80119b4 <__ulp>
 8012642:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012646:	ec51 0b10 	vmov	r0, r1, d0
 801264a:	f7ed ffe5 	bl	8000618 <__aeabi_dmul>
 801264e:	4642      	mov	r2, r8
 8012650:	464b      	mov	r3, r9
 8012652:	f7ed fe2b 	bl	80002ac <__adddf3>
 8012656:	460b      	mov	r3, r1
 8012658:	4979      	ldr	r1, [pc, #484]	; (8012840 <_strtod_l+0xbd0>)
 801265a:	4a7b      	ldr	r2, [pc, #492]	; (8012848 <_strtod_l+0xbd8>)
 801265c:	4019      	ands	r1, r3
 801265e:	4291      	cmp	r1, r2
 8012660:	4680      	mov	r8, r0
 8012662:	d944      	bls.n	80126ee <_strtod_l+0xa7e>
 8012664:	ee18 2a90 	vmov	r2, s17
 8012668:	4b78      	ldr	r3, [pc, #480]	; (801284c <_strtod_l+0xbdc>)
 801266a:	429a      	cmp	r2, r3
 801266c:	d104      	bne.n	8012678 <_strtod_l+0xa08>
 801266e:	ee18 3a10 	vmov	r3, s16
 8012672:	3301      	adds	r3, #1
 8012674:	f43f ad40 	beq.w	80120f8 <_strtod_l+0x488>
 8012678:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 801284c <_strtod_l+0xbdc>
 801267c:	f04f 38ff 	mov.w	r8, #4294967295
 8012680:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012682:	4620      	mov	r0, r4
 8012684:	f7fe fe6a 	bl	801135c <_Bfree>
 8012688:	9905      	ldr	r1, [sp, #20]
 801268a:	4620      	mov	r0, r4
 801268c:	f7fe fe66 	bl	801135c <_Bfree>
 8012690:	4659      	mov	r1, fp
 8012692:	4620      	mov	r0, r4
 8012694:	f7fe fe62 	bl	801135c <_Bfree>
 8012698:	4629      	mov	r1, r5
 801269a:	4620      	mov	r0, r4
 801269c:	f7fe fe5e 	bl	801135c <_Bfree>
 80126a0:	e609      	b.n	80122b6 <_strtod_l+0x646>
 80126a2:	f1b8 0f01 	cmp.w	r8, #1
 80126a6:	d103      	bne.n	80126b0 <_strtod_l+0xa40>
 80126a8:	f1b9 0f00 	cmp.w	r9, #0
 80126ac:	f43f ad95 	beq.w	80121da <_strtod_l+0x56a>
 80126b0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8012808 <_strtod_l+0xb98>
 80126b4:	4f60      	ldr	r7, [pc, #384]	; (8012838 <_strtod_l+0xbc8>)
 80126b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80126ba:	2600      	movs	r6, #0
 80126bc:	e7ae      	b.n	801261c <_strtod_l+0x9ac>
 80126be:	4f5f      	ldr	r7, [pc, #380]	; (801283c <_strtod_l+0xbcc>)
 80126c0:	2600      	movs	r6, #0
 80126c2:	e7a7      	b.n	8012614 <_strtod_l+0x9a4>
 80126c4:	4b5d      	ldr	r3, [pc, #372]	; (801283c <_strtod_l+0xbcc>)
 80126c6:	4630      	mov	r0, r6
 80126c8:	4639      	mov	r1, r7
 80126ca:	2200      	movs	r2, #0
 80126cc:	f7ed ffa4 	bl	8000618 <__aeabi_dmul>
 80126d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126d2:	4606      	mov	r6, r0
 80126d4:	460f      	mov	r7, r1
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d09c      	beq.n	8012614 <_strtod_l+0x9a4>
 80126da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80126de:	e79d      	b.n	801261c <_strtod_l+0x9ac>
 80126e0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8012810 <_strtod_l+0xba0>
 80126e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80126e8:	ec57 6b17 	vmov	r6, r7, d7
 80126ec:	e796      	b.n	801261c <_strtod_l+0x9ac>
 80126ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80126f2:	9b04      	ldr	r3, [sp, #16]
 80126f4:	46ca      	mov	sl, r9
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d1c2      	bne.n	8012680 <_strtod_l+0xa10>
 80126fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80126fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012700:	0d1b      	lsrs	r3, r3, #20
 8012702:	051b      	lsls	r3, r3, #20
 8012704:	429a      	cmp	r2, r3
 8012706:	d1bb      	bne.n	8012680 <_strtod_l+0xa10>
 8012708:	4630      	mov	r0, r6
 801270a:	4639      	mov	r1, r7
 801270c:	f7ee fae4 	bl	8000cd8 <__aeabi_d2lz>
 8012710:	f7ed ff54 	bl	80005bc <__aeabi_l2d>
 8012714:	4602      	mov	r2, r0
 8012716:	460b      	mov	r3, r1
 8012718:	4630      	mov	r0, r6
 801271a:	4639      	mov	r1, r7
 801271c:	f7ed fdc4 	bl	80002a8 <__aeabi_dsub>
 8012720:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012722:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012726:	ea43 0308 	orr.w	r3, r3, r8
 801272a:	4313      	orrs	r3, r2
 801272c:	4606      	mov	r6, r0
 801272e:	460f      	mov	r7, r1
 8012730:	d054      	beq.n	80127dc <_strtod_l+0xb6c>
 8012732:	a339      	add	r3, pc, #228	; (adr r3, 8012818 <_strtod_l+0xba8>)
 8012734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012738:	f7ee f9e0 	bl	8000afc <__aeabi_dcmplt>
 801273c:	2800      	cmp	r0, #0
 801273e:	f47f ace5 	bne.w	801210c <_strtod_l+0x49c>
 8012742:	a337      	add	r3, pc, #220	; (adr r3, 8012820 <_strtod_l+0xbb0>)
 8012744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012748:	4630      	mov	r0, r6
 801274a:	4639      	mov	r1, r7
 801274c:	f7ee f9f4 	bl	8000b38 <__aeabi_dcmpgt>
 8012750:	2800      	cmp	r0, #0
 8012752:	d095      	beq.n	8012680 <_strtod_l+0xa10>
 8012754:	e4da      	b.n	801210c <_strtod_l+0x49c>
 8012756:	9b04      	ldr	r3, [sp, #16]
 8012758:	b333      	cbz	r3, 80127a8 <_strtod_l+0xb38>
 801275a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801275c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012760:	d822      	bhi.n	80127a8 <_strtod_l+0xb38>
 8012762:	a331      	add	r3, pc, #196	; (adr r3, 8012828 <_strtod_l+0xbb8>)
 8012764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012768:	4630      	mov	r0, r6
 801276a:	4639      	mov	r1, r7
 801276c:	f7ee f9d0 	bl	8000b10 <__aeabi_dcmple>
 8012770:	b1a0      	cbz	r0, 801279c <_strtod_l+0xb2c>
 8012772:	4639      	mov	r1, r7
 8012774:	4630      	mov	r0, r6
 8012776:	f7ee fa27 	bl	8000bc8 <__aeabi_d2uiz>
 801277a:	2801      	cmp	r0, #1
 801277c:	bf38      	it	cc
 801277e:	2001      	movcc	r0, #1
 8012780:	f7ed fed0 	bl	8000524 <__aeabi_ui2d>
 8012784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012786:	4606      	mov	r6, r0
 8012788:	460f      	mov	r7, r1
 801278a:	bb23      	cbnz	r3, 80127d6 <_strtod_l+0xb66>
 801278c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012790:	9010      	str	r0, [sp, #64]	; 0x40
 8012792:	9311      	str	r3, [sp, #68]	; 0x44
 8012794:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012798:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801279c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801279e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80127a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80127a4:	1a9b      	subs	r3, r3, r2
 80127a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80127a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80127ac:	eeb0 0a48 	vmov.f32	s0, s16
 80127b0:	eef0 0a68 	vmov.f32	s1, s17
 80127b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80127b8:	f7ff f8fc 	bl	80119b4 <__ulp>
 80127bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80127c0:	ec53 2b10 	vmov	r2, r3, d0
 80127c4:	f7ed ff28 	bl	8000618 <__aeabi_dmul>
 80127c8:	ec53 2b18 	vmov	r2, r3, d8
 80127cc:	f7ed fd6e 	bl	80002ac <__adddf3>
 80127d0:	4680      	mov	r8, r0
 80127d2:	4689      	mov	r9, r1
 80127d4:	e78d      	b.n	80126f2 <_strtod_l+0xa82>
 80127d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80127da:	e7db      	b.n	8012794 <_strtod_l+0xb24>
 80127dc:	a314      	add	r3, pc, #80	; (adr r3, 8012830 <_strtod_l+0xbc0>)
 80127de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e2:	f7ee f98b 	bl	8000afc <__aeabi_dcmplt>
 80127e6:	e7b3      	b.n	8012750 <_strtod_l+0xae0>
 80127e8:	2300      	movs	r3, #0
 80127ea:	930a      	str	r3, [sp, #40]	; 0x28
 80127ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80127ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80127f0:	6013      	str	r3, [r2, #0]
 80127f2:	f7ff ba7c 	b.w	8011cee <_strtod_l+0x7e>
 80127f6:	2a65      	cmp	r2, #101	; 0x65
 80127f8:	f43f ab75 	beq.w	8011ee6 <_strtod_l+0x276>
 80127fc:	2a45      	cmp	r2, #69	; 0x45
 80127fe:	f43f ab72 	beq.w	8011ee6 <_strtod_l+0x276>
 8012802:	2301      	movs	r3, #1
 8012804:	f7ff bbaa 	b.w	8011f5c <_strtod_l+0x2ec>
 8012808:	00000000 	.word	0x00000000
 801280c:	bff00000 	.word	0xbff00000
 8012810:	00000000 	.word	0x00000000
 8012814:	3ff00000 	.word	0x3ff00000
 8012818:	94a03595 	.word	0x94a03595
 801281c:	3fdfffff 	.word	0x3fdfffff
 8012820:	35afe535 	.word	0x35afe535
 8012824:	3fe00000 	.word	0x3fe00000
 8012828:	ffc00000 	.word	0xffc00000
 801282c:	41dfffff 	.word	0x41dfffff
 8012830:	94a03595 	.word	0x94a03595
 8012834:	3fcfffff 	.word	0x3fcfffff
 8012838:	3ff00000 	.word	0x3ff00000
 801283c:	3fe00000 	.word	0x3fe00000
 8012840:	7ff00000 	.word	0x7ff00000
 8012844:	7fe00000 	.word	0x7fe00000
 8012848:	7c9fffff 	.word	0x7c9fffff
 801284c:	7fefffff 	.word	0x7fefffff

08012850 <_strtod_r>:
 8012850:	4b01      	ldr	r3, [pc, #4]	; (8012858 <_strtod_r+0x8>)
 8012852:	f7ff ba0d 	b.w	8011c70 <_strtod_l>
 8012856:	bf00      	nop
 8012858:	200001d8 	.word	0x200001d8

0801285c <_strtol_l.constprop.0>:
 801285c:	2b01      	cmp	r3, #1
 801285e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012862:	d001      	beq.n	8012868 <_strtol_l.constprop.0+0xc>
 8012864:	2b24      	cmp	r3, #36	; 0x24
 8012866:	d906      	bls.n	8012876 <_strtol_l.constprop.0+0x1a>
 8012868:	f7fd fd7e 	bl	8010368 <__errno>
 801286c:	2316      	movs	r3, #22
 801286e:	6003      	str	r3, [r0, #0]
 8012870:	2000      	movs	r0, #0
 8012872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012876:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801295c <_strtol_l.constprop.0+0x100>
 801287a:	460d      	mov	r5, r1
 801287c:	462e      	mov	r6, r5
 801287e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012882:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012886:	f017 0708 	ands.w	r7, r7, #8
 801288a:	d1f7      	bne.n	801287c <_strtol_l.constprop.0+0x20>
 801288c:	2c2d      	cmp	r4, #45	; 0x2d
 801288e:	d132      	bne.n	80128f6 <_strtol_l.constprop.0+0x9a>
 8012890:	782c      	ldrb	r4, [r5, #0]
 8012892:	2701      	movs	r7, #1
 8012894:	1cb5      	adds	r5, r6, #2
 8012896:	2b00      	cmp	r3, #0
 8012898:	d05b      	beq.n	8012952 <_strtol_l.constprop.0+0xf6>
 801289a:	2b10      	cmp	r3, #16
 801289c:	d109      	bne.n	80128b2 <_strtol_l.constprop.0+0x56>
 801289e:	2c30      	cmp	r4, #48	; 0x30
 80128a0:	d107      	bne.n	80128b2 <_strtol_l.constprop.0+0x56>
 80128a2:	782c      	ldrb	r4, [r5, #0]
 80128a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80128a8:	2c58      	cmp	r4, #88	; 0x58
 80128aa:	d14d      	bne.n	8012948 <_strtol_l.constprop.0+0xec>
 80128ac:	786c      	ldrb	r4, [r5, #1]
 80128ae:	2310      	movs	r3, #16
 80128b0:	3502      	adds	r5, #2
 80128b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80128b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80128ba:	f04f 0e00 	mov.w	lr, #0
 80128be:	fbb8 f9f3 	udiv	r9, r8, r3
 80128c2:	4676      	mov	r6, lr
 80128c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80128c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80128cc:	f1bc 0f09 	cmp.w	ip, #9
 80128d0:	d816      	bhi.n	8012900 <_strtol_l.constprop.0+0xa4>
 80128d2:	4664      	mov	r4, ip
 80128d4:	42a3      	cmp	r3, r4
 80128d6:	dd24      	ble.n	8012922 <_strtol_l.constprop.0+0xc6>
 80128d8:	f1be 3fff 	cmp.w	lr, #4294967295
 80128dc:	d008      	beq.n	80128f0 <_strtol_l.constprop.0+0x94>
 80128de:	45b1      	cmp	r9, r6
 80128e0:	d31c      	bcc.n	801291c <_strtol_l.constprop.0+0xc0>
 80128e2:	d101      	bne.n	80128e8 <_strtol_l.constprop.0+0x8c>
 80128e4:	45a2      	cmp	sl, r4
 80128e6:	db19      	blt.n	801291c <_strtol_l.constprop.0+0xc0>
 80128e8:	fb06 4603 	mla	r6, r6, r3, r4
 80128ec:	f04f 0e01 	mov.w	lr, #1
 80128f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80128f4:	e7e8      	b.n	80128c8 <_strtol_l.constprop.0+0x6c>
 80128f6:	2c2b      	cmp	r4, #43	; 0x2b
 80128f8:	bf04      	itt	eq
 80128fa:	782c      	ldrbeq	r4, [r5, #0]
 80128fc:	1cb5      	addeq	r5, r6, #2
 80128fe:	e7ca      	b.n	8012896 <_strtol_l.constprop.0+0x3a>
 8012900:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012904:	f1bc 0f19 	cmp.w	ip, #25
 8012908:	d801      	bhi.n	801290e <_strtol_l.constprop.0+0xb2>
 801290a:	3c37      	subs	r4, #55	; 0x37
 801290c:	e7e2      	b.n	80128d4 <_strtol_l.constprop.0+0x78>
 801290e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012912:	f1bc 0f19 	cmp.w	ip, #25
 8012916:	d804      	bhi.n	8012922 <_strtol_l.constprop.0+0xc6>
 8012918:	3c57      	subs	r4, #87	; 0x57
 801291a:	e7db      	b.n	80128d4 <_strtol_l.constprop.0+0x78>
 801291c:	f04f 3eff 	mov.w	lr, #4294967295
 8012920:	e7e6      	b.n	80128f0 <_strtol_l.constprop.0+0x94>
 8012922:	f1be 3fff 	cmp.w	lr, #4294967295
 8012926:	d105      	bne.n	8012934 <_strtol_l.constprop.0+0xd8>
 8012928:	2322      	movs	r3, #34	; 0x22
 801292a:	6003      	str	r3, [r0, #0]
 801292c:	4646      	mov	r6, r8
 801292e:	b942      	cbnz	r2, 8012942 <_strtol_l.constprop.0+0xe6>
 8012930:	4630      	mov	r0, r6
 8012932:	e79e      	b.n	8012872 <_strtol_l.constprop.0+0x16>
 8012934:	b107      	cbz	r7, 8012938 <_strtol_l.constprop.0+0xdc>
 8012936:	4276      	negs	r6, r6
 8012938:	2a00      	cmp	r2, #0
 801293a:	d0f9      	beq.n	8012930 <_strtol_l.constprop.0+0xd4>
 801293c:	f1be 0f00 	cmp.w	lr, #0
 8012940:	d000      	beq.n	8012944 <_strtol_l.constprop.0+0xe8>
 8012942:	1e69      	subs	r1, r5, #1
 8012944:	6011      	str	r1, [r2, #0]
 8012946:	e7f3      	b.n	8012930 <_strtol_l.constprop.0+0xd4>
 8012948:	2430      	movs	r4, #48	; 0x30
 801294a:	2b00      	cmp	r3, #0
 801294c:	d1b1      	bne.n	80128b2 <_strtol_l.constprop.0+0x56>
 801294e:	2308      	movs	r3, #8
 8012950:	e7af      	b.n	80128b2 <_strtol_l.constprop.0+0x56>
 8012952:	2c30      	cmp	r4, #48	; 0x30
 8012954:	d0a5      	beq.n	80128a2 <_strtol_l.constprop.0+0x46>
 8012956:	230a      	movs	r3, #10
 8012958:	e7ab      	b.n	80128b2 <_strtol_l.constprop.0+0x56>
 801295a:	bf00      	nop
 801295c:	080159c9 	.word	0x080159c9

08012960 <_strtol_r>:
 8012960:	f7ff bf7c 	b.w	801285c <_strtol_l.constprop.0>

08012964 <__ssputs_r>:
 8012964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012968:	688e      	ldr	r6, [r1, #8]
 801296a:	461f      	mov	r7, r3
 801296c:	42be      	cmp	r6, r7
 801296e:	680b      	ldr	r3, [r1, #0]
 8012970:	4682      	mov	sl, r0
 8012972:	460c      	mov	r4, r1
 8012974:	4690      	mov	r8, r2
 8012976:	d82c      	bhi.n	80129d2 <__ssputs_r+0x6e>
 8012978:	898a      	ldrh	r2, [r1, #12]
 801297a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801297e:	d026      	beq.n	80129ce <__ssputs_r+0x6a>
 8012980:	6965      	ldr	r5, [r4, #20]
 8012982:	6909      	ldr	r1, [r1, #16]
 8012984:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012988:	eba3 0901 	sub.w	r9, r3, r1
 801298c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012990:	1c7b      	adds	r3, r7, #1
 8012992:	444b      	add	r3, r9
 8012994:	106d      	asrs	r5, r5, #1
 8012996:	429d      	cmp	r5, r3
 8012998:	bf38      	it	cc
 801299a:	461d      	movcc	r5, r3
 801299c:	0553      	lsls	r3, r2, #21
 801299e:	d527      	bpl.n	80129f0 <__ssputs_r+0x8c>
 80129a0:	4629      	mov	r1, r5
 80129a2:	f7fe fc0f 	bl	80111c4 <_malloc_r>
 80129a6:	4606      	mov	r6, r0
 80129a8:	b360      	cbz	r0, 8012a04 <__ssputs_r+0xa0>
 80129aa:	6921      	ldr	r1, [r4, #16]
 80129ac:	464a      	mov	r2, r9
 80129ae:	f7fd fd07 	bl	80103c0 <memcpy>
 80129b2:	89a3      	ldrh	r3, [r4, #12]
 80129b4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80129b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129bc:	81a3      	strh	r3, [r4, #12]
 80129be:	6126      	str	r6, [r4, #16]
 80129c0:	6165      	str	r5, [r4, #20]
 80129c2:	444e      	add	r6, r9
 80129c4:	eba5 0509 	sub.w	r5, r5, r9
 80129c8:	6026      	str	r6, [r4, #0]
 80129ca:	60a5      	str	r5, [r4, #8]
 80129cc:	463e      	mov	r6, r7
 80129ce:	42be      	cmp	r6, r7
 80129d0:	d900      	bls.n	80129d4 <__ssputs_r+0x70>
 80129d2:	463e      	mov	r6, r7
 80129d4:	6820      	ldr	r0, [r4, #0]
 80129d6:	4632      	mov	r2, r6
 80129d8:	4641      	mov	r1, r8
 80129da:	f000 f9c9 	bl	8012d70 <memmove>
 80129de:	68a3      	ldr	r3, [r4, #8]
 80129e0:	1b9b      	subs	r3, r3, r6
 80129e2:	60a3      	str	r3, [r4, #8]
 80129e4:	6823      	ldr	r3, [r4, #0]
 80129e6:	4433      	add	r3, r6
 80129e8:	6023      	str	r3, [r4, #0]
 80129ea:	2000      	movs	r0, #0
 80129ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129f0:	462a      	mov	r2, r5
 80129f2:	f000 fd9e 	bl	8013532 <_realloc_r>
 80129f6:	4606      	mov	r6, r0
 80129f8:	2800      	cmp	r0, #0
 80129fa:	d1e0      	bne.n	80129be <__ssputs_r+0x5a>
 80129fc:	6921      	ldr	r1, [r4, #16]
 80129fe:	4650      	mov	r0, sl
 8012a00:	f7fe fb6c 	bl	80110dc <_free_r>
 8012a04:	230c      	movs	r3, #12
 8012a06:	f8ca 3000 	str.w	r3, [sl]
 8012a0a:	89a3      	ldrh	r3, [r4, #12]
 8012a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a10:	81a3      	strh	r3, [r4, #12]
 8012a12:	f04f 30ff 	mov.w	r0, #4294967295
 8012a16:	e7e9      	b.n	80129ec <__ssputs_r+0x88>

08012a18 <_svfiprintf_r>:
 8012a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a1c:	4698      	mov	r8, r3
 8012a1e:	898b      	ldrh	r3, [r1, #12]
 8012a20:	061b      	lsls	r3, r3, #24
 8012a22:	b09d      	sub	sp, #116	; 0x74
 8012a24:	4607      	mov	r7, r0
 8012a26:	460d      	mov	r5, r1
 8012a28:	4614      	mov	r4, r2
 8012a2a:	d50e      	bpl.n	8012a4a <_svfiprintf_r+0x32>
 8012a2c:	690b      	ldr	r3, [r1, #16]
 8012a2e:	b963      	cbnz	r3, 8012a4a <_svfiprintf_r+0x32>
 8012a30:	2140      	movs	r1, #64	; 0x40
 8012a32:	f7fe fbc7 	bl	80111c4 <_malloc_r>
 8012a36:	6028      	str	r0, [r5, #0]
 8012a38:	6128      	str	r0, [r5, #16]
 8012a3a:	b920      	cbnz	r0, 8012a46 <_svfiprintf_r+0x2e>
 8012a3c:	230c      	movs	r3, #12
 8012a3e:	603b      	str	r3, [r7, #0]
 8012a40:	f04f 30ff 	mov.w	r0, #4294967295
 8012a44:	e0d0      	b.n	8012be8 <_svfiprintf_r+0x1d0>
 8012a46:	2340      	movs	r3, #64	; 0x40
 8012a48:	616b      	str	r3, [r5, #20]
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8012a4e:	2320      	movs	r3, #32
 8012a50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a54:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a58:	2330      	movs	r3, #48	; 0x30
 8012a5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012c00 <_svfiprintf_r+0x1e8>
 8012a5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a62:	f04f 0901 	mov.w	r9, #1
 8012a66:	4623      	mov	r3, r4
 8012a68:	469a      	mov	sl, r3
 8012a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a6e:	b10a      	cbz	r2, 8012a74 <_svfiprintf_r+0x5c>
 8012a70:	2a25      	cmp	r2, #37	; 0x25
 8012a72:	d1f9      	bne.n	8012a68 <_svfiprintf_r+0x50>
 8012a74:	ebba 0b04 	subs.w	fp, sl, r4
 8012a78:	d00b      	beq.n	8012a92 <_svfiprintf_r+0x7a>
 8012a7a:	465b      	mov	r3, fp
 8012a7c:	4622      	mov	r2, r4
 8012a7e:	4629      	mov	r1, r5
 8012a80:	4638      	mov	r0, r7
 8012a82:	f7ff ff6f 	bl	8012964 <__ssputs_r>
 8012a86:	3001      	adds	r0, #1
 8012a88:	f000 80a9 	beq.w	8012bde <_svfiprintf_r+0x1c6>
 8012a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a8e:	445a      	add	r2, fp
 8012a90:	9209      	str	r2, [sp, #36]	; 0x24
 8012a92:	f89a 3000 	ldrb.w	r3, [sl]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	f000 80a1 	beq.w	8012bde <_svfiprintf_r+0x1c6>
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8012aa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012aa6:	f10a 0a01 	add.w	sl, sl, #1
 8012aaa:	9304      	str	r3, [sp, #16]
 8012aac:	9307      	str	r3, [sp, #28]
 8012aae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ab2:	931a      	str	r3, [sp, #104]	; 0x68
 8012ab4:	4654      	mov	r4, sl
 8012ab6:	2205      	movs	r2, #5
 8012ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012abc:	4850      	ldr	r0, [pc, #320]	; (8012c00 <_svfiprintf_r+0x1e8>)
 8012abe:	f7ed fb97 	bl	80001f0 <memchr>
 8012ac2:	9a04      	ldr	r2, [sp, #16]
 8012ac4:	b9d8      	cbnz	r0, 8012afe <_svfiprintf_r+0xe6>
 8012ac6:	06d0      	lsls	r0, r2, #27
 8012ac8:	bf44      	itt	mi
 8012aca:	2320      	movmi	r3, #32
 8012acc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ad0:	0711      	lsls	r1, r2, #28
 8012ad2:	bf44      	itt	mi
 8012ad4:	232b      	movmi	r3, #43	; 0x2b
 8012ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ada:	f89a 3000 	ldrb.w	r3, [sl]
 8012ade:	2b2a      	cmp	r3, #42	; 0x2a
 8012ae0:	d015      	beq.n	8012b0e <_svfiprintf_r+0xf6>
 8012ae2:	9a07      	ldr	r2, [sp, #28]
 8012ae4:	4654      	mov	r4, sl
 8012ae6:	2000      	movs	r0, #0
 8012ae8:	f04f 0c0a 	mov.w	ip, #10
 8012aec:	4621      	mov	r1, r4
 8012aee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012af2:	3b30      	subs	r3, #48	; 0x30
 8012af4:	2b09      	cmp	r3, #9
 8012af6:	d94d      	bls.n	8012b94 <_svfiprintf_r+0x17c>
 8012af8:	b1b0      	cbz	r0, 8012b28 <_svfiprintf_r+0x110>
 8012afa:	9207      	str	r2, [sp, #28]
 8012afc:	e014      	b.n	8012b28 <_svfiprintf_r+0x110>
 8012afe:	eba0 0308 	sub.w	r3, r0, r8
 8012b02:	fa09 f303 	lsl.w	r3, r9, r3
 8012b06:	4313      	orrs	r3, r2
 8012b08:	9304      	str	r3, [sp, #16]
 8012b0a:	46a2      	mov	sl, r4
 8012b0c:	e7d2      	b.n	8012ab4 <_svfiprintf_r+0x9c>
 8012b0e:	9b03      	ldr	r3, [sp, #12]
 8012b10:	1d19      	adds	r1, r3, #4
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	9103      	str	r1, [sp, #12]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	bfbb      	ittet	lt
 8012b1a:	425b      	neglt	r3, r3
 8012b1c:	f042 0202 	orrlt.w	r2, r2, #2
 8012b20:	9307      	strge	r3, [sp, #28]
 8012b22:	9307      	strlt	r3, [sp, #28]
 8012b24:	bfb8      	it	lt
 8012b26:	9204      	strlt	r2, [sp, #16]
 8012b28:	7823      	ldrb	r3, [r4, #0]
 8012b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8012b2c:	d10c      	bne.n	8012b48 <_svfiprintf_r+0x130>
 8012b2e:	7863      	ldrb	r3, [r4, #1]
 8012b30:	2b2a      	cmp	r3, #42	; 0x2a
 8012b32:	d134      	bne.n	8012b9e <_svfiprintf_r+0x186>
 8012b34:	9b03      	ldr	r3, [sp, #12]
 8012b36:	1d1a      	adds	r2, r3, #4
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	9203      	str	r2, [sp, #12]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	bfb8      	it	lt
 8012b40:	f04f 33ff 	movlt.w	r3, #4294967295
 8012b44:	3402      	adds	r4, #2
 8012b46:	9305      	str	r3, [sp, #20]
 8012b48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012c10 <_svfiprintf_r+0x1f8>
 8012b4c:	7821      	ldrb	r1, [r4, #0]
 8012b4e:	2203      	movs	r2, #3
 8012b50:	4650      	mov	r0, sl
 8012b52:	f7ed fb4d 	bl	80001f0 <memchr>
 8012b56:	b138      	cbz	r0, 8012b68 <_svfiprintf_r+0x150>
 8012b58:	9b04      	ldr	r3, [sp, #16]
 8012b5a:	eba0 000a 	sub.w	r0, r0, sl
 8012b5e:	2240      	movs	r2, #64	; 0x40
 8012b60:	4082      	lsls	r2, r0
 8012b62:	4313      	orrs	r3, r2
 8012b64:	3401      	adds	r4, #1
 8012b66:	9304      	str	r3, [sp, #16]
 8012b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b6c:	4825      	ldr	r0, [pc, #148]	; (8012c04 <_svfiprintf_r+0x1ec>)
 8012b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b72:	2206      	movs	r2, #6
 8012b74:	f7ed fb3c 	bl	80001f0 <memchr>
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	d038      	beq.n	8012bee <_svfiprintf_r+0x1d6>
 8012b7c:	4b22      	ldr	r3, [pc, #136]	; (8012c08 <_svfiprintf_r+0x1f0>)
 8012b7e:	bb1b      	cbnz	r3, 8012bc8 <_svfiprintf_r+0x1b0>
 8012b80:	9b03      	ldr	r3, [sp, #12]
 8012b82:	3307      	adds	r3, #7
 8012b84:	f023 0307 	bic.w	r3, r3, #7
 8012b88:	3308      	adds	r3, #8
 8012b8a:	9303      	str	r3, [sp, #12]
 8012b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b8e:	4433      	add	r3, r6
 8012b90:	9309      	str	r3, [sp, #36]	; 0x24
 8012b92:	e768      	b.n	8012a66 <_svfiprintf_r+0x4e>
 8012b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b98:	460c      	mov	r4, r1
 8012b9a:	2001      	movs	r0, #1
 8012b9c:	e7a6      	b.n	8012aec <_svfiprintf_r+0xd4>
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	3401      	adds	r4, #1
 8012ba2:	9305      	str	r3, [sp, #20]
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	f04f 0c0a 	mov.w	ip, #10
 8012baa:	4620      	mov	r0, r4
 8012bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012bb0:	3a30      	subs	r2, #48	; 0x30
 8012bb2:	2a09      	cmp	r2, #9
 8012bb4:	d903      	bls.n	8012bbe <_svfiprintf_r+0x1a6>
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d0c6      	beq.n	8012b48 <_svfiprintf_r+0x130>
 8012bba:	9105      	str	r1, [sp, #20]
 8012bbc:	e7c4      	b.n	8012b48 <_svfiprintf_r+0x130>
 8012bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8012bc2:	4604      	mov	r4, r0
 8012bc4:	2301      	movs	r3, #1
 8012bc6:	e7f0      	b.n	8012baa <_svfiprintf_r+0x192>
 8012bc8:	ab03      	add	r3, sp, #12
 8012bca:	9300      	str	r3, [sp, #0]
 8012bcc:	462a      	mov	r2, r5
 8012bce:	4b0f      	ldr	r3, [pc, #60]	; (8012c0c <_svfiprintf_r+0x1f4>)
 8012bd0:	a904      	add	r1, sp, #16
 8012bd2:	4638      	mov	r0, r7
 8012bd4:	f7fc fc8c 	bl	800f4f0 <_printf_float>
 8012bd8:	1c42      	adds	r2, r0, #1
 8012bda:	4606      	mov	r6, r0
 8012bdc:	d1d6      	bne.n	8012b8c <_svfiprintf_r+0x174>
 8012bde:	89ab      	ldrh	r3, [r5, #12]
 8012be0:	065b      	lsls	r3, r3, #25
 8012be2:	f53f af2d 	bmi.w	8012a40 <_svfiprintf_r+0x28>
 8012be6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012be8:	b01d      	add	sp, #116	; 0x74
 8012bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bee:	ab03      	add	r3, sp, #12
 8012bf0:	9300      	str	r3, [sp, #0]
 8012bf2:	462a      	mov	r2, r5
 8012bf4:	4b05      	ldr	r3, [pc, #20]	; (8012c0c <_svfiprintf_r+0x1f4>)
 8012bf6:	a904      	add	r1, sp, #16
 8012bf8:	4638      	mov	r0, r7
 8012bfa:	f7fc ff1d 	bl	800fa38 <_printf_i>
 8012bfe:	e7eb      	b.n	8012bd8 <_svfiprintf_r+0x1c0>
 8012c00:	08015ac9 	.word	0x08015ac9
 8012c04:	08015ad3 	.word	0x08015ad3
 8012c08:	0800f4f1 	.word	0x0800f4f1
 8012c0c:	08012965 	.word	0x08012965
 8012c10:	08015acf 	.word	0x08015acf

08012c14 <__sflush_r>:
 8012c14:	898a      	ldrh	r2, [r1, #12]
 8012c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c1a:	4605      	mov	r5, r0
 8012c1c:	0710      	lsls	r0, r2, #28
 8012c1e:	460c      	mov	r4, r1
 8012c20:	d458      	bmi.n	8012cd4 <__sflush_r+0xc0>
 8012c22:	684b      	ldr	r3, [r1, #4]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	dc05      	bgt.n	8012c34 <__sflush_r+0x20>
 8012c28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	dc02      	bgt.n	8012c34 <__sflush_r+0x20>
 8012c2e:	2000      	movs	r0, #0
 8012c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c36:	2e00      	cmp	r6, #0
 8012c38:	d0f9      	beq.n	8012c2e <__sflush_r+0x1a>
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012c40:	682f      	ldr	r7, [r5, #0]
 8012c42:	6a21      	ldr	r1, [r4, #32]
 8012c44:	602b      	str	r3, [r5, #0]
 8012c46:	d032      	beq.n	8012cae <__sflush_r+0x9a>
 8012c48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012c4a:	89a3      	ldrh	r3, [r4, #12]
 8012c4c:	075a      	lsls	r2, r3, #29
 8012c4e:	d505      	bpl.n	8012c5c <__sflush_r+0x48>
 8012c50:	6863      	ldr	r3, [r4, #4]
 8012c52:	1ac0      	subs	r0, r0, r3
 8012c54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012c56:	b10b      	cbz	r3, 8012c5c <__sflush_r+0x48>
 8012c58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c5a:	1ac0      	subs	r0, r0, r3
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	4602      	mov	r2, r0
 8012c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012c62:	6a21      	ldr	r1, [r4, #32]
 8012c64:	4628      	mov	r0, r5
 8012c66:	47b0      	blx	r6
 8012c68:	1c43      	adds	r3, r0, #1
 8012c6a:	89a3      	ldrh	r3, [r4, #12]
 8012c6c:	d106      	bne.n	8012c7c <__sflush_r+0x68>
 8012c6e:	6829      	ldr	r1, [r5, #0]
 8012c70:	291d      	cmp	r1, #29
 8012c72:	d82b      	bhi.n	8012ccc <__sflush_r+0xb8>
 8012c74:	4a29      	ldr	r2, [pc, #164]	; (8012d1c <__sflush_r+0x108>)
 8012c76:	410a      	asrs	r2, r1
 8012c78:	07d6      	lsls	r6, r2, #31
 8012c7a:	d427      	bmi.n	8012ccc <__sflush_r+0xb8>
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	6062      	str	r2, [r4, #4]
 8012c80:	04d9      	lsls	r1, r3, #19
 8012c82:	6922      	ldr	r2, [r4, #16]
 8012c84:	6022      	str	r2, [r4, #0]
 8012c86:	d504      	bpl.n	8012c92 <__sflush_r+0x7e>
 8012c88:	1c42      	adds	r2, r0, #1
 8012c8a:	d101      	bne.n	8012c90 <__sflush_r+0x7c>
 8012c8c:	682b      	ldr	r3, [r5, #0]
 8012c8e:	b903      	cbnz	r3, 8012c92 <__sflush_r+0x7e>
 8012c90:	6560      	str	r0, [r4, #84]	; 0x54
 8012c92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c94:	602f      	str	r7, [r5, #0]
 8012c96:	2900      	cmp	r1, #0
 8012c98:	d0c9      	beq.n	8012c2e <__sflush_r+0x1a>
 8012c9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c9e:	4299      	cmp	r1, r3
 8012ca0:	d002      	beq.n	8012ca8 <__sflush_r+0x94>
 8012ca2:	4628      	mov	r0, r5
 8012ca4:	f7fe fa1a 	bl	80110dc <_free_r>
 8012ca8:	2000      	movs	r0, #0
 8012caa:	6360      	str	r0, [r4, #52]	; 0x34
 8012cac:	e7c0      	b.n	8012c30 <__sflush_r+0x1c>
 8012cae:	2301      	movs	r3, #1
 8012cb0:	4628      	mov	r0, r5
 8012cb2:	47b0      	blx	r6
 8012cb4:	1c41      	adds	r1, r0, #1
 8012cb6:	d1c8      	bne.n	8012c4a <__sflush_r+0x36>
 8012cb8:	682b      	ldr	r3, [r5, #0]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d0c5      	beq.n	8012c4a <__sflush_r+0x36>
 8012cbe:	2b1d      	cmp	r3, #29
 8012cc0:	d001      	beq.n	8012cc6 <__sflush_r+0xb2>
 8012cc2:	2b16      	cmp	r3, #22
 8012cc4:	d101      	bne.n	8012cca <__sflush_r+0xb6>
 8012cc6:	602f      	str	r7, [r5, #0]
 8012cc8:	e7b1      	b.n	8012c2e <__sflush_r+0x1a>
 8012cca:	89a3      	ldrh	r3, [r4, #12]
 8012ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cd0:	81a3      	strh	r3, [r4, #12]
 8012cd2:	e7ad      	b.n	8012c30 <__sflush_r+0x1c>
 8012cd4:	690f      	ldr	r7, [r1, #16]
 8012cd6:	2f00      	cmp	r7, #0
 8012cd8:	d0a9      	beq.n	8012c2e <__sflush_r+0x1a>
 8012cda:	0793      	lsls	r3, r2, #30
 8012cdc:	680e      	ldr	r6, [r1, #0]
 8012cde:	bf08      	it	eq
 8012ce0:	694b      	ldreq	r3, [r1, #20]
 8012ce2:	600f      	str	r7, [r1, #0]
 8012ce4:	bf18      	it	ne
 8012ce6:	2300      	movne	r3, #0
 8012ce8:	eba6 0807 	sub.w	r8, r6, r7
 8012cec:	608b      	str	r3, [r1, #8]
 8012cee:	f1b8 0f00 	cmp.w	r8, #0
 8012cf2:	dd9c      	ble.n	8012c2e <__sflush_r+0x1a>
 8012cf4:	6a21      	ldr	r1, [r4, #32]
 8012cf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012cf8:	4643      	mov	r3, r8
 8012cfa:	463a      	mov	r2, r7
 8012cfc:	4628      	mov	r0, r5
 8012cfe:	47b0      	blx	r6
 8012d00:	2800      	cmp	r0, #0
 8012d02:	dc06      	bgt.n	8012d12 <__sflush_r+0xfe>
 8012d04:	89a3      	ldrh	r3, [r4, #12]
 8012d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d0a:	81a3      	strh	r3, [r4, #12]
 8012d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8012d10:	e78e      	b.n	8012c30 <__sflush_r+0x1c>
 8012d12:	4407      	add	r7, r0
 8012d14:	eba8 0800 	sub.w	r8, r8, r0
 8012d18:	e7e9      	b.n	8012cee <__sflush_r+0xda>
 8012d1a:	bf00      	nop
 8012d1c:	dfbffffe 	.word	0xdfbffffe

08012d20 <_fflush_r>:
 8012d20:	b538      	push	{r3, r4, r5, lr}
 8012d22:	690b      	ldr	r3, [r1, #16]
 8012d24:	4605      	mov	r5, r0
 8012d26:	460c      	mov	r4, r1
 8012d28:	b913      	cbnz	r3, 8012d30 <_fflush_r+0x10>
 8012d2a:	2500      	movs	r5, #0
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	bd38      	pop	{r3, r4, r5, pc}
 8012d30:	b118      	cbz	r0, 8012d3a <_fflush_r+0x1a>
 8012d32:	6a03      	ldr	r3, [r0, #32]
 8012d34:	b90b      	cbnz	r3, 8012d3a <_fflush_r+0x1a>
 8012d36:	f7fd fa2b 	bl	8010190 <__sinit>
 8012d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d0f3      	beq.n	8012d2a <_fflush_r+0xa>
 8012d42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012d44:	07d0      	lsls	r0, r2, #31
 8012d46:	d404      	bmi.n	8012d52 <_fflush_r+0x32>
 8012d48:	0599      	lsls	r1, r3, #22
 8012d4a:	d402      	bmi.n	8012d52 <_fflush_r+0x32>
 8012d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d4e:	f7fd fb35 	bl	80103bc <__retarget_lock_acquire_recursive>
 8012d52:	4628      	mov	r0, r5
 8012d54:	4621      	mov	r1, r4
 8012d56:	f7ff ff5d 	bl	8012c14 <__sflush_r>
 8012d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012d5c:	07da      	lsls	r2, r3, #31
 8012d5e:	4605      	mov	r5, r0
 8012d60:	d4e4      	bmi.n	8012d2c <_fflush_r+0xc>
 8012d62:	89a3      	ldrh	r3, [r4, #12]
 8012d64:	059b      	lsls	r3, r3, #22
 8012d66:	d4e1      	bmi.n	8012d2c <_fflush_r+0xc>
 8012d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012d6a:	f7fd fb28 	bl	80103be <__retarget_lock_release_recursive>
 8012d6e:	e7dd      	b.n	8012d2c <_fflush_r+0xc>

08012d70 <memmove>:
 8012d70:	4288      	cmp	r0, r1
 8012d72:	b510      	push	{r4, lr}
 8012d74:	eb01 0402 	add.w	r4, r1, r2
 8012d78:	d902      	bls.n	8012d80 <memmove+0x10>
 8012d7a:	4284      	cmp	r4, r0
 8012d7c:	4623      	mov	r3, r4
 8012d7e:	d807      	bhi.n	8012d90 <memmove+0x20>
 8012d80:	1e43      	subs	r3, r0, #1
 8012d82:	42a1      	cmp	r1, r4
 8012d84:	d008      	beq.n	8012d98 <memmove+0x28>
 8012d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012d8e:	e7f8      	b.n	8012d82 <memmove+0x12>
 8012d90:	4402      	add	r2, r0
 8012d92:	4601      	mov	r1, r0
 8012d94:	428a      	cmp	r2, r1
 8012d96:	d100      	bne.n	8012d9a <memmove+0x2a>
 8012d98:	bd10      	pop	{r4, pc}
 8012d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012d9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012da2:	e7f7      	b.n	8012d94 <memmove+0x24>

08012da4 <strncmp>:
 8012da4:	b510      	push	{r4, lr}
 8012da6:	b16a      	cbz	r2, 8012dc4 <strncmp+0x20>
 8012da8:	3901      	subs	r1, #1
 8012daa:	1884      	adds	r4, r0, r2
 8012dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012db0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012db4:	429a      	cmp	r2, r3
 8012db6:	d103      	bne.n	8012dc0 <strncmp+0x1c>
 8012db8:	42a0      	cmp	r0, r4
 8012dba:	d001      	beq.n	8012dc0 <strncmp+0x1c>
 8012dbc:	2a00      	cmp	r2, #0
 8012dbe:	d1f5      	bne.n	8012dac <strncmp+0x8>
 8012dc0:	1ad0      	subs	r0, r2, r3
 8012dc2:	bd10      	pop	{r4, pc}
 8012dc4:	4610      	mov	r0, r2
 8012dc6:	e7fc      	b.n	8012dc2 <strncmp+0x1e>

08012dc8 <_sbrk_r>:
 8012dc8:	b538      	push	{r3, r4, r5, lr}
 8012dca:	4d06      	ldr	r5, [pc, #24]	; (8012de4 <_sbrk_r+0x1c>)
 8012dcc:	2300      	movs	r3, #0
 8012dce:	4604      	mov	r4, r0
 8012dd0:	4608      	mov	r0, r1
 8012dd2:	602b      	str	r3, [r5, #0]
 8012dd4:	f7ee ff3e 	bl	8001c54 <_sbrk>
 8012dd8:	1c43      	adds	r3, r0, #1
 8012dda:	d102      	bne.n	8012de2 <_sbrk_r+0x1a>
 8012ddc:	682b      	ldr	r3, [r5, #0]
 8012dde:	b103      	cbz	r3, 8012de2 <_sbrk_r+0x1a>
 8012de0:	6023      	str	r3, [r4, #0]
 8012de2:	bd38      	pop	{r3, r4, r5, pc}
 8012de4:	20006cd8 	.word	0x20006cd8

08012de8 <nan>:
 8012de8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012df0 <nan+0x8>
 8012dec:	4770      	bx	lr
 8012dee:	bf00      	nop
 8012df0:	00000000 	.word	0x00000000
 8012df4:	7ff80000 	.word	0x7ff80000

08012df8 <__assert_func>:
 8012df8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012dfa:	4614      	mov	r4, r2
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	4b09      	ldr	r3, [pc, #36]	; (8012e24 <__assert_func+0x2c>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	4605      	mov	r5, r0
 8012e04:	68d8      	ldr	r0, [r3, #12]
 8012e06:	b14c      	cbz	r4, 8012e1c <__assert_func+0x24>
 8012e08:	4b07      	ldr	r3, [pc, #28]	; (8012e28 <__assert_func+0x30>)
 8012e0a:	9100      	str	r1, [sp, #0]
 8012e0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012e10:	4906      	ldr	r1, [pc, #24]	; (8012e2c <__assert_func+0x34>)
 8012e12:	462b      	mov	r3, r5
 8012e14:	f000 fbca 	bl	80135ac <fiprintf>
 8012e18:	f000 fbda 	bl	80135d0 <abort>
 8012e1c:	4b04      	ldr	r3, [pc, #16]	; (8012e30 <__assert_func+0x38>)
 8012e1e:	461c      	mov	r4, r3
 8012e20:	e7f3      	b.n	8012e0a <__assert_func+0x12>
 8012e22:	bf00      	nop
 8012e24:	200001d4 	.word	0x200001d4
 8012e28:	08015ae2 	.word	0x08015ae2
 8012e2c:	08015aef 	.word	0x08015aef
 8012e30:	08015b1d 	.word	0x08015b1d

08012e34 <_calloc_r>:
 8012e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e36:	fba1 2402 	umull	r2, r4, r1, r2
 8012e3a:	b94c      	cbnz	r4, 8012e50 <_calloc_r+0x1c>
 8012e3c:	4611      	mov	r1, r2
 8012e3e:	9201      	str	r2, [sp, #4]
 8012e40:	f7fe f9c0 	bl	80111c4 <_malloc_r>
 8012e44:	9a01      	ldr	r2, [sp, #4]
 8012e46:	4605      	mov	r5, r0
 8012e48:	b930      	cbnz	r0, 8012e58 <_calloc_r+0x24>
 8012e4a:	4628      	mov	r0, r5
 8012e4c:	b003      	add	sp, #12
 8012e4e:	bd30      	pop	{r4, r5, pc}
 8012e50:	220c      	movs	r2, #12
 8012e52:	6002      	str	r2, [r0, #0]
 8012e54:	2500      	movs	r5, #0
 8012e56:	e7f8      	b.n	8012e4a <_calloc_r+0x16>
 8012e58:	4621      	mov	r1, r4
 8012e5a:	f7fd fa32 	bl	80102c2 <memset>
 8012e5e:	e7f4      	b.n	8012e4a <_calloc_r+0x16>

08012e60 <rshift>:
 8012e60:	6903      	ldr	r3, [r0, #16]
 8012e62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012e66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012e6e:	f100 0414 	add.w	r4, r0, #20
 8012e72:	dd45      	ble.n	8012f00 <rshift+0xa0>
 8012e74:	f011 011f 	ands.w	r1, r1, #31
 8012e78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012e7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012e80:	d10c      	bne.n	8012e9c <rshift+0x3c>
 8012e82:	f100 0710 	add.w	r7, r0, #16
 8012e86:	4629      	mov	r1, r5
 8012e88:	42b1      	cmp	r1, r6
 8012e8a:	d334      	bcc.n	8012ef6 <rshift+0x96>
 8012e8c:	1a9b      	subs	r3, r3, r2
 8012e8e:	009b      	lsls	r3, r3, #2
 8012e90:	1eea      	subs	r2, r5, #3
 8012e92:	4296      	cmp	r6, r2
 8012e94:	bf38      	it	cc
 8012e96:	2300      	movcc	r3, #0
 8012e98:	4423      	add	r3, r4
 8012e9a:	e015      	b.n	8012ec8 <rshift+0x68>
 8012e9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012ea0:	f1c1 0820 	rsb	r8, r1, #32
 8012ea4:	40cf      	lsrs	r7, r1
 8012ea6:	f105 0e04 	add.w	lr, r5, #4
 8012eaa:	46a1      	mov	r9, r4
 8012eac:	4576      	cmp	r6, lr
 8012eae:	46f4      	mov	ip, lr
 8012eb0:	d815      	bhi.n	8012ede <rshift+0x7e>
 8012eb2:	1a9a      	subs	r2, r3, r2
 8012eb4:	0092      	lsls	r2, r2, #2
 8012eb6:	3a04      	subs	r2, #4
 8012eb8:	3501      	adds	r5, #1
 8012eba:	42ae      	cmp	r6, r5
 8012ebc:	bf38      	it	cc
 8012ebe:	2200      	movcc	r2, #0
 8012ec0:	18a3      	adds	r3, r4, r2
 8012ec2:	50a7      	str	r7, [r4, r2]
 8012ec4:	b107      	cbz	r7, 8012ec8 <rshift+0x68>
 8012ec6:	3304      	adds	r3, #4
 8012ec8:	1b1a      	subs	r2, r3, r4
 8012eca:	42a3      	cmp	r3, r4
 8012ecc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012ed0:	bf08      	it	eq
 8012ed2:	2300      	moveq	r3, #0
 8012ed4:	6102      	str	r2, [r0, #16]
 8012ed6:	bf08      	it	eq
 8012ed8:	6143      	streq	r3, [r0, #20]
 8012eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ede:	f8dc c000 	ldr.w	ip, [ip]
 8012ee2:	fa0c fc08 	lsl.w	ip, ip, r8
 8012ee6:	ea4c 0707 	orr.w	r7, ip, r7
 8012eea:	f849 7b04 	str.w	r7, [r9], #4
 8012eee:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012ef2:	40cf      	lsrs	r7, r1
 8012ef4:	e7da      	b.n	8012eac <rshift+0x4c>
 8012ef6:	f851 cb04 	ldr.w	ip, [r1], #4
 8012efa:	f847 cf04 	str.w	ip, [r7, #4]!
 8012efe:	e7c3      	b.n	8012e88 <rshift+0x28>
 8012f00:	4623      	mov	r3, r4
 8012f02:	e7e1      	b.n	8012ec8 <rshift+0x68>

08012f04 <__hexdig_fun>:
 8012f04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012f08:	2b09      	cmp	r3, #9
 8012f0a:	d802      	bhi.n	8012f12 <__hexdig_fun+0xe>
 8012f0c:	3820      	subs	r0, #32
 8012f0e:	b2c0      	uxtb	r0, r0
 8012f10:	4770      	bx	lr
 8012f12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012f16:	2b05      	cmp	r3, #5
 8012f18:	d801      	bhi.n	8012f1e <__hexdig_fun+0x1a>
 8012f1a:	3847      	subs	r0, #71	; 0x47
 8012f1c:	e7f7      	b.n	8012f0e <__hexdig_fun+0xa>
 8012f1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012f22:	2b05      	cmp	r3, #5
 8012f24:	d801      	bhi.n	8012f2a <__hexdig_fun+0x26>
 8012f26:	3827      	subs	r0, #39	; 0x27
 8012f28:	e7f1      	b.n	8012f0e <__hexdig_fun+0xa>
 8012f2a:	2000      	movs	r0, #0
 8012f2c:	4770      	bx	lr
	...

08012f30 <__gethex>:
 8012f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f34:	4617      	mov	r7, r2
 8012f36:	680a      	ldr	r2, [r1, #0]
 8012f38:	b085      	sub	sp, #20
 8012f3a:	f102 0b02 	add.w	fp, r2, #2
 8012f3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012f42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012f46:	4681      	mov	r9, r0
 8012f48:	468a      	mov	sl, r1
 8012f4a:	9302      	str	r3, [sp, #8]
 8012f4c:	32fe      	adds	r2, #254	; 0xfe
 8012f4e:	eb02 030b 	add.w	r3, r2, fp
 8012f52:	46d8      	mov	r8, fp
 8012f54:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8012f58:	9301      	str	r3, [sp, #4]
 8012f5a:	2830      	cmp	r0, #48	; 0x30
 8012f5c:	d0f7      	beq.n	8012f4e <__gethex+0x1e>
 8012f5e:	f7ff ffd1 	bl	8012f04 <__hexdig_fun>
 8012f62:	4604      	mov	r4, r0
 8012f64:	2800      	cmp	r0, #0
 8012f66:	d138      	bne.n	8012fda <__gethex+0xaa>
 8012f68:	49a7      	ldr	r1, [pc, #668]	; (8013208 <__gethex+0x2d8>)
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	4640      	mov	r0, r8
 8012f6e:	f7ff ff19 	bl	8012da4 <strncmp>
 8012f72:	4606      	mov	r6, r0
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d169      	bne.n	801304c <__gethex+0x11c>
 8012f78:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012f7c:	465d      	mov	r5, fp
 8012f7e:	f7ff ffc1 	bl	8012f04 <__hexdig_fun>
 8012f82:	2800      	cmp	r0, #0
 8012f84:	d064      	beq.n	8013050 <__gethex+0x120>
 8012f86:	465a      	mov	r2, fp
 8012f88:	7810      	ldrb	r0, [r2, #0]
 8012f8a:	2830      	cmp	r0, #48	; 0x30
 8012f8c:	4690      	mov	r8, r2
 8012f8e:	f102 0201 	add.w	r2, r2, #1
 8012f92:	d0f9      	beq.n	8012f88 <__gethex+0x58>
 8012f94:	f7ff ffb6 	bl	8012f04 <__hexdig_fun>
 8012f98:	2301      	movs	r3, #1
 8012f9a:	fab0 f480 	clz	r4, r0
 8012f9e:	0964      	lsrs	r4, r4, #5
 8012fa0:	465e      	mov	r6, fp
 8012fa2:	9301      	str	r3, [sp, #4]
 8012fa4:	4642      	mov	r2, r8
 8012fa6:	4615      	mov	r5, r2
 8012fa8:	3201      	adds	r2, #1
 8012faa:	7828      	ldrb	r0, [r5, #0]
 8012fac:	f7ff ffaa 	bl	8012f04 <__hexdig_fun>
 8012fb0:	2800      	cmp	r0, #0
 8012fb2:	d1f8      	bne.n	8012fa6 <__gethex+0x76>
 8012fb4:	4994      	ldr	r1, [pc, #592]	; (8013208 <__gethex+0x2d8>)
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	4628      	mov	r0, r5
 8012fba:	f7ff fef3 	bl	8012da4 <strncmp>
 8012fbe:	b978      	cbnz	r0, 8012fe0 <__gethex+0xb0>
 8012fc0:	b946      	cbnz	r6, 8012fd4 <__gethex+0xa4>
 8012fc2:	1c6e      	adds	r6, r5, #1
 8012fc4:	4632      	mov	r2, r6
 8012fc6:	4615      	mov	r5, r2
 8012fc8:	3201      	adds	r2, #1
 8012fca:	7828      	ldrb	r0, [r5, #0]
 8012fcc:	f7ff ff9a 	bl	8012f04 <__hexdig_fun>
 8012fd0:	2800      	cmp	r0, #0
 8012fd2:	d1f8      	bne.n	8012fc6 <__gethex+0x96>
 8012fd4:	1b73      	subs	r3, r6, r5
 8012fd6:	009e      	lsls	r6, r3, #2
 8012fd8:	e004      	b.n	8012fe4 <__gethex+0xb4>
 8012fda:	2400      	movs	r4, #0
 8012fdc:	4626      	mov	r6, r4
 8012fde:	e7e1      	b.n	8012fa4 <__gethex+0x74>
 8012fe0:	2e00      	cmp	r6, #0
 8012fe2:	d1f7      	bne.n	8012fd4 <__gethex+0xa4>
 8012fe4:	782b      	ldrb	r3, [r5, #0]
 8012fe6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012fea:	2b50      	cmp	r3, #80	; 0x50
 8012fec:	d13d      	bne.n	801306a <__gethex+0x13a>
 8012fee:	786b      	ldrb	r3, [r5, #1]
 8012ff0:	2b2b      	cmp	r3, #43	; 0x2b
 8012ff2:	d02f      	beq.n	8013054 <__gethex+0x124>
 8012ff4:	2b2d      	cmp	r3, #45	; 0x2d
 8012ff6:	d031      	beq.n	801305c <__gethex+0x12c>
 8012ff8:	1c69      	adds	r1, r5, #1
 8012ffa:	f04f 0b00 	mov.w	fp, #0
 8012ffe:	7808      	ldrb	r0, [r1, #0]
 8013000:	f7ff ff80 	bl	8012f04 <__hexdig_fun>
 8013004:	1e42      	subs	r2, r0, #1
 8013006:	b2d2      	uxtb	r2, r2
 8013008:	2a18      	cmp	r2, #24
 801300a:	d82e      	bhi.n	801306a <__gethex+0x13a>
 801300c:	f1a0 0210 	sub.w	r2, r0, #16
 8013010:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013014:	f7ff ff76 	bl	8012f04 <__hexdig_fun>
 8013018:	f100 3cff 	add.w	ip, r0, #4294967295
 801301c:	fa5f fc8c 	uxtb.w	ip, ip
 8013020:	f1bc 0f18 	cmp.w	ip, #24
 8013024:	d91d      	bls.n	8013062 <__gethex+0x132>
 8013026:	f1bb 0f00 	cmp.w	fp, #0
 801302a:	d000      	beq.n	801302e <__gethex+0xfe>
 801302c:	4252      	negs	r2, r2
 801302e:	4416      	add	r6, r2
 8013030:	f8ca 1000 	str.w	r1, [sl]
 8013034:	b1dc      	cbz	r4, 801306e <__gethex+0x13e>
 8013036:	9b01      	ldr	r3, [sp, #4]
 8013038:	2b00      	cmp	r3, #0
 801303a:	bf14      	ite	ne
 801303c:	f04f 0800 	movne.w	r8, #0
 8013040:	f04f 0806 	moveq.w	r8, #6
 8013044:	4640      	mov	r0, r8
 8013046:	b005      	add	sp, #20
 8013048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801304c:	4645      	mov	r5, r8
 801304e:	4626      	mov	r6, r4
 8013050:	2401      	movs	r4, #1
 8013052:	e7c7      	b.n	8012fe4 <__gethex+0xb4>
 8013054:	f04f 0b00 	mov.w	fp, #0
 8013058:	1ca9      	adds	r1, r5, #2
 801305a:	e7d0      	b.n	8012ffe <__gethex+0xce>
 801305c:	f04f 0b01 	mov.w	fp, #1
 8013060:	e7fa      	b.n	8013058 <__gethex+0x128>
 8013062:	230a      	movs	r3, #10
 8013064:	fb03 0002 	mla	r0, r3, r2, r0
 8013068:	e7d0      	b.n	801300c <__gethex+0xdc>
 801306a:	4629      	mov	r1, r5
 801306c:	e7e0      	b.n	8013030 <__gethex+0x100>
 801306e:	eba5 0308 	sub.w	r3, r5, r8
 8013072:	3b01      	subs	r3, #1
 8013074:	4621      	mov	r1, r4
 8013076:	2b07      	cmp	r3, #7
 8013078:	dc0a      	bgt.n	8013090 <__gethex+0x160>
 801307a:	4648      	mov	r0, r9
 801307c:	f7fe f92e 	bl	80112dc <_Balloc>
 8013080:	4604      	mov	r4, r0
 8013082:	b940      	cbnz	r0, 8013096 <__gethex+0x166>
 8013084:	4b61      	ldr	r3, [pc, #388]	; (801320c <__gethex+0x2dc>)
 8013086:	4602      	mov	r2, r0
 8013088:	21e4      	movs	r1, #228	; 0xe4
 801308a:	4861      	ldr	r0, [pc, #388]	; (8013210 <__gethex+0x2e0>)
 801308c:	f7ff feb4 	bl	8012df8 <__assert_func>
 8013090:	3101      	adds	r1, #1
 8013092:	105b      	asrs	r3, r3, #1
 8013094:	e7ef      	b.n	8013076 <__gethex+0x146>
 8013096:	f100 0a14 	add.w	sl, r0, #20
 801309a:	2300      	movs	r3, #0
 801309c:	495a      	ldr	r1, [pc, #360]	; (8013208 <__gethex+0x2d8>)
 801309e:	f8cd a004 	str.w	sl, [sp, #4]
 80130a2:	469b      	mov	fp, r3
 80130a4:	45a8      	cmp	r8, r5
 80130a6:	d342      	bcc.n	801312e <__gethex+0x1fe>
 80130a8:	9801      	ldr	r0, [sp, #4]
 80130aa:	f840 bb04 	str.w	fp, [r0], #4
 80130ae:	eba0 000a 	sub.w	r0, r0, sl
 80130b2:	1080      	asrs	r0, r0, #2
 80130b4:	6120      	str	r0, [r4, #16]
 80130b6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80130ba:	4658      	mov	r0, fp
 80130bc:	f7fe fa00 	bl	80114c0 <__hi0bits>
 80130c0:	683d      	ldr	r5, [r7, #0]
 80130c2:	eba8 0000 	sub.w	r0, r8, r0
 80130c6:	42a8      	cmp	r0, r5
 80130c8:	dd59      	ble.n	801317e <__gethex+0x24e>
 80130ca:	eba0 0805 	sub.w	r8, r0, r5
 80130ce:	4641      	mov	r1, r8
 80130d0:	4620      	mov	r0, r4
 80130d2:	f7fe fd8f 	bl	8011bf4 <__any_on>
 80130d6:	4683      	mov	fp, r0
 80130d8:	b1b8      	cbz	r0, 801310a <__gethex+0x1da>
 80130da:	f108 33ff 	add.w	r3, r8, #4294967295
 80130de:	1159      	asrs	r1, r3, #5
 80130e0:	f003 021f 	and.w	r2, r3, #31
 80130e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80130e8:	f04f 0b01 	mov.w	fp, #1
 80130ec:	fa0b f202 	lsl.w	r2, fp, r2
 80130f0:	420a      	tst	r2, r1
 80130f2:	d00a      	beq.n	801310a <__gethex+0x1da>
 80130f4:	455b      	cmp	r3, fp
 80130f6:	dd06      	ble.n	8013106 <__gethex+0x1d6>
 80130f8:	f1a8 0102 	sub.w	r1, r8, #2
 80130fc:	4620      	mov	r0, r4
 80130fe:	f7fe fd79 	bl	8011bf4 <__any_on>
 8013102:	2800      	cmp	r0, #0
 8013104:	d138      	bne.n	8013178 <__gethex+0x248>
 8013106:	f04f 0b02 	mov.w	fp, #2
 801310a:	4641      	mov	r1, r8
 801310c:	4620      	mov	r0, r4
 801310e:	f7ff fea7 	bl	8012e60 <rshift>
 8013112:	4446      	add	r6, r8
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	42b3      	cmp	r3, r6
 8013118:	da41      	bge.n	801319e <__gethex+0x26e>
 801311a:	4621      	mov	r1, r4
 801311c:	4648      	mov	r0, r9
 801311e:	f7fe f91d 	bl	801135c <_Bfree>
 8013122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013124:	2300      	movs	r3, #0
 8013126:	6013      	str	r3, [r2, #0]
 8013128:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801312c:	e78a      	b.n	8013044 <__gethex+0x114>
 801312e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8013132:	2a2e      	cmp	r2, #46	; 0x2e
 8013134:	d014      	beq.n	8013160 <__gethex+0x230>
 8013136:	2b20      	cmp	r3, #32
 8013138:	d106      	bne.n	8013148 <__gethex+0x218>
 801313a:	9b01      	ldr	r3, [sp, #4]
 801313c:	f843 bb04 	str.w	fp, [r3], #4
 8013140:	f04f 0b00 	mov.w	fp, #0
 8013144:	9301      	str	r3, [sp, #4]
 8013146:	465b      	mov	r3, fp
 8013148:	7828      	ldrb	r0, [r5, #0]
 801314a:	9303      	str	r3, [sp, #12]
 801314c:	f7ff feda 	bl	8012f04 <__hexdig_fun>
 8013150:	9b03      	ldr	r3, [sp, #12]
 8013152:	f000 000f 	and.w	r0, r0, #15
 8013156:	4098      	lsls	r0, r3
 8013158:	ea4b 0b00 	orr.w	fp, fp, r0
 801315c:	3304      	adds	r3, #4
 801315e:	e7a1      	b.n	80130a4 <__gethex+0x174>
 8013160:	45a8      	cmp	r8, r5
 8013162:	d8e8      	bhi.n	8013136 <__gethex+0x206>
 8013164:	2201      	movs	r2, #1
 8013166:	4628      	mov	r0, r5
 8013168:	9303      	str	r3, [sp, #12]
 801316a:	f7ff fe1b 	bl	8012da4 <strncmp>
 801316e:	4926      	ldr	r1, [pc, #152]	; (8013208 <__gethex+0x2d8>)
 8013170:	9b03      	ldr	r3, [sp, #12]
 8013172:	2800      	cmp	r0, #0
 8013174:	d1df      	bne.n	8013136 <__gethex+0x206>
 8013176:	e795      	b.n	80130a4 <__gethex+0x174>
 8013178:	f04f 0b03 	mov.w	fp, #3
 801317c:	e7c5      	b.n	801310a <__gethex+0x1da>
 801317e:	da0b      	bge.n	8013198 <__gethex+0x268>
 8013180:	eba5 0800 	sub.w	r8, r5, r0
 8013184:	4621      	mov	r1, r4
 8013186:	4642      	mov	r2, r8
 8013188:	4648      	mov	r0, r9
 801318a:	f7fe fb01 	bl	8011790 <__lshift>
 801318e:	eba6 0608 	sub.w	r6, r6, r8
 8013192:	4604      	mov	r4, r0
 8013194:	f100 0a14 	add.w	sl, r0, #20
 8013198:	f04f 0b00 	mov.w	fp, #0
 801319c:	e7ba      	b.n	8013114 <__gethex+0x1e4>
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	42b3      	cmp	r3, r6
 80131a2:	dd73      	ble.n	801328c <__gethex+0x35c>
 80131a4:	1b9e      	subs	r6, r3, r6
 80131a6:	42b5      	cmp	r5, r6
 80131a8:	dc34      	bgt.n	8013214 <__gethex+0x2e4>
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	2b02      	cmp	r3, #2
 80131ae:	d023      	beq.n	80131f8 <__gethex+0x2c8>
 80131b0:	2b03      	cmp	r3, #3
 80131b2:	d025      	beq.n	8013200 <__gethex+0x2d0>
 80131b4:	2b01      	cmp	r3, #1
 80131b6:	d115      	bne.n	80131e4 <__gethex+0x2b4>
 80131b8:	42b5      	cmp	r5, r6
 80131ba:	d113      	bne.n	80131e4 <__gethex+0x2b4>
 80131bc:	2d01      	cmp	r5, #1
 80131be:	d10b      	bne.n	80131d8 <__gethex+0x2a8>
 80131c0:	9a02      	ldr	r2, [sp, #8]
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6013      	str	r3, [r2, #0]
 80131c6:	2301      	movs	r3, #1
 80131c8:	6123      	str	r3, [r4, #16]
 80131ca:	f8ca 3000 	str.w	r3, [sl]
 80131ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131d0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80131d4:	601c      	str	r4, [r3, #0]
 80131d6:	e735      	b.n	8013044 <__gethex+0x114>
 80131d8:	1e69      	subs	r1, r5, #1
 80131da:	4620      	mov	r0, r4
 80131dc:	f7fe fd0a 	bl	8011bf4 <__any_on>
 80131e0:	2800      	cmp	r0, #0
 80131e2:	d1ed      	bne.n	80131c0 <__gethex+0x290>
 80131e4:	4621      	mov	r1, r4
 80131e6:	4648      	mov	r0, r9
 80131e8:	f7fe f8b8 	bl	801135c <_Bfree>
 80131ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80131ee:	2300      	movs	r3, #0
 80131f0:	6013      	str	r3, [r2, #0]
 80131f2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80131f6:	e725      	b.n	8013044 <__gethex+0x114>
 80131f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d1f2      	bne.n	80131e4 <__gethex+0x2b4>
 80131fe:	e7df      	b.n	80131c0 <__gethex+0x290>
 8013200:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013202:	2b00      	cmp	r3, #0
 8013204:	d1dc      	bne.n	80131c0 <__gethex+0x290>
 8013206:	e7ed      	b.n	80131e4 <__gethex+0x2b4>
 8013208:	08015974 	.word	0x08015974
 801320c:	0801580d 	.word	0x0801580d
 8013210:	08015b1e 	.word	0x08015b1e
 8013214:	f106 38ff 	add.w	r8, r6, #4294967295
 8013218:	f1bb 0f00 	cmp.w	fp, #0
 801321c:	d133      	bne.n	8013286 <__gethex+0x356>
 801321e:	f1b8 0f00 	cmp.w	r8, #0
 8013222:	d004      	beq.n	801322e <__gethex+0x2fe>
 8013224:	4641      	mov	r1, r8
 8013226:	4620      	mov	r0, r4
 8013228:	f7fe fce4 	bl	8011bf4 <__any_on>
 801322c:	4683      	mov	fp, r0
 801322e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8013232:	2301      	movs	r3, #1
 8013234:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013238:	f008 081f 	and.w	r8, r8, #31
 801323c:	fa03 f308 	lsl.w	r3, r3, r8
 8013240:	4213      	tst	r3, r2
 8013242:	4631      	mov	r1, r6
 8013244:	4620      	mov	r0, r4
 8013246:	bf18      	it	ne
 8013248:	f04b 0b02 	orrne.w	fp, fp, #2
 801324c:	1bad      	subs	r5, r5, r6
 801324e:	f7ff fe07 	bl	8012e60 <rshift>
 8013252:	687e      	ldr	r6, [r7, #4]
 8013254:	f04f 0802 	mov.w	r8, #2
 8013258:	f1bb 0f00 	cmp.w	fp, #0
 801325c:	d04a      	beq.n	80132f4 <__gethex+0x3c4>
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	2b02      	cmp	r3, #2
 8013262:	d016      	beq.n	8013292 <__gethex+0x362>
 8013264:	2b03      	cmp	r3, #3
 8013266:	d018      	beq.n	801329a <__gethex+0x36a>
 8013268:	2b01      	cmp	r3, #1
 801326a:	d109      	bne.n	8013280 <__gethex+0x350>
 801326c:	f01b 0f02 	tst.w	fp, #2
 8013270:	d006      	beq.n	8013280 <__gethex+0x350>
 8013272:	f8da 3000 	ldr.w	r3, [sl]
 8013276:	ea4b 0b03 	orr.w	fp, fp, r3
 801327a:	f01b 0f01 	tst.w	fp, #1
 801327e:	d10f      	bne.n	80132a0 <__gethex+0x370>
 8013280:	f048 0810 	orr.w	r8, r8, #16
 8013284:	e036      	b.n	80132f4 <__gethex+0x3c4>
 8013286:	f04f 0b01 	mov.w	fp, #1
 801328a:	e7d0      	b.n	801322e <__gethex+0x2fe>
 801328c:	f04f 0801 	mov.w	r8, #1
 8013290:	e7e2      	b.n	8013258 <__gethex+0x328>
 8013292:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013294:	f1c3 0301 	rsb	r3, r3, #1
 8013298:	930f      	str	r3, [sp, #60]	; 0x3c
 801329a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801329c:	2b00      	cmp	r3, #0
 801329e:	d0ef      	beq.n	8013280 <__gethex+0x350>
 80132a0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80132a4:	f104 0214 	add.w	r2, r4, #20
 80132a8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80132ac:	9301      	str	r3, [sp, #4]
 80132ae:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80132b2:	2300      	movs	r3, #0
 80132b4:	4694      	mov	ip, r2
 80132b6:	f852 1b04 	ldr.w	r1, [r2], #4
 80132ba:	f1b1 3fff 	cmp.w	r1, #4294967295
 80132be:	d01e      	beq.n	80132fe <__gethex+0x3ce>
 80132c0:	3101      	adds	r1, #1
 80132c2:	f8cc 1000 	str.w	r1, [ip]
 80132c6:	f1b8 0f02 	cmp.w	r8, #2
 80132ca:	f104 0214 	add.w	r2, r4, #20
 80132ce:	d13d      	bne.n	801334c <__gethex+0x41c>
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	3b01      	subs	r3, #1
 80132d4:	42ab      	cmp	r3, r5
 80132d6:	d10b      	bne.n	80132f0 <__gethex+0x3c0>
 80132d8:	1169      	asrs	r1, r5, #5
 80132da:	2301      	movs	r3, #1
 80132dc:	f005 051f 	and.w	r5, r5, #31
 80132e0:	fa03 f505 	lsl.w	r5, r3, r5
 80132e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80132e8:	421d      	tst	r5, r3
 80132ea:	bf18      	it	ne
 80132ec:	f04f 0801 	movne.w	r8, #1
 80132f0:	f048 0820 	orr.w	r8, r8, #32
 80132f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80132f6:	601c      	str	r4, [r3, #0]
 80132f8:	9b02      	ldr	r3, [sp, #8]
 80132fa:	601e      	str	r6, [r3, #0]
 80132fc:	e6a2      	b.n	8013044 <__gethex+0x114>
 80132fe:	4290      	cmp	r0, r2
 8013300:	f842 3c04 	str.w	r3, [r2, #-4]
 8013304:	d8d6      	bhi.n	80132b4 <__gethex+0x384>
 8013306:	68a2      	ldr	r2, [r4, #8]
 8013308:	4593      	cmp	fp, r2
 801330a:	db17      	blt.n	801333c <__gethex+0x40c>
 801330c:	6861      	ldr	r1, [r4, #4]
 801330e:	4648      	mov	r0, r9
 8013310:	3101      	adds	r1, #1
 8013312:	f7fd ffe3 	bl	80112dc <_Balloc>
 8013316:	4682      	mov	sl, r0
 8013318:	b918      	cbnz	r0, 8013322 <__gethex+0x3f2>
 801331a:	4b1b      	ldr	r3, [pc, #108]	; (8013388 <__gethex+0x458>)
 801331c:	4602      	mov	r2, r0
 801331e:	2184      	movs	r1, #132	; 0x84
 8013320:	e6b3      	b.n	801308a <__gethex+0x15a>
 8013322:	6922      	ldr	r2, [r4, #16]
 8013324:	3202      	adds	r2, #2
 8013326:	f104 010c 	add.w	r1, r4, #12
 801332a:	0092      	lsls	r2, r2, #2
 801332c:	300c      	adds	r0, #12
 801332e:	f7fd f847 	bl	80103c0 <memcpy>
 8013332:	4621      	mov	r1, r4
 8013334:	4648      	mov	r0, r9
 8013336:	f7fe f811 	bl	801135c <_Bfree>
 801333a:	4654      	mov	r4, sl
 801333c:	6922      	ldr	r2, [r4, #16]
 801333e:	1c51      	adds	r1, r2, #1
 8013340:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013344:	6121      	str	r1, [r4, #16]
 8013346:	2101      	movs	r1, #1
 8013348:	6151      	str	r1, [r2, #20]
 801334a:	e7bc      	b.n	80132c6 <__gethex+0x396>
 801334c:	6921      	ldr	r1, [r4, #16]
 801334e:	4559      	cmp	r1, fp
 8013350:	dd0b      	ble.n	801336a <__gethex+0x43a>
 8013352:	2101      	movs	r1, #1
 8013354:	4620      	mov	r0, r4
 8013356:	f7ff fd83 	bl	8012e60 <rshift>
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	3601      	adds	r6, #1
 801335e:	42b3      	cmp	r3, r6
 8013360:	f6ff aedb 	blt.w	801311a <__gethex+0x1ea>
 8013364:	f04f 0801 	mov.w	r8, #1
 8013368:	e7c2      	b.n	80132f0 <__gethex+0x3c0>
 801336a:	f015 051f 	ands.w	r5, r5, #31
 801336e:	d0f9      	beq.n	8013364 <__gethex+0x434>
 8013370:	9b01      	ldr	r3, [sp, #4]
 8013372:	441a      	add	r2, r3
 8013374:	f1c5 0520 	rsb	r5, r5, #32
 8013378:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801337c:	f7fe f8a0 	bl	80114c0 <__hi0bits>
 8013380:	42a8      	cmp	r0, r5
 8013382:	dbe6      	blt.n	8013352 <__gethex+0x422>
 8013384:	e7ee      	b.n	8013364 <__gethex+0x434>
 8013386:	bf00      	nop
 8013388:	0801580d 	.word	0x0801580d

0801338c <L_shift>:
 801338c:	f1c2 0208 	rsb	r2, r2, #8
 8013390:	0092      	lsls	r2, r2, #2
 8013392:	b570      	push	{r4, r5, r6, lr}
 8013394:	f1c2 0620 	rsb	r6, r2, #32
 8013398:	6843      	ldr	r3, [r0, #4]
 801339a:	6804      	ldr	r4, [r0, #0]
 801339c:	fa03 f506 	lsl.w	r5, r3, r6
 80133a0:	432c      	orrs	r4, r5
 80133a2:	40d3      	lsrs	r3, r2
 80133a4:	6004      	str	r4, [r0, #0]
 80133a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80133aa:	4288      	cmp	r0, r1
 80133ac:	d3f4      	bcc.n	8013398 <L_shift+0xc>
 80133ae:	bd70      	pop	{r4, r5, r6, pc}

080133b0 <__match>:
 80133b0:	b530      	push	{r4, r5, lr}
 80133b2:	6803      	ldr	r3, [r0, #0]
 80133b4:	3301      	adds	r3, #1
 80133b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133ba:	b914      	cbnz	r4, 80133c2 <__match+0x12>
 80133bc:	6003      	str	r3, [r0, #0]
 80133be:	2001      	movs	r0, #1
 80133c0:	bd30      	pop	{r4, r5, pc}
 80133c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80133c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80133ca:	2d19      	cmp	r5, #25
 80133cc:	bf98      	it	ls
 80133ce:	3220      	addls	r2, #32
 80133d0:	42a2      	cmp	r2, r4
 80133d2:	d0f0      	beq.n	80133b6 <__match+0x6>
 80133d4:	2000      	movs	r0, #0
 80133d6:	e7f3      	b.n	80133c0 <__match+0x10>

080133d8 <__hexnan>:
 80133d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133dc:	680b      	ldr	r3, [r1, #0]
 80133de:	6801      	ldr	r1, [r0, #0]
 80133e0:	115e      	asrs	r6, r3, #5
 80133e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80133e6:	f013 031f 	ands.w	r3, r3, #31
 80133ea:	b087      	sub	sp, #28
 80133ec:	bf18      	it	ne
 80133ee:	3604      	addne	r6, #4
 80133f0:	2500      	movs	r5, #0
 80133f2:	1f37      	subs	r7, r6, #4
 80133f4:	4682      	mov	sl, r0
 80133f6:	4690      	mov	r8, r2
 80133f8:	9301      	str	r3, [sp, #4]
 80133fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80133fe:	46b9      	mov	r9, r7
 8013400:	463c      	mov	r4, r7
 8013402:	9502      	str	r5, [sp, #8]
 8013404:	46ab      	mov	fp, r5
 8013406:	784a      	ldrb	r2, [r1, #1]
 8013408:	1c4b      	adds	r3, r1, #1
 801340a:	9303      	str	r3, [sp, #12]
 801340c:	b342      	cbz	r2, 8013460 <__hexnan+0x88>
 801340e:	4610      	mov	r0, r2
 8013410:	9105      	str	r1, [sp, #20]
 8013412:	9204      	str	r2, [sp, #16]
 8013414:	f7ff fd76 	bl	8012f04 <__hexdig_fun>
 8013418:	2800      	cmp	r0, #0
 801341a:	d14f      	bne.n	80134bc <__hexnan+0xe4>
 801341c:	9a04      	ldr	r2, [sp, #16]
 801341e:	9905      	ldr	r1, [sp, #20]
 8013420:	2a20      	cmp	r2, #32
 8013422:	d818      	bhi.n	8013456 <__hexnan+0x7e>
 8013424:	9b02      	ldr	r3, [sp, #8]
 8013426:	459b      	cmp	fp, r3
 8013428:	dd13      	ble.n	8013452 <__hexnan+0x7a>
 801342a:	454c      	cmp	r4, r9
 801342c:	d206      	bcs.n	801343c <__hexnan+0x64>
 801342e:	2d07      	cmp	r5, #7
 8013430:	dc04      	bgt.n	801343c <__hexnan+0x64>
 8013432:	462a      	mov	r2, r5
 8013434:	4649      	mov	r1, r9
 8013436:	4620      	mov	r0, r4
 8013438:	f7ff ffa8 	bl	801338c <L_shift>
 801343c:	4544      	cmp	r4, r8
 801343e:	d950      	bls.n	80134e2 <__hexnan+0x10a>
 8013440:	2300      	movs	r3, #0
 8013442:	f1a4 0904 	sub.w	r9, r4, #4
 8013446:	f844 3c04 	str.w	r3, [r4, #-4]
 801344a:	f8cd b008 	str.w	fp, [sp, #8]
 801344e:	464c      	mov	r4, r9
 8013450:	461d      	mov	r5, r3
 8013452:	9903      	ldr	r1, [sp, #12]
 8013454:	e7d7      	b.n	8013406 <__hexnan+0x2e>
 8013456:	2a29      	cmp	r2, #41	; 0x29
 8013458:	d155      	bne.n	8013506 <__hexnan+0x12e>
 801345a:	3102      	adds	r1, #2
 801345c:	f8ca 1000 	str.w	r1, [sl]
 8013460:	f1bb 0f00 	cmp.w	fp, #0
 8013464:	d04f      	beq.n	8013506 <__hexnan+0x12e>
 8013466:	454c      	cmp	r4, r9
 8013468:	d206      	bcs.n	8013478 <__hexnan+0xa0>
 801346a:	2d07      	cmp	r5, #7
 801346c:	dc04      	bgt.n	8013478 <__hexnan+0xa0>
 801346e:	462a      	mov	r2, r5
 8013470:	4649      	mov	r1, r9
 8013472:	4620      	mov	r0, r4
 8013474:	f7ff ff8a 	bl	801338c <L_shift>
 8013478:	4544      	cmp	r4, r8
 801347a:	d934      	bls.n	80134e6 <__hexnan+0x10e>
 801347c:	f1a8 0204 	sub.w	r2, r8, #4
 8013480:	4623      	mov	r3, r4
 8013482:	f853 1b04 	ldr.w	r1, [r3], #4
 8013486:	f842 1f04 	str.w	r1, [r2, #4]!
 801348a:	429f      	cmp	r7, r3
 801348c:	d2f9      	bcs.n	8013482 <__hexnan+0xaa>
 801348e:	1b3b      	subs	r3, r7, r4
 8013490:	f023 0303 	bic.w	r3, r3, #3
 8013494:	3304      	adds	r3, #4
 8013496:	3e03      	subs	r6, #3
 8013498:	3401      	adds	r4, #1
 801349a:	42a6      	cmp	r6, r4
 801349c:	bf38      	it	cc
 801349e:	2304      	movcc	r3, #4
 80134a0:	4443      	add	r3, r8
 80134a2:	2200      	movs	r2, #0
 80134a4:	f843 2b04 	str.w	r2, [r3], #4
 80134a8:	429f      	cmp	r7, r3
 80134aa:	d2fb      	bcs.n	80134a4 <__hexnan+0xcc>
 80134ac:	683b      	ldr	r3, [r7, #0]
 80134ae:	b91b      	cbnz	r3, 80134b8 <__hexnan+0xe0>
 80134b0:	4547      	cmp	r7, r8
 80134b2:	d126      	bne.n	8013502 <__hexnan+0x12a>
 80134b4:	2301      	movs	r3, #1
 80134b6:	603b      	str	r3, [r7, #0]
 80134b8:	2005      	movs	r0, #5
 80134ba:	e025      	b.n	8013508 <__hexnan+0x130>
 80134bc:	3501      	adds	r5, #1
 80134be:	2d08      	cmp	r5, #8
 80134c0:	f10b 0b01 	add.w	fp, fp, #1
 80134c4:	dd06      	ble.n	80134d4 <__hexnan+0xfc>
 80134c6:	4544      	cmp	r4, r8
 80134c8:	d9c3      	bls.n	8013452 <__hexnan+0x7a>
 80134ca:	2300      	movs	r3, #0
 80134cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80134d0:	2501      	movs	r5, #1
 80134d2:	3c04      	subs	r4, #4
 80134d4:	6822      	ldr	r2, [r4, #0]
 80134d6:	f000 000f 	and.w	r0, r0, #15
 80134da:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80134de:	6020      	str	r0, [r4, #0]
 80134e0:	e7b7      	b.n	8013452 <__hexnan+0x7a>
 80134e2:	2508      	movs	r5, #8
 80134e4:	e7b5      	b.n	8013452 <__hexnan+0x7a>
 80134e6:	9b01      	ldr	r3, [sp, #4]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d0df      	beq.n	80134ac <__hexnan+0xd4>
 80134ec:	f1c3 0320 	rsb	r3, r3, #32
 80134f0:	f04f 32ff 	mov.w	r2, #4294967295
 80134f4:	40da      	lsrs	r2, r3
 80134f6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80134fa:	4013      	ands	r3, r2
 80134fc:	f846 3c04 	str.w	r3, [r6, #-4]
 8013500:	e7d4      	b.n	80134ac <__hexnan+0xd4>
 8013502:	3f04      	subs	r7, #4
 8013504:	e7d2      	b.n	80134ac <__hexnan+0xd4>
 8013506:	2004      	movs	r0, #4
 8013508:	b007      	add	sp, #28
 801350a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801350e <__ascii_mbtowc>:
 801350e:	b082      	sub	sp, #8
 8013510:	b901      	cbnz	r1, 8013514 <__ascii_mbtowc+0x6>
 8013512:	a901      	add	r1, sp, #4
 8013514:	b142      	cbz	r2, 8013528 <__ascii_mbtowc+0x1a>
 8013516:	b14b      	cbz	r3, 801352c <__ascii_mbtowc+0x1e>
 8013518:	7813      	ldrb	r3, [r2, #0]
 801351a:	600b      	str	r3, [r1, #0]
 801351c:	7812      	ldrb	r2, [r2, #0]
 801351e:	1e10      	subs	r0, r2, #0
 8013520:	bf18      	it	ne
 8013522:	2001      	movne	r0, #1
 8013524:	b002      	add	sp, #8
 8013526:	4770      	bx	lr
 8013528:	4610      	mov	r0, r2
 801352a:	e7fb      	b.n	8013524 <__ascii_mbtowc+0x16>
 801352c:	f06f 0001 	mvn.w	r0, #1
 8013530:	e7f8      	b.n	8013524 <__ascii_mbtowc+0x16>

08013532 <_realloc_r>:
 8013532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013536:	4680      	mov	r8, r0
 8013538:	4614      	mov	r4, r2
 801353a:	460e      	mov	r6, r1
 801353c:	b921      	cbnz	r1, 8013548 <_realloc_r+0x16>
 801353e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013542:	4611      	mov	r1, r2
 8013544:	f7fd be3e 	b.w	80111c4 <_malloc_r>
 8013548:	b92a      	cbnz	r2, 8013556 <_realloc_r+0x24>
 801354a:	f7fd fdc7 	bl	80110dc <_free_r>
 801354e:	4625      	mov	r5, r4
 8013550:	4628      	mov	r0, r5
 8013552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013556:	f000 f842 	bl	80135de <_malloc_usable_size_r>
 801355a:	4284      	cmp	r4, r0
 801355c:	4607      	mov	r7, r0
 801355e:	d802      	bhi.n	8013566 <_realloc_r+0x34>
 8013560:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013564:	d812      	bhi.n	801358c <_realloc_r+0x5a>
 8013566:	4621      	mov	r1, r4
 8013568:	4640      	mov	r0, r8
 801356a:	f7fd fe2b 	bl	80111c4 <_malloc_r>
 801356e:	4605      	mov	r5, r0
 8013570:	2800      	cmp	r0, #0
 8013572:	d0ed      	beq.n	8013550 <_realloc_r+0x1e>
 8013574:	42bc      	cmp	r4, r7
 8013576:	4622      	mov	r2, r4
 8013578:	4631      	mov	r1, r6
 801357a:	bf28      	it	cs
 801357c:	463a      	movcs	r2, r7
 801357e:	f7fc ff1f 	bl	80103c0 <memcpy>
 8013582:	4631      	mov	r1, r6
 8013584:	4640      	mov	r0, r8
 8013586:	f7fd fda9 	bl	80110dc <_free_r>
 801358a:	e7e1      	b.n	8013550 <_realloc_r+0x1e>
 801358c:	4635      	mov	r5, r6
 801358e:	e7df      	b.n	8013550 <_realloc_r+0x1e>

08013590 <__ascii_wctomb>:
 8013590:	b149      	cbz	r1, 80135a6 <__ascii_wctomb+0x16>
 8013592:	2aff      	cmp	r2, #255	; 0xff
 8013594:	bf85      	ittet	hi
 8013596:	238a      	movhi	r3, #138	; 0x8a
 8013598:	6003      	strhi	r3, [r0, #0]
 801359a:	700a      	strbls	r2, [r1, #0]
 801359c:	f04f 30ff 	movhi.w	r0, #4294967295
 80135a0:	bf98      	it	ls
 80135a2:	2001      	movls	r0, #1
 80135a4:	4770      	bx	lr
 80135a6:	4608      	mov	r0, r1
 80135a8:	4770      	bx	lr
	...

080135ac <fiprintf>:
 80135ac:	b40e      	push	{r1, r2, r3}
 80135ae:	b503      	push	{r0, r1, lr}
 80135b0:	4601      	mov	r1, r0
 80135b2:	ab03      	add	r3, sp, #12
 80135b4:	4805      	ldr	r0, [pc, #20]	; (80135cc <fiprintf+0x20>)
 80135b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80135ba:	6800      	ldr	r0, [r0, #0]
 80135bc:	9301      	str	r3, [sp, #4]
 80135be:	f000 f83f 	bl	8013640 <_vfiprintf_r>
 80135c2:	b002      	add	sp, #8
 80135c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80135c8:	b003      	add	sp, #12
 80135ca:	4770      	bx	lr
 80135cc:	200001d4 	.word	0x200001d4

080135d0 <abort>:
 80135d0:	b508      	push	{r3, lr}
 80135d2:	2006      	movs	r0, #6
 80135d4:	f000 fa0c 	bl	80139f0 <raise>
 80135d8:	2001      	movs	r0, #1
 80135da:	f7ee fac3 	bl	8001b64 <_exit>

080135de <_malloc_usable_size_r>:
 80135de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135e2:	1f18      	subs	r0, r3, #4
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	bfbc      	itt	lt
 80135e8:	580b      	ldrlt	r3, [r1, r0]
 80135ea:	18c0      	addlt	r0, r0, r3
 80135ec:	4770      	bx	lr

080135ee <__sfputc_r>:
 80135ee:	6893      	ldr	r3, [r2, #8]
 80135f0:	3b01      	subs	r3, #1
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	b410      	push	{r4}
 80135f6:	6093      	str	r3, [r2, #8]
 80135f8:	da08      	bge.n	801360c <__sfputc_r+0x1e>
 80135fa:	6994      	ldr	r4, [r2, #24]
 80135fc:	42a3      	cmp	r3, r4
 80135fe:	db01      	blt.n	8013604 <__sfputc_r+0x16>
 8013600:	290a      	cmp	r1, #10
 8013602:	d103      	bne.n	801360c <__sfputc_r+0x1e>
 8013604:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013608:	f000 b934 	b.w	8013874 <__swbuf_r>
 801360c:	6813      	ldr	r3, [r2, #0]
 801360e:	1c58      	adds	r0, r3, #1
 8013610:	6010      	str	r0, [r2, #0]
 8013612:	7019      	strb	r1, [r3, #0]
 8013614:	4608      	mov	r0, r1
 8013616:	f85d 4b04 	ldr.w	r4, [sp], #4
 801361a:	4770      	bx	lr

0801361c <__sfputs_r>:
 801361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801361e:	4606      	mov	r6, r0
 8013620:	460f      	mov	r7, r1
 8013622:	4614      	mov	r4, r2
 8013624:	18d5      	adds	r5, r2, r3
 8013626:	42ac      	cmp	r4, r5
 8013628:	d101      	bne.n	801362e <__sfputs_r+0x12>
 801362a:	2000      	movs	r0, #0
 801362c:	e007      	b.n	801363e <__sfputs_r+0x22>
 801362e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013632:	463a      	mov	r2, r7
 8013634:	4630      	mov	r0, r6
 8013636:	f7ff ffda 	bl	80135ee <__sfputc_r>
 801363a:	1c43      	adds	r3, r0, #1
 801363c:	d1f3      	bne.n	8013626 <__sfputs_r+0xa>
 801363e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013640 <_vfiprintf_r>:
 8013640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013644:	460d      	mov	r5, r1
 8013646:	b09d      	sub	sp, #116	; 0x74
 8013648:	4614      	mov	r4, r2
 801364a:	4698      	mov	r8, r3
 801364c:	4606      	mov	r6, r0
 801364e:	b118      	cbz	r0, 8013658 <_vfiprintf_r+0x18>
 8013650:	6a03      	ldr	r3, [r0, #32]
 8013652:	b90b      	cbnz	r3, 8013658 <_vfiprintf_r+0x18>
 8013654:	f7fc fd9c 	bl	8010190 <__sinit>
 8013658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801365a:	07d9      	lsls	r1, r3, #31
 801365c:	d405      	bmi.n	801366a <_vfiprintf_r+0x2a>
 801365e:	89ab      	ldrh	r3, [r5, #12]
 8013660:	059a      	lsls	r2, r3, #22
 8013662:	d402      	bmi.n	801366a <_vfiprintf_r+0x2a>
 8013664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013666:	f7fc fea9 	bl	80103bc <__retarget_lock_acquire_recursive>
 801366a:	89ab      	ldrh	r3, [r5, #12]
 801366c:	071b      	lsls	r3, r3, #28
 801366e:	d501      	bpl.n	8013674 <_vfiprintf_r+0x34>
 8013670:	692b      	ldr	r3, [r5, #16]
 8013672:	b99b      	cbnz	r3, 801369c <_vfiprintf_r+0x5c>
 8013674:	4629      	mov	r1, r5
 8013676:	4630      	mov	r0, r6
 8013678:	f000 f93a 	bl	80138f0 <__swsetup_r>
 801367c:	b170      	cbz	r0, 801369c <_vfiprintf_r+0x5c>
 801367e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013680:	07dc      	lsls	r4, r3, #31
 8013682:	d504      	bpl.n	801368e <_vfiprintf_r+0x4e>
 8013684:	f04f 30ff 	mov.w	r0, #4294967295
 8013688:	b01d      	add	sp, #116	; 0x74
 801368a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801368e:	89ab      	ldrh	r3, [r5, #12]
 8013690:	0598      	lsls	r0, r3, #22
 8013692:	d4f7      	bmi.n	8013684 <_vfiprintf_r+0x44>
 8013694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013696:	f7fc fe92 	bl	80103be <__retarget_lock_release_recursive>
 801369a:	e7f3      	b.n	8013684 <_vfiprintf_r+0x44>
 801369c:	2300      	movs	r3, #0
 801369e:	9309      	str	r3, [sp, #36]	; 0x24
 80136a0:	2320      	movs	r3, #32
 80136a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80136a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80136aa:	2330      	movs	r3, #48	; 0x30
 80136ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013860 <_vfiprintf_r+0x220>
 80136b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80136b4:	f04f 0901 	mov.w	r9, #1
 80136b8:	4623      	mov	r3, r4
 80136ba:	469a      	mov	sl, r3
 80136bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136c0:	b10a      	cbz	r2, 80136c6 <_vfiprintf_r+0x86>
 80136c2:	2a25      	cmp	r2, #37	; 0x25
 80136c4:	d1f9      	bne.n	80136ba <_vfiprintf_r+0x7a>
 80136c6:	ebba 0b04 	subs.w	fp, sl, r4
 80136ca:	d00b      	beq.n	80136e4 <_vfiprintf_r+0xa4>
 80136cc:	465b      	mov	r3, fp
 80136ce:	4622      	mov	r2, r4
 80136d0:	4629      	mov	r1, r5
 80136d2:	4630      	mov	r0, r6
 80136d4:	f7ff ffa2 	bl	801361c <__sfputs_r>
 80136d8:	3001      	adds	r0, #1
 80136da:	f000 80a9 	beq.w	8013830 <_vfiprintf_r+0x1f0>
 80136de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136e0:	445a      	add	r2, fp
 80136e2:	9209      	str	r2, [sp, #36]	; 0x24
 80136e4:	f89a 3000 	ldrb.w	r3, [sl]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	f000 80a1 	beq.w	8013830 <_vfiprintf_r+0x1f0>
 80136ee:	2300      	movs	r3, #0
 80136f0:	f04f 32ff 	mov.w	r2, #4294967295
 80136f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136f8:	f10a 0a01 	add.w	sl, sl, #1
 80136fc:	9304      	str	r3, [sp, #16]
 80136fe:	9307      	str	r3, [sp, #28]
 8013700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013704:	931a      	str	r3, [sp, #104]	; 0x68
 8013706:	4654      	mov	r4, sl
 8013708:	2205      	movs	r2, #5
 801370a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801370e:	4854      	ldr	r0, [pc, #336]	; (8013860 <_vfiprintf_r+0x220>)
 8013710:	f7ec fd6e 	bl	80001f0 <memchr>
 8013714:	9a04      	ldr	r2, [sp, #16]
 8013716:	b9d8      	cbnz	r0, 8013750 <_vfiprintf_r+0x110>
 8013718:	06d1      	lsls	r1, r2, #27
 801371a:	bf44      	itt	mi
 801371c:	2320      	movmi	r3, #32
 801371e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013722:	0713      	lsls	r3, r2, #28
 8013724:	bf44      	itt	mi
 8013726:	232b      	movmi	r3, #43	; 0x2b
 8013728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801372c:	f89a 3000 	ldrb.w	r3, [sl]
 8013730:	2b2a      	cmp	r3, #42	; 0x2a
 8013732:	d015      	beq.n	8013760 <_vfiprintf_r+0x120>
 8013734:	9a07      	ldr	r2, [sp, #28]
 8013736:	4654      	mov	r4, sl
 8013738:	2000      	movs	r0, #0
 801373a:	f04f 0c0a 	mov.w	ip, #10
 801373e:	4621      	mov	r1, r4
 8013740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013744:	3b30      	subs	r3, #48	; 0x30
 8013746:	2b09      	cmp	r3, #9
 8013748:	d94d      	bls.n	80137e6 <_vfiprintf_r+0x1a6>
 801374a:	b1b0      	cbz	r0, 801377a <_vfiprintf_r+0x13a>
 801374c:	9207      	str	r2, [sp, #28]
 801374e:	e014      	b.n	801377a <_vfiprintf_r+0x13a>
 8013750:	eba0 0308 	sub.w	r3, r0, r8
 8013754:	fa09 f303 	lsl.w	r3, r9, r3
 8013758:	4313      	orrs	r3, r2
 801375a:	9304      	str	r3, [sp, #16]
 801375c:	46a2      	mov	sl, r4
 801375e:	e7d2      	b.n	8013706 <_vfiprintf_r+0xc6>
 8013760:	9b03      	ldr	r3, [sp, #12]
 8013762:	1d19      	adds	r1, r3, #4
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	9103      	str	r1, [sp, #12]
 8013768:	2b00      	cmp	r3, #0
 801376a:	bfbb      	ittet	lt
 801376c:	425b      	neglt	r3, r3
 801376e:	f042 0202 	orrlt.w	r2, r2, #2
 8013772:	9307      	strge	r3, [sp, #28]
 8013774:	9307      	strlt	r3, [sp, #28]
 8013776:	bfb8      	it	lt
 8013778:	9204      	strlt	r2, [sp, #16]
 801377a:	7823      	ldrb	r3, [r4, #0]
 801377c:	2b2e      	cmp	r3, #46	; 0x2e
 801377e:	d10c      	bne.n	801379a <_vfiprintf_r+0x15a>
 8013780:	7863      	ldrb	r3, [r4, #1]
 8013782:	2b2a      	cmp	r3, #42	; 0x2a
 8013784:	d134      	bne.n	80137f0 <_vfiprintf_r+0x1b0>
 8013786:	9b03      	ldr	r3, [sp, #12]
 8013788:	1d1a      	adds	r2, r3, #4
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	9203      	str	r2, [sp, #12]
 801378e:	2b00      	cmp	r3, #0
 8013790:	bfb8      	it	lt
 8013792:	f04f 33ff 	movlt.w	r3, #4294967295
 8013796:	3402      	adds	r4, #2
 8013798:	9305      	str	r3, [sp, #20]
 801379a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013870 <_vfiprintf_r+0x230>
 801379e:	7821      	ldrb	r1, [r4, #0]
 80137a0:	2203      	movs	r2, #3
 80137a2:	4650      	mov	r0, sl
 80137a4:	f7ec fd24 	bl	80001f0 <memchr>
 80137a8:	b138      	cbz	r0, 80137ba <_vfiprintf_r+0x17a>
 80137aa:	9b04      	ldr	r3, [sp, #16]
 80137ac:	eba0 000a 	sub.w	r0, r0, sl
 80137b0:	2240      	movs	r2, #64	; 0x40
 80137b2:	4082      	lsls	r2, r0
 80137b4:	4313      	orrs	r3, r2
 80137b6:	3401      	adds	r4, #1
 80137b8:	9304      	str	r3, [sp, #16]
 80137ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137be:	4829      	ldr	r0, [pc, #164]	; (8013864 <_vfiprintf_r+0x224>)
 80137c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80137c4:	2206      	movs	r2, #6
 80137c6:	f7ec fd13 	bl	80001f0 <memchr>
 80137ca:	2800      	cmp	r0, #0
 80137cc:	d03f      	beq.n	801384e <_vfiprintf_r+0x20e>
 80137ce:	4b26      	ldr	r3, [pc, #152]	; (8013868 <_vfiprintf_r+0x228>)
 80137d0:	bb1b      	cbnz	r3, 801381a <_vfiprintf_r+0x1da>
 80137d2:	9b03      	ldr	r3, [sp, #12]
 80137d4:	3307      	adds	r3, #7
 80137d6:	f023 0307 	bic.w	r3, r3, #7
 80137da:	3308      	adds	r3, #8
 80137dc:	9303      	str	r3, [sp, #12]
 80137de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137e0:	443b      	add	r3, r7
 80137e2:	9309      	str	r3, [sp, #36]	; 0x24
 80137e4:	e768      	b.n	80136b8 <_vfiprintf_r+0x78>
 80137e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80137ea:	460c      	mov	r4, r1
 80137ec:	2001      	movs	r0, #1
 80137ee:	e7a6      	b.n	801373e <_vfiprintf_r+0xfe>
 80137f0:	2300      	movs	r3, #0
 80137f2:	3401      	adds	r4, #1
 80137f4:	9305      	str	r3, [sp, #20]
 80137f6:	4619      	mov	r1, r3
 80137f8:	f04f 0c0a 	mov.w	ip, #10
 80137fc:	4620      	mov	r0, r4
 80137fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013802:	3a30      	subs	r2, #48	; 0x30
 8013804:	2a09      	cmp	r2, #9
 8013806:	d903      	bls.n	8013810 <_vfiprintf_r+0x1d0>
 8013808:	2b00      	cmp	r3, #0
 801380a:	d0c6      	beq.n	801379a <_vfiprintf_r+0x15a>
 801380c:	9105      	str	r1, [sp, #20]
 801380e:	e7c4      	b.n	801379a <_vfiprintf_r+0x15a>
 8013810:	fb0c 2101 	mla	r1, ip, r1, r2
 8013814:	4604      	mov	r4, r0
 8013816:	2301      	movs	r3, #1
 8013818:	e7f0      	b.n	80137fc <_vfiprintf_r+0x1bc>
 801381a:	ab03      	add	r3, sp, #12
 801381c:	9300      	str	r3, [sp, #0]
 801381e:	462a      	mov	r2, r5
 8013820:	4b12      	ldr	r3, [pc, #72]	; (801386c <_vfiprintf_r+0x22c>)
 8013822:	a904      	add	r1, sp, #16
 8013824:	4630      	mov	r0, r6
 8013826:	f7fb fe63 	bl	800f4f0 <_printf_float>
 801382a:	4607      	mov	r7, r0
 801382c:	1c78      	adds	r0, r7, #1
 801382e:	d1d6      	bne.n	80137de <_vfiprintf_r+0x19e>
 8013830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013832:	07d9      	lsls	r1, r3, #31
 8013834:	d405      	bmi.n	8013842 <_vfiprintf_r+0x202>
 8013836:	89ab      	ldrh	r3, [r5, #12]
 8013838:	059a      	lsls	r2, r3, #22
 801383a:	d402      	bmi.n	8013842 <_vfiprintf_r+0x202>
 801383c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801383e:	f7fc fdbe 	bl	80103be <__retarget_lock_release_recursive>
 8013842:	89ab      	ldrh	r3, [r5, #12]
 8013844:	065b      	lsls	r3, r3, #25
 8013846:	f53f af1d 	bmi.w	8013684 <_vfiprintf_r+0x44>
 801384a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801384c:	e71c      	b.n	8013688 <_vfiprintf_r+0x48>
 801384e:	ab03      	add	r3, sp, #12
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	462a      	mov	r2, r5
 8013854:	4b05      	ldr	r3, [pc, #20]	; (801386c <_vfiprintf_r+0x22c>)
 8013856:	a904      	add	r1, sp, #16
 8013858:	4630      	mov	r0, r6
 801385a:	f7fc f8ed 	bl	800fa38 <_printf_i>
 801385e:	e7e4      	b.n	801382a <_vfiprintf_r+0x1ea>
 8013860:	08015ac9 	.word	0x08015ac9
 8013864:	08015ad3 	.word	0x08015ad3
 8013868:	0800f4f1 	.word	0x0800f4f1
 801386c:	0801361d 	.word	0x0801361d
 8013870:	08015acf 	.word	0x08015acf

08013874 <__swbuf_r>:
 8013874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013876:	460e      	mov	r6, r1
 8013878:	4614      	mov	r4, r2
 801387a:	4605      	mov	r5, r0
 801387c:	b118      	cbz	r0, 8013886 <__swbuf_r+0x12>
 801387e:	6a03      	ldr	r3, [r0, #32]
 8013880:	b90b      	cbnz	r3, 8013886 <__swbuf_r+0x12>
 8013882:	f7fc fc85 	bl	8010190 <__sinit>
 8013886:	69a3      	ldr	r3, [r4, #24]
 8013888:	60a3      	str	r3, [r4, #8]
 801388a:	89a3      	ldrh	r3, [r4, #12]
 801388c:	071a      	lsls	r2, r3, #28
 801388e:	d525      	bpl.n	80138dc <__swbuf_r+0x68>
 8013890:	6923      	ldr	r3, [r4, #16]
 8013892:	b31b      	cbz	r3, 80138dc <__swbuf_r+0x68>
 8013894:	6823      	ldr	r3, [r4, #0]
 8013896:	6922      	ldr	r2, [r4, #16]
 8013898:	1a98      	subs	r0, r3, r2
 801389a:	6963      	ldr	r3, [r4, #20]
 801389c:	b2f6      	uxtb	r6, r6
 801389e:	4283      	cmp	r3, r0
 80138a0:	4637      	mov	r7, r6
 80138a2:	dc04      	bgt.n	80138ae <__swbuf_r+0x3a>
 80138a4:	4621      	mov	r1, r4
 80138a6:	4628      	mov	r0, r5
 80138a8:	f7ff fa3a 	bl	8012d20 <_fflush_r>
 80138ac:	b9e0      	cbnz	r0, 80138e8 <__swbuf_r+0x74>
 80138ae:	68a3      	ldr	r3, [r4, #8]
 80138b0:	3b01      	subs	r3, #1
 80138b2:	60a3      	str	r3, [r4, #8]
 80138b4:	6823      	ldr	r3, [r4, #0]
 80138b6:	1c5a      	adds	r2, r3, #1
 80138b8:	6022      	str	r2, [r4, #0]
 80138ba:	701e      	strb	r6, [r3, #0]
 80138bc:	6962      	ldr	r2, [r4, #20]
 80138be:	1c43      	adds	r3, r0, #1
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d004      	beq.n	80138ce <__swbuf_r+0x5a>
 80138c4:	89a3      	ldrh	r3, [r4, #12]
 80138c6:	07db      	lsls	r3, r3, #31
 80138c8:	d506      	bpl.n	80138d8 <__swbuf_r+0x64>
 80138ca:	2e0a      	cmp	r6, #10
 80138cc:	d104      	bne.n	80138d8 <__swbuf_r+0x64>
 80138ce:	4621      	mov	r1, r4
 80138d0:	4628      	mov	r0, r5
 80138d2:	f7ff fa25 	bl	8012d20 <_fflush_r>
 80138d6:	b938      	cbnz	r0, 80138e8 <__swbuf_r+0x74>
 80138d8:	4638      	mov	r0, r7
 80138da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138dc:	4621      	mov	r1, r4
 80138de:	4628      	mov	r0, r5
 80138e0:	f000 f806 	bl	80138f0 <__swsetup_r>
 80138e4:	2800      	cmp	r0, #0
 80138e6:	d0d5      	beq.n	8013894 <__swbuf_r+0x20>
 80138e8:	f04f 37ff 	mov.w	r7, #4294967295
 80138ec:	e7f4      	b.n	80138d8 <__swbuf_r+0x64>
	...

080138f0 <__swsetup_r>:
 80138f0:	b538      	push	{r3, r4, r5, lr}
 80138f2:	4b2a      	ldr	r3, [pc, #168]	; (801399c <__swsetup_r+0xac>)
 80138f4:	4605      	mov	r5, r0
 80138f6:	6818      	ldr	r0, [r3, #0]
 80138f8:	460c      	mov	r4, r1
 80138fa:	b118      	cbz	r0, 8013904 <__swsetup_r+0x14>
 80138fc:	6a03      	ldr	r3, [r0, #32]
 80138fe:	b90b      	cbnz	r3, 8013904 <__swsetup_r+0x14>
 8013900:	f7fc fc46 	bl	8010190 <__sinit>
 8013904:	89a3      	ldrh	r3, [r4, #12]
 8013906:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801390a:	0718      	lsls	r0, r3, #28
 801390c:	d422      	bmi.n	8013954 <__swsetup_r+0x64>
 801390e:	06d9      	lsls	r1, r3, #27
 8013910:	d407      	bmi.n	8013922 <__swsetup_r+0x32>
 8013912:	2309      	movs	r3, #9
 8013914:	602b      	str	r3, [r5, #0]
 8013916:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801391a:	81a3      	strh	r3, [r4, #12]
 801391c:	f04f 30ff 	mov.w	r0, #4294967295
 8013920:	e034      	b.n	801398c <__swsetup_r+0x9c>
 8013922:	0758      	lsls	r0, r3, #29
 8013924:	d512      	bpl.n	801394c <__swsetup_r+0x5c>
 8013926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013928:	b141      	cbz	r1, 801393c <__swsetup_r+0x4c>
 801392a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801392e:	4299      	cmp	r1, r3
 8013930:	d002      	beq.n	8013938 <__swsetup_r+0x48>
 8013932:	4628      	mov	r0, r5
 8013934:	f7fd fbd2 	bl	80110dc <_free_r>
 8013938:	2300      	movs	r3, #0
 801393a:	6363      	str	r3, [r4, #52]	; 0x34
 801393c:	89a3      	ldrh	r3, [r4, #12]
 801393e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013942:	81a3      	strh	r3, [r4, #12]
 8013944:	2300      	movs	r3, #0
 8013946:	6063      	str	r3, [r4, #4]
 8013948:	6923      	ldr	r3, [r4, #16]
 801394a:	6023      	str	r3, [r4, #0]
 801394c:	89a3      	ldrh	r3, [r4, #12]
 801394e:	f043 0308 	orr.w	r3, r3, #8
 8013952:	81a3      	strh	r3, [r4, #12]
 8013954:	6923      	ldr	r3, [r4, #16]
 8013956:	b94b      	cbnz	r3, 801396c <__swsetup_r+0x7c>
 8013958:	89a3      	ldrh	r3, [r4, #12]
 801395a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801395e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013962:	d003      	beq.n	801396c <__swsetup_r+0x7c>
 8013964:	4621      	mov	r1, r4
 8013966:	4628      	mov	r0, r5
 8013968:	f000 f884 	bl	8013a74 <__smakebuf_r>
 801396c:	89a0      	ldrh	r0, [r4, #12]
 801396e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013972:	f010 0301 	ands.w	r3, r0, #1
 8013976:	d00a      	beq.n	801398e <__swsetup_r+0x9e>
 8013978:	2300      	movs	r3, #0
 801397a:	60a3      	str	r3, [r4, #8]
 801397c:	6963      	ldr	r3, [r4, #20]
 801397e:	425b      	negs	r3, r3
 8013980:	61a3      	str	r3, [r4, #24]
 8013982:	6923      	ldr	r3, [r4, #16]
 8013984:	b943      	cbnz	r3, 8013998 <__swsetup_r+0xa8>
 8013986:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801398a:	d1c4      	bne.n	8013916 <__swsetup_r+0x26>
 801398c:	bd38      	pop	{r3, r4, r5, pc}
 801398e:	0781      	lsls	r1, r0, #30
 8013990:	bf58      	it	pl
 8013992:	6963      	ldrpl	r3, [r4, #20]
 8013994:	60a3      	str	r3, [r4, #8]
 8013996:	e7f4      	b.n	8013982 <__swsetup_r+0x92>
 8013998:	2000      	movs	r0, #0
 801399a:	e7f7      	b.n	801398c <__swsetup_r+0x9c>
 801399c:	200001d4 	.word	0x200001d4

080139a0 <_raise_r>:
 80139a0:	291f      	cmp	r1, #31
 80139a2:	b538      	push	{r3, r4, r5, lr}
 80139a4:	4604      	mov	r4, r0
 80139a6:	460d      	mov	r5, r1
 80139a8:	d904      	bls.n	80139b4 <_raise_r+0x14>
 80139aa:	2316      	movs	r3, #22
 80139ac:	6003      	str	r3, [r0, #0]
 80139ae:	f04f 30ff 	mov.w	r0, #4294967295
 80139b2:	bd38      	pop	{r3, r4, r5, pc}
 80139b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80139b6:	b112      	cbz	r2, 80139be <_raise_r+0x1e>
 80139b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80139bc:	b94b      	cbnz	r3, 80139d2 <_raise_r+0x32>
 80139be:	4620      	mov	r0, r4
 80139c0:	f000 f830 	bl	8013a24 <_getpid_r>
 80139c4:	462a      	mov	r2, r5
 80139c6:	4601      	mov	r1, r0
 80139c8:	4620      	mov	r0, r4
 80139ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80139ce:	f000 b817 	b.w	8013a00 <_kill_r>
 80139d2:	2b01      	cmp	r3, #1
 80139d4:	d00a      	beq.n	80139ec <_raise_r+0x4c>
 80139d6:	1c59      	adds	r1, r3, #1
 80139d8:	d103      	bne.n	80139e2 <_raise_r+0x42>
 80139da:	2316      	movs	r3, #22
 80139dc:	6003      	str	r3, [r0, #0]
 80139de:	2001      	movs	r0, #1
 80139e0:	e7e7      	b.n	80139b2 <_raise_r+0x12>
 80139e2:	2400      	movs	r4, #0
 80139e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80139e8:	4628      	mov	r0, r5
 80139ea:	4798      	blx	r3
 80139ec:	2000      	movs	r0, #0
 80139ee:	e7e0      	b.n	80139b2 <_raise_r+0x12>

080139f0 <raise>:
 80139f0:	4b02      	ldr	r3, [pc, #8]	; (80139fc <raise+0xc>)
 80139f2:	4601      	mov	r1, r0
 80139f4:	6818      	ldr	r0, [r3, #0]
 80139f6:	f7ff bfd3 	b.w	80139a0 <_raise_r>
 80139fa:	bf00      	nop
 80139fc:	200001d4 	.word	0x200001d4

08013a00 <_kill_r>:
 8013a00:	b538      	push	{r3, r4, r5, lr}
 8013a02:	4d07      	ldr	r5, [pc, #28]	; (8013a20 <_kill_r+0x20>)
 8013a04:	2300      	movs	r3, #0
 8013a06:	4604      	mov	r4, r0
 8013a08:	4608      	mov	r0, r1
 8013a0a:	4611      	mov	r1, r2
 8013a0c:	602b      	str	r3, [r5, #0]
 8013a0e:	f7ee f899 	bl	8001b44 <_kill>
 8013a12:	1c43      	adds	r3, r0, #1
 8013a14:	d102      	bne.n	8013a1c <_kill_r+0x1c>
 8013a16:	682b      	ldr	r3, [r5, #0]
 8013a18:	b103      	cbz	r3, 8013a1c <_kill_r+0x1c>
 8013a1a:	6023      	str	r3, [r4, #0]
 8013a1c:	bd38      	pop	{r3, r4, r5, pc}
 8013a1e:	bf00      	nop
 8013a20:	20006cd8 	.word	0x20006cd8

08013a24 <_getpid_r>:
 8013a24:	f7ee b886 	b.w	8001b34 <_getpid>

08013a28 <__swhatbuf_r>:
 8013a28:	b570      	push	{r4, r5, r6, lr}
 8013a2a:	460c      	mov	r4, r1
 8013a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a30:	2900      	cmp	r1, #0
 8013a32:	b096      	sub	sp, #88	; 0x58
 8013a34:	4615      	mov	r5, r2
 8013a36:	461e      	mov	r6, r3
 8013a38:	da0d      	bge.n	8013a56 <__swhatbuf_r+0x2e>
 8013a3a:	89a3      	ldrh	r3, [r4, #12]
 8013a3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013a40:	f04f 0100 	mov.w	r1, #0
 8013a44:	bf0c      	ite	eq
 8013a46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8013a4a:	2340      	movne	r3, #64	; 0x40
 8013a4c:	2000      	movs	r0, #0
 8013a4e:	6031      	str	r1, [r6, #0]
 8013a50:	602b      	str	r3, [r5, #0]
 8013a52:	b016      	add	sp, #88	; 0x58
 8013a54:	bd70      	pop	{r4, r5, r6, pc}
 8013a56:	466a      	mov	r2, sp
 8013a58:	f000 f848 	bl	8013aec <_fstat_r>
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	dbec      	blt.n	8013a3a <__swhatbuf_r+0x12>
 8013a60:	9901      	ldr	r1, [sp, #4]
 8013a62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013a66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8013a6a:	4259      	negs	r1, r3
 8013a6c:	4159      	adcs	r1, r3
 8013a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a72:	e7eb      	b.n	8013a4c <__swhatbuf_r+0x24>

08013a74 <__smakebuf_r>:
 8013a74:	898b      	ldrh	r3, [r1, #12]
 8013a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a78:	079d      	lsls	r5, r3, #30
 8013a7a:	4606      	mov	r6, r0
 8013a7c:	460c      	mov	r4, r1
 8013a7e:	d507      	bpl.n	8013a90 <__smakebuf_r+0x1c>
 8013a80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013a84:	6023      	str	r3, [r4, #0]
 8013a86:	6123      	str	r3, [r4, #16]
 8013a88:	2301      	movs	r3, #1
 8013a8a:	6163      	str	r3, [r4, #20]
 8013a8c:	b002      	add	sp, #8
 8013a8e:	bd70      	pop	{r4, r5, r6, pc}
 8013a90:	ab01      	add	r3, sp, #4
 8013a92:	466a      	mov	r2, sp
 8013a94:	f7ff ffc8 	bl	8013a28 <__swhatbuf_r>
 8013a98:	9900      	ldr	r1, [sp, #0]
 8013a9a:	4605      	mov	r5, r0
 8013a9c:	4630      	mov	r0, r6
 8013a9e:	f7fd fb91 	bl	80111c4 <_malloc_r>
 8013aa2:	b948      	cbnz	r0, 8013ab8 <__smakebuf_r+0x44>
 8013aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013aa8:	059a      	lsls	r2, r3, #22
 8013aaa:	d4ef      	bmi.n	8013a8c <__smakebuf_r+0x18>
 8013aac:	f023 0303 	bic.w	r3, r3, #3
 8013ab0:	f043 0302 	orr.w	r3, r3, #2
 8013ab4:	81a3      	strh	r3, [r4, #12]
 8013ab6:	e7e3      	b.n	8013a80 <__smakebuf_r+0xc>
 8013ab8:	89a3      	ldrh	r3, [r4, #12]
 8013aba:	6020      	str	r0, [r4, #0]
 8013abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ac0:	81a3      	strh	r3, [r4, #12]
 8013ac2:	9b00      	ldr	r3, [sp, #0]
 8013ac4:	6163      	str	r3, [r4, #20]
 8013ac6:	9b01      	ldr	r3, [sp, #4]
 8013ac8:	6120      	str	r0, [r4, #16]
 8013aca:	b15b      	cbz	r3, 8013ae4 <__smakebuf_r+0x70>
 8013acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ad0:	4630      	mov	r0, r6
 8013ad2:	f000 f81d 	bl	8013b10 <_isatty_r>
 8013ad6:	b128      	cbz	r0, 8013ae4 <__smakebuf_r+0x70>
 8013ad8:	89a3      	ldrh	r3, [r4, #12]
 8013ada:	f023 0303 	bic.w	r3, r3, #3
 8013ade:	f043 0301 	orr.w	r3, r3, #1
 8013ae2:	81a3      	strh	r3, [r4, #12]
 8013ae4:	89a3      	ldrh	r3, [r4, #12]
 8013ae6:	431d      	orrs	r5, r3
 8013ae8:	81a5      	strh	r5, [r4, #12]
 8013aea:	e7cf      	b.n	8013a8c <__smakebuf_r+0x18>

08013aec <_fstat_r>:
 8013aec:	b538      	push	{r3, r4, r5, lr}
 8013aee:	4d07      	ldr	r5, [pc, #28]	; (8013b0c <_fstat_r+0x20>)
 8013af0:	2300      	movs	r3, #0
 8013af2:	4604      	mov	r4, r0
 8013af4:	4608      	mov	r0, r1
 8013af6:	4611      	mov	r1, r2
 8013af8:	602b      	str	r3, [r5, #0]
 8013afa:	f7ee f882 	bl	8001c02 <_fstat>
 8013afe:	1c43      	adds	r3, r0, #1
 8013b00:	d102      	bne.n	8013b08 <_fstat_r+0x1c>
 8013b02:	682b      	ldr	r3, [r5, #0]
 8013b04:	b103      	cbz	r3, 8013b08 <_fstat_r+0x1c>
 8013b06:	6023      	str	r3, [r4, #0]
 8013b08:	bd38      	pop	{r3, r4, r5, pc}
 8013b0a:	bf00      	nop
 8013b0c:	20006cd8 	.word	0x20006cd8

08013b10 <_isatty_r>:
 8013b10:	b538      	push	{r3, r4, r5, lr}
 8013b12:	4d06      	ldr	r5, [pc, #24]	; (8013b2c <_isatty_r+0x1c>)
 8013b14:	2300      	movs	r3, #0
 8013b16:	4604      	mov	r4, r0
 8013b18:	4608      	mov	r0, r1
 8013b1a:	602b      	str	r3, [r5, #0]
 8013b1c:	f7ee f881 	bl	8001c22 <_isatty>
 8013b20:	1c43      	adds	r3, r0, #1
 8013b22:	d102      	bne.n	8013b2a <_isatty_r+0x1a>
 8013b24:	682b      	ldr	r3, [r5, #0]
 8013b26:	b103      	cbz	r3, 8013b2a <_isatty_r+0x1a>
 8013b28:	6023      	str	r3, [r4, #0]
 8013b2a:	bd38      	pop	{r3, r4, r5, pc}
 8013b2c:	20006cd8 	.word	0x20006cd8

08013b30 <_init>:
 8013b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b32:	bf00      	nop
 8013b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b36:	bc08      	pop	{r3}
 8013b38:	469e      	mov	lr, r3
 8013b3a:	4770      	bx	lr

08013b3c <_fini>:
 8013b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b3e:	bf00      	nop
 8013b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b42:	bc08      	pop	{r3}
 8013b44:	469e      	mov	lr, r3
 8013b46:	4770      	bx	lr
